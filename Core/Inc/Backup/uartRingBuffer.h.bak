

#ifndef UARTRINGBUFFER_H_
#define UARTRINGBUFFER_H_

//#include "stm32f4xx_hal.h"
#include <stdint.h>
/* change the size of the buffer */
#define UART_BUFFER_SIZE 500

typedef struct
{
  unsigned char buffer[UART_BUFFER_SIZE];
  volatile unsigned int head;
  volatile unsigned int tail;
} ring_buffer;


/* Initialize the ring buffer */
void Ringbuf_init(void);

/* reads the data in the rx_buffer and increment the tail count in rx_buffer */
int Uart_read(void);





/* Checks if the data is available to read in the rx_buffer */
uint16_t IsDataAvailable(void);



/* Peek for the data in the Rx Bffer without incrementing the tail count
* Returns the character
* USAGE: if (Uart_peek () == 'M') do something
*/
int Uart_peek();


/* Copy the data from the Rx buffer into the bufferr, Upto and including the entered string
* This copying will take place in the blocking mode, so you won't be able to perform any other operations
* Returns 1 on success and -1 otherwise
* USAGE: while (!(Copy_Upto ("some string", buffer)));
*/
int Copy_upto (char *string, char *buffertocopyinto);



/* Wait until a paricular string is detected in the Rx Buffer
* Return 1 on success and -1 otherwise
* USAGE: while (!(Wait_for("some string")));
*/
int Wait_for (char *string);

void store_char(unsigned char c, ring_buffer *buffer);



#endif /* UARTRINGBUFFER_H_ */
