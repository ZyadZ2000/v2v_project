#include "application_tasks.h"
#include "helper_functions.h"
#include "NMEA.h"
#include "uartRingBuffer.h"
#include <stdlib.h>

extern volatile uint16_t Global_u16SlitCount;
extern xSemaphoreHandle send_message_semaphore;
extern xSemaphoreHandle receive_message_semaphore;
extern TaskHandle_t send_message_task_handle;
extern uint8_t tx_buffer[25];
extern uint8_t rx_buffer[25];

extern GPSSTRUCT GGAST;
extern ring_buffer *_rx_buffer;

extern char second_car_latitude[11];
extern char second_car_longitude[11];
extern double my_car_latitude;
extern double my_car_longitude;

void Task_sendMessage(void *parameters) {
	xSemaphoreTake(send_message_semaphore, 0);
	vTaskSuspend(NULL);
	while (1) {
		//Construct the message
		taskENTER_CRITICAL();
		Build_Msg((char *) tx_buffer, my_car_latitude,
				my_car_longitude, GGAST.ggastruct.lcation.NS,
				GGAST.ggastruct.lcation.EW);
		taskEXIT_CRITICAL();

		HAL_UART_Transmit_DMA(&huart1, tx_buffer, 25);
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
		vTaskSuspend(NULL);
		xSemaphoreTake(send_message_semaphore, portMAX_DELAY);
	}
}

void Task_handleReceivedMessage(void *parameters) {
	//Receive the message
	unsigned int i, j;
	double message_latitude, message_longitude;
	double bearing_calculation, distance_calculation;
	xSemaphoreTake(receive_message_semaphore, 0);
	while (1) {
		xSemaphoreTake(receive_message_semaphore, portMAX_DELAY);
		//rx_buffer contains message
		//Extract up to N for latitude, up to E for longitude
		i = 1, j = 0;
		while (i < 25 && rx_buffer[i] != 'N' && rx_buffer[i] != 'S' && j < 11) {
			second_car_latitude[j] = rx_buffer[i];
			i++;
			j++;
		}
		second_car_latitude[j] = '\0';
		i++;
		j = 0;
		while (i < 25 && rx_buffer[i] != 'E' && rx_buffer[i] != 'W' && j < 11) {
			second_car_longitude[j] = rx_buffer[i];
			i++;
			j++;
		}
		second_car_longitude[j] = '\0';

		message_latitude = atof(second_car_latitude);
		message_longitude = atof(second_car_longitude);

		bearing_calculation = bearing(my_car_latitude, my_car_longitude,
				message_latitude, message_longitude);
		distance_calculation = haversine(my_car_latitude, Global_u16SlitCount,
				message_latitude, message_longitude);

		if (bearing_calculation >= 150 && bearing_calculation <= 180) {
			//based on the distance decide on displaying the warning
		}
		HAL_UART_Receive_DMA(&huart1, rx_buffer, 25);
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
	}
}

void Task_speedCalculation(void *parameters) {

	static uint16_t Global_u16PreviousSpeed = 0;
	int16_t Local_u16DifferSpeed = 0;
	uint16_t Local_u16CurrentSpeed = 0;

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);

	vTaskDelay(500 / portTICK_RATE_MS);

	while (1) {

		HAL_NVIC_DisableIRQ(EXTI0_IRQn);

		Local_u16CurrentSpeed = (1.6328 / 2) * Global_u16SlitCount;
		Local_u16DifferSpeed = Local_u16CurrentSpeed - Global_u16PreviousSpeed;

		if (Local_u16DifferSpeed <= SS_VELOCITY_THRESHOLD) {
			//Transmit UART Message using DMA
			vTaskResume(send_message_task_handle);
		}
		Global_u16PreviousSpeed = Local_u16CurrentSpeed;
		Global_u16SlitCount = 0;

		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
		vTaskDelay(500 / portTICK_RATE_MS);
	}
}

void Task_readingGPS(void *parameters) {
	while (1) {
		int flagGGA = 1;
		char c1;
		char GGA[100];
		//char uartBuflong[100] ={0};
		//char uartBuflat[100] ={0};
		do {
			// extracting the message ($gga)
			//HAL_UART_Transmit(&huart6,(uint8_t *)"extracting the message", 23, 100);

			//MCAL_UART_u8ReceiveData(UART_3, (uint8_t *)&c);
			HAL_UART_Receive(&huart6, (uint8_t*) &c1, sizeof(c1), 1000);
			// start with the dollar sign if not then loop to find it
			for (int k = 0; c1 != '$'; k++) {
				// MCAL_UART_u8ReceiveData(UART_3, (uint8_t *)&c);
				HAL_UART_Receive(&huart6, (uint8_t*) &c1, sizeof(c1), 1000);
			}

			store_char(c1, _rx_buffer);
			//MCAL_UART_u8ReceiveData(UART_3,(uint8_t *) &c);
			HAL_UART_Receive(&huart6, (uint8_t*) &c1, sizeof(c1), 1000);
			// loop to store all the frame after dollar until next dollar recieved
			while (c1 != '$') {
				store_char(c1, _rx_buffer);
				//MCAL_UART_u8ReceiveData(UART_3,(uint8_t *) &c);
				HAL_UART_Receive(&huart6, (uint8_t*) &c1, sizeof(c1), 1000);
			}

			// once the new dollar received the old frame is now in the buffer to be decoded
			// end of extracting

			// HAL_UART_Transmit(&huart6,(uint8_t *)"\r\n", 2, 100);
			// HAL_UART_Transmit(&huart6,(uint8_t *) "Before enter do while ", 23, 100);
			//  HAL_UART_Transmit(&huart6,(uint8_t *)"\r\n", 2, 100);
			//HAL_UART_Transmit(&huart6,(uint8_t *)"\r\n", 2, 100);
			//HAL_UART_Transmit(&huart6,(uint8_t *) "inside do while ", 17, 100);
			flagGGA = 1;

			if (Wait_for("GGA") == 1) {
				// HAL_UART_Transmit(&huart6,(uint8_t *) "found gga ", 11, 100);
				//HAL_UART_Transmit(&huart6,(uint8_t *)"\r\n", 2, 100);
				//HAL_UART_Transmit(&huart6,(uint8_t *) "outside wait ", 13, 100);
				Copy_upto("*", GGA);
				if (decodeGGA(GGA, &GGAST.ggastruct) == 0) {
					flagGGA = 0;

					// HAL_UART_Transmit(&huart6,(uint8_t *) "data is valid ", 14, 100);
					// HAL_UART_Transmit(&huart6,(uint8_t *)"\r\n", 2, 100);
					// 2 indicates the data is valid
				}
			}

		} while (flagGGA == 1);

		// in using freertos
		// here is the delay ------
		taskENTER_CRITICAL();
		my_car_latitude = GGAST.ggastruct.lcation.latitude * 100;
		my_car_longitude = GGAST.ggastruct.lcation.longitude * 100;
		taskEXIT_CRITICAL();

		vTaskDelay(300);

		// here for just showing data using uart3
		// HAL_UART_Transmit(&huart6,(uint8_t *)"\r\n", 2, 100);
		//  HAL_UART_Transmit(&huart6,(uint8_t *) "outside do while ", 18, 100);
		// HAL_UART_Transmit(&huart6,(uint8_t *)"\r\n", 2, 100);
		// ftoa(GGAST.ggastruct.lcation.longitude ,uartBuflong,6);
		//  ftoa(GGAST.ggastruct.lcation.latitude ,uartBuflat,6);
		//HAL_UART_Transmit(&huart6,(uint8_t *) "Longitude is : ", 16, 100);
		//HAL_UART_Transmit(&huart6, (uint8_t *)uartBuflong, sizeof(uartBuflong), 100);
		// HAL_UART_Transmit(&huart6, (uint8_t *)&(GGAST.ggastruct.lcation.EW), sizeof(GGAST.ggastruct.lcation.EW), 100);
		//HAL_UART_Transmit(&huart6,(uint8_t *)"\r\n", 2, 100);
		// HAL_UART_Transmit(&huart6, (uint8_t *)"Latitude is : ", 15, 100);
		// HAL_UART_Transmit(&huart6, (uint8_t *)uartBuflat, sizeof(uartBuflat), 100);
		// HAL_UART_Transmit(&huart6, (uint8_t *)&(GGAST.ggastruct.lcation.NS), sizeof(GGAST.ggastruct.lcation.NS), 100);

		//  HAL_UART_Transmit(&huart6,(uint8_t *)"\r\n", 2, 100);

		/* USER CODE BEGIN 3 */

	}
}
