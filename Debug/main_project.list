
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800c120  0800c120  0001c120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5b4  0800c5b4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5b4  0800c5b4  0001c5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5bc  0800c5bc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5bc  0800c5bc  0001c5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5c0  0800c5c0  0001c5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c5c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043b4  200001e8  0800c7a8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000459c  0800c7a8  0002459c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001835f  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d0  00000000  00000000  00038573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0003bf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003d2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025800  00000000  00000000  0003e470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018eb4  00000000  00000000  00063c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db616  00000000  00000000  0007cb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015813a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006080  00000000  00000000  0015818c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c108 	.word	0x0800c108

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800c108 	.word	0x0800c108

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <HAL_CAR_CTRL_voidForward>:
#include "CAR_CTRL_interface.h"


/* Move RC Car To The Forward Direction */
void HAL_CAR_CTRL_voidForward(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2104      	movs	r1, #4
 8000f94:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <HAL_CAR_CTRL_voidForward+0x34>)
 8000f96:	f002 fc91 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <HAL_CAR_CTRL_voidForward+0x34>)
 8000fa0:	f002 fc8c 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_CAR_CTRL_voidForward+0x34>)
 8000fac:	f002 fc86 	bl	80038bc <HAL_GPIO_WritePin>

	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <HAL_CAR_CTRL_voidForward+0x34>)
 8000fb8:	f002 fc80 	bl	80038bc <HAL_GPIO_WritePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40020800 	.word	0x40020800

08000fc4 <HAL_CAR_CTRL_voidBackward>:


/* Move RC Car To The Backward Direction */
void HAL_CAR_CTRL_voidBackward(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2104      	movs	r1, #4
 8000fcc:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <HAL_CAR_CTRL_voidBackward+0x34>)
 8000fce:	f002 fc75 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <HAL_CAR_CTRL_voidBackward+0x34>)
 8000fd8:	f002 fc70 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <HAL_CAR_CTRL_voidBackward+0x34>)
 8000fe4:	f002 fc6a 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fee:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <HAL_CAR_CTRL_voidBackward+0x34>)
 8000ff0:	f002 fc64 	bl	80038bc <HAL_GPIO_WritePin>

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40020800 	.word	0x40020800

08000ffc <HAL_CAR_CTRL_voidRight>:


/* Move RC Car To The Right Direction */
void HAL_CAR_CTRL_voidRight(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2104      	movs	r1, #4
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <HAL_CAR_CTRL_voidRight+0x34>)
 8001006:	f002 fc59 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	2108      	movs	r1, #8
 800100e:	4808      	ldr	r0, [pc, #32]	; (8001030 <HAL_CAR_CTRL_voidRight+0x34>)
 8001010:	f002 fc54 	bl	80038bc <HAL_GPIO_WritePin>
//	MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_CAR_CTRL_voidRight+0x34>)
 800101c:	f002 fc4e 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001026:	4802      	ldr	r0, [pc, #8]	; (8001030 <HAL_CAR_CTRL_voidRight+0x34>)
 8001028:	f002 fc48 	bl	80038bc <HAL_GPIO_WritePin>

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40020800 	.word	0x40020800

08001034 <HAL_CAR_CTRL_voidLeft>:


/* Move RC Car To The Left Direction */
void HAL_CAR_CTRL_voidLeft(void)
{	
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2104      	movs	r1, #4
 800103c:	480a      	ldr	r0, [pc, #40]	; (8001068 <HAL_CAR_CTRL_voidLeft+0x34>)
 800103e:	f002 fc3d 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2108      	movs	r1, #8
 8001046:	4808      	ldr	r0, [pc, #32]	; (8001068 <HAL_CAR_CTRL_voidLeft+0x34>)
 8001048:	f002 fc38 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_CAR_CTRL_voidLeft+0x34>)
 8001054:	f002 fc32 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800105e:	4802      	ldr	r0, [pc, #8]	; (8001068 <HAL_CAR_CTRL_voidLeft+0x34>)
 8001060:	f002 fc2c 	bl	80038bc <HAL_GPIO_WritePin>


}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40020800 	.word	0x40020800

0800106c <HAL_CAR_CTRL_voidStop>:


/* Stop RC Car In The Current Position */
void HAL_CAR_CTRL_voidStop(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2104      	movs	r1, #4
 8001074:	480a      	ldr	r0, [pc, #40]	; (80010a0 <HAL_CAR_CTRL_voidStop+0x34>)
 8001076:	f002 fc21 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2108      	movs	r1, #8
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <HAL_CAR_CTRL_voidStop+0x34>)
 8001080:	f002 fc1c 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_CAR_CTRL_voidStop+0x34>)
 800108c:	f002 fc16 	bl	80038bc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001096:	4802      	ldr	r0, [pc, #8]	; (80010a0 <HAL_CAR_CTRL_voidStop+0x34>)
 8001098:	f002 fc10 	bl	80038bc <HAL_GPIO_WritePin>

	
	
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40020800 	.word	0x40020800

080010a4 <CLCD_voidSendCommand>:
#include "delay.h"


//SEND COMMAND TO LCD//
static void CLCD_voidSendCommand(LCD_Data Copy_u8Command)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	7138      	strb	r0, [r7, #4]
	//ACTIVATE SENDING COMMAND(RS)//
	 HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_RS_PIN , GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b2:	4822      	ldr	r0, [pc, #136]	; (800113c <CLCD_voidSendCommand+0x98>)
 80010b4:	f002 fc02 	bl	80038bc <HAL_GPIO_WritePin>

	//ACTIVATE WRITING(RW)//
	 HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_RW_PIN , GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010be:	481f      	ldr	r0, [pc, #124]	; (800113c <CLCD_voidSendCommand+0x98>)
 80010c0:	f002 fbfc 	bl	80038bc <HAL_GPIO_WritePin>

	//SEND COMMAND//
	 HAL_GPIO_WritePin(CLCD_D4_PORT , CLCD_D4_PIN , (u8)Copy_u8Command.Pin.D4);
 80010c4:	793b      	ldrb	r3, [r7, #4]
 80010c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d2:	481b      	ldr	r0, [pc, #108]	; (8001140 <CLCD_voidSendCommand+0x9c>)
 80010d4:	f002 fbf2 	bl	80038bc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLCD_D5_PORT , CLCD_D5_PIN , (u8)Copy_u8Command.Pin.D5);
 80010d8:	793b      	ldrb	r3, [r7, #4]
 80010da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e6:	4816      	ldr	r0, [pc, #88]	; (8001140 <CLCD_voidSendCommand+0x9c>)
 80010e8:	f002 fbe8 	bl	80038bc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLCD_D6_PORT , CLCD_D6_PIN , (u8)Copy_u8Command.Pin.D6);
 80010ec:	793b      	ldrb	r3, [r7, #4]
 80010ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	461a      	mov	r2, r3
 80010f6:	2140      	movs	r1, #64	; 0x40
 80010f8:	4812      	ldr	r0, [pc, #72]	; (8001144 <CLCD_voidSendCommand+0xa0>)
 80010fa:	f002 fbdf 	bl	80038bc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLCD_D7_PORT , CLCD_D7_PIN , (u8)Copy_u8Command.Pin.D7);
 80010fe:	793b      	ldrb	r3, [r7, #4]
 8001100:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <CLCD_voidSendCommand+0xa0>)
 800110c:	f002 fbd6 	bl	80038bc <HAL_GPIO_WritePin>
	//MGPIO_u8SetPortValue(CLCD_DATA_PORT , Copy_u8Command);

	//ENABLE PULSE WITH 2 MS DELAY//
	 HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_E_PIN , GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001116:	4809      	ldr	r0, [pc, #36]	; (800113c <CLCD_voidSendCommand+0x98>)
 8001118:	f002 fbd0 	bl	80038bc <HAL_GPIO_WritePin>

	DELAY_MS(2);
 800111c:	2002      	movs	r0, #2
 800111e:	f006 fd11 	bl	8007b44 <vTaskDelay>
	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_E_PIN , GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <CLCD_voidSendCommand+0x98>)
 800112a:	f002 fbc7 	bl	80038bc <HAL_GPIO_WritePin>

	DELAY_MS(5);
 800112e:	2005      	movs	r0, #5
 8001130:	f006 fd08 	bl	8007b44 <vTaskDelay>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40020400 	.word	0x40020400
 8001140:	40020000 	.word	0x40020000
 8001144:	40020800 	.word	0x40020800

08001148 <CLCD_voidSendData>:


//SEND DATA TO LCD//
static void CLCD_voidSendData(LCD_Data Copy_u8Data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	7138      	strb	r0, [r7, #4]

	//ACTIVATE SENDING COMMAND(RS)//
	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_RS_PIN , GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	4822      	ldr	r0, [pc, #136]	; (80011e0 <CLCD_voidSendData+0x98>)
 8001158:	f002 fbb0 	bl	80038bc <HAL_GPIO_WritePin>

	//ACTIVATE WRITING(RW)//
	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_RW_PIN , GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001162:	481f      	ldr	r0, [pc, #124]	; (80011e0 <CLCD_voidSendData+0x98>)
 8001164:	f002 fbaa 	bl	80038bc <HAL_GPIO_WritePin>

	//SEND COMMAND//
	HAL_GPIO_WritePin(CLCD_D4_PORT , CLCD_D4_PIN , (u8)Copy_u8Data.Pin.D4);
 8001168:	793b      	ldrb	r3, [r7, #4]
 800116a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001176:	481b      	ldr	r0, [pc, #108]	; (80011e4 <CLCD_voidSendData+0x9c>)
 8001178:	f002 fba0 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLCD_D5_PORT , CLCD_D5_PIN , (u8)Copy_u8Data.Pin.D5);
 800117c:	793b      	ldrb	r3, [r7, #4]
 800117e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118a:	4816      	ldr	r0, [pc, #88]	; (80011e4 <CLCD_voidSendData+0x9c>)
 800118c:	f002 fb96 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLCD_D6_PORT , CLCD_D6_PIN , (u8)Copy_u8Data.Pin.D6);
 8001190:	793b      	ldrb	r3, [r7, #4]
 8001192:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	4812      	ldr	r0, [pc, #72]	; (80011e8 <CLCD_voidSendData+0xa0>)
 800119e:	f002 fb8d 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLCD_D7_PORT , CLCD_D7_PIN , (u8)Copy_u8Data.Pin.D7);
 80011a2:	793b      	ldrb	r3, [r7, #4]
 80011a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <CLCD_voidSendData+0xa0>)
 80011b0:	f002 fb84 	bl	80038bc <HAL_GPIO_WritePin>
	//MGPIO_u8SetPortValue(CLCD_DATA_PORT , Copy_u8Data);

	//ENABLE PULSE WITH 2 MS DELAY//
	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_E_PIN , GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ba:	4809      	ldr	r0, [pc, #36]	; (80011e0 <CLCD_voidSendData+0x98>)
 80011bc:	f002 fb7e 	bl	80038bc <HAL_GPIO_WritePin>

	DELAY_MS(2);
 80011c0:	2002      	movs	r0, #2
 80011c2:	f006 fcbf 	bl	8007b44 <vTaskDelay>

	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_E_PIN , GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <CLCD_voidSendData+0x98>)
 80011ce:	f002 fb75 	bl	80038bc <HAL_GPIO_WritePin>

	DELAY_MS(5);
 80011d2:	2005      	movs	r0, #5
 80011d4:	f006 fcb6 	bl	8007b44 <vTaskDelay>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020800 	.word	0x40020800

080011ec <CLCD_voidInit>:


//INTIALIZATION OF LCD//
void CLCD_voidInit(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	LCD_Data DataPins;

	//WAIT FOR MORE THAN 40 MS //
	DELAY_MS(40);
 80011f2:	2028      	movs	r0, #40	; 0x28
 80011f4:	f006 fca6 	bl	8007b44 <vTaskDelay>


	//FUNCTION SET : 1 LINE , 5*8 FONT SIZE//
	//CLCD_voidSendCommand(0b00110000);
	DataPins.Pins = 0b0010;
 80011f8:	793b      	ldrb	r3, [r7, #4]
 80011fa:	2202      	movs	r2, #2
 80011fc:	f362 0303 	bfi	r3, r2, #0, #4
 8001200:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 8001202:	7938      	ldrb	r0, [r7, #4]
 8001204:	f7ff ff4e 	bl	80010a4 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(DataPins);
 8001208:	7938      	ldrb	r0, [r7, #4]
 800120a:	f7ff ff4b 	bl	80010a4 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(DataPins);
 800120e:	7938      	ldrb	r0, [r7, #4]
 8001210:	f7ff ff48 	bl	80010a4 <CLCD_voidSendCommand>

	//DISPLAY ON/OFF CONTROL : DISPLAY ENABLED , CURSOR NOT ENABLED , BLINK CURSOR NOT ENABLED//
	//CLCD_voidSendCommand(0b00001100);
	DataPins.Pins = 0b0000;
 8001214:	793b      	ldrb	r3, [r7, #4]
 8001216:	f36f 0303 	bfc	r3, #0, #4
 800121a:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 800121c:	7938      	ldrb	r0, [r7, #4]
 800121e:	f7ff ff41 	bl	80010a4 <CLCD_voidSendCommand>

	DataPins.Pins = 0b1100;
 8001222:	793b      	ldrb	r3, [r7, #4]
 8001224:	220c      	movs	r2, #12
 8001226:	f362 0303 	bfi	r3, r2, #0, #4
 800122a:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 800122c:	7938      	ldrb	r0, [r7, #4]
 800122e:	f7ff ff39 	bl	80010a4 <CLCD_voidSendCommand>

	//DISPLAY CLEAR//
	//CLCD_voidSendCommand(0b00000001);
	CLCD_voidDisplayClear();
 8001232:	f000 f817 	bl	8001264 <CLCD_voidDisplayClear>

	//ACTIVATE WRITING ON 2 LINES//
	DataPins.Pins = 0b0010;
 8001236:	793b      	ldrb	r3, [r7, #4]
 8001238:	2202      	movs	r2, #2
 800123a:	f362 0303 	bfi	r3, r2, #0, #4
 800123e:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 8001240:	7938      	ldrb	r0, [r7, #4]
 8001242:	f7ff ff2f 	bl	80010a4 <CLCD_voidSendCommand>

	DataPins.Pins = 0b1000;
 8001246:	793b      	ldrb	r3, [r7, #4]
 8001248:	2208      	movs	r2, #8
 800124a:	f362 0303 	bfi	r3, r2, #0, #4
 800124e:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 8001250:	7938      	ldrb	r0, [r7, #4]
 8001252:	f7ff ff27 	bl	80010a4 <CLCD_voidSendCommand>
	//CLCD_voidSendCommand(0X38);

	DELAY_MS(5);
 8001256:	2005      	movs	r0, #5
 8001258:	f006 fc74 	bl	8007b44 <vTaskDelay>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <CLCD_voidDisplayClear>:


void CLCD_voidDisplayClear(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
	LCD_Data DataPins;

	//DISPLAY CLEAR//
	//CLCD_voidSendCommand(0b00000001);
	DataPins.Pins = 0b0000;
 800126a:	793b      	ldrb	r3, [r7, #4]
 800126c:	f36f 0303 	bfc	r3, #0, #4
 8001270:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 8001272:	7938      	ldrb	r0, [r7, #4]
 8001274:	f7ff ff16 	bl	80010a4 <CLCD_voidSendCommand>

	DataPins.Pins = 0b0001;
 8001278:	793b      	ldrb	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f362 0303 	bfi	r3, r2, #0, #4
 8001280:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 8001282:	7938      	ldrb	r0, [r7, #4]
 8001284:	f7ff ff0e 	bl	80010a4 <CLCD_voidSendCommand>

	DELAY_MS(20);
 8001288:	2014      	movs	r0, #20
 800128a:	f006 fc5b 	bl	8007b44 <vTaskDelay>

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <CLCD_voidSendString>:



//SEND STRING DATA TO LCD//
void CLCD_voidSendString(const char *Copy_pcString)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
	u8 Local_u8Counter = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
	LCD_Data DataPins;

	//PRINT EACH CHAR UNTIL IT REACH NULL CHAR//
	while(Copy_pcString[Local_u8Counter] != '\0')
 80012a2:	e023      	b.n	80012ec <CLCD_voidSendString+0x56>
	{
		//SEND CHAR BY CHAR TO THE END OF THE STRING//
		DataPins.Pins = Copy_pcString[Local_u8Counter] >> 4;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f003 030f 	and.w	r3, r3, #15
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	7b3b      	ldrb	r3, [r7, #12]
 80012b8:	f362 0303 	bfi	r3, r2, #0, #4
 80012bc:	733b      	strb	r3, [r7, #12]
		CLCD_voidSendData(DataPins);
 80012be:	7b38      	ldrb	r0, [r7, #12]
 80012c0:	f7ff ff42 	bl	8001148 <CLCD_voidSendData>

		DataPins.Pins = Copy_pcString[Local_u8Counter];
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	7b3b      	ldrb	r3, [r7, #12]
 80012d4:	f362 0303 	bfi	r3, r2, #0, #4
 80012d8:	733b      	strb	r3, [r7, #12]
		CLCD_voidSendData(DataPins);
 80012da:	7b38      	ldrb	r0, [r7, #12]
 80012dc:	f7ff ff34 	bl	8001148 <CLCD_voidSendData>

		Local_u8Counter++;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	3301      	adds	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]

		DELAY_MS(10);
 80012e6:	200a      	movs	r0, #10
 80012e8:	f006 fc2c 	bl	8007b44 <vTaskDelay>
	while(Copy_pcString[Local_u8Counter] != '\0')
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1d5      	bne.n	80012a4 <CLCD_voidSendString+0xe>
	}
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <CLCD_voidGoToXY>:



//GO TO SPECIFIC POSITION//
void CLCD_voidGoToXY(u8 Copy_u8Xpos , u8 Copy_u8Ypos)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	460a      	mov	r2, r1
 800130c:	71fb      	strb	r3, [r7, #7]
 800130e:	4613      	mov	r3, r2
 8001310:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8Address;
	LCD_Data DataPins;

	//LOCATION IN THE FRIST LINE //
	if (Copy_u8Xpos == 0)
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8Ypos;
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e005      	b.n	800132a <CLCD_voidGoToXY+0x28>
	}

	//LOCATION IN THE SECOND LINE //
	else if(Copy_u8Xpos == 1)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d102      	bne.n	800132a <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = Copy_u8Ypos + 0X40;
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	3340      	adds	r3, #64	; 0x40
 8001328:	73fb      	strb	r3, [r7, #15]
	}

	Local_u8Address |= 0X80;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001330:	73fb      	strb	r3, [r7, #15]

	DataPins.Pins = Local_u8Address >> 4;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	b2da      	uxtb	r2, r3
 800133e:	7b3b      	ldrb	r3, [r7, #12]
 8001340:	f362 0303 	bfi	r3, r2, #0, #4
 8001344:	733b      	strb	r3, [r7, #12]
	CLCD_voidSendCommand(DataPins);
 8001346:	7b38      	ldrb	r0, [r7, #12]
 8001348:	f7ff feac 	bl	80010a4 <CLCD_voidSendCommand>

	DataPins.Pins = Local_u8Address;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	b2da      	uxtb	r2, r3
 8001354:	7b3b      	ldrb	r3, [r7, #12]
 8001356:	f362 0303 	bfi	r3, r2, #0, #4
 800135a:	733b      	strb	r3, [r7, #12]
	CLCD_voidSendCommand(DataPins);
 800135c:	7b38      	ldrb	r0, [r7, #12]
 800135e:	f7ff fea1 	bl	80010a4 <CLCD_voidSendCommand>

	//SET DDRAM ADDRESS COMMAND //
	//CLCD_voidSendCommand(Local_u8Address|0X80);

	DELAY_MS(5);
 8001362:	2005      	movs	r0, #5
 8001364:	f006 fbee 	bl	8007b44 <vTaskDelay>

}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <Build_Msg>:
	return Dec;
}

/*msg should be array of 32 chars*/
void Build_Msg(char *msg, double lat, double longt, char NS, char EW,
		double direction) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b092      	sub	sp, #72	; 0x48
 8001374:	af02      	add	r7, sp, #8
 8001376:	61f8      	str	r0, [r7, #28]
 8001378:	ed87 0b04 	vstr	d0, [r7, #16]
 800137c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001380:	460b      	mov	r3, r1
 8001382:	ed87 2b00 	vstr	d2, [r7]
 8001386:	76fb      	strb	r3, [r7, #27]
 8001388:	4613      	mov	r3, r2
 800138a:	76bb      	strb	r3, [r7, #26]

	char direction_string[8] = { 0 };
 800138c:	2300      	movs	r3, #0
 800138e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001390:	2300      	movs	r3, #0
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
	char longtiude[11] = { 0 };
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	f8c3 2003 	str.w	r2, [r3, #3]
	char lattiude[11] = { 0 };
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	f8c3 2003 	str.w	r2, [r3, #3]
	//lat = lat * 100;
	//longt = longt *100;

	// from double to string
	snprintf(lattiude,11, "%.6f", lat);
 80013b4:	f107 0020 	add.w	r0, r7, #32
 80013b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013bc:	e9cd 2300 	strd	r2, r3, [sp]
 80013c0:	4a5e      	ldr	r2, [pc, #376]	; (800153c <Build_Msg+0x1cc>)
 80013c2:	210b      	movs	r1, #11
 80013c4:	f008 fdbc 	bl	8009f40 <sniprintf>
	snprintf(longtiude,11, "%.6f", longt);
 80013c8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80013cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013d0:	e9cd 2300 	strd	r2, r3, [sp]
 80013d4:	4a59      	ldr	r2, [pc, #356]	; (800153c <Build_Msg+0x1cc>)
 80013d6:	210b      	movs	r1, #11
 80013d8:	f008 fdb2 	bl	8009f40 <sniprintf>
	snprintf(direction_string,8, "%.3f", direction);
 80013dc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80013e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013e4:	e9cd 2300 	strd	r2, r3, [sp]
 80013e8:	4a55      	ldr	r2, [pc, #340]	; (8001540 <Build_Msg+0x1d0>)
 80013ea:	2108      	movs	r1, #8
 80013ec:	f008 fda8 	bl	8009f40 <sniprintf>

	msg[0] = '#';
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2223      	movs	r2, #35	; 0x23
 80013f4:	701a      	strb	r2, [r3, #0]
	msg[1] = lattiude[0];
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3301      	adds	r3, #1
 80013fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013fe:	701a      	strb	r2, [r3, #0]
	msg[2] = lattiude[1];
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	3302      	adds	r3, #2
 8001404:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001408:	701a      	strb	r2, [r3, #0]
	msg[3] = lattiude[2];
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3303      	adds	r3, #3
 800140e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001412:	701a      	strb	r2, [r3, #0]
	msg[4] = lattiude[3];
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	3304      	adds	r3, #4
 8001418:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800141c:	701a      	strb	r2, [r3, #0]
	msg[5] = lattiude[4];
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3305      	adds	r3, #5
 8001422:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001426:	701a      	strb	r2, [r3, #0]
	msg[6] = lattiude[5];
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	3306      	adds	r3, #6
 800142c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001430:	701a      	strb	r2, [r3, #0]
	msg[7] = lattiude[6];
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3307      	adds	r3, #7
 8001436:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800143a:	701a      	strb	r2, [r3, #0]
	msg[8] = lattiude[7];
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	3308      	adds	r3, #8
 8001440:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001444:	701a      	strb	r2, [r3, #0]
	msg[9] = lattiude[8];
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3309      	adds	r3, #9
 800144a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800144e:	701a      	strb	r2, [r3, #0]
	msg[10] = lattiude[9];
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	330a      	adds	r3, #10
 8001454:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001458:	701a      	strb	r2, [r3, #0]

	msg[11] = NS;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	330b      	adds	r3, #11
 800145e:	7efa      	ldrb	r2, [r7, #27]
 8001460:	701a      	strb	r2, [r3, #0]

	msg[12] = longtiude[0];
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	330c      	adds	r3, #12
 8001466:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800146a:	701a      	strb	r2, [r3, #0]
	msg[13] = longtiude[1];
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	330d      	adds	r3, #13
 8001470:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001474:	701a      	strb	r2, [r3, #0]
	msg[14] = longtiude[2];
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	330e      	adds	r3, #14
 800147a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800147e:	701a      	strb	r2, [r3, #0]
	msg[15] = longtiude[3];
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	330f      	adds	r3, #15
 8001484:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001488:	701a      	strb	r2, [r3, #0]
	msg[16] = longtiude[4];
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3310      	adds	r3, #16
 800148e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001492:	701a      	strb	r2, [r3, #0]
	msg[17] = longtiude[5];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	3311      	adds	r3, #17
 8001498:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800149c:	701a      	strb	r2, [r3, #0]
	msg[18] = longtiude[6];
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3312      	adds	r3, #18
 80014a2:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80014a6:	701a      	strb	r2, [r3, #0]
	msg[19] = longtiude[7];
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	3313      	adds	r3, #19
 80014ac:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80014b0:	701a      	strb	r2, [r3, #0]
	msg[20] = longtiude[8];
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3314      	adds	r3, #20
 80014b6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80014ba:	701a      	strb	r2, [r3, #0]
	msg[21] = longtiude[9];
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	3315      	adds	r3, #21
 80014c0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80014c4:	701a      	strb	r2, [r3, #0]
	msg[22] = EW;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3316      	adds	r3, #22
 80014ca:	7eba      	ldrb	r2, [r7, #26]
 80014cc:	701a      	strb	r2, [r3, #0]
	msg[23] = direction_string[0];
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3317      	adds	r3, #23
 80014d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80014d6:	701a      	strb	r2, [r3, #0]
	msg[24] = direction_string[1];
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	3318      	adds	r3, #24
 80014dc:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80014e0:	701a      	strb	r2, [r3, #0]
	msg[25] = direction_string[2];
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3319      	adds	r3, #25
 80014e6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80014ea:	701a      	strb	r2, [r3, #0]
	msg[26] = direction_string[3];
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	331a      	adds	r3, #26
 80014f0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80014f4:	701a      	strb	r2, [r3, #0]
	msg[27] = direction_string[4];
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	331b      	adds	r3, #27
 80014fa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80014fe:	701a      	strb	r2, [r3, #0]
	msg[28] = direction_string[5];
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	331c      	adds	r3, #28
 8001504:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001508:	701a      	strb	r2, [r3, #0]
	msg[29] = direction_string[6];
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	331d      	adds	r3, #29
 800150e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001512:	701a      	strb	r2, [r3, #0]
	msg[30] = '#';
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	331e      	adds	r3, #30
 8001518:	2223      	movs	r2, #35	; 0x23
 800151a:	701a      	strb	r2, [r3, #0]
	msg[31] = '\r';
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	331f      	adds	r3, #31
 8001520:	220d      	movs	r2, #13
 8001522:	701a      	strb	r2, [r3, #0]
	msg[32] = '\n';
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	3320      	adds	r3, #32
 8001528:	220a      	movs	r2, #10
 800152a:	701a      	strb	r2, [r3, #0]
	msg[33] = '\0';
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	3321      	adds	r3, #33	; 0x21
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
	/*3003.95734N3116.64210E# is the message
	 * first 10 chars is lattiude N
	 * then 10 chars for longtiude then E 
	 * And # specifies the end of message */

}
 8001534:	bf00      	nop
 8001536:	3740      	adds	r7, #64	; 0x40
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	0800c120 	.word	0x0800c120
 8001540:	0800c128 	.word	0x0800c128

08001544 <Task_sendMessage>:
extern receiving_state current_screen_frame;
extern uint8_t HeaderFrame[7];
extern uint8_t DataFrame[20];
extern uint8_t arrested_car[20];

void Task_sendMessage(void *parameters) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(send_message_semaphore, 0);
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <Task_sendMessage+0x84>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f005 feb2 	bl	80072bc <xQueueSemaphoreTake>
	vTaskSuspend(NULL);
 8001558:	2000      	movs	r0, #0
 800155a:	f006 fb27 	bl	8007bac <vTaskSuspend>
	while (1) {
		//Construct the message
		//taskENTER_CRITICAL();
		Build_Msg((char *)tx_buffer, my_car_latitude, my_car_longitude,
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <Task_sendMessage+0x88>)
 8001560:	ed93 7b00 	vldr	d7, [r3]
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <Task_sendMessage+0x8c>)
 8001566:	ed93 6b00 	vldr	d6, [r3]
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <Task_sendMessage+0x90>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <Task_sendMessage+0x94>)
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	491a      	ldr	r1, [pc, #104]	; (80015dc <Task_sendMessage+0x98>)
 8001574:	ed91 5b00 	vldr	d5, [r1]
 8001578:	eeb0 2a45 	vmov.f32	s4, s10
 800157c:	eef0 2a65 	vmov.f32	s5, s11
 8001580:	4619      	mov	r1, r3
 8001582:	eeb0 1a46 	vmov.f32	s2, s12
 8001586:	eef0 1a66 	vmov.f32	s3, s13
 800158a:	eeb0 0a47 	vmov.f32	s0, s14
 800158e:	eef0 0a67 	vmov.f32	s1, s15
 8001592:	4813      	ldr	r0, [pc, #76]	; (80015e0 <Task_sendMessage+0x9c>)
 8001594:	f7ff feec 	bl	8001370 <Build_Msg>
				north_south, east_west, car_direction);
		//taskEXIT_CRITICAL();

		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)tx_buffer, 34);
 8001598:	2222      	movs	r2, #34	; 0x22
 800159a:	4911      	ldr	r1, [pc, #68]	; (80015e0 <Task_sendMessage+0x9c>)
 800159c:	4811      	ldr	r0, [pc, #68]	; (80015e4 <Task_sendMessage+0xa0>)
 800159e:	f004 fbd7 	bl	8005d50 <HAL_UART_Transmit_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <Task_sendMessage+0xa4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <Task_sendMessage+0xa4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0208 	bic.w	r2, r2, #8
 80015b0:	601a      	str	r2, [r3, #0]

		vTaskSuspend(NULL);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f006 fafa 	bl	8007bac <vTaskSuspend>
		xSemaphoreTake(send_message_semaphore, portMAX_DELAY);
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <Task_sendMessage+0x84>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	4618      	mov	r0, r3
 80015c2:	f005 fe7b 	bl	80072bc <xQueueSemaphoreTake>
		Build_Msg((char *)tx_buffer, my_car_latitude, my_car_longitude,
 80015c6:	e7ca      	b.n	800155e <Task_sendMessage+0x1a>
 80015c8:	200007e4 	.word	0x200007e4
 80015cc:	200007f8 	.word	0x200007f8
 80015d0:	20000800 	.word	0x20000800
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000001 	.word	0x20000001
 80015dc:	20000808 	.word	0x20000808
 80015e0:	200007c0 	.word	0x200007c0
 80015e4:	20000618 	.word	0x20000618
 80015e8:	200006a0 	.word	0x200006a0

080015ec <Task_speedCalculation>:
		HAL_UART_Receive_DMA(&huart1, rx_buffer, 32);
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
	}
}

void Task_speedCalculation(void *parameters) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

	float current_speed = 0;
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
	float previous_speed = 0;
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

	float speed_difference = 0;
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]

	TickType_t xLastWakeTime;

	taskENTER_CRITICAL();
 8001606:	f007 fadd 	bl	8008bc4 <vPortEnterCritical>

	slit_count = 0;
 800160a:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <Task_speedCalculation+0xc4>)
 800160c:	2200      	movs	r2, #0
 800160e:	801a      	strh	r2, [r3, #0]
	xLastWakeTime = xTaskGetTickCount();
 8001610:	f006 fd02 	bl	8008018 <xTaskGetTickCount>
 8001614:	4603      	mov	r3, r0
 8001616:	60bb      	str	r3, [r7, #8]

	taskEXIT_CRITICAL();
 8001618:	f007 fb04 	bl	8008c24 <vPortExitCritical>

	while (1) {

		vTaskDelayUntil(&xLastWakeTime, 500 / portTICK_RATE_MS);
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001624:	4618      	mov	r0, r3
 8001626:	f006 fa0f 	bl	8007a48 <vTaskDelayUntil>

		taskENTER_CRITICAL();
 800162a:	f007 facb 	bl	8008bc4 <vPortEnterCritical>

		/* (1.6328 / 2) = 0.8164 */
		//current_speed = (uint16_t) (0.8164 * slit_count); //In Cm/Sec
		current_speed = (slit_count / 20.0) * 120.0; //RPM
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <Task_speedCalculation+0xc4>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff95 	bl	8000564 <__aeabi_i2d>
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <Task_speedCalculation+0xc8>)
 8001640:	f7ff f924 	bl	800088c <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <Task_speedCalculation+0xcc>)
 8001652:	f7fe fff1 	bl	8000638 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff fac3 	bl	8000be8 <__aeabi_d2f>
 8001662:	4603      	mov	r3, r0
 8001664:	613b      	str	r3, [r7, #16]
		slit_count = 0;
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <Task_speedCalculation+0xc4>)
 8001668:	2200      	movs	r2, #0
 800166a:	801a      	strh	r2, [r3, #0]

		taskEXIT_CRITICAL();
 800166c:	f007 fada 	bl	8008c24 <vPortExitCritical>

		speed_difference = current_speed - previous_speed;
 8001670:	ed97 7a04 	vldr	s14, [r7, #16]
 8001674:	edd7 7a05 	vldr	s15, [r7, #20]
 8001678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167c:	edc7 7a03 	vstr	s15, [r7, #12]

		previous_speed = current_speed;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	617b      	str	r3, [r7, #20]

		if (speed_difference < SS_VELOCITY_THRESHOLD) {
 8001684:	edd7 7a03 	vldr	s15, [r7, #12]
 8001688:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80016bc <Task_speedCalculation+0xd0>
 800168c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	d50a      	bpl.n	80016ac <Task_speedCalculation+0xc0>
			//Transmit UART Message using DMA
			//taskENTER_CRITICAL();
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001696:	2006      	movs	r0, #6
 8001698:	f001 fb5f 	bl	8002d5a <HAL_NVIC_DisableIRQ>
			vTaskResume(send_message_task_handle);
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <Task_speedCalculation+0xd4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f006 fb47 	bl	8007d34 <vTaskResume>
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016a6:	2006      	movs	r0, #6
 80016a8:	f001 fb49 	bl	8002d3e <HAL_NVIC_EnableIRQ>
		vTaskDelayUntil(&xLastWakeTime, 500 / portTICK_RATE_MS);
 80016ac:	e7b6      	b.n	800161c <Task_speedCalculation+0x30>
 80016ae:	bf00      	nop
 80016b0:	200007f0 	.word	0x200007f0
 80016b4:	40340000 	.word	0x40340000
 80016b8:	405e0000 	.word	0x405e0000
 80016bc:	c4bb8000 	.word	0xc4bb8000
 80016c0:	200007ec 	.word	0x200007ec

080016c4 <Task_controlCar>:
		taskEXIT_CRITICAL();
	}

}

void Task_controlCar(void *parameters) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

	uint8_t Local_u8Received_data = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]

	TickType_t xLastWakeTime;

	xLastWakeTime = xTaskGetTickCount();
 80016d0:	f006 fca2 	bl	8008018 <xTaskGetTickCount>
 80016d4:	4603      	mov	r3, r0
 80016d6:	60bb      	str	r3, [r7, #8]

	while (1) {
		Local_u8Received_data = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]

		HAL_UART_Receive_IT(&huart4, &Local_u8Received_data, 1);
 80016dc:	f107 030f 	add.w	r3, r7, #15
 80016e0:	2201      	movs	r2, #1
 80016e2:	4619      	mov	r1, r3
 80016e4:	4829      	ldr	r0, [pc, #164]	; (800178c <Task_controlCar+0xc8>)
 80016e6:	f004 fb02 	bl	8005cee <HAL_UART_Receive_IT>

		vTaskDelayUntil(&xLastWakeTime, 100 / portTICK_RATE_MS);
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	2164      	movs	r1, #100	; 0x64
 80016f0:	4618      	mov	r0, r3
 80016f2:	f006 f9a9 	bl	8007a48 <vTaskDelayUntil>

		if (Local_u8Received_data != 'f' && Local_u8Received_data != 'b'
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	2b66      	cmp	r3, #102	; 0x66
 80016fa:	d021      	beq.n	8001740 <Task_controlCar+0x7c>
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	2b62      	cmp	r3, #98	; 0x62
 8001700:	d01e      	beq.n	8001740 <Task_controlCar+0x7c>
				&& Local_u8Received_data != 'l' && Local_u8Received_data != 'r'
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	2b6c      	cmp	r3, #108	; 0x6c
 8001706:	d01b      	beq.n	8001740 <Task_controlCar+0x7c>
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b72      	cmp	r3, #114	; 0x72
 800170c:	d018      	beq.n	8001740 <Task_controlCar+0x7c>
				&& Local_u8Received_data != 's') {
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b73      	cmp	r3, #115	; 0x73
 8001712:	d015      	beq.n	8001740 <Task_controlCar+0x7c>
			/* Decrease The Speed Gradually */
			if ((TIM3->CCR1) >= 10) {
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <Task_controlCar+0xcc>)
 8001716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001718:	2b09      	cmp	r3, #9
 800171a:	d90a      	bls.n	8001732 <Task_controlCar+0x6e>
				TIM3->CCR1 -= 1;
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <Task_controlCar+0xcc>)
 800171e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <Task_controlCar+0xcc>)
 8001722:	3b01      	subs	r3, #1
 8001724:	6353      	str	r3, [r2, #52]	; 0x34
				TIM12->CCR1 -= 1;
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <Task_controlCar+0xd0>)
 8001728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172a:	4a1a      	ldr	r2, [pc, #104]	; (8001794 <Task_controlCar+0xd0>)
 800172c:	3b01      	subs	r3, #1
 800172e:	6353      	str	r3, [r2, #52]	; 0x34
			if ((TIM3->CCR1) >= 10) {
 8001730:	e02b      	b.n	800178a <Task_controlCar+0xc6>
			}
			/* Stop The RC Car */
			else {
				TIM3->CCR1 = 0;
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <Task_controlCar+0xcc>)
 8001734:	2200      	movs	r2, #0
 8001736:	635a      	str	r2, [r3, #52]	; 0x34
				TIM12->CCR1 = 0;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <Task_controlCar+0xd0>)
 800173a:	2200      	movs	r2, #0
 800173c:	635a      	str	r2, [r3, #52]	; 0x34
			if ((TIM3->CCR1) >= 10) {
 800173e:	e024      	b.n	800178a <Task_controlCar+0xc6>
			}
		} else {

			/* Return To The Normal Speed */
			TIM3->CCR1 = 75;
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <Task_controlCar+0xcc>)
 8001742:	224b      	movs	r2, #75	; 0x4b
 8001744:	635a      	str	r2, [r3, #52]	; 0x34
			TIM12->CCR1 = 75;
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <Task_controlCar+0xd0>)
 8001748:	224b      	movs	r2, #75	; 0x4b
 800174a:	635a      	str	r2, [r3, #52]	; 0x34

			/* Direction Change According To The Received Direction */
			if (Local_u8Received_data == 'f')
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2b66      	cmp	r3, #102	; 0x66
 8001750:	d102      	bne.n	8001758 <Task_controlCar+0x94>
				HAL_CAR_CTRL_voidForward();
 8001752:	f7ff fc1b 	bl	8000f8c <HAL_CAR_CTRL_voidForward>
 8001756:	e7bf      	b.n	80016d8 <Task_controlCar+0x14>
			else if (Local_u8Received_data == 'b')
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b62      	cmp	r3, #98	; 0x62
 800175c:	d102      	bne.n	8001764 <Task_controlCar+0xa0>
				HAL_CAR_CTRL_voidBackward();
 800175e:	f7ff fc31 	bl	8000fc4 <HAL_CAR_CTRL_voidBackward>
 8001762:	e7b9      	b.n	80016d8 <Task_controlCar+0x14>
			else if (Local_u8Received_data == 'l')
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b6c      	cmp	r3, #108	; 0x6c
 8001768:	d102      	bne.n	8001770 <Task_controlCar+0xac>
				HAL_CAR_CTRL_voidRight();
 800176a:	f7ff fc47 	bl	8000ffc <HAL_CAR_CTRL_voidRight>
 800176e:	e7b3      	b.n	80016d8 <Task_controlCar+0x14>
			else if (Local_u8Received_data == 'r')
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b72      	cmp	r3, #114	; 0x72
 8001774:	d102      	bne.n	800177c <Task_controlCar+0xb8>
				HAL_CAR_CTRL_voidLeft();
 8001776:	f7ff fc5d 	bl	8001034 <HAL_CAR_CTRL_voidLeft>
 800177a:	e7ad      	b.n	80016d8 <Task_controlCar+0x14>
			else if (Local_u8Received_data == 's') {
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	2b73      	cmp	r3, #115	; 0x73
 8001780:	d1aa      	bne.n	80016d8 <Task_controlCar+0x14>
				HAL_CAR_CTRL_voidStop();
 8001782:	f7ff fc73 	bl	800106c <HAL_CAR_CTRL_voidStop>
				CLCD_voidDisplayClear();
 8001786:	f7ff fd6d 	bl	8001264 <CLCD_voidDisplayClear>
		Local_u8Received_data = 0;
 800178a:	e7a5      	b.n	80016d8 <Task_controlCar+0x14>
 800178c:	20000590 	.word	0x20000590
 8001790:	40000400 	.word	0x40000400
 8001794:	40001800 	.word	0x40001800

08001798 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80017a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <vApplicationGetIdleTaskMemory+0x30>)
 80017ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000204 	.word	0x20000204
 80017c8:	200002b8 	.word	0x200002b8

080017cc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0c      	blt.n	80017f8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <__NVIC_ClearPendingIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	3360      	adds	r3, #96	; 0x60
 80017f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100

08001808 <HAL_UART_RxCpltCallback>:
extern uint8_t icFlag;
extern uint32_t edge1Time;
extern uint32_t edge2Time;
extern uint8_t edgeNumber;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]

	if (huart->Instance == UART5) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a10      	ldr	r2, [pc, #64]	; (800185c <HAL_UART_RxCpltCallback+0x54>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d01a      	beq.n	8001854 <HAL_UART_RxCpltCallback+0x4c>

		xSemaphoreGiveFromISR(touchScreen_semaphore, &xHigherPriorityTaskWoken);

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
#endif
	} else if (huart->Instance == USART1) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_UART_RxCpltCallback+0x58>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d115      	bne.n	8001854 <HAL_UART_RxCpltCallback+0x4c>
		NVIC_ClearPendingIRQ(USART1_IRQn);
 8001828:	2025      	movs	r0, #37	; 0x25
 800182a:	f7ff ffcf 	bl	80017cc <__NVIC_ClearPendingIRQ>

		xSemaphoreGiveFromISR(receive_message_semaphore,
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_UART_RxCpltCallback+0x5c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f107 020c 	add.w	r2, r7, #12
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f005 fcb2 	bl	80071a2 <xQueueGiveFromISR>
				&xHigherPriorityTaskWoken);

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d007      	beq.n	8001854 <HAL_UART_RxCpltCallback+0x4c>
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_UART_RxCpltCallback+0x60>)
 8001846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	f3bf 8f4f 	dsb	sy
 8001850:	f3bf 8f6f 	isb	sy
	}
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40005000 	.word	0x40005000
 8001860:	40011000 	.word	0x40011000
 8001864:	200007e8 	.word	0x200007e8
 8001868:	e000ed04 	.word	0xe000ed04

0800186c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <HAL_UART_TxCpltCallback+0x34>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10c      	bne.n	8001898 <HAL_UART_TxCpltCallback+0x2c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
		NVIC_ClearPendingIRQ(USART1_IRQn);
 8001882:	2025      	movs	r0, #37	; 0x25
 8001884:	f7ff ffa2 	bl	80017cc <__NVIC_ClearPendingIRQ>
		xSemaphoreGiveFromISR(send_message_semaphore,
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_UART_TxCpltCallback+0x38>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f107 020c 	add.w	r2, r7, #12
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f005 fc85 	bl	80071a2 <xQueueGiveFromISR>
				&xHigherPriorityTaskWoken);
	}
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40011000 	.word	0x40011000
 80018a4:	200007e4 	.word	0x200007e4

080018a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d106      	bne.n	80018c6 <HAL_GPIO_EXTI_Callback+0x1e>
		slit_count++;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80018c4:	801a      	strh	r2, [r3, #0]
	}
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	200007f0 	.word	0x200007f0

080018d8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	if (edgeNumber == 0) {
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x50>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10a      	bne.n	80018fe <HAL_TIM_IC_CaptureCallback+0x26>
		edge1Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80018e8:	2100      	movs	r1, #0
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f003 fb48 	bl	8004f80 <HAL_TIM_ReadCapturedValue>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_TIM_IC_CaptureCallback+0x54>)
 80018f4:	6013      	str	r3, [r2, #0]
		edgeNumber = 1;
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x50>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
	} else if (edgeNumber == 1) {
		edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		edgeNumber = 0;
		icFlag = 1;
	}
}
 80018fc:	e010      	b.n	8001920 <HAL_TIM_IC_CaptureCallback+0x48>
	} else if (edgeNumber == 1) {
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10c      	bne.n	8001920 <HAL_TIM_IC_CaptureCallback+0x48>
		edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001906:	2100      	movs	r1, #0
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f003 fb39 	bl	8004f80 <HAL_TIM_ReadCapturedValue>
 800190e:	4603      	mov	r3, r0
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001912:	6013      	str	r3, [r2, #0]
		edgeNumber = 0;
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
		icFlag = 1;
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000811 	.word	0x20000811
 800192c:	20000814 	.word	0x20000814
 8001930:	20000818 	.word	0x20000818
 8001934:	20000810 	.word	0x20000810

08001938 <Task_initialization>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Task_initialization(void *parameters) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af02      	add	r7, sp, #8
 800193e:	6078      	str	r0, [r7, #4]

	int8_t wifi_ready_signal = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]

	send_message_semaphore = xSemaphoreCreateBinary();
 8001944:	2203      	movs	r2, #3
 8001946:	2100      	movs	r1, #0
 8001948:	2001      	movs	r0, #1
 800194a:	f005 fbd1 	bl	80070f0 <xQueueGenericCreate>
 800194e:	4603      	mov	r3, r0
 8001950:	4a37      	ldr	r2, [pc, #220]	; (8001a30 <Task_initialization+0xf8>)
 8001952:	6013      	str	r3, [r2, #0]
	receive_message_semaphore = xSemaphoreCreateBinary();
 8001954:	2203      	movs	r2, #3
 8001956:	2100      	movs	r1, #0
 8001958:	2001      	movs	r0, #1
 800195a:	f005 fbc9 	bl	80070f0 <xQueueGenericCreate>
 800195e:	4603      	mov	r3, r0
 8001960:	4a34      	ldr	r2, [pc, #208]	; (8001a34 <Task_initialization+0xfc>)
 8001962:	6013      	str	r3, [r2, #0]
	//touchScreen_semaphore = xSemaphoreCreateBinary();
	//car_control_semaphore = xSemaphoreCreateBinary();

	CLCD_voidInit();
 8001964:	f7ff fc42 	bl	80011ec <CLCD_voidInit>
	CLCD_voidGoToXY(0, 0);
 8001968:	2100      	movs	r1, #0
 800196a:	2000      	movs	r0, #0
 800196c:	f7ff fcc9 	bl	8001302 <CLCD_voidGoToXY>
	CLCD_voidSendString("WELCOME TO V2X");
 8001970:	4831      	ldr	r0, [pc, #196]	; (8001a38 <Task_initialization+0x100>)
 8001972:	f7ff fc90 	bl	8001296 <CLCD_voidSendString>
	CLCD_voidGoToXY(1, 2);
 8001976:	2102      	movs	r1, #2
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff fcc2 	bl	8001302 <CLCD_voidGoToXY>
	CLCD_voidSendString("GP: 2023");
 800197e:	482f      	ldr	r0, [pc, #188]	; (8001a3c <Task_initialization+0x104>)
 8001980:	f7ff fc89 	bl	8001296 <CLCD_voidSendString>

	vTaskDelay(3000 / portTICK_RATE_MS);
 8001984:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001988:	f006 f8dc 	bl	8007b44 <vTaskDelay>
	NULL);

	xTaskCreate(&Task_directionOfCar, "Car_direction", 240, NULL, 5,
	NULL);
#endif
	xTaskCreate(&Task_speedCalculation, "Speed_Calculation", 240, NULL, 3,
 800198c:	2300      	movs	r3, #0
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	2303      	movs	r3, #3
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	22f0      	movs	r2, #240	; 0xf0
 8001998:	4929      	ldr	r1, [pc, #164]	; (8001a40 <Task_initialization+0x108>)
 800199a:	482a      	ldr	r0, [pc, #168]	; (8001a44 <Task_initialization+0x10c>)
 800199c:	f005 fe77 	bl	800768e <xTaskCreate>
	NULL);

	xTaskCreate(&Task_sendMessage, "Message_Sending", 240, NULL, 6,
 80019a0:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <Task_initialization+0x110>)
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	2306      	movs	r3, #6
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2300      	movs	r3, #0
 80019aa:	22f0      	movs	r2, #240	; 0xf0
 80019ac:	4927      	ldr	r1, [pc, #156]	; (8001a4c <Task_initialization+0x114>)
 80019ae:	4828      	ldr	r0, [pc, #160]	; (8001a50 <Task_initialization+0x118>)
 80019b0:	f005 fe6d 	bl	800768e <xTaskCreate>
			&send_message_task_handle);

	xTaskCreate(&Task_controlCar, "Car_Control", 240, NULL, 7,
 80019b4:	2300      	movs	r3, #0
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	2307      	movs	r3, #7
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	22f0      	movs	r2, #240	; 0xf0
 80019c0:	4924      	ldr	r1, [pc, #144]	; (8001a54 <Task_initialization+0x11c>)
 80019c2:	4825      	ldr	r0, [pc, #148]	; (8001a58 <Task_initialization+0x120>)
 80019c4:	f005 fe63 	bl	800768e <xTaskCreate>
#if 0
	xTaskCreate(&Task_touchScreen, "Touch_Screen", 240, NULL, 1,
	NULL);
#endif

	CLCD_voidDisplayClear();
 80019c8:	f7ff fc4c 	bl	8001264 <CLCD_voidDisplayClear>
	CLCD_voidGoToXY(0, 0);
 80019cc:	2100      	movs	r1, #0
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff fc97 	bl	8001302 <CLCD_voidGoToXY>
	CLCD_voidSendString("Waiting for");
 80019d4:	4821      	ldr	r0, [pc, #132]	; (8001a5c <Task_initialization+0x124>)
 80019d6:	f7ff fc5e 	bl	8001296 <CLCD_voidSendString>
	CLCD_voidGoToXY(1, 2);
 80019da:	2102      	movs	r1, #2
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff fc90 	bl	8001302 <CLCD_voidGoToXY>
	CLCD_voidSendString("WIFI");
 80019e2:	481f      	ldr	r0, [pc, #124]	; (8001a60 <Task_initialization+0x128>)
 80019e4:	f7ff fc57 	bl	8001296 <CLCD_voidSendString>

	/* Simple protocol to make sure the WIFI is ready */
	do {
		HAL_UART_Transmit(&huart1, (uint8_t*) "I", 1, 300);
 80019e8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80019ec:	2201      	movs	r2, #1
 80019ee:	491d      	ldr	r1, [pc, #116]	; (8001a64 <Task_initialization+0x12c>)
 80019f0:	481d      	ldr	r0, [pc, #116]	; (8001a68 <Task_initialization+0x130>)
 80019f2:	f004 f848 	bl	8005a86 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, (uint8_t*) &wifi_ready_signal, 1, 300);
 80019f6:	f107 010f 	add.w	r1, r7, #15
 80019fa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80019fe:	2201      	movs	r2, #1
 8001a00:	4819      	ldr	r0, [pc, #100]	; (8001a68 <Task_initialization+0x130>)
 8001a02:	f004 f8d2 	bl	8005baa <HAL_UART_Receive>
	} while (wifi_ready_signal != 'R');
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	2b52      	cmp	r3, #82	; 0x52
 8001a0c:	d1ec      	bne.n	80019e8 <Task_initialization+0xb0>

	CLCD_voidDisplayClear();
 8001a0e:	f7ff fc29 	bl	8001264 <CLCD_voidDisplayClear>
	CLCD_voidGoToXY(0, 0);
 8001a12:	2100      	movs	r1, #0
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fc74 	bl	8001302 <CLCD_voidGoToXY>
	CLCD_voidSendString("RUNNING");
 8001a1a:	4814      	ldr	r0, [pc, #80]	; (8001a6c <Task_initialization+0x134>)
 8001a1c:	f7ff fc3b 	bl	8001296 <CLCD_voidSendString>

	vTaskDelete(NULL);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f005 ff81 	bl	8007928 <vTaskDelete>
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200007e4 	.word	0x200007e4
 8001a34:	200007e8 	.word	0x200007e8
 8001a38:	0800c130 	.word	0x0800c130
 8001a3c:	0800c140 	.word	0x0800c140
 8001a40:	0800c14c 	.word	0x0800c14c
 8001a44:	080015ed 	.word	0x080015ed
 8001a48:	200007ec 	.word	0x200007ec
 8001a4c:	0800c160 	.word	0x0800c160
 8001a50:	08001545 	.word	0x08001545
 8001a54:	0800c170 	.word	0x0800c170
 8001a58:	080016c5 	.word	0x080016c5
 8001a5c:	0800c17c 	.word	0x0800c17c
 8001a60:	0800c188 	.word	0x0800c188
 8001a64:	0800c190 	.word	0x0800c190
 8001a68:	20000618 	.word	0x20000618
 8001a6c:	0800c194 	.word	0x0800c194

08001a70 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a76:	f000 ffd5 	bl	8002a24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a7a:	f000 f82f 	bl	8001adc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a7e:	f000 facd 	bl	800201c <MX_GPIO_Init>
	MX_DMA_Init();
 8001a82:	f000 fa8d 	bl	8001fa0 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8001a86:	f000 fa37 	bl	8001ef8 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8001a8a:	f000 f899 	bl	8001bc0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001a8e:	f000 f90d 	bl	8001cac <MX_TIM4_Init>
	MX_TIM12_Init();
 8001a92:	f000 f97b 	bl	8001d8c <MX_TIM12_Init>
	MX_UART4_Init();
 8001a96:	f000 f9db 	bl	8001e50 <MX_UART4_Init>
	MX_UART5_Init();
 8001a9a:	f000 fa03 	bl	8001ea4 <MX_UART5_Init>
	MX_USART3_UART_Init();
 8001a9e:	f000 fa55 	bl	8001f4c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4809      	ldr	r0, [pc, #36]	; (8001acc <main+0x5c>)
 8001aa6:	f002 fe1b 	bl	80046e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <main+0x60>)
 8001aae:	f002 fe17 	bl	80046e0 <HAL_TIM_PWM_Start>
	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(&Task_initialization, "Initialization", 240, NULL, 8,
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2300      	movs	r3, #0
 8001abc:	22f0      	movs	r2, #240	; 0xf0
 8001abe:	4905      	ldr	r1, [pc, #20]	; (8001ad4 <main+0x64>)
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <main+0x68>)
 8001ac2:	f005 fde4 	bl	800768e <xTaskCreate>
	NULL);
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	vTaskStartScheduler();
 8001ac6:	f006 f993 	bl	8007df0 <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001aca:	e7fe      	b.n	8001aca <main+0x5a>
 8001acc:	200004b8 	.word	0x200004b8
 8001ad0:	20000548 	.word	0x20000548
 8001ad4:	0800c19c 	.word	0x0800c19c
 8001ad8:	08001939 	.word	0x08001939

08001adc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b094      	sub	sp, #80	; 0x50
 8001ae0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	2234      	movs	r2, #52	; 0x34
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f007 fca7 	bl	800943e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <SystemClock_Config+0xdc>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	4a2b      	ldr	r2, [pc, #172]	; (8001bb8 <SystemClock_Config+0xdc>)
 8001b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <SystemClock_Config+0xdc>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <SystemClock_Config+0xe0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a25      	ldr	r2, [pc, #148]	; (8001bbc <SystemClock_Config+0xe0>)
 8001b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <SystemClock_Config+0xe0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b40:	2310      	movs	r3, #16
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b44:	2302      	movs	r3, #2
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001b50:	23b4      	movs	r3, #180	; 0xb4
 8001b52:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fa75 	bl	8004054 <HAL_RCC_OscConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0x98>
		Error_Handler();
 8001b70:	f000 faf8 	bl	8002164 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001b74:	f001 fed4 	bl	8003920 <HAL_PWREx_EnableOverDrive>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <SystemClock_Config+0xa6>
		Error_Handler();
 8001b7e:	f000 faf1 	bl	8002164 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b82:	230f      	movs	r3, #15
 8001b84:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b86:	2302      	movs	r3, #2
 8001b88:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b92:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	2105      	movs	r1, #5
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 ff0d 	bl	80039c0 <HAL_RCC_ClockConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0xd4>
		Error_Handler();
 8001bac:	f000 fada 	bl	8002164 <Error_Handler>
	}
}
 8001bb0:	bf00      	nop
 8001bb2:	3750      	adds	r7, #80	; 0x50
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08e      	sub	sp, #56	; 0x38
 8001bc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001bd4:	f107 0320 	add.w	r3, r7, #32
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	615a      	str	r2, [r3, #20]
 8001bee:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <MX_TIM3_Init+0xe4>)
 8001bf2:	4a2d      	ldr	r2, [pc, #180]	; (8001ca8 <MX_TIM3_Init+0xe8>)
 8001bf4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 29;
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <MX_TIM3_Init+0xe4>)
 8001bf8:	221d      	movs	r2, #29
 8001bfa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfc:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <MX_TIM3_Init+0xe4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 99;
 8001c02:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <MX_TIM3_Init+0xe4>)
 8001c04:	2263      	movs	r2, #99	; 0x63
 8001c06:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <MX_TIM3_Init+0xe4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <MX_TIM3_Init+0xe4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001c14:	4823      	ldr	r0, [pc, #140]	; (8001ca4 <MX_TIM3_Init+0xe4>)
 8001c16:	f002 fcbb 	bl	8004590 <HAL_TIM_Base_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM3_Init+0x64>
		Error_Handler();
 8001c20:	f000 faa0 	bl	8002164 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	481c      	ldr	r0, [pc, #112]	; (8001ca4 <MX_TIM3_Init+0xe4>)
 8001c32:	f003 f8dd 	bl	8004df0 <HAL_TIM_ConfigClockSource>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM3_Init+0x80>
		Error_Handler();
 8001c3c:	f000 fa92 	bl	8002164 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001c40:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <MX_TIM3_Init+0xe4>)
 8001c42:	f002 fcf4 	bl	800462e <HAL_TIM_PWM_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM3_Init+0x90>
		Error_Handler();
 8001c4c:	f000 fa8a 	bl	8002164 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001c58:	f107 0320 	add.w	r3, r7, #32
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4811      	ldr	r0, [pc, #68]	; (8001ca4 <MX_TIM3_Init+0xe4>)
 8001c60:	f003 fe34 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM3_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8001c6a:	f000 fa7b 	bl	8002164 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6e:	2360      	movs	r3, #96	; 0x60
 8001c70:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <MX_TIM3_Init+0xe4>)
 8001c86:	f002 fff1 	bl	8004c6c <HAL_TIM_PWM_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM3_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8001c90:	f000 fa68 	bl	8002164 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <MX_TIM3_Init+0xe4>)
 8001c96:	f000 fb13 	bl	80022c0 <HAL_TIM_MspPostInit>

}
 8001c9a:	bf00      	nop
 8001c9c:	3738      	adds	r7, #56	; 0x38
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200004b8 	.word	0x200004b8
 8001ca8:	40000400 	.word	0x40000400

08001cac <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001cb2:	f107 0318 	add.w	r3, r7, #24
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <MX_TIM4_Init+0xd8>)
 8001cd8:	4a2b      	ldr	r2, [pc, #172]	; (8001d88 <MX_TIM4_Init+0xdc>)
 8001cda:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 15;
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <MX_TIM4_Init+0xd8>)
 8001cde:	220f      	movs	r2, #15
 8001ce0:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <MX_TIM4_Init+0xd8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001ce8:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <MX_TIM4_Init+0xd8>)
 8001cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cee:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <MX_TIM4_Init+0xd8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <MX_TIM4_Init+0xd8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001cfc:	4821      	ldr	r0, [pc, #132]	; (8001d84 <MX_TIM4_Init+0xd8>)
 8001cfe:	f002 fc47 	bl	8004590 <HAL_TIM_Base_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM4_Init+0x60>
		Error_Handler();
 8001d08:	f000 fa2c 	bl	8002164 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d10:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001d12:	f107 0318 	add.w	r3, r7, #24
 8001d16:	4619      	mov	r1, r3
 8001d18:	481a      	ldr	r0, [pc, #104]	; (8001d84 <MX_TIM4_Init+0xd8>)
 8001d1a:	f003 f869 	bl	8004df0 <HAL_TIM_ConfigClockSource>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM4_Init+0x7c>
		Error_Handler();
 8001d24:	f000 fa1e 	bl	8002164 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 8001d28:	4816      	ldr	r0, [pc, #88]	; (8001d84 <MX_TIM4_Init+0xd8>)
 8001d2a:	f002 fda1 	bl	8004870 <HAL_TIM_IC_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM4_Init+0x8c>
		Error_Handler();
 8001d34:	f000 fa16 	bl	8002164 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	4619      	mov	r1, r3
 8001d46:	480f      	ldr	r0, [pc, #60]	; (8001d84 <MX_TIM4_Init+0xd8>)
 8001d48:	f003 fdc0 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM4_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 8001d52:	f000 fa07 	bl	8002164 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001d56:	230a      	movs	r3, #10
 8001d58:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 4;
 8001d62:	2304      	movs	r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001d66:	463b      	mov	r3, r7
 8001d68:	2200      	movs	r2, #0
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_TIM4_Init+0xd8>)
 8001d6e:	f002 fee0 	bl	8004b32 <HAL_TIM_IC_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM4_Init+0xd0>
		Error_Handler();
 8001d78:	f000 f9f4 	bl	8002164 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	3728      	adds	r7, #40	; 0x28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000500 	.word	0x20000500
 8001d88:	40000800 	.word	0x40000800

08001d8c <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08c      	sub	sp, #48	; 0x30
 8001d90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001d92:	f107 0320 	add.w	r3, r7, #32
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]
 8001dae:	615a      	str	r2, [r3, #20]
 8001db0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <MX_TIM12_Init+0xc0>)
 8001db6:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 29;
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001dba:	221d      	movs	r2, #29
 8001dbc:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 99;
 8001dc4:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001dc6:	2263      	movs	r2, #99	; 0x63
 8001dc8:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dca:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 8001dd6:	481c      	ldr	r0, [pc, #112]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001dd8:	f002 fbda 	bl	8004590 <HAL_TIM_Base_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM12_Init+0x5a>
		Error_Handler();
 8001de2:	f000 f9bf 	bl	8002164 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dea:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 8001dec:	f107 0320 	add.w	r3, r7, #32
 8001df0:	4619      	mov	r1, r3
 8001df2:	4815      	ldr	r0, [pc, #84]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001df4:	f002 fffc 	bl	8004df0 <HAL_TIM_ConfigClockSource>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM12_Init+0x76>
		Error_Handler();
 8001dfe:	f000 f9b1 	bl	8002164 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8001e02:	4811      	ldr	r0, [pc, #68]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001e04:	f002 fc13 	bl	800462e <HAL_TIM_PWM_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM12_Init+0x86>
		Error_Handler();
 8001e0e:	f000 f9a9 	bl	8002164 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e12:	2360      	movs	r3, #96	; 0x60
 8001e14:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1)
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2200      	movs	r2, #0
 8001e26:	4619      	mov	r1, r3
 8001e28:	4807      	ldr	r0, [pc, #28]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001e2a:	f002 ff1f 	bl	8004c6c <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM12_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8001e34:	f000 f996 	bl	8002164 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8001e38:	4803      	ldr	r0, [pc, #12]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001e3a:	f000 fa41 	bl	80022c0 <HAL_TIM_MspPostInit>

}
 8001e3e:	bf00      	nop
 8001e40:	3730      	adds	r7, #48	; 0x30
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000548 	.word	0x20000548
 8001e4c:	40001800 	.word	0x40001800

08001e50 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_UART4_Init+0x50>)
 8001e58:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e60:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e88:	f003 fdb0 	bl	80059ec <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_UART4_Init+0x46>
		Error_Handler();
 8001e92:	f000 f967 	bl	8002164 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000590 	.word	0x20000590
 8001ea0:	40004c00 	.word	0x40004c00

08001ea4 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_UART5_Init+0x4c>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <MX_UART5_Init+0x50>)
 8001eac:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <MX_UART5_Init+0x4c>)
 8001eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb4:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_UART5_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_UART5_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_UART5_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_UART5_Init+0x4c>)
 8001eca:	220c      	movs	r2, #12
 8001ecc:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_UART5_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_UART5_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_UART5_Init+0x4c>)
 8001edc:	f003 fd86 	bl	80059ec <HAL_UART_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_UART5_Init+0x46>
		Error_Handler();
 8001ee6:	f000 f93d 	bl	8002164 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200005d4 	.word	0x200005d4
 8001ef4:	40005000 	.word	0x40005000

08001ef8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001efe:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <MX_USART1_UART_Init+0x50>)
 8001f00:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f08:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f1e:	220c      	movs	r2, #12
 8001f20:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f30:	f003 fd5c 	bl	80059ec <HAL_UART_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001f3a:	f000 f913 	bl	8002164 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000618 	.word	0x20000618
 8001f48:	40011000 	.word	0x40011000

08001f4c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <MX_USART3_UART_Init+0x50>)
 8001f54:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f5c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f72:	220c      	movs	r2, #12
 8001f74:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f84:	f003 fd32 	bl	80059ec <HAL_UART_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001f8e:	f000 f8e9 	bl	8002164 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000065c 	.word	0x2000065c
 8001f9c:	40004800 	.word	0x40004800

08001fa0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <MX_DMA_Init+0x78>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <MX_DMA_Init+0x78>)
 8001fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <MX_DMA_Init+0x78>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_DMA_Init+0x78>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a13      	ldr	r2, [pc, #76]	; (8002018 <MX_DMA_Init+0x78>)
 8001fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_DMA_Init+0x78>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	200c      	movs	r0, #12
 8001fe4:	f000 fe8f 	bl	8002d06 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001fe8:	200c      	movs	r0, #12
 8001fea:	f000 fea8 	bl	8002d3e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	203a      	movs	r0, #58	; 0x3a
 8001ff4:	f000 fe87 	bl	8002d06 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ff8:	203a      	movs	r0, #58	; 0x3a
 8001ffa:	f000 fea0 	bl	8002d3e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2105      	movs	r1, #5
 8002002:	2046      	movs	r0, #70	; 0x46
 8002004:	f000 fe7f 	bl	8002d06 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002008:	2046      	movs	r0, #70	; 0x46
 800200a:	f000 fe98 	bl	8002d3e <HAL_NVIC_EnableIRQ>

}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <MX_GPIO_Init+0x138>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a46      	ldr	r2, [pc, #280]	; (8002154 <MX_GPIO_Init+0x138>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b44      	ldr	r3, [pc, #272]	; (8002154 <MX_GPIO_Init+0x138>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b40      	ldr	r3, [pc, #256]	; (8002154 <MX_GPIO_Init+0x138>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a3f      	ldr	r2, [pc, #252]	; (8002154 <MX_GPIO_Init+0x138>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b3d      	ldr	r3, [pc, #244]	; (8002154 <MX_GPIO_Init+0x138>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	4b39      	ldr	r3, [pc, #228]	; (8002154 <MX_GPIO_Init+0x138>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a38      	ldr	r2, [pc, #224]	; (8002154 <MX_GPIO_Init+0x138>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b36      	ldr	r3, [pc, #216]	; (8002154 <MX_GPIO_Init+0x138>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	4b32      	ldr	r3, [pc, #200]	; (8002154 <MX_GPIO_Init+0x138>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a31      	ldr	r2, [pc, #196]	; (8002154 <MX_GPIO_Init+0x138>)
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <MX_GPIO_Init+0x138>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80020a2:	2200      	movs	r2, #0
 80020a4:	f24c 31cc 	movw	r1, #50124	; 0xc3cc
 80020a8:	482b      	ldr	r0, [pc, #172]	; (8002158 <MX_GPIO_Init+0x13c>)
 80020aa:	f001 fc07 	bl	80038bc <HAL_GPIO_WritePin>
			GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6
					| GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_12,
 80020ae:	2200      	movs	r2, #0
 80020b0:	f641 0104 	movw	r1, #6148	; 0x1804
 80020b4:	4829      	ldr	r0, [pc, #164]	; (800215c <MX_GPIO_Init+0x140>)
 80020b6:	f001 fc01 	bl	80038bc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80020ba:	2200      	movs	r2, #0
 80020bc:	f24b 01b8 	movw	r1, #45240	; 0xb0b8
 80020c0:	4827      	ldr	r0, [pc, #156]	; (8002160 <MX_GPIO_Init+0x144>)
 80020c2:	f001 fbfb 	bl	80038bc <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15 | GPIO_PIN_3 | GPIO_PIN_4
					| GPIO_PIN_5 | GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pins : PC14 PC15 PC2 PC3
	 PC6 PC7 PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_2 | GPIO_PIN_3
 80020c6:	f24c 33cc 	movw	r3, #50124	; 0xc3cc
 80020ca:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	481e      	ldr	r0, [pc, #120]	; (8002158 <MX_GPIO_Init+0x13c>)
 80020e0:	f001 fa58 	bl	8003594 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020e4:	2301      	movs	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	4817      	ldr	r0, [pc, #92]	; (8002158 <MX_GPIO_Init+0x13c>)
 80020fa:	f001 fa4b 	bl	8003594 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_12;
 80020fe:	f641 0304 	movw	r3, #6148	; 0x1804
 8002102:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002104:	2301      	movs	r3, #1
 8002106:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	4811      	ldr	r0, [pc, #68]	; (800215c <MX_GPIO_Init+0x140>)
 8002118:	f001 fa3c 	bl	8003594 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB15 PB3
	 PB4 PB5 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15 | GPIO_PIN_3
 800211c:	f24b 03b8 	movw	r3, #45240	; 0xb0b8
 8002120:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002122:	2301      	movs	r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	480a      	ldr	r0, [pc, #40]	; (8002160 <MX_GPIO_Init+0x144>)
 8002136:	f001 fa2d 	bl	8003594 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2105      	movs	r1, #5
 800213e:	2006      	movs	r0, #6
 8002140:	f000 fde1 	bl	8002d06 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002144:	2006      	movs	r0, #6
 8002146:	f000 fdfa 	bl	8002d3e <HAL_NVIC_EnableIRQ>

}
 800214a:	bf00      	nop
 800214c:	3728      	adds	r7, #40	; 0x28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40020800 	.word	0x40020800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400

08002164 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002168:	b672      	cpsid	i
}
 800216a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800216c:	e7fe      	b.n	800216c <Error_Handler+0x8>
	...

08002170 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_MspInit+0x54>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_MspInit+0x54>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_MspInit+0x54>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_MspInit+0x54>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <HAL_MspInit+0x54>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_MspInit+0x54>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	210f      	movs	r1, #15
 80021b2:	f06f 0001 	mvn.w	r0, #1
 80021b6:	f000 fda6 	bl	8002d06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	; 0x30
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a31      	ldr	r2, [pc, #196]	; (80022ac <HAL_TIM_Base_MspInit+0xe4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10e      	bne.n	8002208 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <HAL_TIM_Base_MspInit+0xe8>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a2f      	ldr	r2, [pc, #188]	; (80022b0 <HAL_TIM_Base_MspInit+0xe8>)
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_TIM_Base_MspInit+0xe8>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002206:	e04c      	b.n	80022a2 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <HAL_TIM_Base_MspInit+0xec>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d134      	bne.n	800227c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <HAL_TIM_Base_MspInit+0xe8>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4a25      	ldr	r2, [pc, #148]	; (80022b0 <HAL_TIM_Base_MspInit+0xe8>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_TIM_Base_MspInit+0xe8>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <HAL_TIM_Base_MspInit+0xe8>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <HAL_TIM_Base_MspInit+0xe8>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_TIM_Base_MspInit+0xe8>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800224a:	2340      	movs	r3, #64	; 0x40
 800224c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800225a:	2302      	movs	r3, #2
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	4619      	mov	r1, r3
 8002264:	4814      	ldr	r0, [pc, #80]	; (80022b8 <HAL_TIM_Base_MspInit+0xf0>)
 8002266:	f001 f995 	bl	8003594 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2105      	movs	r1, #5
 800226e:	201e      	movs	r0, #30
 8002270:	f000 fd49 	bl	8002d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002274:	201e      	movs	r0, #30
 8002276:	f000 fd62 	bl	8002d3e <HAL_NVIC_EnableIRQ>
}
 800227a:	e012      	b.n	80022a2 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM12)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_TIM_Base_MspInit+0xf4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10d      	bne.n	80022a2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_TIM_Base_MspInit+0xe8>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_TIM_Base_MspInit+0xe8>)
 8002290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_TIM_Base_MspInit+0xe8>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
}
 80022a2:	bf00      	nop
 80022a4:	3730      	adds	r7, #48	; 0x30
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40000800 	.word	0x40000800
 80022b8:	40020400 	.word	0x40020400
 80022bc:	40001800 	.word	0x40001800

080022c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a24      	ldr	r2, [pc, #144]	; (8002370 <HAL_TIM_MspPostInit+0xb0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d11e      	bne.n	8002320 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <HAL_TIM_MspPostInit+0xb4>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a22      	ldr	r2, [pc, #136]	; (8002374 <HAL_TIM_MspPostInit+0xb4>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HAL_TIM_MspPostInit+0xb4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022fe:	2340      	movs	r3, #64	; 0x40
 8002300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800230e:	2302      	movs	r3, #2
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	4817      	ldr	r0, [pc, #92]	; (8002378 <HAL_TIM_MspPostInit+0xb8>)
 800231a:	f001 f93b 	bl	8003594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800231e:	e023      	b.n	8002368 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a15      	ldr	r2, [pc, #84]	; (800237c <HAL_TIM_MspPostInit+0xbc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d11e      	bne.n	8002368 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_TIM_MspPostInit+0xb4>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <HAL_TIM_MspPostInit+0xb4>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_TIM_MspPostInit+0xb4>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002346:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2300      	movs	r3, #0
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002358:	2309      	movs	r3, #9
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4619      	mov	r1, r3
 8002362:	4807      	ldr	r0, [pc, #28]	; (8002380 <HAL_TIM_MspPostInit+0xc0>)
 8002364:	f001 f916 	bl	8003594 <HAL_GPIO_Init>
}
 8002368:	bf00      	nop
 800236a:	3728      	adds	r7, #40	; 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40000400 	.word	0x40000400
 8002374:	40023800 	.word	0x40023800
 8002378:	40020000 	.word	0x40020000
 800237c:	40001800 	.word	0x40001800
 8002380:	40020400 	.word	0x40020400

08002384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b092      	sub	sp, #72	; 0x48
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a94      	ldr	r2, [pc, #592]	; (80025f4 <HAL_UART_MspInit+0x270>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d135      	bne.n	8002412 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
 80023aa:	4b93      	ldr	r3, [pc, #588]	; (80025f8 <HAL_UART_MspInit+0x274>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a92      	ldr	r2, [pc, #584]	; (80025f8 <HAL_UART_MspInit+0x274>)
 80023b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b90      	ldr	r3, [pc, #576]	; (80025f8 <HAL_UART_MspInit+0x274>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	4b8c      	ldr	r3, [pc, #560]	; (80025f8 <HAL_UART_MspInit+0x274>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a8b      	ldr	r2, [pc, #556]	; (80025f8 <HAL_UART_MspInit+0x274>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_UART_MspInit+0x274>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ec:	2303      	movs	r3, #3
 80023ee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023f0:	2308      	movs	r3, #8
 80023f2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023f8:	4619      	mov	r1, r3
 80023fa:	4880      	ldr	r0, [pc, #512]	; (80025fc <HAL_UART_MspInit+0x278>)
 80023fc:	f001 f8ca 	bl	8003594 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2105      	movs	r1, #5
 8002404:	2034      	movs	r0, #52	; 0x34
 8002406:	f000 fc7e 	bl	8002d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800240a:	2034      	movs	r0, #52	; 0x34
 800240c:	f000 fc97 	bl	8002d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002410:	e185      	b.n	800271e <HAL_UART_MspInit+0x39a>
  else if(huart->Instance==UART5)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7a      	ldr	r2, [pc, #488]	; (8002600 <HAL_UART_MspInit+0x27c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d153      	bne.n	80024c4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002420:	4b75      	ldr	r3, [pc, #468]	; (80025f8 <HAL_UART_MspInit+0x274>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4a74      	ldr	r2, [pc, #464]	; (80025f8 <HAL_UART_MspInit+0x274>)
 8002426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800242a:	6413      	str	r3, [r2, #64]	; 0x40
 800242c:	4b72      	ldr	r3, [pc, #456]	; (80025f8 <HAL_UART_MspInit+0x274>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
 800243c:	4b6e      	ldr	r3, [pc, #440]	; (80025f8 <HAL_UART_MspInit+0x274>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	4a6d      	ldr	r2, [pc, #436]	; (80025f8 <HAL_UART_MspInit+0x274>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6313      	str	r3, [r2, #48]	; 0x30
 8002448:	4b6b      	ldr	r3, [pc, #428]	; (80025f8 <HAL_UART_MspInit+0x274>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	4b67      	ldr	r3, [pc, #412]	; (80025f8 <HAL_UART_MspInit+0x274>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4a66      	ldr	r2, [pc, #408]	; (80025f8 <HAL_UART_MspInit+0x274>)
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	6313      	str	r3, [r2, #48]	; 0x30
 8002464:	4b64      	ldr	r3, [pc, #400]	; (80025f8 <HAL_UART_MspInit+0x274>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002482:	2308      	movs	r3, #8
 8002484:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002486:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800248a:	4619      	mov	r1, r3
 800248c:	485b      	ldr	r0, [pc, #364]	; (80025fc <HAL_UART_MspInit+0x278>)
 800248e:	f001 f881 	bl	8003594 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002492:	2304      	movs	r3, #4
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024a2:	2308      	movs	r3, #8
 80024a4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024aa:	4619      	mov	r1, r3
 80024ac:	4855      	ldr	r0, [pc, #340]	; (8002604 <HAL_UART_MspInit+0x280>)
 80024ae:	f001 f871 	bl	8003594 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2105      	movs	r1, #5
 80024b6:	2035      	movs	r0, #53	; 0x35
 80024b8:	f000 fc25 	bl	8002d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80024bc:	2035      	movs	r0, #53	; 0x35
 80024be:	f000 fc3e 	bl	8002d3e <HAL_NVIC_EnableIRQ>
}
 80024c2:	e12c      	b.n	800271e <HAL_UART_MspInit+0x39a>
  else if(huart->Instance==USART1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a4f      	ldr	r2, [pc, #316]	; (8002608 <HAL_UART_MspInit+0x284>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	f040 80a8 	bne.w	8002620 <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	4b48      	ldr	r3, [pc, #288]	; (80025f8 <HAL_UART_MspInit+0x274>)
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	4a47      	ldr	r2, [pc, #284]	; (80025f8 <HAL_UART_MspInit+0x274>)
 80024da:	f043 0310 	orr.w	r3, r3, #16
 80024de:	6453      	str	r3, [r2, #68]	; 0x44
 80024e0:	4b45      	ldr	r3, [pc, #276]	; (80025f8 <HAL_UART_MspInit+0x274>)
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_UART_MspInit+0x274>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	4a40      	ldr	r2, [pc, #256]	; (80025f8 <HAL_UART_MspInit+0x274>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6313      	str	r3, [r2, #48]	; 0x30
 80024fc:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <HAL_UART_MspInit+0x274>)
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002508:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800251a:	2307      	movs	r3, #7
 800251c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002522:	4619      	mov	r1, r3
 8002524:	4839      	ldr	r0, [pc, #228]	; (800260c <HAL_UART_MspInit+0x288>)
 8002526:	f001 f835 	bl	8003594 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800252a:	4b39      	ldr	r3, [pc, #228]	; (8002610 <HAL_UART_MspInit+0x28c>)
 800252c:	4a39      	ldr	r2, [pc, #228]	; (8002614 <HAL_UART_MspInit+0x290>)
 800252e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002530:	4b37      	ldr	r3, [pc, #220]	; (8002610 <HAL_UART_MspInit+0x28c>)
 8002532:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002536:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <HAL_UART_MspInit+0x28c>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <HAL_UART_MspInit+0x28c>)
 8002540:	2200      	movs	r2, #0
 8002542:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002544:	4b32      	ldr	r3, [pc, #200]	; (8002610 <HAL_UART_MspInit+0x28c>)
 8002546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800254a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800254c:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_UART_MspInit+0x28c>)
 800254e:	2200      	movs	r2, #0
 8002550:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_UART_MspInit+0x28c>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002558:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_UART_MspInit+0x28c>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800255e:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <HAL_UART_MspInit+0x28c>)
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002564:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <HAL_UART_MspInit+0x28c>)
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800256a:	4829      	ldr	r0, [pc, #164]	; (8002610 <HAL_UART_MspInit+0x28c>)
 800256c:	f000 fc10 	bl	8002d90 <HAL_DMA_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 8002576:	f7ff fdf5 	bl	8002164 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a24      	ldr	r2, [pc, #144]	; (8002610 <HAL_UART_MspInit+0x28c>)
 800257e:	639a      	str	r2, [r3, #56]	; 0x38
 8002580:	4a23      	ldr	r2, [pc, #140]	; (8002610 <HAL_UART_MspInit+0x28c>)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <HAL_UART_MspInit+0x294>)
 8002588:	4a24      	ldr	r2, [pc, #144]	; (800261c <HAL_UART_MspInit+0x298>)
 800258a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800258c:	4b22      	ldr	r3, [pc, #136]	; (8002618 <HAL_UART_MspInit+0x294>)
 800258e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002592:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_UART_MspInit+0x294>)
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <HAL_UART_MspInit+0x294>)
 800259c:	2200      	movs	r2, #0
 800259e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_UART_MspInit+0x294>)
 80025a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_UART_MspInit+0x294>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_UART_MspInit+0x294>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025b4:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_UART_MspInit+0x294>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_UART_MspInit+0x294>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_UART_MspInit+0x294>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025c6:	4814      	ldr	r0, [pc, #80]	; (8002618 <HAL_UART_MspInit+0x294>)
 80025c8:	f000 fbe2 	bl	8002d90 <HAL_DMA_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_UART_MspInit+0x252>
      Error_Handler();
 80025d2:	f7ff fdc7 	bl	8002164 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_UART_MspInit+0x294>)
 80025da:	635a      	str	r2, [r3, #52]	; 0x34
 80025dc:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <HAL_UART_MspInit+0x294>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2105      	movs	r1, #5
 80025e6:	2025      	movs	r0, #37	; 0x25
 80025e8:	f000 fb8d 	bl	8002d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025ec:	2025      	movs	r0, #37	; 0x25
 80025ee:	f000 fba6 	bl	8002d3e <HAL_NVIC_EnableIRQ>
}
 80025f2:	e094      	b.n	800271e <HAL_UART_MspInit+0x39a>
 80025f4:	40004c00 	.word	0x40004c00
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020800 	.word	0x40020800
 8002600:	40005000 	.word	0x40005000
 8002604:	40020c00 	.word	0x40020c00
 8002608:	40011000 	.word	0x40011000
 800260c:	40020000 	.word	0x40020000
 8002610:	200006a0 	.word	0x200006a0
 8002614:	40026440 	.word	0x40026440
 8002618:	20000700 	.word	0x20000700
 800261c:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART3)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a40      	ldr	r2, [pc, #256]	; (8002728 <HAL_UART_MspInit+0x3a4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d179      	bne.n	800271e <HAL_UART_MspInit+0x39a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	4b3f      	ldr	r3, [pc, #252]	; (800272c <HAL_UART_MspInit+0x3a8>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a3e      	ldr	r2, [pc, #248]	; (800272c <HAL_UART_MspInit+0x3a8>)
 8002634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b3c      	ldr	r3, [pc, #240]	; (800272c <HAL_UART_MspInit+0x3a8>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b38      	ldr	r3, [pc, #224]	; (800272c <HAL_UART_MspInit+0x3a8>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a37      	ldr	r2, [pc, #220]	; (800272c <HAL_UART_MspInit+0x3a8>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <HAL_UART_MspInit+0x3a8>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b31      	ldr	r3, [pc, #196]	; (800272c <HAL_UART_MspInit+0x3a8>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a30      	ldr	r2, [pc, #192]	; (800272c <HAL_UART_MspInit+0x3a8>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b2e      	ldr	r3, [pc, #184]	; (800272c <HAL_UART_MspInit+0x3a8>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800267e:	2320      	movs	r3, #32
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800268e:	2307      	movs	r3, #7
 8002690:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002692:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002696:	4619      	mov	r1, r3
 8002698:	4825      	ldr	r0, [pc, #148]	; (8002730 <HAL_UART_MspInit+0x3ac>)
 800269a:	f000 ff7b 	bl	8003594 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800269e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026b0:	2307      	movs	r3, #7
 80026b2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026b8:	4619      	mov	r1, r3
 80026ba:	481e      	ldr	r0, [pc, #120]	; (8002734 <HAL_UART_MspInit+0x3b0>)
 80026bc:	f000 ff6a 	bl	8003594 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 80026c2:	4a1e      	ldr	r2, [pc, #120]	; (800273c <HAL_UART_MspInit+0x3b8>)
 80026c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80026c6:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 80026c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026da:	4b17      	ldr	r3, [pc, #92]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 80026dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 80026f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026fa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 80026fe:	2200      	movs	r2, #0
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002702:	480d      	ldr	r0, [pc, #52]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 8002704:	f000 fb44 	bl	8002d90 <HAL_DMA_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_UART_MspInit+0x38e>
      Error_Handler();
 800270e:	f7ff fd29 	bl	8002164 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 8002716:	639a      	str	r2, [r3, #56]	; 0x38
 8002718:	4a07      	ldr	r2, [pc, #28]	; (8002738 <HAL_UART_MspInit+0x3b4>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800271e:	bf00      	nop
 8002720:	3748      	adds	r7, #72	; 0x48
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40004800 	.word	0x40004800
 800272c:	40023800 	.word	0x40023800
 8002730:	40020800 	.word	0x40020800
 8002734:	40020400 	.word	0x40020400
 8002738:	20000760 	.word	0x20000760
 800273c:	40026028 	.word	0x40026028

08002740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002744:	e7fe      	b.n	8002744 <NMI_Handler+0x4>

08002746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800274a:	e7fe      	b.n	800274a <HardFault_Handler+0x4>

0800274c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <MemManage_Handler+0x4>

08002752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <BusFault_Handler+0x4>

08002758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <UsageFault_Handler+0x4>

0800275e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002770:	f000 f9aa 	bl	8002ac8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002774:	f005 ff5e 	bl	8008634 <xTaskGetSchedulerState>
 8002778:	4603      	mov	r3, r0
 800277a:	2b01      	cmp	r3, #1
 800277c:	d001      	beq.n	8002782 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800277e:	f006 fab3 	bl	8008ce8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}

08002786 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800278a:	2001      	movs	r0, #1
 800278c:	f001 f8b0 	bl	80038f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}

08002794 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <DMA1_Stream1_IRQHandler+0x10>)
 800279a:	f000 fc91 	bl	80030c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000760 	.word	0x20000760

080027a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <TIM4_IRQHandler+0x10>)
 80027ae:	f002 f8b8 	bl	8004922 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000500 	.word	0x20000500

080027bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <USART1_IRQHandler+0x10>)
 80027c2:	f003 fb43 	bl	8005e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000618 	.word	0x20000618

080027d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80027d4:	4802      	ldr	r0, [pc, #8]	; (80027e0 <UART4_IRQHandler+0x10>)
 80027d6:	f003 fb39 	bl	8005e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000590 	.word	0x20000590

080027e4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80027e8:	4802      	ldr	r0, [pc, #8]	; (80027f4 <UART5_IRQHandler+0x10>)
 80027ea:	f003 fb2f 	bl	8005e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200005d4 	.word	0x200005d4

080027f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <DMA2_Stream2_IRQHandler+0x10>)
 80027fe:	f000 fc5f 	bl	80030c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200006a0 	.word	0x200006a0

0800280c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <DMA2_Stream7_IRQHandler+0x10>)
 8002812:	f000 fc55 	bl	80030c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000700 	.word	0x20000700

08002820 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
	return 1;
 8002824:	2301      	movs	r3, #1
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <_kill>:

int _kill(int pid, int sig)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800283a:	f006 fccf 	bl	80091dc <__errno>
 800283e:	4603      	mov	r3, r0
 8002840:	2216      	movs	r2, #22
 8002842:	601a      	str	r2, [r3, #0]
	return -1;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_exit>:

void _exit (int status)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002858:	f04f 31ff 	mov.w	r1, #4294967295
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ffe7 	bl	8002830 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002862:	e7fe      	b.n	8002862 <_exit+0x12>

08002864 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e00a      	b.n	800288c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002876:	f3af 8000 	nop.w
 800287a:	4601      	mov	r1, r0
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	60ba      	str	r2, [r7, #8]
 8002882:	b2ca      	uxtb	r2, r1
 8002884:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3301      	adds	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	429a      	cmp	r2, r3
 8002892:	dbf0      	blt.n	8002876 <_read+0x12>
	}

return len;
 8002894:	687b      	ldr	r3, [r7, #4]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e009      	b.n	80028c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	60ba      	str	r2, [r7, #8]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3301      	adds	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	dbf1      	blt.n	80028b0 <_write+0x12>
	}
	return len;
 80028cc:	687b      	ldr	r3, [r7, #4]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_close>:

int _close(int file)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
	return -1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_isatty>:

int _isatty(int file)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
	return 1;
 8002916:	2301      	movs	r3, #1
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
	return 0;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <_sbrk+0x5c>)
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <_sbrk+0x60>)
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <_sbrk+0x64>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <_sbrk+0x64>)
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <_sbrk+0x68>)
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <_sbrk+0x64>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	429a      	cmp	r2, r3
 800296e:	d207      	bcs.n	8002980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002970:	f006 fc34 	bl	80091dc <__errno>
 8002974:	4603      	mov	r3, r0
 8002976:	220c      	movs	r2, #12
 8002978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800297a:	f04f 33ff 	mov.w	r3, #4294967295
 800297e:	e009      	b.n	8002994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <_sbrk+0x64>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <_sbrk+0x64>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <_sbrk+0x64>)
 8002990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002992:	68fb      	ldr	r3, [r7, #12]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20020000 	.word	0x20020000
 80029a0:	00000400 	.word	0x00000400
 80029a4:	2000081c 	.word	0x2000081c
 80029a8:	200045a0 	.word	0x200045a0

080029ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <SystemInit+0x20>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	4a05      	ldr	r2, [pc, #20]	; (80029cc <SystemInit+0x20>)
 80029b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029d4:	480d      	ldr	r0, [pc, #52]	; (8002a0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029d6:	490e      	ldr	r1, [pc, #56]	; (8002a10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029d8:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029dc:	e002      	b.n	80029e4 <LoopCopyDataInit>

080029de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029e2:	3304      	adds	r3, #4

080029e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e8:	d3f9      	bcc.n	80029de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ea:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029ec:	4c0b      	ldr	r4, [pc, #44]	; (8002a1c <LoopFillZerobss+0x26>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f0:	e001      	b.n	80029f6 <LoopFillZerobss>

080029f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f4:	3204      	adds	r2, #4

080029f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f8:	d3fb      	bcc.n	80029f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029fa:	f7ff ffd7 	bl	80029ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029fe:	f006 fce9 	bl	80093d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a02:	f7ff f835 	bl	8001a70 <main>
  bx  lr    
 8002a06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a10:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002a14:	0800c5c4 	.word	0x0800c5c4
  ldr r2, =_sbss
 8002a18:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002a1c:	2000459c 	.word	0x2000459c

08002a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a20:	e7fe      	b.n	8002a20 <ADC_IRQHandler>
	...

08002a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <HAL_Init+0x40>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0d      	ldr	r2, [pc, #52]	; (8002a64 <HAL_Init+0x40>)
 8002a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_Init+0x40>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <HAL_Init+0x40>)
 8002a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <HAL_Init+0x40>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <HAL_Init+0x40>)
 8002a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a4c:	2003      	movs	r0, #3
 8002a4e:	f000 f94f 	bl	8002cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a52:	200f      	movs	r0, #15
 8002a54:	f000 f808 	bl	8002a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a58:	f7ff fb8a 	bl	8002170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023c00 	.word	0x40023c00

08002a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_InitTick+0x54>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_InitTick+0x58>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f975 	bl	8002d76 <HAL_SYSTICK_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e00e      	b.n	8002ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b0f      	cmp	r3, #15
 8002a9a:	d80a      	bhi.n	8002ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa4:	f000 f92f 	bl	8002d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa8:	4a06      	ldr	r2, [pc, #24]	; (8002ac4 <HAL_InitTick+0x5c>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e000      	b.n	8002ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	2000000c 	.word	0x2000000c
 8002ac4:	20000008 	.word	0x20000008

08002ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_IncTick+0x20>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_IncTick+0x24>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_IncTick+0x24>)
 8002ada:	6013      	str	r3, [r2, #0]
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	2000000c 	.word	0x2000000c
 8002aec:	20000820 	.word	0x20000820

08002af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return uwTick;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_GetTick+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000820 	.word	0x20000820

08002b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b24:	4013      	ands	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	60d3      	str	r3, [r2, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <__NVIC_GetPriorityGrouping+0x18>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	f003 0307 	and.w	r3, r3, #7
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	db0b      	blt.n	8002b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4907      	ldr	r1, [pc, #28]	; (8002ba4 <__NVIC_EnableIRQ+0x38>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e100 	.word	0xe000e100

08002ba8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db12      	blt.n	8002be0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	490a      	ldr	r1, [pc, #40]	; (8002bec <__NVIC_DisableIRQ+0x44>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	3320      	adds	r3, #32
 8002bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002bd4:	f3bf 8f4f 	dsb	sy
}
 8002bd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bda:	f3bf 8f6f 	isb	sy
}
 8002bde:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100

08002bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	6039      	str	r1, [r7, #0]
 8002bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	db0a      	blt.n	8002c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	490c      	ldr	r1, [pc, #48]	; (8002c3c <__NVIC_SetPriority+0x4c>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	0112      	lsls	r2, r2, #4
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	440b      	add	r3, r1
 8002c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c18:	e00a      	b.n	8002c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4908      	ldr	r1, [pc, #32]	; (8002c40 <__NVIC_SetPriority+0x50>)
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	3b04      	subs	r3, #4
 8002c28:	0112      	lsls	r2, r2, #4
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	761a      	strb	r2, [r3, #24]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000e100 	.word	0xe000e100
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f1c3 0307 	rsb	r3, r3, #7
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	bf28      	it	cs
 8002c62:	2304      	movcs	r3, #4
 8002c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	2b06      	cmp	r3, #6
 8002c6c:	d902      	bls.n	8002c74 <NVIC_EncodePriority+0x30>
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3b03      	subs	r3, #3
 8002c72:	e000      	b.n	8002c76 <NVIC_EncodePriority+0x32>
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43da      	mvns	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	401a      	ands	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	43d9      	mvns	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	4313      	orrs	r3, r2
         );
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3724      	adds	r7, #36	; 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cbc:	d301      	bcc.n	8002cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e00f      	b.n	8002ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <SysTick_Config+0x40>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cca:	210f      	movs	r1, #15
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd0:	f7ff ff8e 	bl	8002bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <SysTick_Config+0x40>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <SysTick_Config+0x40>)
 8002cdc:	2207      	movs	r2, #7
 8002cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	e000e010 	.word	0xe000e010

08002cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff05 	bl	8002b08 <__NVIC_SetPriorityGrouping>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d18:	f7ff ff1a 	bl	8002b50 <__NVIC_GetPriorityGrouping>
 8002d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7ff ff8e 	bl	8002c44 <NVIC_EncodePriority>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff5d 	bl	8002bf0 <__NVIC_SetPriority>
}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff0d 	bl	8002b6c <__NVIC_EnableIRQ>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	4603      	mov	r3, r0
 8002d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff1d 	bl	8002ba8 <__NVIC_DisableIRQ>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff ff94 	bl	8002cac <SysTick_Config>
 8002d84:	4603      	mov	r3, r0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d9c:	f7ff fea8 	bl	8002af0 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e099      	b.n	8002ee0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dcc:	e00f      	b.n	8002dee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dce:	f7ff fe8f 	bl	8002af0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d908      	bls.n	8002dee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2203      	movs	r2, #3
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e078      	b.n	8002ee0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e8      	bne.n	8002dce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4b38      	ldr	r3, [pc, #224]	; (8002ee8 <HAL_DMA_Init+0x158>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d107      	bne.n	8002e58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	4313      	orrs	r3, r2
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f023 0307 	bic.w	r3, r3, #7
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d117      	bne.n	8002eb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00e      	beq.n	8002eb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fb01 	bl	800349c <DMA_CheckFifoParam>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2240      	movs	r2, #64	; 0x40
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e016      	b.n	8002ee0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fab8 	bl	8003430 <DMA_CalcBaseAndBitshift>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec8:	223f      	movs	r2, #63	; 0x3f
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	f010803f 	.word	0xf010803f

08002eec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_DMA_Start_IT+0x26>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e040      	b.n	8002f94 <HAL_DMA_Start_IT+0xa8>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d12f      	bne.n	8002f86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fa4a 	bl	80033d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	223f      	movs	r2, #63	; 0x3f
 8002f46:	409a      	lsls	r2, r3
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0216 	orr.w	r2, r2, #22
 8002f5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0208 	orr.w	r2, r2, #8
 8002f72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e005      	b.n	8002f92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002faa:	f7ff fda1 	bl	8002af0 <HAL_GetTick>
 8002fae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d008      	beq.n	8002fce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e052      	b.n	8003074 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0216 	bic.w	r2, r2, #22
 8002fdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <HAL_DMA_Abort+0x62>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0208 	bic.w	r2, r2, #8
 800300c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800301e:	e013      	b.n	8003048 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003020:	f7ff fd66 	bl	8002af0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b05      	cmp	r3, #5
 800302c:	d90c      	bls.n	8003048 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2203      	movs	r2, #3
 8003038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e015      	b.n	8003074 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1e4      	bne.n	8003020 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	223f      	movs	r2, #63	; 0x3f
 800305c:	409a      	lsls	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d004      	beq.n	800309a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e00c      	b.n	80030b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2205      	movs	r2, #5
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030cc:	4b8e      	ldr	r3, [pc, #568]	; (8003308 <HAL_DMA_IRQHandler+0x248>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a8e      	ldr	r2, [pc, #568]	; (800330c <HAL_DMA_IRQHandler+0x24c>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	0a9b      	lsrs	r3, r3, #10
 80030d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ea:	2208      	movs	r2, #8
 80030ec:	409a      	lsls	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d01a      	beq.n	800312c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d013      	beq.n	800312c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0204 	bic.w	r2, r2, #4
 8003112:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003118:	2208      	movs	r2, #8
 800311a:	409a      	lsls	r2, r3
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	f043 0201 	orr.w	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003130:	2201      	movs	r2, #1
 8003132:	409a      	lsls	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4013      	ands	r3, r2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d012      	beq.n	8003162 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	2201      	movs	r2, #1
 8003150:	409a      	lsls	r2, r3
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	f043 0202 	orr.w	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	2204      	movs	r2, #4
 8003168:	409a      	lsls	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d012      	beq.n	8003198 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	2204      	movs	r2, #4
 8003186:	409a      	lsls	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	f043 0204 	orr.w	r2, r3, #4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	2210      	movs	r2, #16
 800319e:	409a      	lsls	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d043      	beq.n	8003230 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d03c      	beq.n	8003230 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	2210      	movs	r2, #16
 80031bc:	409a      	lsls	r2, r3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d018      	beq.n	8003202 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d108      	bne.n	80031f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d024      	beq.n	8003230 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4798      	blx	r3
 80031ee:	e01f      	b.n	8003230 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01b      	beq.n	8003230 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4798      	blx	r3
 8003200:	e016      	b.n	8003230 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d107      	bne.n	8003220 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0208 	bic.w	r2, r2, #8
 800321e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	2220      	movs	r2, #32
 8003236:	409a      	lsls	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 808f 	beq.w	8003360 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8087 	beq.w	8003360 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	2220      	movs	r2, #32
 8003258:	409a      	lsls	r2, r3
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b05      	cmp	r3, #5
 8003268:	d136      	bne.n	80032d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0216 	bic.w	r2, r2, #22
 8003278:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003288:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d103      	bne.n	800329a <HAL_DMA_IRQHandler+0x1da>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0208 	bic.w	r2, r2, #8
 80032a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	223f      	movs	r2, #63	; 0x3f
 80032b0:	409a      	lsls	r2, r3
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d07e      	beq.n	80033cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	4798      	blx	r3
        }
        return;
 80032d6:	e079      	b.n	80033cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01d      	beq.n	8003322 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10d      	bne.n	8003310 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d031      	beq.n	8003360 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
 8003304:	e02c      	b.n	8003360 <HAL_DMA_IRQHandler+0x2a0>
 8003306:	bf00      	nop
 8003308:	20000004 	.word	0x20000004
 800330c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d023      	beq.n	8003360 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
 8003320:	e01e      	b.n	8003360 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10f      	bne.n	8003350 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0210 	bic.w	r2, r2, #16
 800333e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003364:	2b00      	cmp	r3, #0
 8003366:	d032      	beq.n	80033ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d022      	beq.n	80033ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2205      	movs	r2, #5
 8003378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	3301      	adds	r3, #1
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	d307      	bcc.n	80033a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f2      	bne.n	800338c <HAL_DMA_IRQHandler+0x2cc>
 80033a6:	e000      	b.n	80033aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
 80033ca:	e000      	b.n	80033ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80033cc:	bf00      	nop
    }
  }
}
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b40      	cmp	r3, #64	; 0x40
 8003400:	d108      	bne.n	8003414 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003412:	e007      	b.n	8003424 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	60da      	str	r2, [r3, #12]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	3b10      	subs	r3, #16
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <DMA_CalcBaseAndBitshift+0x64>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800344a:	4a13      	ldr	r2, [pc, #76]	; (8003498 <DMA_CalcBaseAndBitshift+0x68>)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d909      	bls.n	8003472 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	1d1a      	adds	r2, r3, #4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	659a      	str	r2, [r3, #88]	; 0x58
 8003470:	e007      	b.n	8003482 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800347a:	f023 0303 	bic.w	r3, r3, #3
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	aaaaaaab 	.word	0xaaaaaaab
 8003498:	0800c1cc 	.word	0x0800c1cc

0800349c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d11f      	bne.n	80034f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d856      	bhi.n	800356a <DMA_CheckFifoParam+0xce>
 80034bc:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <DMA_CheckFifoParam+0x28>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080034d5 	.word	0x080034d5
 80034c8:	080034e7 	.word	0x080034e7
 80034cc:	080034d5 	.word	0x080034d5
 80034d0:	0800356b 	.word	0x0800356b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d046      	beq.n	800356e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e4:	e043      	b.n	800356e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ee:	d140      	bne.n	8003572 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f4:	e03d      	b.n	8003572 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034fe:	d121      	bne.n	8003544 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d837      	bhi.n	8003576 <DMA_CheckFifoParam+0xda>
 8003506:	a201      	add	r2, pc, #4	; (adr r2, 800350c <DMA_CheckFifoParam+0x70>)
 8003508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350c:	0800351d 	.word	0x0800351d
 8003510:	08003523 	.word	0x08003523
 8003514:	0800351d 	.word	0x0800351d
 8003518:	08003535 	.word	0x08003535
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
      break;
 8003520:	e030      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d025      	beq.n	800357a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003532:	e022      	b.n	800357a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800353c:	d11f      	bne.n	800357e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003542:	e01c      	b.n	800357e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d903      	bls.n	8003552 <DMA_CheckFifoParam+0xb6>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b03      	cmp	r3, #3
 800354e:	d003      	beq.n	8003558 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003550:	e018      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	73fb      	strb	r3, [r7, #15]
      break;
 8003556:	e015      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00e      	beq.n	8003582 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      break;
 8003568:	e00b      	b.n	8003582 <DMA_CheckFifoParam+0xe6>
      break;
 800356a:	bf00      	nop
 800356c:	e00a      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      break;
 800356e:	bf00      	nop
 8003570:	e008      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      break;
 8003572:	bf00      	nop
 8003574:	e006      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      break;
 8003576:	bf00      	nop
 8003578:	e004      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      break;
 800357a:	bf00      	nop
 800357c:	e002      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      break;   
 800357e:	bf00      	nop
 8003580:	e000      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      break;
 8003582:	bf00      	nop
    }
  } 
  
  return status; 
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop

08003594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e165      	b.n	800387c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035b0:	2201      	movs	r2, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	f040 8154 	bne.w	8003876 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d005      	beq.n	80035e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d130      	bne.n	8003648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800361c:	2201      	movs	r2, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 0201 	and.w	r2, r3, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b03      	cmp	r3, #3
 8003652:	d017      	beq.n	8003684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d123      	bne.n	80036d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	08da      	lsrs	r2, r3, #3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3208      	adds	r2, #8
 8003698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	220f      	movs	r2, #15
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	08da      	lsrs	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3208      	adds	r2, #8
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0203 	and.w	r2, r3, #3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80ae 	beq.w	8003876 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	4b5d      	ldr	r3, [pc, #372]	; (8003894 <HAL_GPIO_Init+0x300>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	4a5c      	ldr	r2, [pc, #368]	; (8003894 <HAL_GPIO_Init+0x300>)
 8003724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003728:	6453      	str	r3, [r2, #68]	; 0x44
 800372a:	4b5a      	ldr	r3, [pc, #360]	; (8003894 <HAL_GPIO_Init+0x300>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003736:	4a58      	ldr	r2, [pc, #352]	; (8003898 <HAL_GPIO_Init+0x304>)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	3302      	adds	r3, #2
 800373e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	220f      	movs	r2, #15
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a4f      	ldr	r2, [pc, #316]	; (800389c <HAL_GPIO_Init+0x308>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d025      	beq.n	80037ae <HAL_GPIO_Init+0x21a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a4e      	ldr	r2, [pc, #312]	; (80038a0 <HAL_GPIO_Init+0x30c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01f      	beq.n	80037aa <HAL_GPIO_Init+0x216>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a4d      	ldr	r2, [pc, #308]	; (80038a4 <HAL_GPIO_Init+0x310>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d019      	beq.n	80037a6 <HAL_GPIO_Init+0x212>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4c      	ldr	r2, [pc, #304]	; (80038a8 <HAL_GPIO_Init+0x314>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_GPIO_Init+0x20e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a4b      	ldr	r2, [pc, #300]	; (80038ac <HAL_GPIO_Init+0x318>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00d      	beq.n	800379e <HAL_GPIO_Init+0x20a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4a      	ldr	r2, [pc, #296]	; (80038b0 <HAL_GPIO_Init+0x31c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <HAL_GPIO_Init+0x206>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a49      	ldr	r2, [pc, #292]	; (80038b4 <HAL_GPIO_Init+0x320>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_GPIO_Init+0x202>
 8003792:	2306      	movs	r3, #6
 8003794:	e00c      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 8003796:	2307      	movs	r3, #7
 8003798:	e00a      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 800379a:	2305      	movs	r3, #5
 800379c:	e008      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 800379e:	2304      	movs	r3, #4
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e004      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 80037ae:	2300      	movs	r3, #0
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f002 0203 	and.w	r2, r2, #3
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4093      	lsls	r3, r2
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c0:	4935      	ldr	r1, [pc, #212]	; (8003898 <HAL_GPIO_Init+0x304>)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ce:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <HAL_GPIO_Init+0x324>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f2:	4a31      	ldr	r2, [pc, #196]	; (80038b8 <HAL_GPIO_Init+0x324>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f8:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <HAL_GPIO_Init+0x324>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800381c:	4a26      	ldr	r2, [pc, #152]	; (80038b8 <HAL_GPIO_Init+0x324>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003822:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <HAL_GPIO_Init+0x324>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003846:	4a1c      	ldr	r2, [pc, #112]	; (80038b8 <HAL_GPIO_Init+0x324>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384c:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <HAL_GPIO_Init+0x324>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003870:	4a11      	ldr	r2, [pc, #68]	; (80038b8 <HAL_GPIO_Init+0x324>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3301      	adds	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	f67f ae96 	bls.w	80035b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40013800 	.word	0x40013800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40020c00 	.word	0x40020c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40021400 	.word	0x40021400
 80038b4:	40021800 	.word	0x40021800
 80038b8:	40013c00 	.word	0x40013c00

080038bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
 80038c8:	4613      	mov	r3, r2
 80038ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038cc:	787b      	ldrb	r3, [r7, #1]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038d8:	e003      	b.n	80038e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038da:	887b      	ldrh	r3, [r7, #2]
 80038dc:	041a      	lsls	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	619a      	str	r2, [r3, #24]
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d006      	beq.n	8003914 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003906:	4a05      	ldr	r2, [pc, #20]	; (800391c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd ffca 	bl	80018a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40013c00 	.word	0x40013c00

08003920 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003938:	6413      	str	r3, [r2, #64]	; 0x40
 800393a:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800394c:	f7ff f8d0 	bl	8002af0 <HAL_GetTick>
 8003950:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003952:	e009      	b.n	8003968 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003954:	f7ff f8cc 	bl	8002af0 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003962:	d901      	bls.n	8003968 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e01f      	b.n	80039a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003968:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003974:	d1ee      	bne.n	8003954 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003978:	2201      	movs	r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800397c:	f7ff f8b8 	bl	8002af0 <HAL_GetTick>
 8003980:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003982:	e009      	b.n	8003998 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003984:	f7ff f8b4 	bl	8002af0 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003992:	d901      	bls.n	8003998 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e007      	b.n	80039a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003998:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039a4:	d1ee      	bne.n	8003984 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	420e0040 	.word	0x420e0040
 80039b8:	40007000 	.word	0x40007000
 80039bc:	420e0044 	.word	0x420e0044

080039c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0cc      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039d4:	4b68      	ldr	r3, [pc, #416]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d90c      	bls.n	80039fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b65      	ldr	r3, [pc, #404]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0b8      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a14:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a58      	ldr	r2, [pc, #352]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a2c:	4b53      	ldr	r3, [pc, #332]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a38:	4b50      	ldr	r3, [pc, #320]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	494d      	ldr	r1, [pc, #308]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d044      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d119      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e07f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d003      	beq.n	8003a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7e:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e06f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8e:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e067      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a9e:	4b37      	ldr	r3, [pc, #220]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 0203 	bic.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4934      	ldr	r1, [pc, #208]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab0:	f7ff f81e 	bl	8002af0 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7ff f81a 	bl	8002af0 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e04f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 020c 	and.w	r2, r3, #12
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d1eb      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d20c      	bcs.n	8003b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e032      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b14:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4916      	ldr	r1, [pc, #88]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	490e      	ldr	r1, [pc, #56]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b46:	f000 f855 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	490a      	ldr	r1, [pc, #40]	; (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	5ccb      	ldrb	r3, [r1, r3]
 8003b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5e:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe ff7e 	bl	8002a68 <HAL_InitTick>

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023c00 	.word	0x40023c00
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	0800c1b4 	.word	0x0800c1b4
 8003b84:	20000004 	.word	0x20000004
 8003b88:	20000008 	.word	0x20000008

08003b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000004 	.word	0x20000004

08003ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ba8:	f7ff fff0 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	0a9b      	lsrs	r3, r3, #10
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4903      	ldr	r1, [pc, #12]	; (8003bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	0800c1c4 	.word	0x0800c1c4

08003bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bd0:	f7ff ffdc 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0b5b      	lsrs	r3, r3, #13
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	0800c1c4 	.word	0x0800c1c4

08003bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf8:	b0ae      	sub	sp, #184	; 0xb8
 8003bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c1a:	4bcb      	ldr	r3, [pc, #812]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b0c      	cmp	r3, #12
 8003c24:	f200 8206 	bhi.w	8004034 <HAL_RCC_GetSysClockFreq+0x440>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003c65 	.word	0x08003c65
 8003c34:	08004035 	.word	0x08004035
 8003c38:	08004035 	.word	0x08004035
 8003c3c:	08004035 	.word	0x08004035
 8003c40:	08003c6d 	.word	0x08003c6d
 8003c44:	08004035 	.word	0x08004035
 8003c48:	08004035 	.word	0x08004035
 8003c4c:	08004035 	.word	0x08004035
 8003c50:	08003c75 	.word	0x08003c75
 8003c54:	08004035 	.word	0x08004035
 8003c58:	08004035 	.word	0x08004035
 8003c5c:	08004035 	.word	0x08004035
 8003c60:	08003e65 	.word	0x08003e65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c64:	4bb9      	ldr	r3, [pc, #740]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8003c66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c6a:	e1e7      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c6c:	4bb8      	ldr	r3, [pc, #736]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c72:	e1e3      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c74:	4bb4      	ldr	r3, [pc, #720]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c80:	4bb1      	ldr	r3, [pc, #708]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d071      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8c:	4bae      	ldr	r3, [pc, #696]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c98:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	462b      	mov	r3, r5
 8003cb6:	f04f 0000 	mov.w	r0, #0
 8003cba:	f04f 0100 	mov.w	r1, #0
 8003cbe:	0159      	lsls	r1, r3, #5
 8003cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc4:	0150      	lsls	r0, r2, #5
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4621      	mov	r1, r4
 8003ccc:	1a51      	subs	r1, r2, r1
 8003cce:	6439      	str	r1, [r7, #64]	; 0x40
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	018b      	lsls	r3, r1, #6
 8003ce8:	4641      	mov	r1, r8
 8003cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cee:	4641      	mov	r1, r8
 8003cf0:	018a      	lsls	r2, r1, #6
 8003cf2:	4641      	mov	r1, r8
 8003cf4:	1a51      	subs	r1, r2, r1
 8003cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	00cb      	lsls	r3, r1, #3
 8003d10:	4641      	mov	r1, r8
 8003d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d16:	4641      	mov	r1, r8
 8003d18:	00ca      	lsls	r2, r1, #3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4622      	mov	r2, r4
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	633b      	str	r3, [r7, #48]	; 0x30
 8003d26:	462b      	mov	r3, r5
 8003d28:	460a      	mov	r2, r1
 8003d2a:	eb42 0303 	adc.w	r3, r2, r3
 8003d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	024b      	lsls	r3, r1, #9
 8003d40:	4621      	mov	r1, r4
 8003d42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d46:	4621      	mov	r1, r4
 8003d48:	024a      	lsls	r2, r1, #9
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d60:	f7fc ff92 	bl	8000c88 <__aeabi_uldivmod>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4613      	mov	r3, r2
 8003d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d6e:	e067      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d70:	4b75      	ldr	r3, [pc, #468]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d7c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003d92:	4622      	mov	r2, r4
 8003d94:	462b      	mov	r3, r5
 8003d96:	f04f 0000 	mov.w	r0, #0
 8003d9a:	f04f 0100 	mov.w	r1, #0
 8003d9e:	0159      	lsls	r1, r3, #5
 8003da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da4:	0150      	lsls	r0, r2, #5
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4621      	mov	r1, r4
 8003dac:	1a51      	subs	r1, r2, r1
 8003dae:	62b9      	str	r1, [r7, #40]	; 0x28
 8003db0:	4629      	mov	r1, r5
 8003db2:	eb63 0301 	sbc.w	r3, r3, r1
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	018b      	lsls	r3, r1, #6
 8003dc8:	4641      	mov	r1, r8
 8003dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dce:	4641      	mov	r1, r8
 8003dd0:	018a      	lsls	r2, r1, #6
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dd8:	4649      	mov	r1, r9
 8003dda:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003df2:	4692      	mov	sl, r2
 8003df4:	469b      	mov	fp, r3
 8003df6:	4623      	mov	r3, r4
 8003df8:	eb1a 0303 	adds.w	r3, sl, r3
 8003dfc:	623b      	str	r3, [r7, #32]
 8003dfe:	462b      	mov	r3, r5
 8003e00:	eb4b 0303 	adc.w	r3, fp, r3
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e12:	4629      	mov	r1, r5
 8003e14:	028b      	lsls	r3, r1, #10
 8003e16:	4621      	mov	r1, r4
 8003e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	028a      	lsls	r2, r1, #10
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e28:	2200      	movs	r2, #0
 8003e2a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e2c:	677a      	str	r2, [r7, #116]	; 0x74
 8003e2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e32:	f7fc ff29 	bl	8000c88 <__aeabi_uldivmod>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e40:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e62:	e0eb      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e64:	4b38      	ldr	r3, [pc, #224]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e70:	4b35      	ldr	r3, [pc, #212]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d06b      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7c:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	099b      	lsrs	r3, r3, #6
 8003e82:	2200      	movs	r2, #0
 8003e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e90:	2300      	movs	r3, #0
 8003e92:	667b      	str	r3, [r7, #100]	; 0x64
 8003e94:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003e98:	4622      	mov	r2, r4
 8003e9a:	462b      	mov	r3, r5
 8003e9c:	f04f 0000 	mov.w	r0, #0
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	0159      	lsls	r1, r3, #5
 8003ea6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eaa:	0150      	lsls	r0, r2, #5
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	1a51      	subs	r1, r2, r1
 8003eb4:	61b9      	str	r1, [r7, #24]
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	eb63 0301 	sbc.w	r3, r3, r1
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003eca:	4659      	mov	r1, fp
 8003ecc:	018b      	lsls	r3, r1, #6
 8003ece:	4651      	mov	r1, sl
 8003ed0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ed4:	4651      	mov	r1, sl
 8003ed6:	018a      	lsls	r2, r1, #6
 8003ed8:	4651      	mov	r1, sl
 8003eda:	ebb2 0801 	subs.w	r8, r2, r1
 8003ede:	4659      	mov	r1, fp
 8003ee0:	eb63 0901 	sbc.w	r9, r3, r1
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ef0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ef4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ef8:	4690      	mov	r8, r2
 8003efa:	4699      	mov	r9, r3
 8003efc:	4623      	mov	r3, r4
 8003efe:	eb18 0303 	adds.w	r3, r8, r3
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	462b      	mov	r3, r5
 8003f06:	eb49 0303 	adc.w	r3, r9, r3
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f18:	4629      	mov	r1, r5
 8003f1a:	024b      	lsls	r3, r1, #9
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f22:	4621      	mov	r1, r4
 8003f24:	024a      	lsls	r2, r1, #9
 8003f26:	4610      	mov	r0, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f2e:	2200      	movs	r2, #0
 8003f30:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f32:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f38:	f7fc fea6 	bl	8000c88 <__aeabi_uldivmod>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4613      	mov	r3, r2
 8003f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f46:	e065      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x420>
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f54:	4b3d      	ldr	r3, [pc, #244]	; (800404c <HAL_RCC_GetSysClockFreq+0x458>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	4611      	mov	r1, r2
 8003f60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f64:	653b      	str	r3, [r7, #80]	; 0x50
 8003f66:	2300      	movs	r3, #0
 8003f68:	657b      	str	r3, [r7, #84]	; 0x54
 8003f6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f6e:	4642      	mov	r2, r8
 8003f70:	464b      	mov	r3, r9
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f04f 0100 	mov.w	r1, #0
 8003f7a:	0159      	lsls	r1, r3, #5
 8003f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f80:	0150      	lsls	r0, r2, #5
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4641      	mov	r1, r8
 8003f88:	1a51      	subs	r1, r2, r1
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fa0:	4659      	mov	r1, fp
 8003fa2:	018b      	lsls	r3, r1, #6
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003faa:	4651      	mov	r1, sl
 8003fac:	018a      	lsls	r2, r1, #6
 8003fae:	4651      	mov	r1, sl
 8003fb0:	1a54      	subs	r4, r2, r1
 8003fb2:	4659      	mov	r1, fp
 8003fb4:	eb63 0501 	sbc.w	r5, r3, r1
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	00eb      	lsls	r3, r5, #3
 8003fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fc6:	00e2      	lsls	r2, r4, #3
 8003fc8:	4614      	mov	r4, r2
 8003fca:	461d      	mov	r5, r3
 8003fcc:	4643      	mov	r3, r8
 8003fce:	18e3      	adds	r3, r4, r3
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	eb45 0303 	adc.w	r3, r5, r3
 8003fd8:	607b      	str	r3, [r7, #4]
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	028b      	lsls	r3, r1, #10
 8003fea:	4621      	mov	r1, r4
 8003fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	028a      	lsls	r2, r1, #10
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004000:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004002:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004006:	f7fc fe3f 	bl	8000c88 <__aeabi_uldivmod>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4613      	mov	r3, r2
 8004010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004014:	4b0d      	ldr	r3, [pc, #52]	; (800404c <HAL_RCC_GetSysClockFreq+0x458>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	0f1b      	lsrs	r3, r3, #28
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800402a:	fbb2 f3f3 	udiv	r3, r2, r3
 800402e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004032:	e003      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800403a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800403c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004040:	4618      	mov	r0, r3
 8004042:	37b8      	adds	r7, #184	; 0xb8
 8004044:	46bd      	mov	sp, r7
 8004046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800
 8004050:	00f42400 	.word	0x00f42400

08004054 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e28d      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8083 	beq.w	800417a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004074:	4b94      	ldr	r3, [pc, #592]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b04      	cmp	r3, #4
 800407e:	d019      	beq.n	80040b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004080:	4b91      	ldr	r3, [pc, #580]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004088:	2b08      	cmp	r3, #8
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800408c:	4b8e      	ldr	r3, [pc, #568]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004098:	d00c      	beq.n	80040b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800409a:	4b8b      	ldr	r3, [pc, #556]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d112      	bne.n	80040cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a6:	4b88      	ldr	r3, [pc, #544]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b2:	d10b      	bne.n	80040cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	4b84      	ldr	r3, [pc, #528]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d05b      	beq.n	8004178 <HAL_RCC_OscConfig+0x124>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d157      	bne.n	8004178 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e25a      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d4:	d106      	bne.n	80040e4 <HAL_RCC_OscConfig+0x90>
 80040d6:	4b7c      	ldr	r3, [pc, #496]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a7b      	ldr	r2, [pc, #492]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e01d      	b.n	8004120 <HAL_RCC_OscConfig+0xcc>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ec:	d10c      	bne.n	8004108 <HAL_RCC_OscConfig+0xb4>
 80040ee:	4b76      	ldr	r3, [pc, #472]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a75      	ldr	r2, [pc, #468]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80040f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	4b73      	ldr	r3, [pc, #460]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a72      	ldr	r2, [pc, #456]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e00b      	b.n	8004120 <HAL_RCC_OscConfig+0xcc>
 8004108:	4b6f      	ldr	r3, [pc, #444]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a6e      	ldr	r2, [pc, #440]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 800410e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	4b6c      	ldr	r3, [pc, #432]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a6b      	ldr	r2, [pc, #428]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 800411a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d013      	beq.n	8004150 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fe fce2 	bl	8002af0 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004130:	f7fe fcde 	bl	8002af0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	; 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e21f      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004142:	4b61      	ldr	r3, [pc, #388]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0xdc>
 800414e:	e014      	b.n	800417a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fe fcce 	bl	8002af0 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004158:	f7fe fcca 	bl	8002af0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e20b      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416a:	4b57      	ldr	r3, [pc, #348]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x104>
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d06f      	beq.n	8004266 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004186:	4b50      	ldr	r3, [pc, #320]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b00      	cmp	r3, #0
 8004190:	d017      	beq.n	80041c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004192:	4b4d      	ldr	r3, [pc, #308]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800419a:	2b08      	cmp	r3, #8
 800419c:	d105      	bne.n	80041aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800419e:	4b4a      	ldr	r3, [pc, #296]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041aa:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	d11c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041b6:	4b44      	ldr	r3, [pc, #272]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d116      	bne.n	80041f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	4b41      	ldr	r3, [pc, #260]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_RCC_OscConfig+0x186>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d001      	beq.n	80041da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e1d3      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041da:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4937      	ldr	r1, [pc, #220]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ee:	e03a      	b.n	8004266 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f8:	4b34      	ldr	r3, [pc, #208]	; (80042cc <HAL_RCC_OscConfig+0x278>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fe fc77 	bl	8002af0 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004206:	f7fe fc73 	bl	8002af0 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e1b4      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004218:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4b28      	ldr	r3, [pc, #160]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4925      	ldr	r1, [pc, #148]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
 8004238:	e015      	b.n	8004266 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423a:	4b24      	ldr	r3, [pc, #144]	; (80042cc <HAL_RCC_OscConfig+0x278>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fe fc56 	bl	8002af0 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004248:	f7fe fc52 	bl	8002af0 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e193      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d036      	beq.n	80042e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d016      	beq.n	80042a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800427a:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <HAL_RCC_OscConfig+0x27c>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fe fc36 	bl	8002af0 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004288:	f7fe fc32 	bl	8002af0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e173      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
 800429c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x234>
 80042a6:	e01b      	b.n	80042e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a8:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_RCC_OscConfig+0x27c>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ae:	f7fe fc1f 	bl	8002af0 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b4:	e00e      	b.n	80042d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042b6:	f7fe fc1b 	bl	8002af0 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d907      	bls.n	80042d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e15c      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
 80042c8:	40023800 	.word	0x40023800
 80042cc:	42470000 	.word	0x42470000
 80042d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d4:	4b8a      	ldr	r3, [pc, #552]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 80042d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ea      	bne.n	80042b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8097 	beq.w	800441c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f2:	4b83      	ldr	r3, [pc, #524]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10f      	bne.n	800431e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	4b7f      	ldr	r3, [pc, #508]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	4a7e      	ldr	r2, [pc, #504]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 8004308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430c:	6413      	str	r3, [r2, #64]	; 0x40
 800430e:	4b7c      	ldr	r3, [pc, #496]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431e:	4b79      	ldr	r3, [pc, #484]	; (8004504 <HAL_RCC_OscConfig+0x4b0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d118      	bne.n	800435c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432a:	4b76      	ldr	r3, [pc, #472]	; (8004504 <HAL_RCC_OscConfig+0x4b0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a75      	ldr	r2, [pc, #468]	; (8004504 <HAL_RCC_OscConfig+0x4b0>)
 8004330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004336:	f7fe fbdb 	bl	8002af0 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433e:	f7fe fbd7 	bl	8002af0 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e118      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004350:	4b6c      	ldr	r3, [pc, #432]	; (8004504 <HAL_RCC_OscConfig+0x4b0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d106      	bne.n	8004372 <HAL_RCC_OscConfig+0x31e>
 8004364:	4b66      	ldr	r3, [pc, #408]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 8004366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004368:	4a65      	ldr	r2, [pc, #404]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6713      	str	r3, [r2, #112]	; 0x70
 8004370:	e01c      	b.n	80043ac <HAL_RCC_OscConfig+0x358>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b05      	cmp	r3, #5
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0x340>
 800437a:	4b61      	ldr	r3, [pc, #388]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	4a60      	ldr	r2, [pc, #384]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 8004380:	f043 0304 	orr.w	r3, r3, #4
 8004384:	6713      	str	r3, [r2, #112]	; 0x70
 8004386:	4b5e      	ldr	r3, [pc, #376]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	4a5d      	ldr	r2, [pc, #372]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6713      	str	r3, [r2, #112]	; 0x70
 8004392:	e00b      	b.n	80043ac <HAL_RCC_OscConfig+0x358>
 8004394:	4b5a      	ldr	r3, [pc, #360]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	4a59      	ldr	r2, [pc, #356]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	6713      	str	r3, [r2, #112]	; 0x70
 80043a0:	4b57      	ldr	r3, [pc, #348]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	4a56      	ldr	r2, [pc, #344]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 80043a6:	f023 0304 	bic.w	r3, r3, #4
 80043aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d015      	beq.n	80043e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b4:	f7fe fb9c 	bl	8002af0 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ba:	e00a      	b.n	80043d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043bc:	f7fe fb98 	bl	8002af0 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e0d7      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d2:	4b4b      	ldr	r3, [pc, #300]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0ee      	beq.n	80043bc <HAL_RCC_OscConfig+0x368>
 80043de:	e014      	b.n	800440a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fe fb86 	bl	8002af0 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e8:	f7fe fb82 	bl	8002af0 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e0c1      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fe:	4b40      	ldr	r3, [pc, #256]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1ee      	bne.n	80043e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800440a:	7dfb      	ldrb	r3, [r7, #23]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d105      	bne.n	800441c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004410:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	4a3a      	ldr	r2, [pc, #232]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 8004416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80ad 	beq.w	8004580 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004426:	4b36      	ldr	r3, [pc, #216]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	2b08      	cmp	r3, #8
 8004430:	d060      	beq.n	80044f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d145      	bne.n	80044c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443a:	4b33      	ldr	r3, [pc, #204]	; (8004508 <HAL_RCC_OscConfig+0x4b4>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fe fb56 	bl	8002af0 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004448:	f7fe fb52 	bl	8002af0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e093      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445a:	4b29      	ldr	r3, [pc, #164]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	019b      	lsls	r3, r3, #6
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	3b01      	subs	r3, #1
 8004480:	041b      	lsls	r3, r3, #16
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	061b      	lsls	r3, r3, #24
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	071b      	lsls	r3, r3, #28
 8004492:	491b      	ldr	r1, [pc, #108]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004498:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <HAL_RCC_OscConfig+0x4b4>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fe fb27 	bl	8002af0 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a6:	f7fe fb23 	bl	8002af0 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e064      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b8:	4b11      	ldr	r3, [pc, #68]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x452>
 80044c4:	e05c      	b.n	8004580 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <HAL_RCC_OscConfig+0x4b4>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fe fb10 	bl	8002af0 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d4:	f7fe fb0c 	bl	8002af0 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e04d      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCC_OscConfig+0x4ac>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x480>
 80044f2:	e045      	b.n	8004580 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d107      	bne.n	800450c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e040      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
 8004500:	40023800 	.word	0x40023800
 8004504:	40007000 	.word	0x40007000
 8004508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800450c:	4b1f      	ldr	r3, [pc, #124]	; (800458c <HAL_RCC_OscConfig+0x538>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d030      	beq.n	800457c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d129      	bne.n	800457c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d122      	bne.n	800457c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004544:	4293      	cmp	r3, r2
 8004546:	d119      	bne.n	800457c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	3b01      	subs	r3, #1
 8004556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d10f      	bne.n	800457c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d107      	bne.n	800457c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800

08004590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e041      	b.n	8004626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fd fe06 	bl	80021c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3304      	adds	r3, #4
 80045cc:	4619      	mov	r1, r3
 80045ce:	4610      	mov	r0, r2
 80045d0:	f000 fd42 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e041      	b.n	80046c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f839 	bl	80046cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3304      	adds	r3, #4
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f000 fcf3 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d109      	bne.n	8004704 <HAL_TIM_PWM_Start+0x24>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	e022      	b.n	800474a <HAL_TIM_PWM_Start+0x6a>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b04      	cmp	r3, #4
 8004708:	d109      	bne.n	800471e <HAL_TIM_PWM_Start+0x3e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b01      	cmp	r3, #1
 8004714:	bf14      	ite	ne
 8004716:	2301      	movne	r3, #1
 8004718:	2300      	moveq	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	e015      	b.n	800474a <HAL_TIM_PWM_Start+0x6a>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d109      	bne.n	8004738 <HAL_TIM_PWM_Start+0x58>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e008      	b.n	800474a <HAL_TIM_PWM_Start+0x6a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e07c      	b.n	800484c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d104      	bne.n	8004762 <HAL_TIM_PWM_Start+0x82>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004760:	e013      	b.n	800478a <HAL_TIM_PWM_Start+0xaa>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d104      	bne.n	8004772 <HAL_TIM_PWM_Start+0x92>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004770:	e00b      	b.n	800478a <HAL_TIM_PWM_Start+0xaa>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d104      	bne.n	8004782 <HAL_TIM_PWM_Start+0xa2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004780:	e003      	b.n	800478a <HAL_TIM_PWM_Start+0xaa>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2201      	movs	r2, #1
 8004790:	6839      	ldr	r1, [r7, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f001 f874 	bl	8005880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a2d      	ldr	r2, [pc, #180]	; (8004854 <HAL_TIM_PWM_Start+0x174>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_TIM_PWM_Start+0xcc>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2c      	ldr	r2, [pc, #176]	; (8004858 <HAL_TIM_PWM_Start+0x178>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d101      	bne.n	80047b0 <HAL_TIM_PWM_Start+0xd0>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_TIM_PWM_Start+0xd2>
 80047b0:	2300      	movs	r3, #0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a22      	ldr	r2, [pc, #136]	; (8004854 <HAL_TIM_PWM_Start+0x174>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d022      	beq.n	8004816 <HAL_TIM_PWM_Start+0x136>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d8:	d01d      	beq.n	8004816 <HAL_TIM_PWM_Start+0x136>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1f      	ldr	r2, [pc, #124]	; (800485c <HAL_TIM_PWM_Start+0x17c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d018      	beq.n	8004816 <HAL_TIM_PWM_Start+0x136>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1d      	ldr	r2, [pc, #116]	; (8004860 <HAL_TIM_PWM_Start+0x180>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_TIM_PWM_Start+0x136>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1c      	ldr	r2, [pc, #112]	; (8004864 <HAL_TIM_PWM_Start+0x184>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00e      	beq.n	8004816 <HAL_TIM_PWM_Start+0x136>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a16      	ldr	r2, [pc, #88]	; (8004858 <HAL_TIM_PWM_Start+0x178>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d009      	beq.n	8004816 <HAL_TIM_PWM_Start+0x136>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a18      	ldr	r2, [pc, #96]	; (8004868 <HAL_TIM_PWM_Start+0x188>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_TIM_PWM_Start+0x136>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a16      	ldr	r2, [pc, #88]	; (800486c <HAL_TIM_PWM_Start+0x18c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d111      	bne.n	800483a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b06      	cmp	r3, #6
 8004826:	d010      	beq.n	800484a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004838:	e007      	b.n	800484a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40010000 	.word	0x40010000
 8004858:	40010400 	.word	0x40010400
 800485c:	40000400 	.word	0x40000400
 8004860:	40000800 	.word	0x40000800
 8004864:	40000c00 	.word	0x40000c00
 8004868:	40014000 	.word	0x40014000
 800486c:	40001800 	.word	0x40001800

08004870 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e041      	b.n	8004906 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f839 	bl	800490e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f000 fbd2 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b02      	cmp	r3, #2
 8004936:	d122      	bne.n	800497e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b02      	cmp	r3, #2
 8004944:	d11b      	bne.n	800497e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f06f 0202 	mvn.w	r2, #2
 800494e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fc ffb7 	bl	80018d8 <HAL_TIM_IC_CaptureCallback>
 800496a:	e005      	b.n	8004978 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fb55 	bl	800501c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fb5c 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b04      	cmp	r3, #4
 800498a:	d122      	bne.n	80049d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b04      	cmp	r3, #4
 8004998:	d11b      	bne.n	80049d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f06f 0204 	mvn.w	r2, #4
 80049a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7fc ff8d 	bl	80018d8 <HAL_TIM_IC_CaptureCallback>
 80049be:	e005      	b.n	80049cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fb2b 	bl	800501c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fb32 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d122      	bne.n	8004a26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d11b      	bne.n	8004a26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f06f 0208 	mvn.w	r2, #8
 80049f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2204      	movs	r2, #4
 80049fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fc ff63 	bl	80018d8 <HAL_TIM_IC_CaptureCallback>
 8004a12:	e005      	b.n	8004a20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fb01 	bl	800501c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fb08 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b10      	cmp	r3, #16
 8004a32:	d122      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d11b      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f06f 0210 	mvn.w	r2, #16
 8004a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2208      	movs	r2, #8
 8004a50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7fc ff39 	bl	80018d8 <HAL_TIM_IC_CaptureCallback>
 8004a66:	e005      	b.n	8004a74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fad7 	bl	800501c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fade 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d10e      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d107      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0201 	mvn.w	r2, #1
 8004a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fab1 	bl	8005008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab0:	2b80      	cmp	r3, #128	; 0x80
 8004ab2:	d10e      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b80      	cmp	r3, #128	; 0x80
 8004ac0:	d107      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 ff83 	bl	80059d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004adc:	2b40      	cmp	r3, #64	; 0x40
 8004ade:	d10e      	bne.n	8004afe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d107      	bne.n	8004afe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 faa3 	bl	8005044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d10e      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d107      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f06f 0220 	mvn.w	r2, #32
 8004b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 ff4d 	bl	80059c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e088      	b.n	8004c62 <HAL_TIM_IC_ConfigChannel+0x130>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d11b      	bne.n	8004b96 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6819      	ldr	r1, [r3, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f000 fcc3 	bl	80054f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 020c 	bic.w	r2, r2, #12
 8004b80:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6999      	ldr	r1, [r3, #24]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	619a      	str	r2, [r3, #24]
 8004b94:	e060      	b.n	8004c58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d11c      	bne.n	8004bd6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f000 fd47 	bl	800563e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004bbe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6999      	ldr	r1, [r3, #24]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	021a      	lsls	r2, r3, #8
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	619a      	str	r2, [r3, #24]
 8004bd4:	e040      	b.n	8004c58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d11b      	bne.n	8004c14 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f000 fd94 	bl	8005718 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 020c 	bic.w	r2, r2, #12
 8004bfe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69d9      	ldr	r1, [r3, #28]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	61da      	str	r2, [r3, #28]
 8004c12:	e021      	b.n	8004c58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d11c      	bne.n	8004c54 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	6819      	ldr	r1, [r3, #0]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f000 fdb1 	bl	8005790 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c3c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69d9      	ldr	r1, [r3, #28]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	021a      	lsls	r2, r3, #8
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	61da      	str	r2, [r3, #28]
 8004c52:	e001      	b.n	8004c58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e0ae      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	f200 809f 	bhi.w	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cd5 	.word	0x08004cd5
 8004ca4:	08004dd9 	.word	0x08004dd9
 8004ca8:	08004dd9 	.word	0x08004dd9
 8004cac:	08004dd9 	.word	0x08004dd9
 8004cb0:	08004d15 	.word	0x08004d15
 8004cb4:	08004dd9 	.word	0x08004dd9
 8004cb8:	08004dd9 	.word	0x08004dd9
 8004cbc:	08004dd9 	.word	0x08004dd9
 8004cc0:	08004d57 	.word	0x08004d57
 8004cc4:	08004dd9 	.word	0x08004dd9
 8004cc8:	08004dd9 	.word	0x08004dd9
 8004ccc:	08004dd9 	.word	0x08004dd9
 8004cd0:	08004d97 	.word	0x08004d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fa5c 	bl	8005198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0208 	orr.w	r2, r2, #8
 8004cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0204 	bic.w	r2, r2, #4
 8004cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6999      	ldr	r1, [r3, #24]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	619a      	str	r2, [r3, #24]
      break;
 8004d12:	e064      	b.n	8004dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 faac 	bl	8005278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6999      	ldr	r1, [r3, #24]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	021a      	lsls	r2, r3, #8
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	619a      	str	r2, [r3, #24]
      break;
 8004d54:	e043      	b.n	8004dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fb01 	bl	8005364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0208 	orr.w	r2, r2, #8
 8004d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0204 	bic.w	r2, r2, #4
 8004d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69d9      	ldr	r1, [r3, #28]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	61da      	str	r2, [r3, #28]
      break;
 8004d94:	e023      	b.n	8004dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fb55 	bl	800544c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69d9      	ldr	r1, [r3, #28]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	021a      	lsls	r2, r3, #8
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	61da      	str	r2, [r3, #28]
      break;
 8004dd6:	e002      	b.n	8004dde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	75fb      	strb	r3, [r7, #23]
      break;
 8004ddc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_TIM_ConfigClockSource+0x1c>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e0b4      	b.n	8004f76 <HAL_TIM_ConfigClockSource+0x186>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e44:	d03e      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0xd4>
 8004e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4a:	f200 8087 	bhi.w	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e52:	f000 8086 	beq.w	8004f62 <HAL_TIM_ConfigClockSource+0x172>
 8004e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5a:	d87f      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e5c:	2b70      	cmp	r3, #112	; 0x70
 8004e5e:	d01a      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0xa6>
 8004e60:	2b70      	cmp	r3, #112	; 0x70
 8004e62:	d87b      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e64:	2b60      	cmp	r3, #96	; 0x60
 8004e66:	d050      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x11a>
 8004e68:	2b60      	cmp	r3, #96	; 0x60
 8004e6a:	d877      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e6c:	2b50      	cmp	r3, #80	; 0x50
 8004e6e:	d03c      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0xfa>
 8004e70:	2b50      	cmp	r3, #80	; 0x50
 8004e72:	d873      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d058      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x13a>
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	d86f      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e7c:	2b30      	cmp	r3, #48	; 0x30
 8004e7e:	d064      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x15a>
 8004e80:	2b30      	cmp	r3, #48	; 0x30
 8004e82:	d86b      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d060      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x15a>
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d867      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d05c      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x15a>
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d05a      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x15a>
 8004e94:	e062      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6899      	ldr	r1, [r3, #8]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f000 fccb 	bl	8005840 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	609a      	str	r2, [r3, #8]
      break;
 8004ec2:	e04f      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6899      	ldr	r1, [r3, #8]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f000 fcb4 	bl	8005840 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ee6:	609a      	str	r2, [r3, #8]
      break;
 8004ee8:	e03c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6859      	ldr	r1, [r3, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f000 fb72 	bl	80055e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2150      	movs	r1, #80	; 0x50
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fc81 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 8004f08:	e02c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6859      	ldr	r1, [r3, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f000 fbce 	bl	80056b8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2160      	movs	r1, #96	; 0x60
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fc71 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 8004f28:	e01c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6859      	ldr	r1, [r3, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f000 fb52 	bl	80055e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2140      	movs	r1, #64	; 0x40
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fc61 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 8004f48:	e00c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4619      	mov	r1, r3
 8004f54:	4610      	mov	r0, r2
 8004f56:	f000 fc58 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 8004f5a:	e003      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f60:	e000      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b0c      	cmp	r3, #12
 8004f92:	d831      	bhi.n	8004ff8 <HAL_TIM_ReadCapturedValue+0x78>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fd1 	.word	0x08004fd1
 8004fa0:	08004ff9 	.word	0x08004ff9
 8004fa4:	08004ff9 	.word	0x08004ff9
 8004fa8:	08004ff9 	.word	0x08004ff9
 8004fac:	08004fdb 	.word	0x08004fdb
 8004fb0:	08004ff9 	.word	0x08004ff9
 8004fb4:	08004ff9 	.word	0x08004ff9
 8004fb8:	08004ff9 	.word	0x08004ff9
 8004fbc:	08004fe5 	.word	0x08004fe5
 8004fc0:	08004ff9 	.word	0x08004ff9
 8004fc4:	08004ff9 	.word	0x08004ff9
 8004fc8:	08004ff9 	.word	0x08004ff9
 8004fcc:	08004fef 	.word	0x08004fef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd6:	60fb      	str	r3, [r7, #12]

      break;
 8004fd8:	e00f      	b.n	8004ffa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	60fb      	str	r3, [r7, #12]

      break;
 8004fe2:	e00a      	b.n	8004ffa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fea:	60fb      	str	r3, [r7, #12]

      break;
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	60fb      	str	r3, [r7, #12]

      break;
 8004ff6:	e000      	b.n	8004ffa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004ff8:	bf00      	nop
  }

  return tmpreg;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a40      	ldr	r2, [pc, #256]	; (800516c <TIM_Base_SetConfig+0x114>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d00f      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a3d      	ldr	r2, [pc, #244]	; (8005170 <TIM_Base_SetConfig+0x118>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00b      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a3c      	ldr	r2, [pc, #240]	; (8005174 <TIM_Base_SetConfig+0x11c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d007      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a3b      	ldr	r2, [pc, #236]	; (8005178 <TIM_Base_SetConfig+0x120>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a3a      	ldr	r2, [pc, #232]	; (800517c <TIM_Base_SetConfig+0x124>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d108      	bne.n	80050aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2f      	ldr	r2, [pc, #188]	; (800516c <TIM_Base_SetConfig+0x114>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d02b      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b8:	d027      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a2c      	ldr	r2, [pc, #176]	; (8005170 <TIM_Base_SetConfig+0x118>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d023      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a2b      	ldr	r2, [pc, #172]	; (8005174 <TIM_Base_SetConfig+0x11c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01f      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2a      	ldr	r2, [pc, #168]	; (8005178 <TIM_Base_SetConfig+0x120>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d01b      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a29      	ldr	r2, [pc, #164]	; (800517c <TIM_Base_SetConfig+0x124>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d017      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a28      	ldr	r2, [pc, #160]	; (8005180 <TIM_Base_SetConfig+0x128>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a27      	ldr	r2, [pc, #156]	; (8005184 <TIM_Base_SetConfig+0x12c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00f      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a26      	ldr	r2, [pc, #152]	; (8005188 <TIM_Base_SetConfig+0x130>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00b      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a25      	ldr	r2, [pc, #148]	; (800518c <TIM_Base_SetConfig+0x134>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d007      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a24      	ldr	r2, [pc, #144]	; (8005190 <TIM_Base_SetConfig+0x138>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a23      	ldr	r2, [pc, #140]	; (8005194 <TIM_Base_SetConfig+0x13c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d108      	bne.n	800511c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a0a      	ldr	r2, [pc, #40]	; (800516c <TIM_Base_SetConfig+0x114>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d003      	beq.n	8005150 <TIM_Base_SetConfig+0xf8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a0c      	ldr	r2, [pc, #48]	; (800517c <TIM_Base_SetConfig+0x124>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d103      	bne.n	8005158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	615a      	str	r2, [r3, #20]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40010000 	.word	0x40010000
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00
 800517c:	40010400 	.word	0x40010400
 8005180:	40014000 	.word	0x40014000
 8005184:	40014400 	.word	0x40014400
 8005188:	40014800 	.word	0x40014800
 800518c:	40001800 	.word	0x40001800
 8005190:	40001c00 	.word	0x40001c00
 8005194:	40002000 	.word	0x40002000

08005198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0201 	bic.w	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f023 0302 	bic.w	r3, r3, #2
 80051e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a20      	ldr	r2, [pc, #128]	; (8005270 <TIM_OC1_SetConfig+0xd8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_OC1_SetConfig+0x64>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a1f      	ldr	r2, [pc, #124]	; (8005274 <TIM_OC1_SetConfig+0xdc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d10c      	bne.n	8005216 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f023 0308 	bic.w	r3, r3, #8
 8005202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f023 0304 	bic.w	r3, r3, #4
 8005214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a15      	ldr	r2, [pc, #84]	; (8005270 <TIM_OC1_SetConfig+0xd8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d003      	beq.n	8005226 <TIM_OC1_SetConfig+0x8e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a14      	ldr	r2, [pc, #80]	; (8005274 <TIM_OC1_SetConfig+0xdc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d111      	bne.n	800524a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800522c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	621a      	str	r2, [r3, #32]
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	40010000 	.word	0x40010000
 8005274:	40010400 	.word	0x40010400

08005278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f023 0210 	bic.w	r2, r3, #16
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0320 	bic.w	r3, r3, #32
 80052c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a22      	ldr	r2, [pc, #136]	; (800535c <TIM_OC2_SetConfig+0xe4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_OC2_SetConfig+0x68>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a21      	ldr	r2, [pc, #132]	; (8005360 <TIM_OC2_SetConfig+0xe8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10d      	bne.n	80052fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a17      	ldr	r2, [pc, #92]	; (800535c <TIM_OC2_SetConfig+0xe4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_OC2_SetConfig+0x94>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a16      	ldr	r2, [pc, #88]	; (8005360 <TIM_OC2_SetConfig+0xe8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d113      	bne.n	8005334 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800531a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40010000 	.word	0x40010000
 8005360:	40010400 	.word	0x40010400

08005364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0303 	bic.w	r3, r3, #3
 800539a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a21      	ldr	r2, [pc, #132]	; (8005444 <TIM_OC3_SetConfig+0xe0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d003      	beq.n	80053ca <TIM_OC3_SetConfig+0x66>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a20      	ldr	r2, [pc, #128]	; (8005448 <TIM_OC3_SetConfig+0xe4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d10d      	bne.n	80053e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a16      	ldr	r2, [pc, #88]	; (8005444 <TIM_OC3_SetConfig+0xe0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_OC3_SetConfig+0x92>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a15      	ldr	r2, [pc, #84]	; (8005448 <TIM_OC3_SetConfig+0xe4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d113      	bne.n	800541e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	621a      	str	r2, [r3, #32]
}
 8005438:	bf00      	nop
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	40010000 	.word	0x40010000
 8005448:	40010400 	.word	0x40010400

0800544c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	031b      	lsls	r3, r3, #12
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a12      	ldr	r2, [pc, #72]	; (80054f0 <TIM_OC4_SetConfig+0xa4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_OC4_SetConfig+0x68>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a11      	ldr	r2, [pc, #68]	; (80054f4 <TIM_OC4_SetConfig+0xa8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d109      	bne.n	80054c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	019b      	lsls	r3, r3, #6
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40010000 	.word	0x40010000
 80054f4:	40010400 	.word	0x40010400

080054f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0201 	bic.w	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4a28      	ldr	r2, [pc, #160]	; (80055c4 <TIM_TI1_SetConfig+0xcc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d01b      	beq.n	800555e <TIM_TI1_SetConfig+0x66>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552c:	d017      	beq.n	800555e <TIM_TI1_SetConfig+0x66>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4a25      	ldr	r2, [pc, #148]	; (80055c8 <TIM_TI1_SetConfig+0xd0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d013      	beq.n	800555e <TIM_TI1_SetConfig+0x66>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4a24      	ldr	r2, [pc, #144]	; (80055cc <TIM_TI1_SetConfig+0xd4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00f      	beq.n	800555e <TIM_TI1_SetConfig+0x66>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4a23      	ldr	r2, [pc, #140]	; (80055d0 <TIM_TI1_SetConfig+0xd8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00b      	beq.n	800555e <TIM_TI1_SetConfig+0x66>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4a22      	ldr	r2, [pc, #136]	; (80055d4 <TIM_TI1_SetConfig+0xdc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d007      	beq.n	800555e <TIM_TI1_SetConfig+0x66>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4a21      	ldr	r2, [pc, #132]	; (80055d8 <TIM_TI1_SetConfig+0xe0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d003      	beq.n	800555e <TIM_TI1_SetConfig+0x66>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4a20      	ldr	r2, [pc, #128]	; (80055dc <TIM_TI1_SetConfig+0xe4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d101      	bne.n	8005562 <TIM_TI1_SetConfig+0x6a>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <TIM_TI1_SetConfig+0x6c>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f023 0303 	bic.w	r3, r3, #3
 800556e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	e003      	b.n	8005582 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	b2db      	uxtb	r3, r3
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f023 030a 	bic.w	r3, r3, #10
 800559c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f003 030a 	and.w	r3, r3, #10
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	40010400 	.word	0x40010400
 80055d8:	40014000 	.word	0x40014000
 80055dc:	40001800 	.word	0x40001800

080055e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0201 	bic.w	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800560a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 030a 	bic.w	r3, r3, #10
 800561c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800563e:	b480      	push	{r7}
 8005640:	b087      	sub	sp, #28
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
 800564a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f023 0210 	bic.w	r2, r3, #16
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	021b      	lsls	r3, r3, #8
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800567c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	031b      	lsls	r3, r3, #12
 8005682:	b29b      	uxth	r3, r3
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005690:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	621a      	str	r2, [r3, #32]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f023 0210 	bic.w	r2, r3, #16
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	031b      	lsls	r3, r3, #12
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	621a      	str	r2, [r3, #32]
}
 800570c:	bf00      	nop
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f023 0303 	bic.w	r3, r3, #3
 8005744:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005754:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	b2db      	uxtb	r3, r3
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005768:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	021b      	lsls	r3, r3, #8
 800576e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	621a      	str	r2, [r3, #32]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	031b      	lsls	r3, r3, #12
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80057e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	031b      	lsls	r3, r3, #12
 80057e8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	f043 0307 	orr.w	r3, r3, #7
 800582c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800585a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	431a      	orrs	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4313      	orrs	r3, r2
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	609a      	str	r2, [r3, #8]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	2201      	movs	r2, #1
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a1a      	ldr	r2, [r3, #32]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	43db      	mvns	r3, r3
 80058a2:	401a      	ands	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a1a      	ldr	r2, [r3, #32]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	431a      	orrs	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e05a      	b.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d022      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005930:	d01d      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d018      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1b      	ldr	r2, [pc, #108]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1a      	ldr	r2, [pc, #104]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00e      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a18      	ldr	r2, [pc, #96]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d009      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a17      	ldr	r2, [pc, #92]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a15      	ldr	r2, [pc, #84]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d10c      	bne.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	4313      	orrs	r3, r2
 800597e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40010400 	.word	0x40010400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40001800 	.word	0x40001800

080059c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e03f      	b.n	8005a7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fc fcb6 	bl	8002384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2224      	movs	r2, #36	; 0x24
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 ffcd 	bl	80069d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b08a      	sub	sp, #40	; 0x28
 8005a8a:	af02      	add	r7, sp, #8
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	4613      	mov	r3, r2
 8005a94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	d17c      	bne.n	8005ba0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_UART_Transmit+0x2c>
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e075      	b.n	8005ba2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_UART_Transmit+0x3e>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e06e      	b.n	8005ba2 <HAL_UART_Transmit+0x11c>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2221      	movs	r2, #33	; 0x21
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ada:	f7fd f809 	bl	8002af0 <HAL_GetTick>
 8005ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	88fa      	ldrh	r2, [r7, #6]
 8005ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	88fa      	ldrh	r2, [r7, #6]
 8005aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af4:	d108      	bne.n	8005b08 <HAL_UART_Transmit+0x82>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	e003      	b.n	8005b10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b18:	e02a      	b.n	8005b70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2200      	movs	r2, #0
 8005b22:	2180      	movs	r1, #128	; 0x80
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fce4 	bl	80064f2 <UART_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e036      	b.n	8005ba2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	3302      	adds	r3, #2
 8005b4e:	61bb      	str	r3, [r7, #24]
 8005b50:	e007      	b.n	8005b62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	781a      	ldrb	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1cf      	bne.n	8005b1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2200      	movs	r2, #0
 8005b82:	2140      	movs	r1, #64	; 0x40
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fcb4 	bl	80064f2 <UART_WaitOnFlagUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e006      	b.n	8005ba2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e000      	b.n	8005ba2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b08a      	sub	sp, #40	; 0x28
 8005bae:	af02      	add	r7, sp, #8
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	603b      	str	r3, [r7, #0]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	f040 808c 	bne.w	8005ce4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <HAL_UART_Receive+0x2e>
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e084      	b.n	8005ce6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_UART_Receive+0x40>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e07d      	b.n	8005ce6 <HAL_UART_Receive+0x13c>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2222      	movs	r2, #34	; 0x22
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c06:	f7fc ff73 	bl	8002af0 <HAL_GetTick>
 8005c0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c20:	d108      	bne.n	8005c34 <HAL_UART_Receive+0x8a>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d104      	bne.n	8005c34 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	e003      	b.n	8005c3c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c44:	e043      	b.n	8005cce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2120      	movs	r1, #32
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fc4e 	bl	80064f2 <UART_WaitOnFlagUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e042      	b.n	8005ce6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10c      	bne.n	8005c80 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	3302      	adds	r3, #2
 8005c7c:	61bb      	str	r3, [r7, #24]
 8005c7e:	e01f      	b.n	8005cc0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c88:	d007      	beq.n	8005c9a <HAL_UART_Receive+0xf0>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10a      	bne.n	8005ca8 <HAL_UART_Receive+0xfe>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	e008      	b.n	8005cba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1b6      	bne.n	8005c46 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e000      	b.n	8005ce6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005ce4:	2302      	movs	r3, #2
  }
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3720      	adds	r7, #32
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d11d      	bne.n	8005d44 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <HAL_UART_Receive_IT+0x26>
 8005d0e:	88fb      	ldrh	r3, [r7, #6]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e016      	b.n	8005d46 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_UART_Receive_IT+0x38>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e00f      	b.n	8005d46 <HAL_UART_Receive_IT+0x58>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d34:	88fb      	ldrh	r3, [r7, #6]
 8005d36:	461a      	mov	r2, r3
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 fc47 	bl	80065ce <UART_Start_Receive_IT>
 8005d40:	4603      	mov	r3, r0
 8005d42:	e000      	b.n	8005d46 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d44:	2302      	movs	r3, #2
  }
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08c      	sub	sp, #48	; 0x30
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d165      	bne.n	8005e36 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <HAL_UART_Transmit_DMA+0x26>
 8005d70:	88fb      	ldrh	r3, [r7, #6]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e05e      	b.n	8005e38 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_UART_Transmit_DMA+0x38>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e057      	b.n	8005e38 <HAL_UART_Transmit_DMA+0xe8>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	88fa      	ldrh	r2, [r7, #6]
 8005d9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2221      	movs	r2, #33	; 0x21
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	4a22      	ldr	r2, [pc, #136]	; (8005e40 <HAL_UART_Transmit_DMA+0xf0>)
 8005db6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbc:	4a21      	ldr	r2, [pc, #132]	; (8005e44 <HAL_UART_Transmit_DMA+0xf4>)
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	4a20      	ldr	r2, [pc, #128]	; (8005e48 <HAL_UART_Transmit_DMA+0xf8>)
 8005dc6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dcc:	2200      	movs	r2, #0
 8005dce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005dd0:	f107 0308 	add.w	r3, r7, #8
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	6819      	ldr	r1, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3304      	adds	r3, #4
 8005de4:	461a      	mov	r2, r3
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	f7fd f880 	bl	8002eec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005df4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3314      	adds	r3, #20
 8005e04:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3314      	adds	r3, #20
 8005e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e1e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e20:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	6a39      	ldr	r1, [r7, #32]
 8005e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e5      	bne.n	8005dfe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e000      	b.n	8005e38 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005e36:	2302      	movs	r3, #2
  }
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3730      	adds	r7, #48	; 0x30
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	080063a9 	.word	0x080063a9
 8005e44:	08006443 	.word	0x08006443
 8005e48:	0800645f 	.word	0x0800645f

08005e4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b0ba      	sub	sp, #232	; 0xe8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10f      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x66>
 8005e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fcd4 	bl	8006858 <UART_Receive_IT>
      return;
 8005eb0:	e256      	b.n	8006360 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80de 	beq.w	8006078 <HAL_UART_IRQHandler+0x22c>
 8005ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d106      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ecc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 80d1 	beq.w	8006078 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00b      	beq.n	8005efa <HAL_UART_IRQHandler+0xae>
 8005ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f043 0201 	orr.w	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00b      	beq.n	8005f1e <HAL_UART_IRQHandler+0xd2>
 8005f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f043 0202 	orr.w	r2, r3, #2
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00b      	beq.n	8005f42 <HAL_UART_IRQHandler+0xf6>
 8005f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d005      	beq.n	8005f42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f043 0204 	orr.w	r2, r3, #4
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d011      	beq.n	8005f72 <HAL_UART_IRQHandler+0x126>
 8005f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d105      	bne.n	8005f66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d005      	beq.n	8005f72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	f043 0208 	orr.w	r2, r3, #8
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 81ed 	beq.w	8006356 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d008      	beq.n	8005f9a <HAL_UART_IRQHandler+0x14e>
 8005f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fc5f 	bl	8006858 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa4:	2b40      	cmp	r3, #64	; 0x40
 8005fa6:	bf0c      	ite	eq
 8005fa8:	2301      	moveq	r3, #1
 8005faa:	2300      	movne	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d103      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x17a>
 8005fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d04f      	beq.n	8006066 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fb67 	bl	800669a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd6:	2b40      	cmp	r3, #64	; 0x40
 8005fd8:	d141      	bne.n	800605e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3314      	adds	r3, #20
 8005fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fe8:	e853 3f00 	ldrex	r3, [r3]
 8005fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3314      	adds	r3, #20
 8006002:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006006:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800600a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006012:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800601e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1d9      	bne.n	8005fda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	2b00      	cmp	r3, #0
 800602c:	d013      	beq.n	8006056 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	4a7d      	ldr	r2, [pc, #500]	; (8006228 <HAL_UART_IRQHandler+0x3dc>)
 8006034:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	4618      	mov	r0, r3
 800603c:	f7fd f81e 	bl	800307c <HAL_DMA_Abort_IT>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d016      	beq.n	8006074 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006050:	4610      	mov	r0, r2
 8006052:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006054:	e00e      	b.n	8006074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f990 	bl	800637c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605c:	e00a      	b.n	8006074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f98c 	bl	800637c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006064:	e006      	b.n	8006074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f988 	bl	800637c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006072:	e170      	b.n	8006356 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006074:	bf00      	nop
    return;
 8006076:	e16e      	b.n	8006356 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	2b01      	cmp	r3, #1
 800607e:	f040 814a 	bne.w	8006316 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8143 	beq.w	8006316 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 813c 	beq.w	8006316 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060be:	2b40      	cmp	r3, #64	; 0x40
 80060c0:	f040 80b4 	bne.w	800622c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 8140 	beq.w	800635a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060e2:	429a      	cmp	r2, r3
 80060e4:	f080 8139 	bcs.w	800635a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fa:	f000 8088 	beq.w	800620e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	330c      	adds	r3, #12
 8006104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800611c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	330c      	adds	r3, #12
 8006126:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800612a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800612e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006136:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1d9      	bne.n	80060fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3314      	adds	r3, #20
 8006150:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800615a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800615c:	f023 0301 	bic.w	r3, r3, #1
 8006160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3314      	adds	r3, #20
 800616a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800616e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006172:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006176:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e1      	bne.n	800614a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3314      	adds	r3, #20
 800618c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800619c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3314      	adds	r3, #20
 80061a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e3      	bne.n	8006186 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061de:	f023 0310 	bic.w	r3, r3, #16
 80061e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	330c      	adds	r3, #12
 80061ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80061f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80061f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e3      	bne.n	80061cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	4618      	mov	r0, r3
 800620a:	f7fc fec7 	bl	8002f9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006216:	b29b      	uxth	r3, r3
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	b29b      	uxth	r3, r3
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f8b6 	bl	8006390 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006224:	e099      	b.n	800635a <HAL_UART_IRQHandler+0x50e>
 8006226:	bf00      	nop
 8006228:	08006761 	.word	0x08006761
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006234:	b29b      	uxth	r3, r3
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 808b 	beq.w	800635e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8086 	beq.w	800635e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	330c      	adds	r3, #12
 8006258:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006264:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006268:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330c      	adds	r3, #12
 8006272:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006276:	647a      	str	r2, [r7, #68]	; 0x44
 8006278:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800627c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e3      	bne.n	8006252 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3314      	adds	r3, #20
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	e853 3f00 	ldrex	r3, [r3]
 8006298:	623b      	str	r3, [r7, #32]
   return(result);
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	f023 0301 	bic.w	r3, r3, #1
 80062a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3314      	adds	r3, #20
 80062aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062ae:	633a      	str	r2, [r7, #48]	; 0x30
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e3      	bne.n	800628a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	330c      	adds	r3, #12
 80062d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	60fb      	str	r3, [r7, #12]
   return(result);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0310 	bic.w	r3, r3, #16
 80062e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80062f4:	61fa      	str	r2, [r7, #28]
 80062f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	69b9      	ldr	r1, [r7, #24]
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	617b      	str	r3, [r7, #20]
   return(result);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e3      	bne.n	80062d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f83e 	bl	8006390 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006314:	e023      	b.n	800635e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <HAL_UART_IRQHandler+0x4ea>
 8006322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa2a 	bl	8006788 <UART_Transmit_IT>
    return;
 8006334:	e014      	b.n	8006360 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00e      	beq.n	8006360 <HAL_UART_IRQHandler+0x514>
 8006342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d008      	beq.n	8006360 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fa6a 	bl	8006828 <UART_EndTransmit_IT>
    return;
 8006354:	e004      	b.n	8006360 <HAL_UART_IRQHandler+0x514>
    return;
 8006356:	bf00      	nop
 8006358:	e002      	b.n	8006360 <HAL_UART_IRQHandler+0x514>
      return;
 800635a:	bf00      	nop
 800635c:	e000      	b.n	8006360 <HAL_UART_IRQHandler+0x514>
      return;
 800635e:	bf00      	nop
  }
}
 8006360:	37e8      	adds	r7, #232	; 0xe8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop

08006368 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b090      	sub	sp, #64	; 0x40
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d137      	bne.n	8006434 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80063c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c6:	2200      	movs	r2, #0
 80063c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3314      	adds	r3, #20
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	623b      	str	r3, [r7, #32]
   return(result);
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80063e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3314      	adds	r3, #20
 80063e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ea:	633a      	str	r2, [r7, #48]	; 0x30
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e5      	bne.n	80063ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	60fb      	str	r3, [r7, #12]
   return(result);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006414:	637b      	str	r3, [r7, #52]	; 0x34
 8006416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	330c      	adds	r3, #12
 800641c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800641e:	61fa      	str	r2, [r7, #28]
 8006420:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	69b9      	ldr	r1, [r7, #24]
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	617b      	str	r3, [r7, #20]
   return(result);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e5      	bne.n	80063fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006432:	e002      	b.n	800643a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006434:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006436:	f7fb fa19 	bl	800186c <HAL_UART_TxCpltCallback>
}
 800643a:	bf00      	nop
 800643c:	3740      	adds	r7, #64	; 0x40
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff ff89 	bl	8006368 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647a:	2b80      	cmp	r3, #128	; 0x80
 800647c:	bf0c      	ite	eq
 800647e:	2301      	moveq	r3, #1
 8006480:	2300      	movne	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b21      	cmp	r3, #33	; 0x21
 8006490:	d108      	bne.n	80064a4 <UART_DMAError+0x46>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2200      	movs	r2, #0
 800649c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800649e:	68b8      	ldr	r0, [r7, #8]
 80064a0:	f000 f8d3 	bl	800664a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b40      	cmp	r3, #64	; 0x40
 80064b0:	bf0c      	ite	eq
 80064b2:	2301      	moveq	r3, #1
 80064b4:	2300      	movne	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b22      	cmp	r3, #34	; 0x22
 80064c4:	d108      	bne.n	80064d8 <UART_DMAError+0x7a>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2200      	movs	r2, #0
 80064d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80064d2:	68b8      	ldr	r0, [r7, #8]
 80064d4:	f000 f8e1 	bl	800669a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064dc:	f043 0210 	orr.w	r2, r3, #16
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064e4:	68b8      	ldr	r0, [r7, #8]
 80064e6:	f7ff ff49 	bl	800637c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064ea:	bf00      	nop
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b090      	sub	sp, #64	; 0x40
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	603b      	str	r3, [r7, #0]
 80064fe:	4613      	mov	r3, r2
 8006500:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006502:	e050      	b.n	80065a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650a:	d04c      	beq.n	80065a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800650c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800650e:	2b00      	cmp	r3, #0
 8006510:	d007      	beq.n	8006522 <UART_WaitOnFlagUntilTimeout+0x30>
 8006512:	f7fc faed 	bl	8002af0 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800651e:	429a      	cmp	r2, r3
 8006520:	d241      	bcs.n	80065a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	330c      	adds	r3, #12
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006542:	637a      	str	r2, [r7, #52]	; 0x34
 8006544:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e5      	bne.n	8006522 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3314      	adds	r3, #20
 800655c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	613b      	str	r3, [r7, #16]
   return(result);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	63bb      	str	r3, [r7, #56]	; 0x38
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3314      	adds	r3, #20
 8006574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006576:	623a      	str	r2, [r7, #32]
 8006578:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	69f9      	ldr	r1, [r7, #28]
 800657c:	6a3a      	ldr	r2, [r7, #32]
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	61bb      	str	r3, [r7, #24]
   return(result);
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e5      	bne.n	8006556 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e00f      	b.n	80065c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4013      	ands	r3, r2
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	bf0c      	ite	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	2300      	movne	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d09f      	beq.n	8006504 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3740      	adds	r7, #64	; 0x40
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b085      	sub	sp, #20
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	4613      	mov	r3, r2
 80065da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	88fa      	ldrh	r2, [r7, #6]
 80065e6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	88fa      	ldrh	r2, [r7, #6]
 80065ec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2222      	movs	r2, #34	; 0x22
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d007      	beq.n	800661c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800661a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695a      	ldr	r2, [r3, #20]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0220 	orr.w	r2, r2, #32
 800663a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800664a:	b480      	push	{r7}
 800664c:	b089      	sub	sp, #36	; 0x24
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	330c      	adds	r3, #12
 8006658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	60bb      	str	r3, [r7, #8]
   return(result);
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	330c      	adds	r3, #12
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	61ba      	str	r2, [r7, #24]
 8006674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6979      	ldr	r1, [r7, #20]
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	613b      	str	r3, [r7, #16]
   return(result);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e5      	bne.n	8006652 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800668e:	bf00      	nop
 8006690:	3724      	adds	r7, #36	; 0x24
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669a:	b480      	push	{r7}
 800669c:	b095      	sub	sp, #84	; 0x54
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	330c      	adds	r3, #12
 80066a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	330c      	adds	r3, #12
 80066c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066c2:	643a      	str	r2, [r7, #64]	; 0x40
 80066c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e5      	bne.n	80066a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3314      	adds	r3, #20
 80066dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f023 0301 	bic.w	r3, r3, #1
 80066ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3314      	adds	r3, #20
 80066f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e5      	bne.n	80066d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	2b01      	cmp	r3, #1
 8006710:	d119      	bne.n	8006746 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	330c      	adds	r3, #12
 8006718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	60bb      	str	r3, [r7, #8]
   return(result);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f023 0310 	bic.w	r3, r3, #16
 8006728:	647b      	str	r3, [r7, #68]	; 0x44
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006732:	61ba      	str	r2, [r7, #24]
 8006734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6979      	ldr	r1, [r7, #20]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	613b      	str	r3, [r7, #16]
   return(result);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e5      	bne.n	8006712 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006754:	bf00      	nop
 8006756:	3754      	adds	r7, #84	; 0x54
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7ff fdfe 	bl	800637c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006780:	bf00      	nop
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b21      	cmp	r3, #33	; 0x21
 800679a:	d13e      	bne.n	800681a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a4:	d114      	bne.n	80067d0 <UART_Transmit_IT+0x48>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d110      	bne.n	80067d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	1c9a      	adds	r2, r3, #2
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	621a      	str	r2, [r3, #32]
 80067ce:	e008      	b.n	80067e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	1c59      	adds	r1, r3, #1
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6211      	str	r1, [r2, #32]
 80067da:	781a      	ldrb	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	4619      	mov	r1, r3
 80067f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10f      	bne.n	8006816 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006804:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006814:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	e000      	b.n	800681c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800681a:	2302      	movs	r3, #2
  }
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800683e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7fb f80f 	bl	800186c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08c      	sub	sp, #48	; 0x30
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b22      	cmp	r3, #34	; 0x22
 800686a:	f040 80ab 	bne.w	80069c4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006876:	d117      	bne.n	80068a8 <UART_Receive_IT+0x50>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d113      	bne.n	80068a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006880:	2300      	movs	r3, #0
 8006882:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006896:	b29a      	uxth	r2, r3
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	1c9a      	adds	r2, r3, #2
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	629a      	str	r2, [r3, #40]	; 0x28
 80068a6:	e026      	b.n	80068f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ba:	d007      	beq.n	80068cc <UART_Receive_IT+0x74>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <UART_Receive_IT+0x82>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d106      	bne.n	80068da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	e008      	b.n	80068ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29b      	uxth	r3, r3
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	4619      	mov	r1, r3
 8006904:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006906:	2b00      	cmp	r3, #0
 8006908:	d15a      	bne.n	80069c0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0220 	bic.w	r2, r2, #32
 8006918:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006928:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695a      	ldr	r2, [r3, #20]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0201 	bic.w	r2, r2, #1
 8006938:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	2b01      	cmp	r3, #1
 8006948:	d135      	bne.n	80069b6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	330c      	adds	r3, #12
 8006956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	613b      	str	r3, [r7, #16]
   return(result);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f023 0310 	bic.w	r3, r3, #16
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	330c      	adds	r3, #12
 800696e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006970:	623a      	str	r2, [r7, #32]
 8006972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	69f9      	ldr	r1, [r7, #28]
 8006976:	6a3a      	ldr	r2, [r7, #32]
 8006978:	e841 2300 	strex	r3, r2, [r1]
 800697c:	61bb      	str	r3, [r7, #24]
   return(result);
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1e5      	bne.n	8006950 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0310 	and.w	r3, r3, #16
 800698e:	2b10      	cmp	r3, #16
 8006990:	d10a      	bne.n	80069a8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff fcee 	bl	8006390 <HAL_UARTEx_RxEventCallback>
 80069b4:	e002      	b.n	80069bc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fa ff26 	bl	8001808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	e002      	b.n	80069c6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	e000      	b.n	80069c6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80069c4:	2302      	movs	r3, #2
  }
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3730      	adds	r7, #48	; 0x30
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d4:	b0c0      	sub	sp, #256	; 0x100
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ec:	68d9      	ldr	r1, [r3, #12]
 80069ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	ea40 0301 	orr.w	r3, r0, r1
 80069f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a28:	f021 010c 	bic.w	r1, r1, #12
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a36:	430b      	orrs	r3, r1
 8006a38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4a:	6999      	ldr	r1, [r3, #24]
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	ea40 0301 	orr.w	r3, r0, r1
 8006a56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4b8f      	ldr	r3, [pc, #572]	; (8006c9c <UART_SetConfig+0x2cc>)
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d005      	beq.n	8006a70 <UART_SetConfig+0xa0>
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	4b8d      	ldr	r3, [pc, #564]	; (8006ca0 <UART_SetConfig+0x2d0>)
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d104      	bne.n	8006a7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a70:	f7fd f8ac 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 8006a74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a78:	e003      	b.n	8006a82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a7a:	f7fd f893 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8006a7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a8c:	f040 810c 	bne.w	8006ca8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	462b      	mov	r3, r5
 8006aa6:	1891      	adds	r1, r2, r2
 8006aa8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006aaa:	415b      	adcs	r3, r3
 8006aac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	eb12 0801 	adds.w	r8, r2, r1
 8006ab8:	4629      	mov	r1, r5
 8006aba:	eb43 0901 	adc.w	r9, r3, r1
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ad2:	4690      	mov	r8, r2
 8006ad4:	4699      	mov	r9, r3
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	eb18 0303 	adds.w	r3, r8, r3
 8006adc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ae0:	462b      	mov	r3, r5
 8006ae2:	eb49 0303 	adc.w	r3, r9, r3
 8006ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006af6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006afa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006afe:	460b      	mov	r3, r1
 8006b00:	18db      	adds	r3, r3, r3
 8006b02:	653b      	str	r3, [r7, #80]	; 0x50
 8006b04:	4613      	mov	r3, r2
 8006b06:	eb42 0303 	adc.w	r3, r2, r3
 8006b0a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b14:	f7fa f8b8 	bl	8000c88 <__aeabi_uldivmod>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4b61      	ldr	r3, [pc, #388]	; (8006ca4 <UART_SetConfig+0x2d4>)
 8006b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b22:	095b      	lsrs	r3, r3, #5
 8006b24:	011c      	lsls	r4, r3, #4
 8006b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b38:	4642      	mov	r2, r8
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	1891      	adds	r1, r2, r2
 8006b3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b40:	415b      	adcs	r3, r3
 8006b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b48:	4641      	mov	r1, r8
 8006b4a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b4e:	4649      	mov	r1, r9
 8006b50:	eb43 0b01 	adc.w	fp, r3, r1
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b68:	4692      	mov	sl, r2
 8006b6a:	469b      	mov	fp, r3
 8006b6c:	4643      	mov	r3, r8
 8006b6e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b76:	464b      	mov	r3, r9
 8006b78:	eb4b 0303 	adc.w	r3, fp, r3
 8006b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b94:	460b      	mov	r3, r1
 8006b96:	18db      	adds	r3, r3, r3
 8006b98:	643b      	str	r3, [r7, #64]	; 0x40
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ba6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006baa:	f7fa f86d 	bl	8000c88 <__aeabi_uldivmod>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4b3b      	ldr	r3, [pc, #236]	; (8006ca4 <UART_SetConfig+0x2d4>)
 8006bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	2264      	movs	r2, #100	; 0x64
 8006bbe:	fb02 f303 	mul.w	r3, r2, r3
 8006bc2:	1acb      	subs	r3, r1, r3
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bca:	4b36      	ldr	r3, [pc, #216]	; (8006ca4 <UART_SetConfig+0x2d4>)
 8006bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8006bd0:	095b      	lsrs	r3, r3, #5
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bd8:	441c      	add	r4, r3
 8006bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006be8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bec:	4642      	mov	r2, r8
 8006bee:	464b      	mov	r3, r9
 8006bf0:	1891      	adds	r1, r2, r2
 8006bf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bf4:	415b      	adcs	r3, r3
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bfc:	4641      	mov	r1, r8
 8006bfe:	1851      	adds	r1, r2, r1
 8006c00:	6339      	str	r1, [r7, #48]	; 0x30
 8006c02:	4649      	mov	r1, r9
 8006c04:	414b      	adcs	r3, r1
 8006c06:	637b      	str	r3, [r7, #52]	; 0x34
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c14:	4659      	mov	r1, fp
 8006c16:	00cb      	lsls	r3, r1, #3
 8006c18:	4651      	mov	r1, sl
 8006c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c1e:	4651      	mov	r1, sl
 8006c20:	00ca      	lsls	r2, r1, #3
 8006c22:	4610      	mov	r0, r2
 8006c24:	4619      	mov	r1, r3
 8006c26:	4603      	mov	r3, r0
 8006c28:	4642      	mov	r2, r8
 8006c2a:	189b      	adds	r3, r3, r2
 8006c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c30:	464b      	mov	r3, r9
 8006c32:	460a      	mov	r2, r1
 8006c34:	eb42 0303 	adc.w	r3, r2, r3
 8006c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c50:	460b      	mov	r3, r1
 8006c52:	18db      	adds	r3, r3, r3
 8006c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c56:	4613      	mov	r3, r2
 8006c58:	eb42 0303 	adc.w	r3, r2, r3
 8006c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c66:	f7fa f80f 	bl	8000c88 <__aeabi_uldivmod>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <UART_SetConfig+0x2d4>)
 8006c70:	fba3 1302 	umull	r1, r3, r3, r2
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	2164      	movs	r1, #100	; 0x64
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	3332      	adds	r3, #50	; 0x32
 8006c82:	4a08      	ldr	r2, [pc, #32]	; (8006ca4 <UART_SetConfig+0x2d4>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	f003 0207 	and.w	r2, r3, #7
 8006c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4422      	add	r2, r4
 8006c96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c98:	e105      	b.n	8006ea6 <UART_SetConfig+0x4d6>
 8006c9a:	bf00      	nop
 8006c9c:	40011000 	.word	0x40011000
 8006ca0:	40011400 	.word	0x40011400
 8006ca4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006cb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006cba:	4642      	mov	r2, r8
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	1891      	adds	r1, r2, r2
 8006cc0:	6239      	str	r1, [r7, #32]
 8006cc2:	415b      	adcs	r3, r3
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cca:	4641      	mov	r1, r8
 8006ccc:	1854      	adds	r4, r2, r1
 8006cce:	4649      	mov	r1, r9
 8006cd0:	eb43 0501 	adc.w	r5, r3, r1
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	f04f 0300 	mov.w	r3, #0
 8006cdc:	00eb      	lsls	r3, r5, #3
 8006cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ce2:	00e2      	lsls	r2, r4, #3
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	461d      	mov	r5, r3
 8006ce8:	4643      	mov	r3, r8
 8006cea:	18e3      	adds	r3, r4, r3
 8006cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	eb45 0303 	adc.w	r3, r5, r3
 8006cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	f04f 0300 	mov.w	r3, #0
 8006d12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d16:	4629      	mov	r1, r5
 8006d18:	008b      	lsls	r3, r1, #2
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d20:	4621      	mov	r1, r4
 8006d22:	008a      	lsls	r2, r1, #2
 8006d24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d28:	f7f9 ffae 	bl	8000c88 <__aeabi_uldivmod>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4b60      	ldr	r3, [pc, #384]	; (8006eb4 <UART_SetConfig+0x4e4>)
 8006d32:	fba3 2302 	umull	r2, r3, r3, r2
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	011c      	lsls	r4, r3, #4
 8006d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	464b      	mov	r3, r9
 8006d50:	1891      	adds	r1, r2, r2
 8006d52:	61b9      	str	r1, [r7, #24]
 8006d54:	415b      	adcs	r3, r3
 8006d56:	61fb      	str	r3, [r7, #28]
 8006d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d5c:	4641      	mov	r1, r8
 8006d5e:	1851      	adds	r1, r2, r1
 8006d60:	6139      	str	r1, [r7, #16]
 8006d62:	4649      	mov	r1, r9
 8006d64:	414b      	adcs	r3, r1
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d74:	4659      	mov	r1, fp
 8006d76:	00cb      	lsls	r3, r1, #3
 8006d78:	4651      	mov	r1, sl
 8006d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d7e:	4651      	mov	r1, sl
 8006d80:	00ca      	lsls	r2, r1, #3
 8006d82:	4610      	mov	r0, r2
 8006d84:	4619      	mov	r1, r3
 8006d86:	4603      	mov	r3, r0
 8006d88:	4642      	mov	r2, r8
 8006d8a:	189b      	adds	r3, r3, r2
 8006d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d90:	464b      	mov	r3, r9
 8006d92:	460a      	mov	r2, r1
 8006d94:	eb42 0303 	adc.w	r3, r2, r3
 8006d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006da6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	f04f 0300 	mov.w	r3, #0
 8006db0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006db4:	4649      	mov	r1, r9
 8006db6:	008b      	lsls	r3, r1, #2
 8006db8:	4641      	mov	r1, r8
 8006dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dbe:	4641      	mov	r1, r8
 8006dc0:	008a      	lsls	r2, r1, #2
 8006dc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006dc6:	f7f9 ff5f 	bl	8000c88 <__aeabi_uldivmod>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4b39      	ldr	r3, [pc, #228]	; (8006eb4 <UART_SetConfig+0x4e4>)
 8006dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd4:	095b      	lsrs	r3, r3, #5
 8006dd6:	2164      	movs	r1, #100	; 0x64
 8006dd8:	fb01 f303 	mul.w	r3, r1, r3
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	3332      	adds	r3, #50	; 0x32
 8006de2:	4a34      	ldr	r2, [pc, #208]	; (8006eb4 <UART_SetConfig+0x4e4>)
 8006de4:	fba2 2303 	umull	r2, r3, r2, r3
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dee:	441c      	add	r4, r3
 8006df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df4:	2200      	movs	r2, #0
 8006df6:	673b      	str	r3, [r7, #112]	; 0x70
 8006df8:	677a      	str	r2, [r7, #116]	; 0x74
 8006dfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006dfe:	4642      	mov	r2, r8
 8006e00:	464b      	mov	r3, r9
 8006e02:	1891      	adds	r1, r2, r2
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	415b      	adcs	r3, r3
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e0e:	4641      	mov	r1, r8
 8006e10:	1851      	adds	r1, r2, r1
 8006e12:	6039      	str	r1, [r7, #0]
 8006e14:	4649      	mov	r1, r9
 8006e16:	414b      	adcs	r3, r1
 8006e18:	607b      	str	r3, [r7, #4]
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e26:	4659      	mov	r1, fp
 8006e28:	00cb      	lsls	r3, r1, #3
 8006e2a:	4651      	mov	r1, sl
 8006e2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e30:	4651      	mov	r1, sl
 8006e32:	00ca      	lsls	r2, r1, #3
 8006e34:	4610      	mov	r0, r2
 8006e36:	4619      	mov	r1, r3
 8006e38:	4603      	mov	r3, r0
 8006e3a:	4642      	mov	r2, r8
 8006e3c:	189b      	adds	r3, r3, r2
 8006e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e40:	464b      	mov	r3, r9
 8006e42:	460a      	mov	r2, r1
 8006e44:	eb42 0303 	adc.w	r3, r2, r3
 8006e48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	663b      	str	r3, [r7, #96]	; 0x60
 8006e54:	667a      	str	r2, [r7, #100]	; 0x64
 8006e56:	f04f 0200 	mov.w	r2, #0
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e62:	4649      	mov	r1, r9
 8006e64:	008b      	lsls	r3, r1, #2
 8006e66:	4641      	mov	r1, r8
 8006e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e6c:	4641      	mov	r1, r8
 8006e6e:	008a      	lsls	r2, r1, #2
 8006e70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e74:	f7f9 ff08 	bl	8000c88 <__aeabi_uldivmod>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <UART_SetConfig+0x4e4>)
 8006e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	2164      	movs	r1, #100	; 0x64
 8006e86:	fb01 f303 	mul.w	r3, r1, r3
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	3332      	adds	r3, #50	; 0x32
 8006e90:	4a08      	ldr	r2, [pc, #32]	; (8006eb4 <UART_SetConfig+0x4e4>)
 8006e92:	fba2 2303 	umull	r2, r3, r2, r3
 8006e96:	095b      	lsrs	r3, r3, #5
 8006e98:	f003 020f 	and.w	r2, r3, #15
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4422      	add	r2, r4
 8006ea4:	609a      	str	r2, [r3, #8]
}
 8006ea6:	bf00      	nop
 8006ea8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006eac:	46bd      	mov	sp, r7
 8006eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eb2:	bf00      	nop
 8006eb4:	51eb851f 	.word	0x51eb851f

08006eb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f103 0208 	add.w	r2, r3, #8
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f103 0208 	add.w	r2, r3, #8
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f103 0208 	add.w	r2, r3, #8
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	601a      	str	r2, [r3, #0]
}
 8006f4e:	bf00      	nop
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d103      	bne.n	8006f7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	e00c      	b.n	8006f94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	e002      	b.n	8006f88 <vListInsert+0x2e>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d2f6      	bcs.n	8006f82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	601a      	str	r2, [r3, #0]
}
 8006fc0:	bf00      	nop
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6892      	ldr	r2, [r2, #8]
 8006fe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6852      	ldr	r2, [r2, #4]
 8006fec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d103      	bne.n	8007000 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	1e5a      	subs	r2, r3, #1
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007046:	bf00      	nop
 8007048:	e7fe      	b.n	8007048 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800704a:	f001 fdbb 	bl	8008bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007056:	68f9      	ldr	r1, [r7, #12]
 8007058:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800705a:	fb01 f303 	mul.w	r3, r1, r3
 800705e:	441a      	add	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707a:	3b01      	subs	r3, #1
 800707c:	68f9      	ldr	r1, [r7, #12]
 800707e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007080:	fb01 f303 	mul.w	r3, r1, r3
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	22ff      	movs	r2, #255	; 0xff
 800708e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	22ff      	movs	r2, #255	; 0xff
 8007096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d114      	bne.n	80070ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01a      	beq.n	80070de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3310      	adds	r3, #16
 80070ac:	4618      	mov	r0, r3
 80070ae:	f001 f901 	bl	80082b4 <xTaskRemoveFromEventList>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d012      	beq.n	80070de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070b8:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <xQueueGenericReset+0xcc>)
 80070ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	e009      	b.n	80070de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3310      	adds	r3, #16
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7ff fef2 	bl	8006eb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3324      	adds	r3, #36	; 0x24
 80070d8:	4618      	mov	r0, r3
 80070da:	f7ff feed 	bl	8006eb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070de:	f001 fda1 	bl	8008c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070e2:	2301      	movs	r3, #1
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	e000ed04 	.word	0xe000ed04

080070f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08a      	sub	sp, #40	; 0x28
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	4613      	mov	r3, r2
 80070fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10a      	bne.n	800711a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	613b      	str	r3, [r7, #16]
}
 8007116:	bf00      	nop
 8007118:	e7fe      	b.n	8007118 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	fb02 f303 	mul.w	r3, r2, r3
 8007122:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	3348      	adds	r3, #72	; 0x48
 8007128:	4618      	mov	r0, r3
 800712a:	f001 fe6d 	bl	8008e08 <pvPortMalloc>
 800712e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d011      	beq.n	800715a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	3348      	adds	r3, #72	; 0x48
 800713e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007148:	79fa      	ldrb	r2, [r7, #7]
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	4613      	mov	r3, r2
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f805 	bl	8007164 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800715a:	69bb      	ldr	r3, [r7, #24]
	}
 800715c:	4618      	mov	r0, r3
 800715e:	3720      	adds	r7, #32
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d103      	bne.n	8007180 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	e002      	b.n	8007186 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007192:	2101      	movs	r1, #1
 8007194:	69b8      	ldr	r0, [r7, #24]
 8007196:	f7ff ff43 	bl	8007020 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800719a:	bf00      	nop
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b08e      	sub	sp, #56	; 0x38
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	623b      	str	r3, [r7, #32]
}
 80071c8:	bf00      	nop
 80071ca:	e7fe      	b.n	80071ca <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00a      	beq.n	80071ea <xQueueGiveFromISR+0x48>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	61fb      	str	r3, [r7, #28]
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d103      	bne.n	80071fa <xQueueGiveFromISR+0x58>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <xQueueGiveFromISR+0x5c>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <xQueueGiveFromISR+0x5e>
 80071fe:	2300      	movs	r3, #0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <xQueueGiveFromISR+0x78>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	61bb      	str	r3, [r7, #24]
}
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800721a:	f001 fdb5 	bl	8008d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800721e:	f3ef 8211 	mrs	r2, BASEPRI
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	617a      	str	r2, [r7, #20]
 8007234:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007236:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007238:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007246:	429a      	cmp	r2, r3
 8007248:	d22b      	bcs.n	80072a2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800725c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d112      	bne.n	800728c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	2b00      	cmp	r3, #0
 800726c:	d016      	beq.n	800729c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	3324      	adds	r3, #36	; 0x24
 8007272:	4618      	mov	r0, r3
 8007274:	f001 f81e 	bl	80082b4 <xTaskRemoveFromEventList>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00e      	beq.n	800729c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2201      	movs	r2, #1
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	e007      	b.n	800729c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800728c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007290:	3301      	adds	r3, #1
 8007292:	b2db      	uxtb	r3, r3
 8007294:	b25a      	sxtb	r2, r3
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800729c:	2301      	movs	r3, #1
 800729e:	637b      	str	r3, [r7, #52]	; 0x34
 80072a0:	e001      	b.n	80072a6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	637b      	str	r3, [r7, #52]	; 0x34
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3738      	adds	r7, #56	; 0x38
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08e      	sub	sp, #56	; 0x38
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80072c6:	2300      	movs	r3, #0
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80072ce:	2300      	movs	r3, #0
 80072d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <xQueueSemaphoreTake+0x32>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	623b      	str	r3, [r7, #32]
}
 80072ea:	bf00      	nop
 80072ec:	e7fe      	b.n	80072ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <xQueueSemaphoreTake+0x50>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	61fb      	str	r3, [r7, #28]
}
 8007308:	bf00      	nop
 800730a:	e7fe      	b.n	800730a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800730c:	f001 f992 	bl	8008634 <xTaskGetSchedulerState>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d102      	bne.n	800731c <xQueueSemaphoreTake+0x60>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <xQueueSemaphoreTake+0x64>
 800731c:	2301      	movs	r3, #1
 800731e:	e000      	b.n	8007322 <xQueueSemaphoreTake+0x66>
 8007320:	2300      	movs	r3, #0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	61bb      	str	r3, [r7, #24]
}
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800733c:	f001 fc42 	bl	8008bc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	2b00      	cmp	r3, #0
 800734a:	d024      	beq.n	8007396 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	1e5a      	subs	r2, r3, #1
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800735c:	f001 fa8c 	bl	8008878 <pvTaskIncrementMutexHeldCount>
 8007360:	4602      	mov	r2, r0
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00f      	beq.n	800738e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	3310      	adds	r3, #16
 8007372:	4618      	mov	r0, r3
 8007374:	f000 ff9e 	bl	80082b4 <xTaskRemoveFromEventList>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800737e:	4b54      	ldr	r3, [pc, #336]	; (80074d0 <xQueueSemaphoreTake+0x214>)
 8007380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800738e:	f001 fc49 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 8007392:	2301      	movs	r3, #1
 8007394:	e097      	b.n	80074c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d111      	bne.n	80073c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	617b      	str	r3, [r7, #20]
}
 80073b4:	bf00      	nop
 80073b6:	e7fe      	b.n	80073b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80073b8:	f001 fc34 	bl	8008c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073bc:	2300      	movs	r3, #0
 80073be:	e082      	b.n	80074c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d106      	bne.n	80073d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073c6:	f107 030c 	add.w	r3, r7, #12
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 ffd4 	bl	8008378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073d0:	2301      	movs	r3, #1
 80073d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073d4:	f001 fc26 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073d8:	f000 fd74 	bl	8007ec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073dc:	f001 fbf2 	bl	8008bc4 <vPortEnterCritical>
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073e6:	b25b      	sxtb	r3, r3
 80073e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ec:	d103      	bne.n	80073f6 <xQueueSemaphoreTake+0x13a>
 80073ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073fc:	b25b      	sxtb	r3, r3
 80073fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007402:	d103      	bne.n	800740c <xQueueSemaphoreTake+0x150>
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800740c:	f001 fc0a 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007410:	463a      	mov	r2, r7
 8007412:	f107 030c 	add.w	r3, r7, #12
 8007416:	4611      	mov	r1, r2
 8007418:	4618      	mov	r0, r3
 800741a:	f000 ffc3 	bl	80083a4 <xTaskCheckForTimeOut>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d132      	bne.n	800748a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007426:	f000 f8bf 	bl	80075a8 <prvIsQueueEmpty>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d026      	beq.n	800747e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d109      	bne.n	800744c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007438:	f001 fbc4 	bl	8008bc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	4618      	mov	r0, r3
 8007442:	f001 f915 	bl	8008670 <xTaskPriorityInherit>
 8007446:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007448:	f001 fbec 	bl	8008c24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	3324      	adds	r3, #36	; 0x24
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	4611      	mov	r1, r2
 8007454:	4618      	mov	r0, r3
 8007456:	f000 ff09 	bl	800826c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800745a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800745c:	f000 f852 	bl	8007504 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007460:	f000 fd3e 	bl	8007ee0 <xTaskResumeAll>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	f47f af68 	bne.w	800733c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800746c:	4b18      	ldr	r3, [pc, #96]	; (80074d0 <xQueueSemaphoreTake+0x214>)
 800746e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	e75e      	b.n	800733c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800747e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007480:	f000 f840 	bl	8007504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007484:	f000 fd2c 	bl	8007ee0 <xTaskResumeAll>
 8007488:	e758      	b.n	800733c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800748a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800748c:	f000 f83a 	bl	8007504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007490:	f000 fd26 	bl	8007ee0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007496:	f000 f887 	bl	80075a8 <prvIsQueueEmpty>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	f43f af4d 	beq.w	800733c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00d      	beq.n	80074c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80074a8:	f001 fb8c 	bl	8008bc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80074ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074ae:	f000 f811 	bl	80074d4 <prvGetDisinheritPriorityAfterTimeout>
 80074b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 f94e 	bl	800875c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80074c0:	f001 fbb0 	bl	8008c24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3738      	adds	r7, #56	; 0x38
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	e000ed04 	.word	0xe000ed04

080074d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d006      	beq.n	80074f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1c3 0308 	rsb	r3, r3, #8
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	e001      	b.n	80074f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074f6:	68fb      	ldr	r3, [r7, #12]
	}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800750c:	f001 fb5a 	bl	8008bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007516:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007518:	e011      	b.n	800753e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	2b00      	cmp	r3, #0
 8007520:	d012      	beq.n	8007548 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3324      	adds	r3, #36	; 0x24
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fec4 	bl	80082b4 <xTaskRemoveFromEventList>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007532:	f000 ff99 	bl	8008468 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	3b01      	subs	r3, #1
 800753a:	b2db      	uxtb	r3, r3
 800753c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800753e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007542:	2b00      	cmp	r3, #0
 8007544:	dce9      	bgt.n	800751a <prvUnlockQueue+0x16>
 8007546:	e000      	b.n	800754a <prvUnlockQueue+0x46>
					break;
 8007548:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	22ff      	movs	r2, #255	; 0xff
 800754e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007552:	f001 fb67 	bl	8008c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007556:	f001 fb35 	bl	8008bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007560:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007562:	e011      	b.n	8007588 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d012      	beq.n	8007592 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3310      	adds	r3, #16
 8007570:	4618      	mov	r0, r3
 8007572:	f000 fe9f 	bl	80082b4 <xTaskRemoveFromEventList>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800757c:	f000 ff74 	bl	8008468 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	3b01      	subs	r3, #1
 8007584:	b2db      	uxtb	r3, r3
 8007586:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800758c:	2b00      	cmp	r3, #0
 800758e:	dce9      	bgt.n	8007564 <prvUnlockQueue+0x60>
 8007590:	e000      	b.n	8007594 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007592:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	22ff      	movs	r2, #255	; 0xff
 8007598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800759c:	f001 fb42 	bl	8008c24 <vPortExitCritical>
}
 80075a0:	bf00      	nop
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075b0:	f001 fb08 	bl	8008bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075bc:	2301      	movs	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	e001      	b.n	80075c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075c6:	f001 fb2d 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 80075ca:	68fb      	ldr	r3, [r7, #12]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08e      	sub	sp, #56	; 0x38
 80075d8:	af04      	add	r7, sp, #16
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	623b      	str	r3, [r7, #32]
}
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <xTaskCreateStatic+0x46>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	61fb      	str	r3, [r7, #28]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800761a:	23b4      	movs	r3, #180	; 0xb4
 800761c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2bb4      	cmp	r3, #180	; 0xb4
 8007622:	d00a      	beq.n	800763a <xTaskCreateStatic+0x66>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	61bb      	str	r3, [r7, #24]
}
 8007636:	bf00      	nop
 8007638:	e7fe      	b.n	8007638 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800763a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	2b00      	cmp	r3, #0
 8007640:	d01e      	beq.n	8007680 <xTaskCreateStatic+0xac>
 8007642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01b      	beq.n	8007680 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007650:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	2202      	movs	r2, #2
 8007656:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800765a:	2300      	movs	r3, #0
 800765c:	9303      	str	r3, [sp, #12]
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	9302      	str	r3, [sp, #8]
 8007662:	f107 0314 	add.w	r3, r7, #20
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 f850 	bl	8007718 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800767a:	f000 f8eb 	bl	8007854 <prvAddNewTaskToReadyList>
 800767e:	e001      	b.n	8007684 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007684:	697b      	ldr	r3, [r7, #20]
	}
 8007686:	4618      	mov	r0, r3
 8007688:	3728      	adds	r7, #40	; 0x28
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800768e:	b580      	push	{r7, lr}
 8007690:	b08c      	sub	sp, #48	; 0x30
 8007692:	af04      	add	r7, sp, #16
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	603b      	str	r3, [r7, #0]
 800769a:	4613      	mov	r3, r2
 800769c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800769e:	88fb      	ldrh	r3, [r7, #6]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 fbb0 	bl	8008e08 <pvPortMalloc>
 80076a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00e      	beq.n	80076ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076b0:	20b4      	movs	r0, #180	; 0xb4
 80076b2:	f001 fba9 	bl	8008e08 <pvPortMalloc>
 80076b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
 80076c4:	e005      	b.n	80076d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076c6:	6978      	ldr	r0, [r7, #20]
 80076c8:	f001 fc6a 	bl	8008fa0 <vPortFree>
 80076cc:	e001      	b.n	80076d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d017      	beq.n	8007708 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076e0:	88fa      	ldrh	r2, [r7, #6]
 80076e2:	2300      	movs	r3, #0
 80076e4:	9303      	str	r3, [sp, #12]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	9302      	str	r3, [sp, #8]
 80076ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 f80e 	bl	8007718 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076fc:	69f8      	ldr	r0, [r7, #28]
 80076fe:	f000 f8a9 	bl	8007854 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007702:	2301      	movs	r3, #1
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	e002      	b.n	800770e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007708:	f04f 33ff 	mov.w	r3, #4294967295
 800770c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800770e:	69bb      	ldr	r3, [r7, #24]
	}
 8007710:	4618      	mov	r0, r3
 8007712:	3720      	adds	r7, #32
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007730:	3b01      	subs	r3, #1
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <prvInitialiseNewTask+0x48>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	617b      	str	r3, [r7, #20]
}
 800775c:	bf00      	nop
 800775e:	e7fe      	b.n	800775e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d01f      	beq.n	80077a6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007766:	2300      	movs	r3, #0
 8007768:	61fb      	str	r3, [r7, #28]
 800776a:	e012      	b.n	8007792 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	4413      	add	r3, r2
 8007772:	7819      	ldrb	r1, [r3, #0]
 8007774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	3334      	adds	r3, #52	; 0x34
 800777c:	460a      	mov	r2, r1
 800777e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d006      	beq.n	800779a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	3301      	adds	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	2b0f      	cmp	r3, #15
 8007796:	d9e9      	bls.n	800776c <prvInitialiseNewTask+0x54>
 8007798:	e000      	b.n	800779c <prvInitialiseNewTask+0x84>
			{
				break;
 800779a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077a4:	e003      	b.n	80077ae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b0:	2b07      	cmp	r3, #7
 80077b2:	d901      	bls.n	80077b8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077b4:	2307      	movs	r3, #7
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	2200      	movs	r2, #0
 80077c8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	3304      	adds	r3, #4
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff fb92 	bl	8006ef8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d6:	3318      	adds	r3, #24
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff fb8d 	bl	8006ef8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	f1c3 0208 	rsb	r2, r3, #8
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	334c      	adds	r3, #76	; 0x4c
 8007808:	2260      	movs	r2, #96	; 0x60
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f001 fe16 	bl	800943e <memset>
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	4a0c      	ldr	r2, [pc, #48]	; (8007848 <prvInitialiseNewTask+0x130>)
 8007816:	651a      	str	r2, [r3, #80]	; 0x50
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	4a0c      	ldr	r2, [pc, #48]	; (800784c <prvInitialiseNewTask+0x134>)
 800781c:	655a      	str	r2, [r3, #84]	; 0x54
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	4a0b      	ldr	r2, [pc, #44]	; (8007850 <prvInitialiseNewTask+0x138>)
 8007822:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	68f9      	ldr	r1, [r7, #12]
 8007828:	69b8      	ldr	r0, [r7, #24]
 800782a:	f001 f89f 	bl	800896c <pxPortInitialiseStack>
 800782e:	4602      	mov	r2, r0
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800783a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800783e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007840:	bf00      	nop
 8007842:	3720      	adds	r7, #32
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	0800c1f4 	.word	0x0800c1f4
 800784c:	0800c214 	.word	0x0800c214
 8007850:	0800c1d4 	.word	0x0800c1d4

08007854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800785c:	f001 f9b2 	bl	8008bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007860:	4b2a      	ldr	r3, [pc, #168]	; (800790c <prvAddNewTaskToReadyList+0xb8>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3301      	adds	r3, #1
 8007866:	4a29      	ldr	r2, [pc, #164]	; (800790c <prvAddNewTaskToReadyList+0xb8>)
 8007868:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800786a:	4b29      	ldr	r3, [pc, #164]	; (8007910 <prvAddNewTaskToReadyList+0xbc>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007872:	4a27      	ldr	r2, [pc, #156]	; (8007910 <prvAddNewTaskToReadyList+0xbc>)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007878:	4b24      	ldr	r3, [pc, #144]	; (800790c <prvAddNewTaskToReadyList+0xb8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d110      	bne.n	80078a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007880:	f000 fe16 	bl	80084b0 <prvInitialiseTaskLists>
 8007884:	e00d      	b.n	80078a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007886:	4b23      	ldr	r3, [pc, #140]	; (8007914 <prvAddNewTaskToReadyList+0xc0>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800788e:	4b20      	ldr	r3, [pc, #128]	; (8007910 <prvAddNewTaskToReadyList+0xbc>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	429a      	cmp	r2, r3
 800789a:	d802      	bhi.n	80078a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800789c:	4a1c      	ldr	r2, [pc, #112]	; (8007910 <prvAddNewTaskToReadyList+0xbc>)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078a2:	4b1d      	ldr	r3, [pc, #116]	; (8007918 <prvAddNewTaskToReadyList+0xc4>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3301      	adds	r3, #1
 80078a8:	4a1b      	ldr	r2, [pc, #108]	; (8007918 <prvAddNewTaskToReadyList+0xc4>)
 80078aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	2201      	movs	r2, #1
 80078b2:	409a      	lsls	r2, r3
 80078b4:	4b19      	ldr	r3, [pc, #100]	; (800791c <prvAddNewTaskToReadyList+0xc8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	4a18      	ldr	r2, [pc, #96]	; (800791c <prvAddNewTaskToReadyList+0xc8>)
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4a15      	ldr	r2, [pc, #84]	; (8007920 <prvAddNewTaskToReadyList+0xcc>)
 80078cc:	441a      	add	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3304      	adds	r3, #4
 80078d2:	4619      	mov	r1, r3
 80078d4:	4610      	mov	r0, r2
 80078d6:	f7ff fb1c 	bl	8006f12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078da:	f001 f9a3 	bl	8008c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078de:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <prvAddNewTaskToReadyList+0xc0>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00e      	beq.n	8007904 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078e6:	4b0a      	ldr	r3, [pc, #40]	; (8007910 <prvAddNewTaskToReadyList+0xbc>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d207      	bcs.n	8007904 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078f4:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <prvAddNewTaskToReadyList+0xd0>)
 80078f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	20000938 	.word	0x20000938
 8007910:	20000824 	.word	0x20000824
 8007914:	20000944 	.word	0x20000944
 8007918:	20000954 	.word	0x20000954
 800791c:	20000940 	.word	0x20000940
 8007920:	20000828 	.word	0x20000828
 8007924:	e000ed04 	.word	0xe000ed04

08007928 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007930:	f001 f948 	bl	8008bc4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d102      	bne.n	8007940 <vTaskDelete+0x18>
 800793a:	4b39      	ldr	r3, [pc, #228]	; (8007a20 <vTaskDelete+0xf8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	e000      	b.n	8007942 <vTaskDelete+0x1a>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3304      	adds	r3, #4
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff fb3f 	bl	8006fcc <uxListRemove>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d115      	bne.n	8007980 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007958:	4932      	ldr	r1, [pc, #200]	; (8007a24 <vTaskDelete+0xfc>)
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	440b      	add	r3, r1
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <vTaskDelete+0x58>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	2201      	movs	r2, #1
 8007970:	fa02 f303 	lsl.w	r3, r2, r3
 8007974:	43da      	mvns	r2, r3
 8007976:	4b2c      	ldr	r3, [pc, #176]	; (8007a28 <vTaskDelete+0x100>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4013      	ands	r3, r2
 800797c:	4a2a      	ldr	r2, [pc, #168]	; (8007a28 <vTaskDelete+0x100>)
 800797e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3318      	adds	r3, #24
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff fb1d 	bl	8006fcc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007992:	4b26      	ldr	r3, [pc, #152]	; (8007a2c <vTaskDelete+0x104>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3301      	adds	r3, #1
 8007998:	4a24      	ldr	r2, [pc, #144]	; (8007a2c <vTaskDelete+0x104>)
 800799a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800799c:	4b20      	ldr	r3, [pc, #128]	; (8007a20 <vTaskDelete+0xf8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d10b      	bne.n	80079be <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3304      	adds	r3, #4
 80079aa:	4619      	mov	r1, r3
 80079ac:	4820      	ldr	r0, [pc, #128]	; (8007a30 <vTaskDelete+0x108>)
 80079ae:	f7ff fab0 	bl	8006f12 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80079b2:	4b20      	ldr	r3, [pc, #128]	; (8007a34 <vTaskDelete+0x10c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3301      	adds	r3, #1
 80079b8:	4a1e      	ldr	r2, [pc, #120]	; (8007a34 <vTaskDelete+0x10c>)
 80079ba:	6013      	str	r3, [r2, #0]
 80079bc:	e009      	b.n	80079d2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80079be:	4b1e      	ldr	r3, [pc, #120]	; (8007a38 <vTaskDelete+0x110>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <vTaskDelete+0x110>)
 80079c6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fddf 	bl	800858c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80079ce:	f000 fe11 	bl	80085f4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80079d2:	f001 f927 	bl	8008c24 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80079d6:	4b19      	ldr	r3, [pc, #100]	; (8007a3c <vTaskDelete+0x114>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d01b      	beq.n	8007a16 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80079de:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <vTaskDelete+0xf8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d116      	bne.n	8007a16 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80079e8:	4b15      	ldr	r3, [pc, #84]	; (8007a40 <vTaskDelete+0x118>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00a      	beq.n	8007a06 <vTaskDelete+0xde>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	60bb      	str	r3, [r7, #8]
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <vTaskDelete+0x11c>)
 8007a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000824 	.word	0x20000824
 8007a24:	20000828 	.word	0x20000828
 8007a28:	20000940 	.word	0x20000940
 8007a2c:	20000954 	.word	0x20000954
 8007a30:	2000090c 	.word	0x2000090c
 8007a34:	20000920 	.word	0x20000920
 8007a38:	20000938 	.word	0x20000938
 8007a3c:	20000944 	.word	0x20000944
 8007a40:	20000960 	.word	0x20000960
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08a      	sub	sp, #40	; 0x28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10a      	bne.n	8007a72 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	617b      	str	r3, [r7, #20]
}
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <vTaskDelayUntil+0x46>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	613b      	str	r3, [r7, #16]
}
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007a8e:	4b2a      	ldr	r3, [pc, #168]	; (8007b38 <vTaskDelayUntil+0xf0>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00a      	beq.n	8007aac <vTaskDelayUntil+0x64>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	60fb      	str	r3, [r7, #12]
}
 8007aa8:	bf00      	nop
 8007aaa:	e7fe      	b.n	8007aaa <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007aac:	f000 fa0a 	bl	8007ec4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007ab0:	4b22      	ldr	r3, [pc, #136]	; (8007b3c <vTaskDelayUntil+0xf4>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4413      	add	r3, r2
 8007abe:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6a3a      	ldr	r2, [r7, #32]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d20b      	bcs.n	8007ae2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69fa      	ldr	r2, [r7, #28]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d211      	bcs.n	8007af8 <vTaskDelayUntil+0xb0>
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d90d      	bls.n	8007af8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007adc:	2301      	movs	r3, #1
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
 8007ae0:	e00a      	b.n	8007af8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69fa      	ldr	r2, [r7, #28]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d303      	bcc.n	8007af4 <vTaskDelayUntil+0xac>
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d901      	bls.n	8007af8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007af4:	2301      	movs	r3, #1
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d006      	beq.n	8007b12 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007b04:	69fa      	ldr	r2, [r7, #28]
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fec7 	bl	80088a0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007b12:	f000 f9e5 	bl	8007ee0 <xTaskResumeAll>
 8007b16:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d107      	bne.n	8007b2e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007b1e:	4b08      	ldr	r3, [pc, #32]	; (8007b40 <vTaskDelayUntil+0xf8>)
 8007b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b2e:	bf00      	nop
 8007b30:	3728      	adds	r7, #40	; 0x28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000960 	.word	0x20000960
 8007b3c:	2000093c 	.word	0x2000093c
 8007b40:	e000ed04 	.word	0xe000ed04

08007b44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d017      	beq.n	8007b86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b56:	4b13      	ldr	r3, [pc, #76]	; (8007ba4 <vTaskDelay+0x60>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <vTaskDelay+0x30>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	60bb      	str	r3, [r7, #8]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b74:	f000 f9a6 	bl	8007ec4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b78:	2100      	movs	r1, #0
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fe90 	bl	80088a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b80:	f000 f9ae 	bl	8007ee0 <xTaskResumeAll>
 8007b84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d107      	bne.n	8007b9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007b8c:	4b06      	ldr	r3, [pc, #24]	; (8007ba8 <vTaskDelay+0x64>)
 8007b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20000960 	.word	0x20000960
 8007ba8:	e000ed04 	.word	0xe000ed04

08007bac <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007bb4:	f001 f806 	bl	8008bc4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d102      	bne.n	8007bc4 <vTaskSuspend+0x18>
 8007bbe:	4b3c      	ldr	r3, [pc, #240]	; (8007cb0 <vTaskSuspend+0x104>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	e000      	b.n	8007bc6 <vTaskSuspend+0x1a>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff f9fd 	bl	8006fcc <uxListRemove>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d115      	bne.n	8007c04 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bdc:	4935      	ldr	r1, [pc, #212]	; (8007cb4 <vTaskSuspend+0x108>)
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	440b      	add	r3, r1
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10a      	bne.n	8007c04 <vTaskSuspend+0x58>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf8:	43da      	mvns	r2, r3
 8007bfa:	4b2f      	ldr	r3, [pc, #188]	; (8007cb8 <vTaskSuspend+0x10c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	4a2d      	ldr	r2, [pc, #180]	; (8007cb8 <vTaskSuspend+0x10c>)
 8007c02:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3318      	adds	r3, #24
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7ff f9db 	bl	8006fcc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4827      	ldr	r0, [pc, #156]	; (8007cbc <vTaskSuspend+0x110>)
 8007c1e:	f7ff f978 	bl	8006f12 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d103      	bne.n	8007c36 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007c36:	f000 fff5 	bl	8008c24 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007c3a:	4b21      	ldr	r3, [pc, #132]	; (8007cc0 <vTaskSuspend+0x114>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d005      	beq.n	8007c4e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007c42:	f000 ffbf 	bl	8008bc4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007c46:	f000 fcd5 	bl	80085f4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007c4a:	f000 ffeb 	bl	8008c24 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007c4e:	4b18      	ldr	r3, [pc, #96]	; (8007cb0 <vTaskSuspend+0x104>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d127      	bne.n	8007ca8 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007c58:	4b19      	ldr	r3, [pc, #100]	; (8007cc0 <vTaskSuspend+0x114>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d017      	beq.n	8007c90 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007c60:	4b18      	ldr	r3, [pc, #96]	; (8007cc4 <vTaskSuspend+0x118>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00a      	beq.n	8007c7e <vTaskSuspend+0xd2>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	60bb      	str	r3, [r7, #8]
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007c7e:	4b12      	ldr	r3, [pc, #72]	; (8007cc8 <vTaskSuspend+0x11c>)
 8007c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c8e:	e00b      	b.n	8007ca8 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007c90:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <vTaskSuspend+0x110>)
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	4b0d      	ldr	r3, [pc, #52]	; (8007ccc <vTaskSuspend+0x120>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d103      	bne.n	8007ca4 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007c9c:	4b04      	ldr	r3, [pc, #16]	; (8007cb0 <vTaskSuspend+0x104>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
	}
 8007ca2:	e001      	b.n	8007ca8 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007ca4:	f000 fa80 	bl	80081a8 <vTaskSwitchContext>
	}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20000824 	.word	0x20000824
 8007cb4:	20000828 	.word	0x20000828
 8007cb8:	20000940 	.word	0x20000940
 8007cbc:	20000924 	.word	0x20000924
 8007cc0:	20000944 	.word	0x20000944
 8007cc4:	20000960 	.word	0x20000960
 8007cc8:	e000ed04 	.word	0xe000ed04
 8007ccc:	20000938 	.word	0x20000938

08007cd0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10a      	bne.n	8007cfc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	60fb      	str	r3, [r7, #12]
}
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <prvTaskIsTaskSuspended+0x5c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d10a      	bne.n	8007d1c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0a:	4a09      	ldr	r2, [pc, #36]	; (8007d30 <prvTaskIsTaskSuspended+0x60>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d005      	beq.n	8007d1c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d1c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007d1e:	4618      	mov	r0, r3
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	20000924 	.word	0x20000924
 8007d30:	200008f8 	.word	0x200008f8

08007d34 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10a      	bne.n	8007d5c <vTaskResume+0x28>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	60bb      	str	r3, [r7, #8]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007d5c:	4b20      	ldr	r3, [pc, #128]	; (8007de0 <vTaskResume+0xac>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d037      	beq.n	8007dd6 <vTaskResume+0xa2>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d034      	beq.n	8007dd6 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8007d6c:	f000 ff2a 	bl	8008bc4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f7ff ffad 	bl	8007cd0 <prvTaskIsTaskSuspended>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d02a      	beq.n	8007dd2 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7ff f923 	bl	8006fcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	409a      	lsls	r2, r3
 8007d8e:	4b15      	ldr	r3, [pc, #84]	; (8007de4 <vTaskResume+0xb0>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	4a13      	ldr	r2, [pc, #76]	; (8007de4 <vTaskResume+0xb0>)
 8007d96:	6013      	str	r3, [r2, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4a10      	ldr	r2, [pc, #64]	; (8007de8 <vTaskResume+0xb4>)
 8007da6:	441a      	add	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3304      	adds	r3, #4
 8007dac:	4619      	mov	r1, r3
 8007dae:	4610      	mov	r0, r2
 8007db0:	f7ff f8af 	bl	8006f12 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db8:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <vTaskResume+0xac>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d307      	bcc.n	8007dd2 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <vTaskResume+0xb8>)
 8007dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007dd2:	f000 ff27 	bl	8008c24 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007dd6:	bf00      	nop
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000824 	.word	0x20000824
 8007de4:	20000940 	.word	0x20000940
 8007de8:	20000828 	.word	0x20000828
 8007dec:	e000ed04 	.word	0xe000ed04

08007df0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	; 0x28
 8007df4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007dfe:	463a      	mov	r2, r7
 8007e00:	1d39      	adds	r1, r7, #4
 8007e02:	f107 0308 	add.w	r3, r7, #8
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7f9 fcc6 	bl	8001798 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	9202      	str	r2, [sp, #8]
 8007e14:	9301      	str	r3, [sp, #4]
 8007e16:	2300      	movs	r3, #0
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	460a      	mov	r2, r1
 8007e1e:	4921      	ldr	r1, [pc, #132]	; (8007ea4 <vTaskStartScheduler+0xb4>)
 8007e20:	4821      	ldr	r0, [pc, #132]	; (8007ea8 <vTaskStartScheduler+0xb8>)
 8007e22:	f7ff fbd7 	bl	80075d4 <xTaskCreateStatic>
 8007e26:	4603      	mov	r3, r0
 8007e28:	4a20      	ldr	r2, [pc, #128]	; (8007eac <vTaskStartScheduler+0xbc>)
 8007e2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e2c:	4b1f      	ldr	r3, [pc, #124]	; (8007eac <vTaskStartScheduler+0xbc>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e34:	2301      	movs	r3, #1
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	e001      	b.n	8007e3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d11b      	bne.n	8007e7c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	613b      	str	r3, [r7, #16]
}
 8007e56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e58:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <vTaskStartScheduler+0xc0>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	334c      	adds	r3, #76	; 0x4c
 8007e5e:	4a15      	ldr	r2, [pc, #84]	; (8007eb4 <vTaskStartScheduler+0xc4>)
 8007e60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e62:	4b15      	ldr	r3, [pc, #84]	; (8007eb8 <vTaskStartScheduler+0xc8>)
 8007e64:	f04f 32ff 	mov.w	r2, #4294967295
 8007e68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e6a:	4b14      	ldr	r3, [pc, #80]	; (8007ebc <vTaskStartScheduler+0xcc>)
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e70:	4b13      	ldr	r3, [pc, #76]	; (8007ec0 <vTaskStartScheduler+0xd0>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e76:	f000 fe03 	bl	8008a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e7a:	e00e      	b.n	8007e9a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e82:	d10a      	bne.n	8007e9a <vTaskStartScheduler+0xaa>
	__asm volatile
 8007e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	60fb      	str	r3, [r7, #12]
}
 8007e96:	bf00      	nop
 8007e98:	e7fe      	b.n	8007e98 <vTaskStartScheduler+0xa8>
}
 8007e9a:	bf00      	nop
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	0800c1ac 	.word	0x0800c1ac
 8007ea8:	08008481 	.word	0x08008481
 8007eac:	2000095c 	.word	0x2000095c
 8007eb0:	20000824 	.word	0x20000824
 8007eb4:	20000014 	.word	0x20000014
 8007eb8:	20000958 	.word	0x20000958
 8007ebc:	20000944 	.word	0x20000944
 8007ec0:	2000093c 	.word	0x2000093c

08007ec4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ec8:	4b04      	ldr	r3, [pc, #16]	; (8007edc <vTaskSuspendAll+0x18>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	4a03      	ldr	r2, [pc, #12]	; (8007edc <vTaskSuspendAll+0x18>)
 8007ed0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ed2:	bf00      	nop
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	20000960 	.word	0x20000960

08007ee0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007eee:	4b41      	ldr	r3, [pc, #260]	; (8007ff4 <xTaskResumeAll+0x114>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10a      	bne.n	8007f0c <xTaskResumeAll+0x2c>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	603b      	str	r3, [r7, #0]
}
 8007f08:	bf00      	nop
 8007f0a:	e7fe      	b.n	8007f0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f0c:	f000 fe5a 	bl	8008bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f10:	4b38      	ldr	r3, [pc, #224]	; (8007ff4 <xTaskResumeAll+0x114>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3b01      	subs	r3, #1
 8007f16:	4a37      	ldr	r2, [pc, #220]	; (8007ff4 <xTaskResumeAll+0x114>)
 8007f18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f1a:	4b36      	ldr	r3, [pc, #216]	; (8007ff4 <xTaskResumeAll+0x114>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d161      	bne.n	8007fe6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f22:	4b35      	ldr	r3, [pc, #212]	; (8007ff8 <xTaskResumeAll+0x118>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d05d      	beq.n	8007fe6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f2a:	e02e      	b.n	8007f8a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2c:	4b33      	ldr	r3, [pc, #204]	; (8007ffc <xTaskResumeAll+0x11c>)
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3318      	adds	r3, #24
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff f847 	bl	8006fcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3304      	adds	r3, #4
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7ff f842 	bl	8006fcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	409a      	lsls	r2, r3
 8007f50:	4b2b      	ldr	r3, [pc, #172]	; (8008000 <xTaskResumeAll+0x120>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	4a2a      	ldr	r2, [pc, #168]	; (8008000 <xTaskResumeAll+0x120>)
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4a27      	ldr	r2, [pc, #156]	; (8008004 <xTaskResumeAll+0x124>)
 8007f68:	441a      	add	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4610      	mov	r0, r2
 8007f72:	f7fe ffce 	bl	8006f12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7a:	4b23      	ldr	r3, [pc, #140]	; (8008008 <xTaskResumeAll+0x128>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d302      	bcc.n	8007f8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007f84:	4b21      	ldr	r3, [pc, #132]	; (800800c <xTaskResumeAll+0x12c>)
 8007f86:	2201      	movs	r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f8a:	4b1c      	ldr	r3, [pc, #112]	; (8007ffc <xTaskResumeAll+0x11c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1cc      	bne.n	8007f2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f98:	f000 fb2c 	bl	80085f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f9c:	4b1c      	ldr	r3, [pc, #112]	; (8008010 <xTaskResumeAll+0x130>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d010      	beq.n	8007fca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fa8:	f000 f846 	bl	8008038 <xTaskIncrementTick>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007fb2:	4b16      	ldr	r3, [pc, #88]	; (800800c <xTaskResumeAll+0x12c>)
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1f1      	bne.n	8007fa8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007fc4:	4b12      	ldr	r3, [pc, #72]	; (8008010 <xTaskResumeAll+0x130>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007fca:	4b10      	ldr	r3, [pc, #64]	; (800800c <xTaskResumeAll+0x12c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007fd6:	4b0f      	ldr	r3, [pc, #60]	; (8008014 <xTaskResumeAll+0x134>)
 8007fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fe6:	f000 fe1d 	bl	8008c24 <vPortExitCritical>

	return xAlreadyYielded;
 8007fea:	68bb      	ldr	r3, [r7, #8]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20000960 	.word	0x20000960
 8007ff8:	20000938 	.word	0x20000938
 8007ffc:	200008f8 	.word	0x200008f8
 8008000:	20000940 	.word	0x20000940
 8008004:	20000828 	.word	0x20000828
 8008008:	20000824 	.word	0x20000824
 800800c:	2000094c 	.word	0x2000094c
 8008010:	20000948 	.word	0x20000948
 8008014:	e000ed04 	.word	0xe000ed04

08008018 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800801e:	4b05      	ldr	r3, [pc, #20]	; (8008034 <xTaskGetTickCount+0x1c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008024:	687b      	ldr	r3, [r7, #4]
}
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	2000093c 	.word	0x2000093c

08008038 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800803e:	2300      	movs	r3, #0
 8008040:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008042:	4b4e      	ldr	r3, [pc, #312]	; (800817c <xTaskIncrementTick+0x144>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	f040 808e 	bne.w	8008168 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800804c:	4b4c      	ldr	r3, [pc, #304]	; (8008180 <xTaskIncrementTick+0x148>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3301      	adds	r3, #1
 8008052:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008054:	4a4a      	ldr	r2, [pc, #296]	; (8008180 <xTaskIncrementTick+0x148>)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d120      	bne.n	80080a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008060:	4b48      	ldr	r3, [pc, #288]	; (8008184 <xTaskIncrementTick+0x14c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <xTaskIncrementTick+0x48>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	603b      	str	r3, [r7, #0]
}
 800807c:	bf00      	nop
 800807e:	e7fe      	b.n	800807e <xTaskIncrementTick+0x46>
 8008080:	4b40      	ldr	r3, [pc, #256]	; (8008184 <xTaskIncrementTick+0x14c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	4b40      	ldr	r3, [pc, #256]	; (8008188 <xTaskIncrementTick+0x150>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a3e      	ldr	r2, [pc, #248]	; (8008184 <xTaskIncrementTick+0x14c>)
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	4a3e      	ldr	r2, [pc, #248]	; (8008188 <xTaskIncrementTick+0x150>)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	4b3d      	ldr	r3, [pc, #244]	; (800818c <xTaskIncrementTick+0x154>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3301      	adds	r3, #1
 800809a:	4a3c      	ldr	r2, [pc, #240]	; (800818c <xTaskIncrementTick+0x154>)
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	f000 faa9 	bl	80085f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080a2:	4b3b      	ldr	r3, [pc, #236]	; (8008190 <xTaskIncrementTick+0x158>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d348      	bcc.n	800813e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080ac:	4b35      	ldr	r3, [pc, #212]	; (8008184 <xTaskIncrementTick+0x14c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d104      	bne.n	80080c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080b6:	4b36      	ldr	r3, [pc, #216]	; (8008190 <xTaskIncrementTick+0x158>)
 80080b8:	f04f 32ff 	mov.w	r2, #4294967295
 80080bc:	601a      	str	r2, [r3, #0]
					break;
 80080be:	e03e      	b.n	800813e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080c0:	4b30      	ldr	r3, [pc, #192]	; (8008184 <xTaskIncrementTick+0x14c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d203      	bcs.n	80080e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80080d8:	4a2d      	ldr	r2, [pc, #180]	; (8008190 <xTaskIncrementTick+0x158>)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80080de:	e02e      	b.n	800813e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	3304      	adds	r3, #4
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe ff71 	bl	8006fcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d004      	beq.n	80080fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	3318      	adds	r3, #24
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe ff68 	bl	8006fcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	2201      	movs	r2, #1
 8008102:	409a      	lsls	r2, r3
 8008104:	4b23      	ldr	r3, [pc, #140]	; (8008194 <xTaskIncrementTick+0x15c>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4313      	orrs	r3, r2
 800810a:	4a22      	ldr	r2, [pc, #136]	; (8008194 <xTaskIncrementTick+0x15c>)
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008112:	4613      	mov	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4a1f      	ldr	r2, [pc, #124]	; (8008198 <xTaskIncrementTick+0x160>)
 800811c:	441a      	add	r2, r3
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	3304      	adds	r3, #4
 8008122:	4619      	mov	r1, r3
 8008124:	4610      	mov	r0, r2
 8008126:	f7fe fef4 	bl	8006f12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812e:	4b1b      	ldr	r3, [pc, #108]	; (800819c <xTaskIncrementTick+0x164>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	429a      	cmp	r2, r3
 8008136:	d3b9      	bcc.n	80080ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008138:	2301      	movs	r3, #1
 800813a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800813c:	e7b6      	b.n	80080ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800813e:	4b17      	ldr	r3, [pc, #92]	; (800819c <xTaskIncrementTick+0x164>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008144:	4914      	ldr	r1, [pc, #80]	; (8008198 <xTaskIncrementTick+0x160>)
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	440b      	add	r3, r1
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d901      	bls.n	800815a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008156:	2301      	movs	r3, #1
 8008158:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800815a:	4b11      	ldr	r3, [pc, #68]	; (80081a0 <xTaskIncrementTick+0x168>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d007      	beq.n	8008172 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008162:	2301      	movs	r3, #1
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	e004      	b.n	8008172 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008168:	4b0e      	ldr	r3, [pc, #56]	; (80081a4 <xTaskIncrementTick+0x16c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3301      	adds	r3, #1
 800816e:	4a0d      	ldr	r2, [pc, #52]	; (80081a4 <xTaskIncrementTick+0x16c>)
 8008170:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008172:	697b      	ldr	r3, [r7, #20]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20000960 	.word	0x20000960
 8008180:	2000093c 	.word	0x2000093c
 8008184:	200008f0 	.word	0x200008f0
 8008188:	200008f4 	.word	0x200008f4
 800818c:	20000950 	.word	0x20000950
 8008190:	20000958 	.word	0x20000958
 8008194:	20000940 	.word	0x20000940
 8008198:	20000828 	.word	0x20000828
 800819c:	20000824 	.word	0x20000824
 80081a0:	2000094c 	.word	0x2000094c
 80081a4:	20000948 	.word	0x20000948

080081a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081ae:	4b29      	ldr	r3, [pc, #164]	; (8008254 <vTaskSwitchContext+0xac>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081b6:	4b28      	ldr	r3, [pc, #160]	; (8008258 <vTaskSwitchContext+0xb0>)
 80081b8:	2201      	movs	r2, #1
 80081ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081bc:	e044      	b.n	8008248 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80081be:	4b26      	ldr	r3, [pc, #152]	; (8008258 <vTaskSwitchContext+0xb0>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c4:	4b25      	ldr	r3, [pc, #148]	; (800825c <vTaskSwitchContext+0xb4>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	fab3 f383 	clz	r3, r3
 80081d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80081d2:	7afb      	ldrb	r3, [r7, #11]
 80081d4:	f1c3 031f 	rsb	r3, r3, #31
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	4921      	ldr	r1, [pc, #132]	; (8008260 <vTaskSwitchContext+0xb8>)
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10a      	bne.n	8008204 <vTaskSwitchContext+0x5c>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	607b      	str	r3, [r7, #4]
}
 8008200:	bf00      	nop
 8008202:	e7fe      	b.n	8008202 <vTaskSwitchContext+0x5a>
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4a14      	ldr	r2, [pc, #80]	; (8008260 <vTaskSwitchContext+0xb8>)
 8008210:	4413      	add	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	605a      	str	r2, [r3, #4]
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	3308      	adds	r3, #8
 8008226:	429a      	cmp	r2, r3
 8008228:	d104      	bne.n	8008234 <vTaskSwitchContext+0x8c>
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	605a      	str	r2, [r3, #4]
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	4a0a      	ldr	r2, [pc, #40]	; (8008264 <vTaskSwitchContext+0xbc>)
 800823c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800823e:	4b09      	ldr	r3, [pc, #36]	; (8008264 <vTaskSwitchContext+0xbc>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	334c      	adds	r3, #76	; 0x4c
 8008244:	4a08      	ldr	r2, [pc, #32]	; (8008268 <vTaskSwitchContext+0xc0>)
 8008246:	6013      	str	r3, [r2, #0]
}
 8008248:	bf00      	nop
 800824a:	371c      	adds	r7, #28
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	20000960 	.word	0x20000960
 8008258:	2000094c 	.word	0x2000094c
 800825c:	20000940 	.word	0x20000940
 8008260:	20000828 	.word	0x20000828
 8008264:	20000824 	.word	0x20000824
 8008268:	20000014 	.word	0x20000014

0800826c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	60fb      	str	r3, [r7, #12]
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008292:	4b07      	ldr	r3, [pc, #28]	; (80082b0 <vTaskPlaceOnEventList+0x44>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3318      	adds	r3, #24
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7fe fe5d 	bl	8006f5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082a0:	2101      	movs	r1, #1
 80082a2:	6838      	ldr	r0, [r7, #0]
 80082a4:	f000 fafc 	bl	80088a0 <prvAddCurrentTaskToDelayedList>
}
 80082a8:	bf00      	nop
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000824 	.word	0x20000824

080082b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10a      	bne.n	80082e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	60fb      	str	r3, [r7, #12]
}
 80082dc:	bf00      	nop
 80082de:	e7fe      	b.n	80082de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	3318      	adds	r3, #24
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fe fe71 	bl	8006fcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ea:	4b1d      	ldr	r3, [pc, #116]	; (8008360 <xTaskRemoveFromEventList+0xac>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d11c      	bne.n	800832c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	3304      	adds	r3, #4
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe fe68 	bl	8006fcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008300:	2201      	movs	r2, #1
 8008302:	409a      	lsls	r2, r3
 8008304:	4b17      	ldr	r3, [pc, #92]	; (8008364 <xTaskRemoveFromEventList+0xb0>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4313      	orrs	r3, r2
 800830a:	4a16      	ldr	r2, [pc, #88]	; (8008364 <xTaskRemoveFromEventList+0xb0>)
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4a13      	ldr	r2, [pc, #76]	; (8008368 <xTaskRemoveFromEventList+0xb4>)
 800831c:	441a      	add	r2, r3
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	3304      	adds	r3, #4
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f7fe fdf4 	bl	8006f12 <vListInsertEnd>
 800832a:	e005      	b.n	8008338 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	3318      	adds	r3, #24
 8008330:	4619      	mov	r1, r3
 8008332:	480e      	ldr	r0, [pc, #56]	; (800836c <xTaskRemoveFromEventList+0xb8>)
 8008334:	f7fe fded 	bl	8006f12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833c:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <xTaskRemoveFromEventList+0xbc>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	429a      	cmp	r2, r3
 8008344:	d905      	bls.n	8008352 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008346:	2301      	movs	r3, #1
 8008348:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800834a:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <xTaskRemoveFromEventList+0xc0>)
 800834c:	2201      	movs	r2, #1
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	e001      	b.n	8008356 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008352:	2300      	movs	r3, #0
 8008354:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008356:	697b      	ldr	r3, [r7, #20]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20000960 	.word	0x20000960
 8008364:	20000940 	.word	0x20000940
 8008368:	20000828 	.word	0x20000828
 800836c:	200008f8 	.word	0x200008f8
 8008370:	20000824 	.word	0x20000824
 8008374:	2000094c 	.word	0x2000094c

08008378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008380:	4b06      	ldr	r3, [pc, #24]	; (800839c <vTaskInternalSetTimeOutState+0x24>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008388:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <vTaskInternalSetTimeOutState+0x28>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	605a      	str	r2, [r3, #4]
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	20000950 	.word	0x20000950
 80083a0:	2000093c 	.word	0x2000093c

080083a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	613b      	str	r3, [r7, #16]
}
 80083c6:	bf00      	nop
 80083c8:	e7fe      	b.n	80083c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	60fb      	str	r3, [r7, #12]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80083e6:	f000 fbed 	bl	8008bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083ea:	4b1d      	ldr	r3, [pc, #116]	; (8008460 <xTaskCheckForTimeOut+0xbc>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008402:	d102      	bne.n	800840a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008404:	2300      	movs	r3, #0
 8008406:	61fb      	str	r3, [r7, #28]
 8008408:	e023      	b.n	8008452 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	4b15      	ldr	r3, [pc, #84]	; (8008464 <xTaskCheckForTimeOut+0xc0>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d007      	beq.n	8008426 <xTaskCheckForTimeOut+0x82>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	429a      	cmp	r2, r3
 800841e:	d302      	bcc.n	8008426 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008420:	2301      	movs	r3, #1
 8008422:	61fb      	str	r3, [r7, #28]
 8008424:	e015      	b.n	8008452 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	429a      	cmp	r2, r3
 800842e:	d20b      	bcs.n	8008448 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	1ad2      	subs	r2, r2, r3
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff ff9b 	bl	8008378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008442:	2300      	movs	r3, #0
 8008444:	61fb      	str	r3, [r7, #28]
 8008446:	e004      	b.n	8008452 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800844e:	2301      	movs	r3, #1
 8008450:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008452:	f000 fbe7 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 8008456:	69fb      	ldr	r3, [r7, #28]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3720      	adds	r7, #32
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	2000093c 	.word	0x2000093c
 8008464:	20000950 	.word	0x20000950

08008468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008468:	b480      	push	{r7}
 800846a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800846c:	4b03      	ldr	r3, [pc, #12]	; (800847c <vTaskMissedYield+0x14>)
 800846e:	2201      	movs	r2, #1
 8008470:	601a      	str	r2, [r3, #0]
}
 8008472:	bf00      	nop
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	2000094c 	.word	0x2000094c

08008480 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008488:	f000 f852 	bl	8008530 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <prvIdleTask+0x28>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d9f9      	bls.n	8008488 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <prvIdleTask+0x2c>)
 8008496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80084a4:	e7f0      	b.n	8008488 <prvIdleTask+0x8>
 80084a6:	bf00      	nop
 80084a8:	20000828 	.word	0x20000828
 80084ac:	e000ed04 	.word	0xe000ed04

080084b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084b6:	2300      	movs	r3, #0
 80084b8:	607b      	str	r3, [r7, #4]
 80084ba:	e00c      	b.n	80084d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4a12      	ldr	r2, [pc, #72]	; (8008510 <prvInitialiseTaskLists+0x60>)
 80084c8:	4413      	add	r3, r2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fcf4 	bl	8006eb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3301      	adds	r3, #1
 80084d4:	607b      	str	r3, [r7, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b07      	cmp	r3, #7
 80084da:	d9ef      	bls.n	80084bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084dc:	480d      	ldr	r0, [pc, #52]	; (8008514 <prvInitialiseTaskLists+0x64>)
 80084de:	f7fe fceb 	bl	8006eb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084e2:	480d      	ldr	r0, [pc, #52]	; (8008518 <prvInitialiseTaskLists+0x68>)
 80084e4:	f7fe fce8 	bl	8006eb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084e8:	480c      	ldr	r0, [pc, #48]	; (800851c <prvInitialiseTaskLists+0x6c>)
 80084ea:	f7fe fce5 	bl	8006eb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084ee:	480c      	ldr	r0, [pc, #48]	; (8008520 <prvInitialiseTaskLists+0x70>)
 80084f0:	f7fe fce2 	bl	8006eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084f4:	480b      	ldr	r0, [pc, #44]	; (8008524 <prvInitialiseTaskLists+0x74>)
 80084f6:	f7fe fcdf 	bl	8006eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084fa:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <prvInitialiseTaskLists+0x78>)
 80084fc:	4a05      	ldr	r2, [pc, #20]	; (8008514 <prvInitialiseTaskLists+0x64>)
 80084fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008500:	4b0a      	ldr	r3, [pc, #40]	; (800852c <prvInitialiseTaskLists+0x7c>)
 8008502:	4a05      	ldr	r2, [pc, #20]	; (8008518 <prvInitialiseTaskLists+0x68>)
 8008504:	601a      	str	r2, [r3, #0]
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000828 	.word	0x20000828
 8008514:	200008c8 	.word	0x200008c8
 8008518:	200008dc 	.word	0x200008dc
 800851c:	200008f8 	.word	0x200008f8
 8008520:	2000090c 	.word	0x2000090c
 8008524:	20000924 	.word	0x20000924
 8008528:	200008f0 	.word	0x200008f0
 800852c:	200008f4 	.word	0x200008f4

08008530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008536:	e019      	b.n	800856c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008538:	f000 fb44 	bl	8008bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853c:	4b10      	ldr	r3, [pc, #64]	; (8008580 <prvCheckTasksWaitingTermination+0x50>)
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3304      	adds	r3, #4
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fd3f 	bl	8006fcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <prvCheckTasksWaitingTermination+0x54>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3b01      	subs	r3, #1
 8008554:	4a0b      	ldr	r2, [pc, #44]	; (8008584 <prvCheckTasksWaitingTermination+0x54>)
 8008556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008558:	4b0b      	ldr	r3, [pc, #44]	; (8008588 <prvCheckTasksWaitingTermination+0x58>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3b01      	subs	r3, #1
 800855e:	4a0a      	ldr	r2, [pc, #40]	; (8008588 <prvCheckTasksWaitingTermination+0x58>)
 8008560:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008562:	f000 fb5f 	bl	8008c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f810 	bl	800858c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800856c:	4b06      	ldr	r3, [pc, #24]	; (8008588 <prvCheckTasksWaitingTermination+0x58>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e1      	bne.n	8008538 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	2000090c 	.word	0x2000090c
 8008584:	20000938 	.word	0x20000938
 8008588:	20000920 	.word	0x20000920

0800858c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	334c      	adds	r3, #76	; 0x4c
 8008598:	4618      	mov	r0, r3
 800859a:	f001 fc65 	bl	8009e68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d108      	bne.n	80085ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fcf7 	bl	8008fa0 <vPortFree>
				vPortFree( pxTCB );
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fcf4 	bl	8008fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085b8:	e018      	b.n	80085ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d103      	bne.n	80085cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fceb 	bl	8008fa0 <vPortFree>
	}
 80085ca:	e00f      	b.n	80085ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d00a      	beq.n	80085ec <prvDeleteTCB+0x60>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60fb      	str	r3, [r7, #12]
}
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <prvDeleteTCB+0x5e>
	}
 80085ec:	bf00      	nop
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085fa:	4b0c      	ldr	r3, [pc, #48]	; (800862c <prvResetNextTaskUnblockTime+0x38>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d104      	bne.n	800860e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008604:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <prvResetNextTaskUnblockTime+0x3c>)
 8008606:	f04f 32ff 	mov.w	r2, #4294967295
 800860a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800860c:	e008      	b.n	8008620 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800860e:	4b07      	ldr	r3, [pc, #28]	; (800862c <prvResetNextTaskUnblockTime+0x38>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	4a04      	ldr	r2, [pc, #16]	; (8008630 <prvResetNextTaskUnblockTime+0x3c>)
 800861e:	6013      	str	r3, [r2, #0]
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	200008f0 	.word	0x200008f0
 8008630:	20000958 	.word	0x20000958

08008634 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800863a:	4b0b      	ldr	r3, [pc, #44]	; (8008668 <xTaskGetSchedulerState+0x34>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d102      	bne.n	8008648 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008642:	2301      	movs	r3, #1
 8008644:	607b      	str	r3, [r7, #4]
 8008646:	e008      	b.n	800865a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008648:	4b08      	ldr	r3, [pc, #32]	; (800866c <xTaskGetSchedulerState+0x38>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d102      	bne.n	8008656 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008650:	2302      	movs	r3, #2
 8008652:	607b      	str	r3, [r7, #4]
 8008654:	e001      	b.n	800865a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008656:	2300      	movs	r3, #0
 8008658:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800865a:	687b      	ldr	r3, [r7, #4]
	}
 800865c:	4618      	mov	r0, r3
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	20000944 	.word	0x20000944
 800866c:	20000960 	.word	0x20000960

08008670 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800867c:	2300      	movs	r3, #0
 800867e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d05e      	beq.n	8008744 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868a:	4b31      	ldr	r3, [pc, #196]	; (8008750 <xTaskPriorityInherit+0xe0>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	429a      	cmp	r2, r3
 8008692:	d24e      	bcs.n	8008732 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	2b00      	cmp	r3, #0
 800869a:	db06      	blt.n	80086aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800869c:	4b2c      	ldr	r3, [pc, #176]	; (8008750 <xTaskPriorityInherit+0xe0>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a2:	f1c3 0208 	rsb	r2, r3, #8
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	6959      	ldr	r1, [r3, #20]
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b2:	4613      	mov	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4a26      	ldr	r2, [pc, #152]	; (8008754 <xTaskPriorityInherit+0xe4>)
 80086bc:	4413      	add	r3, r2
 80086be:	4299      	cmp	r1, r3
 80086c0:	d12f      	bne.n	8008722 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	3304      	adds	r3, #4
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe fc80 	bl	8006fcc <uxListRemove>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d6:	2201      	movs	r2, #1
 80086d8:	fa02 f303 	lsl.w	r3, r2, r3
 80086dc:	43da      	mvns	r2, r3
 80086de:	4b1e      	ldr	r3, [pc, #120]	; (8008758 <xTaskPriorityInherit+0xe8>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4013      	ands	r3, r2
 80086e4:	4a1c      	ldr	r2, [pc, #112]	; (8008758 <xTaskPriorityInherit+0xe8>)
 80086e6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086e8:	4b19      	ldr	r3, [pc, #100]	; (8008750 <xTaskPriorityInherit+0xe0>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f6:	2201      	movs	r2, #1
 80086f8:	409a      	lsls	r2, r3
 80086fa:	4b17      	ldr	r3, [pc, #92]	; (8008758 <xTaskPriorityInherit+0xe8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4313      	orrs	r3, r2
 8008700:	4a15      	ldr	r2, [pc, #84]	; (8008758 <xTaskPriorityInherit+0xe8>)
 8008702:	6013      	str	r3, [r2, #0]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4a10      	ldr	r2, [pc, #64]	; (8008754 <xTaskPriorityInherit+0xe4>)
 8008712:	441a      	add	r2, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	3304      	adds	r3, #4
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	f7fe fbf9 	bl	8006f12 <vListInsertEnd>
 8008720:	e004      	b.n	800872c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008722:	4b0b      	ldr	r3, [pc, #44]	; (8008750 <xTaskPriorityInherit+0xe0>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800872c:	2301      	movs	r3, #1
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	e008      	b.n	8008744 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008736:	4b06      	ldr	r3, [pc, #24]	; (8008750 <xTaskPriorityInherit+0xe0>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	429a      	cmp	r2, r3
 800873e:	d201      	bcs.n	8008744 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008740:	2301      	movs	r3, #1
 8008742:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008744:	68fb      	ldr	r3, [r7, #12]
	}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20000824 	.word	0x20000824
 8008754:	20000828 	.word	0x20000828
 8008758:	20000940 	.word	0x20000940

0800875c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800876a:	2301      	movs	r3, #1
 800876c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d077      	beq.n	8008864 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10a      	bne.n	8008792 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	60fb      	str	r3, [r7, #12]
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	429a      	cmp	r2, r3
 800879a:	d902      	bls.n	80087a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	61fb      	str	r3, [r7, #28]
 80087a0:	e002      	b.n	80087a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	69fa      	ldr	r2, [r7, #28]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d058      	beq.n	8008864 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d153      	bne.n	8008864 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80087bc:	4b2b      	ldr	r3, [pc, #172]	; (800886c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d10a      	bne.n	80087dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80087c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	60bb      	str	r3, [r7, #8]
}
 80087d8:	bf00      	nop
 80087da:	e7fe      	b.n	80087da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	69fa      	ldr	r2, [r7, #28]
 80087e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	db04      	blt.n	80087fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	f1c3 0208 	rsb	r2, r3, #8
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	6959      	ldr	r1, [r3, #20]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	4613      	mov	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4a19      	ldr	r2, [pc, #100]	; (8008870 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800880a:	4413      	add	r3, r2
 800880c:	4299      	cmp	r1, r3
 800880e:	d129      	bne.n	8008864 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	3304      	adds	r3, #4
 8008814:	4618      	mov	r0, r3
 8008816:	f7fe fbd9 	bl	8006fcc <uxListRemove>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10a      	bne.n	8008836 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	2201      	movs	r2, #1
 8008826:	fa02 f303 	lsl.w	r3, r2, r3
 800882a:	43da      	mvns	r2, r3
 800882c:	4b11      	ldr	r3, [pc, #68]	; (8008874 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4013      	ands	r3, r2
 8008832:	4a10      	ldr	r2, [pc, #64]	; (8008874 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008834:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883a:	2201      	movs	r2, #1
 800883c:	409a      	lsls	r2, r3
 800883e:	4b0d      	ldr	r3, [pc, #52]	; (8008874 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4313      	orrs	r3, r2
 8008844:	4a0b      	ldr	r2, [pc, #44]	; (8008874 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884c:	4613      	mov	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4a06      	ldr	r2, [pc, #24]	; (8008870 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008856:	441a      	add	r2, r3
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	3304      	adds	r3, #4
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	f7fe fb57 	bl	8006f12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008864:	bf00      	nop
 8008866:	3720      	adds	r7, #32
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20000824 	.word	0x20000824
 8008870:	20000828 	.word	0x20000828
 8008874:	20000940 	.word	0x20000940

08008878 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800887c:	4b07      	ldr	r3, [pc, #28]	; (800889c <pvTaskIncrementMutexHeldCount+0x24>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d004      	beq.n	800888e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008884:	4b05      	ldr	r3, [pc, #20]	; (800889c <pvTaskIncrementMutexHeldCount+0x24>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800888a:	3201      	adds	r2, #1
 800888c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800888e:	4b03      	ldr	r3, [pc, #12]	; (800889c <pvTaskIncrementMutexHeldCount+0x24>)
 8008890:	681b      	ldr	r3, [r3, #0]
	}
 8008892:	4618      	mov	r0, r3
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	20000824 	.word	0x20000824

080088a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088aa:	4b29      	ldr	r3, [pc, #164]	; (8008950 <prvAddCurrentTaskToDelayedList+0xb0>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088b0:	4b28      	ldr	r3, [pc, #160]	; (8008954 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3304      	adds	r3, #4
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fb88 	bl	8006fcc <uxListRemove>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10b      	bne.n	80088da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80088c2:	4b24      	ldr	r3, [pc, #144]	; (8008954 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c8:	2201      	movs	r2, #1
 80088ca:	fa02 f303 	lsl.w	r3, r2, r3
 80088ce:	43da      	mvns	r2, r3
 80088d0:	4b21      	ldr	r3, [pc, #132]	; (8008958 <prvAddCurrentTaskToDelayedList+0xb8>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4013      	ands	r3, r2
 80088d6:	4a20      	ldr	r2, [pc, #128]	; (8008958 <prvAddCurrentTaskToDelayedList+0xb8>)
 80088d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e0:	d10a      	bne.n	80088f8 <prvAddCurrentTaskToDelayedList+0x58>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d007      	beq.n	80088f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088e8:	4b1a      	ldr	r3, [pc, #104]	; (8008954 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3304      	adds	r3, #4
 80088ee:	4619      	mov	r1, r3
 80088f0:	481a      	ldr	r0, [pc, #104]	; (800895c <prvAddCurrentTaskToDelayedList+0xbc>)
 80088f2:	f7fe fb0e 	bl	8006f12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088f6:	e026      	b.n	8008946 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4413      	add	r3, r2
 80088fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008900:	4b14      	ldr	r3, [pc, #80]	; (8008954 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	429a      	cmp	r2, r3
 800890e:	d209      	bcs.n	8008924 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008910:	4b13      	ldr	r3, [pc, #76]	; (8008960 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	4b0f      	ldr	r3, [pc, #60]	; (8008954 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3304      	adds	r3, #4
 800891a:	4619      	mov	r1, r3
 800891c:	4610      	mov	r0, r2
 800891e:	f7fe fb1c 	bl	8006f5a <vListInsert>
}
 8008922:	e010      	b.n	8008946 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008924:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <prvAddCurrentTaskToDelayedList+0xb4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3304      	adds	r3, #4
 800892e:	4619      	mov	r1, r3
 8008930:	4610      	mov	r0, r2
 8008932:	f7fe fb12 	bl	8006f5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008936:	4b0c      	ldr	r3, [pc, #48]	; (8008968 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	429a      	cmp	r2, r3
 800893e:	d202      	bcs.n	8008946 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008940:	4a09      	ldr	r2, [pc, #36]	; (8008968 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	6013      	str	r3, [r2, #0]
}
 8008946:	bf00      	nop
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	2000093c 	.word	0x2000093c
 8008954:	20000824 	.word	0x20000824
 8008958:	20000940 	.word	0x20000940
 800895c:	20000924 	.word	0x20000924
 8008960:	200008f4 	.word	0x200008f4
 8008964:	200008f0 	.word	0x200008f0
 8008968:	20000958 	.word	0x20000958

0800896c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3b04      	subs	r3, #4
 800897c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b04      	subs	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f023 0201 	bic.w	r2, r3, #1
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3b04      	subs	r3, #4
 800899a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800899c:	4a0c      	ldr	r2, [pc, #48]	; (80089d0 <pxPortInitialiseStack+0x64>)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3b14      	subs	r3, #20
 80089a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3b04      	subs	r3, #4
 80089b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f06f 0202 	mvn.w	r2, #2
 80089ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3b20      	subs	r3, #32
 80089c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089c2:	68fb      	ldr	r3, [r7, #12]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	080089d5 	.word	0x080089d5

080089d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089de:	4b12      	ldr	r3, [pc, #72]	; (8008a28 <prvTaskExitError+0x54>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e6:	d00a      	beq.n	80089fe <prvTaskExitError+0x2a>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	60fb      	str	r3, [r7, #12]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <prvTaskExitError+0x28>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	60bb      	str	r3, [r7, #8]
}
 8008a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a12:	bf00      	nop
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0fc      	beq.n	8008a14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	20000010 	.word	0x20000010
 8008a2c:	00000000 	.word	0x00000000

08008a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a30:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <pxCurrentTCBConst2>)
 8008a32:	6819      	ldr	r1, [r3, #0]
 8008a34:	6808      	ldr	r0, [r1, #0]
 8008a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3a:	f380 8809 	msr	PSP, r0
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8811 	msr	BASEPRI, r0
 8008a4a:	4770      	bx	lr
 8008a4c:	f3af 8000 	nop.w

08008a50 <pxCurrentTCBConst2>:
 8008a50:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop

08008a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a58:	4808      	ldr	r0, [pc, #32]	; (8008a7c <prvPortStartFirstTask+0x24>)
 8008a5a:	6800      	ldr	r0, [r0, #0]
 8008a5c:	6800      	ldr	r0, [r0, #0]
 8008a5e:	f380 8808 	msr	MSP, r0
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8814 	msr	CONTROL, r0
 8008a6a:	b662      	cpsie	i
 8008a6c:	b661      	cpsie	f
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	df00      	svc	0
 8008a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a7a:	bf00      	nop
 8008a7c:	e000ed08 	.word	0xe000ed08

08008a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a86:	4b46      	ldr	r3, [pc, #280]	; (8008ba0 <xPortStartScheduler+0x120>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a46      	ldr	r2, [pc, #280]	; (8008ba4 <xPortStartScheduler+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10a      	bne.n	8008aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	613b      	str	r3, [r7, #16]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008aa6:	4b3e      	ldr	r3, [pc, #248]	; (8008ba0 <xPortStartScheduler+0x120>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a3f      	ldr	r2, [pc, #252]	; (8008ba8 <xPortStartScheduler+0x128>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10a      	bne.n	8008ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ac6:	4b39      	ldr	r3, [pc, #228]	; (8008bac <xPortStartScheduler+0x12c>)
 8008ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	22ff      	movs	r2, #255	; 0xff
 8008ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	4b31      	ldr	r3, [pc, #196]	; (8008bb0 <xPortStartScheduler+0x130>)
 8008aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008aee:	4b31      	ldr	r3, [pc, #196]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008af0:	2207      	movs	r2, #7
 8008af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008af4:	e009      	b.n	8008b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008af6:	4b2f      	ldr	r3, [pc, #188]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	4a2d      	ldr	r2, [pc, #180]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b12:	2b80      	cmp	r3, #128	; 0x80
 8008b14:	d0ef      	beq.n	8008af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b16:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f1c3 0307 	rsb	r3, r3, #7
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d00a      	beq.n	8008b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	60bb      	str	r3, [r7, #8]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b38:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	021b      	lsls	r3, r3, #8
 8008b3e:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b42:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b4a:	4a1a      	ldr	r2, [pc, #104]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b56:	4b18      	ldr	r3, [pc, #96]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a17      	ldr	r2, [pc, #92]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b62:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a14      	ldr	r2, [pc, #80]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b6e:	f000 f8dd 	bl	8008d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b72:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <xPortStartScheduler+0x13c>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b78:	f000 f8fc 	bl	8008d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b7c:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <xPortStartScheduler+0x140>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0f      	ldr	r2, [pc, #60]	; (8008bc0 <xPortStartScheduler+0x140>)
 8008b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b88:	f7ff ff66 	bl	8008a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b8c:	f7ff fb0c 	bl	80081a8 <vTaskSwitchContext>
	prvTaskExitError();
 8008b90:	f7ff ff20 	bl	80089d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	e000ed00 	.word	0xe000ed00
 8008ba4:	410fc271 	.word	0x410fc271
 8008ba8:	410fc270 	.word	0x410fc270
 8008bac:	e000e400 	.word	0xe000e400
 8008bb0:	20000964 	.word	0x20000964
 8008bb4:	20000968 	.word	0x20000968
 8008bb8:	e000ed20 	.word	0xe000ed20
 8008bbc:	20000010 	.word	0x20000010
 8008bc0:	e000ef34 	.word	0xe000ef34

08008bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	607b      	str	r3, [r7, #4]
}
 8008bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bde:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <vPortEnterCritical+0x58>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	4a0d      	ldr	r2, [pc, #52]	; (8008c1c <vPortEnterCritical+0x58>)
 8008be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008be8:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <vPortEnterCritical+0x58>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d10f      	bne.n	8008c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bf0:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <vPortEnterCritical+0x5c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	603b      	str	r3, [r7, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <vPortEnterCritical+0x4a>
	}
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	20000010 	.word	0x20000010
 8008c20:	e000ed04 	.word	0xe000ed04

08008c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c2a:	4b12      	ldr	r3, [pc, #72]	; (8008c74 <vPortExitCritical+0x50>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10a      	bne.n	8008c48 <vPortExitCritical+0x24>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	607b      	str	r3, [r7, #4]
}
 8008c44:	bf00      	nop
 8008c46:	e7fe      	b.n	8008c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c48:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <vPortExitCritical+0x50>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	4a09      	ldr	r2, [pc, #36]	; (8008c74 <vPortExitCritical+0x50>)
 8008c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c52:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <vPortExitCritical+0x50>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <vPortExitCritical+0x42>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	f383 8811 	msr	BASEPRI, r3
}
 8008c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20000010 	.word	0x20000010
	...

08008c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c80:	f3ef 8009 	mrs	r0, PSP
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <pxCurrentTCBConst>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	f01e 0f10 	tst.w	lr, #16
 8008c90:	bf08      	it	eq
 8008c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	6010      	str	r0, [r2, #0]
 8008c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ca4:	f380 8811 	msr	BASEPRI, r0
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f7ff fa7a 	bl	80081a8 <vTaskSwitchContext>
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f380 8811 	msr	BASEPRI, r0
 8008cbc:	bc09      	pop	{r0, r3}
 8008cbe:	6819      	ldr	r1, [r3, #0]
 8008cc0:	6808      	ldr	r0, [r1, #0]
 8008cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc6:	f01e 0f10 	tst.w	lr, #16
 8008cca:	bf08      	it	eq
 8008ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cd0:	f380 8809 	msr	PSP, r0
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst>:
 8008ce0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	607b      	str	r3, [r7, #4]
}
 8008d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d02:	f7ff f999 	bl	8008038 <xTaskIncrementTick>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <xPortSysTickHandler+0x40>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f383 8811 	msr	BASEPRI, r3
}
 8008d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d30:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d36:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <vPortSetupTimerInterrupt+0x38>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	; (8008d68 <vPortSetupTimerInterrupt+0x3c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0a      	ldr	r2, [pc, #40]	; (8008d6c <vPortSetupTimerInterrupt+0x40>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	099b      	lsrs	r3, r3, #6
 8008d48:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <vPortSetupTimerInterrupt+0x44>)
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d4e:	4b04      	ldr	r3, [pc, #16]	; (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d50:	2207      	movs	r2, #7
 8008d52:	601a      	str	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	e000e010 	.word	0xe000e010
 8008d64:	e000e018 	.word	0xe000e018
 8008d68:	20000004 	.word	0x20000004
 8008d6c:	10624dd3 	.word	0x10624dd3
 8008d70:	e000e014 	.word	0xe000e014

08008d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d84 <vPortEnableVFP+0x10>
 8008d78:	6801      	ldr	r1, [r0, #0]
 8008d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d7e:	6001      	str	r1, [r0, #0]
 8008d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d82:	bf00      	nop
 8008d84:	e000ed88 	.word	0xe000ed88

08008d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d8e:	f3ef 8305 	mrs	r3, IPSR
 8008d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b0f      	cmp	r3, #15
 8008d98:	d914      	bls.n	8008dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d9a:	4a17      	ldr	r2, [pc, #92]	; (8008df8 <vPortValidateInterruptPriority+0x70>)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4413      	add	r3, r2
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008da4:	4b15      	ldr	r3, [pc, #84]	; (8008dfc <vPortValidateInterruptPriority+0x74>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	7afa      	ldrb	r2, [r7, #11]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d20a      	bcs.n	8008dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	607b      	str	r3, [r7, #4]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008dc4:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <vPortValidateInterruptPriority+0x78>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <vPortValidateInterruptPriority+0x7c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d90a      	bls.n	8008dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	603b      	str	r3, [r7, #0]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <vPortValidateInterruptPriority+0x60>
	}
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	e000e3f0 	.word	0xe000e3f0
 8008dfc:	20000964 	.word	0x20000964
 8008e00:	e000ed0c 	.word	0xe000ed0c
 8008e04:	20000968 	.word	0x20000968

08008e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e14:	f7ff f856 	bl	8007ec4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e18:	4b5b      	ldr	r3, [pc, #364]	; (8008f88 <pvPortMalloc+0x180>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e20:	f000 f920 	bl	8009064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e24:	4b59      	ldr	r3, [pc, #356]	; (8008f8c <pvPortMalloc+0x184>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f040 8093 	bne.w	8008f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01d      	beq.n	8008e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e38:	2208      	movs	r2, #8
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d014      	beq.n	8008e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f023 0307 	bic.w	r3, r3, #7
 8008e50:	3308      	adds	r3, #8
 8008e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f003 0307 	and.w	r3, r3, #7
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <pvPortMalloc+0x6c>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	617b      	str	r3, [r7, #20]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d06e      	beq.n	8008f58 <pvPortMalloc+0x150>
 8008e7a:	4b45      	ldr	r3, [pc, #276]	; (8008f90 <pvPortMalloc+0x188>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d869      	bhi.n	8008f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e84:	4b43      	ldr	r3, [pc, #268]	; (8008f94 <pvPortMalloc+0x18c>)
 8008e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e88:	4b42      	ldr	r3, [pc, #264]	; (8008f94 <pvPortMalloc+0x18c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e8e:	e004      	b.n	8008e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d903      	bls.n	8008eac <pvPortMalloc+0xa4>
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f1      	bne.n	8008e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008eac:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <pvPortMalloc+0x180>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d050      	beq.n	8008f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2208      	movs	r2, #8
 8008ebc:	4413      	add	r3, r2
 8008ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d91f      	bls.n	8008f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4413      	add	r3, r2
 8008ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	f003 0307 	and.w	r3, r3, #7
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <pvPortMalloc+0xf8>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	613b      	str	r3, [r7, #16]
}
 8008efc:	bf00      	nop
 8008efe:	e7fe      	b.n	8008efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	1ad2      	subs	r2, r2, r3
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f12:	69b8      	ldr	r0, [r7, #24]
 8008f14:	f000 f908 	bl	8009128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f18:	4b1d      	ldr	r3, [pc, #116]	; (8008f90 <pvPortMalloc+0x188>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	4a1b      	ldr	r2, [pc, #108]	; (8008f90 <pvPortMalloc+0x188>)
 8008f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f26:	4b1a      	ldr	r3, [pc, #104]	; (8008f90 <pvPortMalloc+0x188>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b1b      	ldr	r3, [pc, #108]	; (8008f98 <pvPortMalloc+0x190>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d203      	bcs.n	8008f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f32:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <pvPortMalloc+0x188>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a18      	ldr	r2, [pc, #96]	; (8008f98 <pvPortMalloc+0x190>)
 8008f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <pvPortMalloc+0x184>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f4e:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <pvPortMalloc+0x194>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3301      	adds	r3, #1
 8008f54:	4a11      	ldr	r2, [pc, #68]	; (8008f9c <pvPortMalloc+0x194>)
 8008f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f58:	f7fe ffc2 	bl	8007ee0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <pvPortMalloc+0x174>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <pvPortMalloc+0x172>
	return pvReturn;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3728      	adds	r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20004574 	.word	0x20004574
 8008f8c:	20004588 	.word	0x20004588
 8008f90:	20004578 	.word	0x20004578
 8008f94:	2000456c 	.word	0x2000456c
 8008f98:	2000457c 	.word	0x2000457c
 8008f9c:	20004580 	.word	0x20004580

08008fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d04d      	beq.n	800904e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fb2:	2308      	movs	r3, #8
 8008fb4:	425b      	negs	r3, r3
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	4413      	add	r3, r2
 8008fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	4b24      	ldr	r3, [pc, #144]	; (8009058 <vPortFree+0xb8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <vPortFree+0x44>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	60fb      	str	r3, [r7, #12]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <vPortFree+0x62>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	60bb      	str	r3, [r7, #8]
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	4b14      	ldr	r3, [pc, #80]	; (8009058 <vPortFree+0xb8>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d01e      	beq.n	800904e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d11a      	bne.n	800904e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b0e      	ldr	r3, [pc, #56]	; (8009058 <vPortFree+0xb8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	43db      	mvns	r3, r3
 8009022:	401a      	ands	r2, r3
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009028:	f7fe ff4c 	bl	8007ec4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	4b0a      	ldr	r3, [pc, #40]	; (800905c <vPortFree+0xbc>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4413      	add	r3, r2
 8009036:	4a09      	ldr	r2, [pc, #36]	; (800905c <vPortFree+0xbc>)
 8009038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800903a:	6938      	ldr	r0, [r7, #16]
 800903c:	f000 f874 	bl	8009128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <vPortFree+0xc0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	4a06      	ldr	r2, [pc, #24]	; (8009060 <vPortFree+0xc0>)
 8009048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800904a:	f7fe ff49 	bl	8007ee0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800904e:	bf00      	nop
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20004588 	.word	0x20004588
 800905c:	20004578 	.word	0x20004578
 8009060:	20004584 	.word	0x20004584

08009064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800906a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800906e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009070:	4b27      	ldr	r3, [pc, #156]	; (8009110 <prvHeapInit+0xac>)
 8009072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00c      	beq.n	8009098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3307      	adds	r3, #7
 8009082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	4a1f      	ldr	r2, [pc, #124]	; (8009110 <prvHeapInit+0xac>)
 8009094:	4413      	add	r3, r2
 8009096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800909c:	4a1d      	ldr	r2, [pc, #116]	; (8009114 <prvHeapInit+0xb0>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090a2:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <prvHeapInit+0xb0>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	4413      	add	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090b0:	2208      	movs	r2, #8
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0307 	bic.w	r3, r3, #7
 80090be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4a15      	ldr	r2, [pc, #84]	; (8009118 <prvHeapInit+0xb4>)
 80090c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090c6:	4b14      	ldr	r3, [pc, #80]	; (8009118 <prvHeapInit+0xb4>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2200      	movs	r2, #0
 80090cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <prvHeapInit+0xb4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090e4:	4b0c      	ldr	r3, [pc, #48]	; (8009118 <prvHeapInit+0xb4>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4a0a      	ldr	r2, [pc, #40]	; (800911c <prvHeapInit+0xb8>)
 80090f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	4a09      	ldr	r2, [pc, #36]	; (8009120 <prvHeapInit+0xbc>)
 80090fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090fc:	4b09      	ldr	r3, [pc, #36]	; (8009124 <prvHeapInit+0xc0>)
 80090fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009102:	601a      	str	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	2000096c 	.word	0x2000096c
 8009114:	2000456c 	.word	0x2000456c
 8009118:	20004574 	.word	0x20004574
 800911c:	2000457c 	.word	0x2000457c
 8009120:	20004578 	.word	0x20004578
 8009124:	20004588 	.word	0x20004588

08009128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009130:	4b28      	ldr	r3, [pc, #160]	; (80091d4 <prvInsertBlockIntoFreeList+0xac>)
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	e002      	b.n	800913c <prvInsertBlockIntoFreeList+0x14>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	429a      	cmp	r2, r3
 8009144:	d8f7      	bhi.n	8009136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	4413      	add	r3, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	429a      	cmp	r2, r3
 8009156:	d108      	bne.n	800916a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	441a      	add	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d118      	bne.n	80091b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	4b15      	ldr	r3, [pc, #84]	; (80091d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d00d      	beq.n	80091a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	441a      	add	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	e008      	b.n	80091b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e003      	b.n	80091b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d002      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091c6:	bf00      	nop
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	2000456c 	.word	0x2000456c
 80091d8:	20004574 	.word	0x20004574

080091dc <__errno>:
 80091dc:	4b01      	ldr	r3, [pc, #4]	; (80091e4 <__errno+0x8>)
 80091de:	6818      	ldr	r0, [r3, #0]
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20000014 	.word	0x20000014

080091e8 <std>:
 80091e8:	2300      	movs	r3, #0
 80091ea:	b510      	push	{r4, lr}
 80091ec:	4604      	mov	r4, r0
 80091ee:	e9c0 3300 	strd	r3, r3, [r0]
 80091f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091f6:	6083      	str	r3, [r0, #8]
 80091f8:	8181      	strh	r1, [r0, #12]
 80091fa:	6643      	str	r3, [r0, #100]	; 0x64
 80091fc:	81c2      	strh	r2, [r0, #14]
 80091fe:	6183      	str	r3, [r0, #24]
 8009200:	4619      	mov	r1, r3
 8009202:	2208      	movs	r2, #8
 8009204:	305c      	adds	r0, #92	; 0x5c
 8009206:	f000 f91a 	bl	800943e <memset>
 800920a:	4b05      	ldr	r3, [pc, #20]	; (8009220 <std+0x38>)
 800920c:	6263      	str	r3, [r4, #36]	; 0x24
 800920e:	4b05      	ldr	r3, [pc, #20]	; (8009224 <std+0x3c>)
 8009210:	62a3      	str	r3, [r4, #40]	; 0x28
 8009212:	4b05      	ldr	r3, [pc, #20]	; (8009228 <std+0x40>)
 8009214:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009216:	4b05      	ldr	r3, [pc, #20]	; (800922c <std+0x44>)
 8009218:	6224      	str	r4, [r4, #32]
 800921a:	6323      	str	r3, [r4, #48]	; 0x30
 800921c:	bd10      	pop	{r4, pc}
 800921e:	bf00      	nop
 8009220:	08009fa9 	.word	0x08009fa9
 8009224:	08009fcb 	.word	0x08009fcb
 8009228:	0800a003 	.word	0x0800a003
 800922c:	0800a027 	.word	0x0800a027

08009230 <_cleanup_r>:
 8009230:	4901      	ldr	r1, [pc, #4]	; (8009238 <_cleanup_r+0x8>)
 8009232:	f000 b8af 	b.w	8009394 <_fwalk_reent>
 8009236:	bf00      	nop
 8009238:	0800ae79 	.word	0x0800ae79

0800923c <__sfmoreglue>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	2268      	movs	r2, #104	; 0x68
 8009240:	1e4d      	subs	r5, r1, #1
 8009242:	4355      	muls	r5, r2
 8009244:	460e      	mov	r6, r1
 8009246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800924a:	f000 f921 	bl	8009490 <_malloc_r>
 800924e:	4604      	mov	r4, r0
 8009250:	b140      	cbz	r0, 8009264 <__sfmoreglue+0x28>
 8009252:	2100      	movs	r1, #0
 8009254:	e9c0 1600 	strd	r1, r6, [r0]
 8009258:	300c      	adds	r0, #12
 800925a:	60a0      	str	r0, [r4, #8]
 800925c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009260:	f000 f8ed 	bl	800943e <memset>
 8009264:	4620      	mov	r0, r4
 8009266:	bd70      	pop	{r4, r5, r6, pc}

08009268 <__sfp_lock_acquire>:
 8009268:	4801      	ldr	r0, [pc, #4]	; (8009270 <__sfp_lock_acquire+0x8>)
 800926a:	f000 b8d8 	b.w	800941e <__retarget_lock_acquire_recursive>
 800926e:	bf00      	nop
 8009270:	2000458d 	.word	0x2000458d

08009274 <__sfp_lock_release>:
 8009274:	4801      	ldr	r0, [pc, #4]	; (800927c <__sfp_lock_release+0x8>)
 8009276:	f000 b8d3 	b.w	8009420 <__retarget_lock_release_recursive>
 800927a:	bf00      	nop
 800927c:	2000458d 	.word	0x2000458d

08009280 <__sinit_lock_acquire>:
 8009280:	4801      	ldr	r0, [pc, #4]	; (8009288 <__sinit_lock_acquire+0x8>)
 8009282:	f000 b8cc 	b.w	800941e <__retarget_lock_acquire_recursive>
 8009286:	bf00      	nop
 8009288:	2000458e 	.word	0x2000458e

0800928c <__sinit_lock_release>:
 800928c:	4801      	ldr	r0, [pc, #4]	; (8009294 <__sinit_lock_release+0x8>)
 800928e:	f000 b8c7 	b.w	8009420 <__retarget_lock_release_recursive>
 8009292:	bf00      	nop
 8009294:	2000458e 	.word	0x2000458e

08009298 <__sinit>:
 8009298:	b510      	push	{r4, lr}
 800929a:	4604      	mov	r4, r0
 800929c:	f7ff fff0 	bl	8009280 <__sinit_lock_acquire>
 80092a0:	69a3      	ldr	r3, [r4, #24]
 80092a2:	b11b      	cbz	r3, 80092ac <__sinit+0x14>
 80092a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a8:	f7ff bff0 	b.w	800928c <__sinit_lock_release>
 80092ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092b0:	6523      	str	r3, [r4, #80]	; 0x50
 80092b2:	4b13      	ldr	r3, [pc, #76]	; (8009300 <__sinit+0x68>)
 80092b4:	4a13      	ldr	r2, [pc, #76]	; (8009304 <__sinit+0x6c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80092ba:	42a3      	cmp	r3, r4
 80092bc:	bf04      	itt	eq
 80092be:	2301      	moveq	r3, #1
 80092c0:	61a3      	streq	r3, [r4, #24]
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 f820 	bl	8009308 <__sfp>
 80092c8:	6060      	str	r0, [r4, #4]
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 f81c 	bl	8009308 <__sfp>
 80092d0:	60a0      	str	r0, [r4, #8]
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 f818 	bl	8009308 <__sfp>
 80092d8:	2200      	movs	r2, #0
 80092da:	60e0      	str	r0, [r4, #12]
 80092dc:	2104      	movs	r1, #4
 80092de:	6860      	ldr	r0, [r4, #4]
 80092e0:	f7ff ff82 	bl	80091e8 <std>
 80092e4:	68a0      	ldr	r0, [r4, #8]
 80092e6:	2201      	movs	r2, #1
 80092e8:	2109      	movs	r1, #9
 80092ea:	f7ff ff7d 	bl	80091e8 <std>
 80092ee:	68e0      	ldr	r0, [r4, #12]
 80092f0:	2202      	movs	r2, #2
 80092f2:	2112      	movs	r1, #18
 80092f4:	f7ff ff78 	bl	80091e8 <std>
 80092f8:	2301      	movs	r3, #1
 80092fa:	61a3      	str	r3, [r4, #24]
 80092fc:	e7d2      	b.n	80092a4 <__sinit+0xc>
 80092fe:	bf00      	nop
 8009300:	0800c234 	.word	0x0800c234
 8009304:	08009231 	.word	0x08009231

08009308 <__sfp>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	4607      	mov	r7, r0
 800930c:	f7ff ffac 	bl	8009268 <__sfp_lock_acquire>
 8009310:	4b1e      	ldr	r3, [pc, #120]	; (800938c <__sfp+0x84>)
 8009312:	681e      	ldr	r6, [r3, #0]
 8009314:	69b3      	ldr	r3, [r6, #24]
 8009316:	b913      	cbnz	r3, 800931e <__sfp+0x16>
 8009318:	4630      	mov	r0, r6
 800931a:	f7ff ffbd 	bl	8009298 <__sinit>
 800931e:	3648      	adds	r6, #72	; 0x48
 8009320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009324:	3b01      	subs	r3, #1
 8009326:	d503      	bpl.n	8009330 <__sfp+0x28>
 8009328:	6833      	ldr	r3, [r6, #0]
 800932a:	b30b      	cbz	r3, 8009370 <__sfp+0x68>
 800932c:	6836      	ldr	r6, [r6, #0]
 800932e:	e7f7      	b.n	8009320 <__sfp+0x18>
 8009330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009334:	b9d5      	cbnz	r5, 800936c <__sfp+0x64>
 8009336:	4b16      	ldr	r3, [pc, #88]	; (8009390 <__sfp+0x88>)
 8009338:	60e3      	str	r3, [r4, #12]
 800933a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800933e:	6665      	str	r5, [r4, #100]	; 0x64
 8009340:	f000 f86c 	bl	800941c <__retarget_lock_init_recursive>
 8009344:	f7ff ff96 	bl	8009274 <__sfp_lock_release>
 8009348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800934c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009350:	6025      	str	r5, [r4, #0]
 8009352:	61a5      	str	r5, [r4, #24]
 8009354:	2208      	movs	r2, #8
 8009356:	4629      	mov	r1, r5
 8009358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800935c:	f000 f86f 	bl	800943e <memset>
 8009360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009368:	4620      	mov	r0, r4
 800936a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800936c:	3468      	adds	r4, #104	; 0x68
 800936e:	e7d9      	b.n	8009324 <__sfp+0x1c>
 8009370:	2104      	movs	r1, #4
 8009372:	4638      	mov	r0, r7
 8009374:	f7ff ff62 	bl	800923c <__sfmoreglue>
 8009378:	4604      	mov	r4, r0
 800937a:	6030      	str	r0, [r6, #0]
 800937c:	2800      	cmp	r0, #0
 800937e:	d1d5      	bne.n	800932c <__sfp+0x24>
 8009380:	f7ff ff78 	bl	8009274 <__sfp_lock_release>
 8009384:	230c      	movs	r3, #12
 8009386:	603b      	str	r3, [r7, #0]
 8009388:	e7ee      	b.n	8009368 <__sfp+0x60>
 800938a:	bf00      	nop
 800938c:	0800c234 	.word	0x0800c234
 8009390:	ffff0001 	.word	0xffff0001

08009394 <_fwalk_reent>:
 8009394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009398:	4606      	mov	r6, r0
 800939a:	4688      	mov	r8, r1
 800939c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093a0:	2700      	movs	r7, #0
 80093a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093a6:	f1b9 0901 	subs.w	r9, r9, #1
 80093aa:	d505      	bpl.n	80093b8 <_fwalk_reent+0x24>
 80093ac:	6824      	ldr	r4, [r4, #0]
 80093ae:	2c00      	cmp	r4, #0
 80093b0:	d1f7      	bne.n	80093a2 <_fwalk_reent+0xe>
 80093b2:	4638      	mov	r0, r7
 80093b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093b8:	89ab      	ldrh	r3, [r5, #12]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d907      	bls.n	80093ce <_fwalk_reent+0x3a>
 80093be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093c2:	3301      	adds	r3, #1
 80093c4:	d003      	beq.n	80093ce <_fwalk_reent+0x3a>
 80093c6:	4629      	mov	r1, r5
 80093c8:	4630      	mov	r0, r6
 80093ca:	47c0      	blx	r8
 80093cc:	4307      	orrs	r7, r0
 80093ce:	3568      	adds	r5, #104	; 0x68
 80093d0:	e7e9      	b.n	80093a6 <_fwalk_reent+0x12>
	...

080093d4 <__libc_init_array>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	4d0d      	ldr	r5, [pc, #52]	; (800940c <__libc_init_array+0x38>)
 80093d8:	4c0d      	ldr	r4, [pc, #52]	; (8009410 <__libc_init_array+0x3c>)
 80093da:	1b64      	subs	r4, r4, r5
 80093dc:	10a4      	asrs	r4, r4, #2
 80093de:	2600      	movs	r6, #0
 80093e0:	42a6      	cmp	r6, r4
 80093e2:	d109      	bne.n	80093f8 <__libc_init_array+0x24>
 80093e4:	4d0b      	ldr	r5, [pc, #44]	; (8009414 <__libc_init_array+0x40>)
 80093e6:	4c0c      	ldr	r4, [pc, #48]	; (8009418 <__libc_init_array+0x44>)
 80093e8:	f002 fe8e 	bl	800c108 <_init>
 80093ec:	1b64      	subs	r4, r4, r5
 80093ee:	10a4      	asrs	r4, r4, #2
 80093f0:	2600      	movs	r6, #0
 80093f2:	42a6      	cmp	r6, r4
 80093f4:	d105      	bne.n	8009402 <__libc_init_array+0x2e>
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093fc:	4798      	blx	r3
 80093fe:	3601      	adds	r6, #1
 8009400:	e7ee      	b.n	80093e0 <__libc_init_array+0xc>
 8009402:	f855 3b04 	ldr.w	r3, [r5], #4
 8009406:	4798      	blx	r3
 8009408:	3601      	adds	r6, #1
 800940a:	e7f2      	b.n	80093f2 <__libc_init_array+0x1e>
 800940c:	0800c5bc 	.word	0x0800c5bc
 8009410:	0800c5bc 	.word	0x0800c5bc
 8009414:	0800c5bc 	.word	0x0800c5bc
 8009418:	0800c5c0 	.word	0x0800c5c0

0800941c <__retarget_lock_init_recursive>:
 800941c:	4770      	bx	lr

0800941e <__retarget_lock_acquire_recursive>:
 800941e:	4770      	bx	lr

08009420 <__retarget_lock_release_recursive>:
 8009420:	4770      	bx	lr

08009422 <memcpy>:
 8009422:	440a      	add	r2, r1
 8009424:	4291      	cmp	r1, r2
 8009426:	f100 33ff 	add.w	r3, r0, #4294967295
 800942a:	d100      	bne.n	800942e <memcpy+0xc>
 800942c:	4770      	bx	lr
 800942e:	b510      	push	{r4, lr}
 8009430:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009434:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009438:	4291      	cmp	r1, r2
 800943a:	d1f9      	bne.n	8009430 <memcpy+0xe>
 800943c:	bd10      	pop	{r4, pc}

0800943e <memset>:
 800943e:	4402      	add	r2, r0
 8009440:	4603      	mov	r3, r0
 8009442:	4293      	cmp	r3, r2
 8009444:	d100      	bne.n	8009448 <memset+0xa>
 8009446:	4770      	bx	lr
 8009448:	f803 1b01 	strb.w	r1, [r3], #1
 800944c:	e7f9      	b.n	8009442 <memset+0x4>
	...

08009450 <sbrk_aligned>:
 8009450:	b570      	push	{r4, r5, r6, lr}
 8009452:	4e0e      	ldr	r6, [pc, #56]	; (800948c <sbrk_aligned+0x3c>)
 8009454:	460c      	mov	r4, r1
 8009456:	6831      	ldr	r1, [r6, #0]
 8009458:	4605      	mov	r5, r0
 800945a:	b911      	cbnz	r1, 8009462 <sbrk_aligned+0x12>
 800945c:	f000 fd60 	bl	8009f20 <_sbrk_r>
 8009460:	6030      	str	r0, [r6, #0]
 8009462:	4621      	mov	r1, r4
 8009464:	4628      	mov	r0, r5
 8009466:	f000 fd5b 	bl	8009f20 <_sbrk_r>
 800946a:	1c43      	adds	r3, r0, #1
 800946c:	d00a      	beq.n	8009484 <sbrk_aligned+0x34>
 800946e:	1cc4      	adds	r4, r0, #3
 8009470:	f024 0403 	bic.w	r4, r4, #3
 8009474:	42a0      	cmp	r0, r4
 8009476:	d007      	beq.n	8009488 <sbrk_aligned+0x38>
 8009478:	1a21      	subs	r1, r4, r0
 800947a:	4628      	mov	r0, r5
 800947c:	f000 fd50 	bl	8009f20 <_sbrk_r>
 8009480:	3001      	adds	r0, #1
 8009482:	d101      	bne.n	8009488 <sbrk_aligned+0x38>
 8009484:	f04f 34ff 	mov.w	r4, #4294967295
 8009488:	4620      	mov	r0, r4
 800948a:	bd70      	pop	{r4, r5, r6, pc}
 800948c:	20004594 	.word	0x20004594

08009490 <_malloc_r>:
 8009490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009494:	1ccd      	adds	r5, r1, #3
 8009496:	f025 0503 	bic.w	r5, r5, #3
 800949a:	3508      	adds	r5, #8
 800949c:	2d0c      	cmp	r5, #12
 800949e:	bf38      	it	cc
 80094a0:	250c      	movcc	r5, #12
 80094a2:	2d00      	cmp	r5, #0
 80094a4:	4607      	mov	r7, r0
 80094a6:	db01      	blt.n	80094ac <_malloc_r+0x1c>
 80094a8:	42a9      	cmp	r1, r5
 80094aa:	d905      	bls.n	80094b8 <_malloc_r+0x28>
 80094ac:	230c      	movs	r3, #12
 80094ae:	603b      	str	r3, [r7, #0]
 80094b0:	2600      	movs	r6, #0
 80094b2:	4630      	mov	r0, r6
 80094b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b8:	4e2e      	ldr	r6, [pc, #184]	; (8009574 <_malloc_r+0xe4>)
 80094ba:	f001 fd49 	bl	800af50 <__malloc_lock>
 80094be:	6833      	ldr	r3, [r6, #0]
 80094c0:	461c      	mov	r4, r3
 80094c2:	bb34      	cbnz	r4, 8009512 <_malloc_r+0x82>
 80094c4:	4629      	mov	r1, r5
 80094c6:	4638      	mov	r0, r7
 80094c8:	f7ff ffc2 	bl	8009450 <sbrk_aligned>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	4604      	mov	r4, r0
 80094d0:	d14d      	bne.n	800956e <_malloc_r+0xde>
 80094d2:	6834      	ldr	r4, [r6, #0]
 80094d4:	4626      	mov	r6, r4
 80094d6:	2e00      	cmp	r6, #0
 80094d8:	d140      	bne.n	800955c <_malloc_r+0xcc>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	4631      	mov	r1, r6
 80094de:	4638      	mov	r0, r7
 80094e0:	eb04 0803 	add.w	r8, r4, r3
 80094e4:	f000 fd1c 	bl	8009f20 <_sbrk_r>
 80094e8:	4580      	cmp	r8, r0
 80094ea:	d13a      	bne.n	8009562 <_malloc_r+0xd2>
 80094ec:	6821      	ldr	r1, [r4, #0]
 80094ee:	3503      	adds	r5, #3
 80094f0:	1a6d      	subs	r5, r5, r1
 80094f2:	f025 0503 	bic.w	r5, r5, #3
 80094f6:	3508      	adds	r5, #8
 80094f8:	2d0c      	cmp	r5, #12
 80094fa:	bf38      	it	cc
 80094fc:	250c      	movcc	r5, #12
 80094fe:	4629      	mov	r1, r5
 8009500:	4638      	mov	r0, r7
 8009502:	f7ff ffa5 	bl	8009450 <sbrk_aligned>
 8009506:	3001      	adds	r0, #1
 8009508:	d02b      	beq.n	8009562 <_malloc_r+0xd2>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	442b      	add	r3, r5
 800950e:	6023      	str	r3, [r4, #0]
 8009510:	e00e      	b.n	8009530 <_malloc_r+0xa0>
 8009512:	6822      	ldr	r2, [r4, #0]
 8009514:	1b52      	subs	r2, r2, r5
 8009516:	d41e      	bmi.n	8009556 <_malloc_r+0xc6>
 8009518:	2a0b      	cmp	r2, #11
 800951a:	d916      	bls.n	800954a <_malloc_r+0xba>
 800951c:	1961      	adds	r1, r4, r5
 800951e:	42a3      	cmp	r3, r4
 8009520:	6025      	str	r5, [r4, #0]
 8009522:	bf18      	it	ne
 8009524:	6059      	strne	r1, [r3, #4]
 8009526:	6863      	ldr	r3, [r4, #4]
 8009528:	bf08      	it	eq
 800952a:	6031      	streq	r1, [r6, #0]
 800952c:	5162      	str	r2, [r4, r5]
 800952e:	604b      	str	r3, [r1, #4]
 8009530:	4638      	mov	r0, r7
 8009532:	f104 060b 	add.w	r6, r4, #11
 8009536:	f001 fd11 	bl	800af5c <__malloc_unlock>
 800953a:	f026 0607 	bic.w	r6, r6, #7
 800953e:	1d23      	adds	r3, r4, #4
 8009540:	1af2      	subs	r2, r6, r3
 8009542:	d0b6      	beq.n	80094b2 <_malloc_r+0x22>
 8009544:	1b9b      	subs	r3, r3, r6
 8009546:	50a3      	str	r3, [r4, r2]
 8009548:	e7b3      	b.n	80094b2 <_malloc_r+0x22>
 800954a:	6862      	ldr	r2, [r4, #4]
 800954c:	42a3      	cmp	r3, r4
 800954e:	bf0c      	ite	eq
 8009550:	6032      	streq	r2, [r6, #0]
 8009552:	605a      	strne	r2, [r3, #4]
 8009554:	e7ec      	b.n	8009530 <_malloc_r+0xa0>
 8009556:	4623      	mov	r3, r4
 8009558:	6864      	ldr	r4, [r4, #4]
 800955a:	e7b2      	b.n	80094c2 <_malloc_r+0x32>
 800955c:	4634      	mov	r4, r6
 800955e:	6876      	ldr	r6, [r6, #4]
 8009560:	e7b9      	b.n	80094d6 <_malloc_r+0x46>
 8009562:	230c      	movs	r3, #12
 8009564:	603b      	str	r3, [r7, #0]
 8009566:	4638      	mov	r0, r7
 8009568:	f001 fcf8 	bl	800af5c <__malloc_unlock>
 800956c:	e7a1      	b.n	80094b2 <_malloc_r+0x22>
 800956e:	6025      	str	r5, [r4, #0]
 8009570:	e7de      	b.n	8009530 <_malloc_r+0xa0>
 8009572:	bf00      	nop
 8009574:	20004590 	.word	0x20004590

08009578 <__cvt>:
 8009578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	ec55 4b10 	vmov	r4, r5, d0
 8009580:	2d00      	cmp	r5, #0
 8009582:	460e      	mov	r6, r1
 8009584:	4619      	mov	r1, r3
 8009586:	462b      	mov	r3, r5
 8009588:	bfbb      	ittet	lt
 800958a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800958e:	461d      	movlt	r5, r3
 8009590:	2300      	movge	r3, #0
 8009592:	232d      	movlt	r3, #45	; 0x2d
 8009594:	700b      	strb	r3, [r1, #0]
 8009596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009598:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800959c:	4691      	mov	r9, r2
 800959e:	f023 0820 	bic.w	r8, r3, #32
 80095a2:	bfbc      	itt	lt
 80095a4:	4622      	movlt	r2, r4
 80095a6:	4614      	movlt	r4, r2
 80095a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095ac:	d005      	beq.n	80095ba <__cvt+0x42>
 80095ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80095b2:	d100      	bne.n	80095b6 <__cvt+0x3e>
 80095b4:	3601      	adds	r6, #1
 80095b6:	2102      	movs	r1, #2
 80095b8:	e000      	b.n	80095bc <__cvt+0x44>
 80095ba:	2103      	movs	r1, #3
 80095bc:	ab03      	add	r3, sp, #12
 80095be:	9301      	str	r3, [sp, #4]
 80095c0:	ab02      	add	r3, sp, #8
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	ec45 4b10 	vmov	d0, r4, r5
 80095c8:	4653      	mov	r3, sl
 80095ca:	4632      	mov	r2, r6
 80095cc:	f000 fde0 	bl	800a190 <_dtoa_r>
 80095d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80095d4:	4607      	mov	r7, r0
 80095d6:	d102      	bne.n	80095de <__cvt+0x66>
 80095d8:	f019 0f01 	tst.w	r9, #1
 80095dc:	d022      	beq.n	8009624 <__cvt+0xac>
 80095de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095e2:	eb07 0906 	add.w	r9, r7, r6
 80095e6:	d110      	bne.n	800960a <__cvt+0x92>
 80095e8:	783b      	ldrb	r3, [r7, #0]
 80095ea:	2b30      	cmp	r3, #48	; 0x30
 80095ec:	d10a      	bne.n	8009604 <__cvt+0x8c>
 80095ee:	2200      	movs	r2, #0
 80095f0:	2300      	movs	r3, #0
 80095f2:	4620      	mov	r0, r4
 80095f4:	4629      	mov	r1, r5
 80095f6:	f7f7 fa87 	bl	8000b08 <__aeabi_dcmpeq>
 80095fa:	b918      	cbnz	r0, 8009604 <__cvt+0x8c>
 80095fc:	f1c6 0601 	rsb	r6, r6, #1
 8009600:	f8ca 6000 	str.w	r6, [sl]
 8009604:	f8da 3000 	ldr.w	r3, [sl]
 8009608:	4499      	add	r9, r3
 800960a:	2200      	movs	r2, #0
 800960c:	2300      	movs	r3, #0
 800960e:	4620      	mov	r0, r4
 8009610:	4629      	mov	r1, r5
 8009612:	f7f7 fa79 	bl	8000b08 <__aeabi_dcmpeq>
 8009616:	b108      	cbz	r0, 800961c <__cvt+0xa4>
 8009618:	f8cd 900c 	str.w	r9, [sp, #12]
 800961c:	2230      	movs	r2, #48	; 0x30
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	454b      	cmp	r3, r9
 8009622:	d307      	bcc.n	8009634 <__cvt+0xbc>
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009628:	1bdb      	subs	r3, r3, r7
 800962a:	4638      	mov	r0, r7
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	b004      	add	sp, #16
 8009630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009634:	1c59      	adds	r1, r3, #1
 8009636:	9103      	str	r1, [sp, #12]
 8009638:	701a      	strb	r2, [r3, #0]
 800963a:	e7f0      	b.n	800961e <__cvt+0xa6>

0800963c <__exponent>:
 800963c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800963e:	4603      	mov	r3, r0
 8009640:	2900      	cmp	r1, #0
 8009642:	bfb8      	it	lt
 8009644:	4249      	neglt	r1, r1
 8009646:	f803 2b02 	strb.w	r2, [r3], #2
 800964a:	bfb4      	ite	lt
 800964c:	222d      	movlt	r2, #45	; 0x2d
 800964e:	222b      	movge	r2, #43	; 0x2b
 8009650:	2909      	cmp	r1, #9
 8009652:	7042      	strb	r2, [r0, #1]
 8009654:	dd2a      	ble.n	80096ac <__exponent+0x70>
 8009656:	f10d 0407 	add.w	r4, sp, #7
 800965a:	46a4      	mov	ip, r4
 800965c:	270a      	movs	r7, #10
 800965e:	46a6      	mov	lr, r4
 8009660:	460a      	mov	r2, r1
 8009662:	fb91 f6f7 	sdiv	r6, r1, r7
 8009666:	fb07 1516 	mls	r5, r7, r6, r1
 800966a:	3530      	adds	r5, #48	; 0x30
 800966c:	2a63      	cmp	r2, #99	; 0x63
 800966e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009672:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009676:	4631      	mov	r1, r6
 8009678:	dcf1      	bgt.n	800965e <__exponent+0x22>
 800967a:	3130      	adds	r1, #48	; 0x30
 800967c:	f1ae 0502 	sub.w	r5, lr, #2
 8009680:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009684:	1c44      	adds	r4, r0, #1
 8009686:	4629      	mov	r1, r5
 8009688:	4561      	cmp	r1, ip
 800968a:	d30a      	bcc.n	80096a2 <__exponent+0x66>
 800968c:	f10d 0209 	add.w	r2, sp, #9
 8009690:	eba2 020e 	sub.w	r2, r2, lr
 8009694:	4565      	cmp	r5, ip
 8009696:	bf88      	it	hi
 8009698:	2200      	movhi	r2, #0
 800969a:	4413      	add	r3, r2
 800969c:	1a18      	subs	r0, r3, r0
 800969e:	b003      	add	sp, #12
 80096a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80096aa:	e7ed      	b.n	8009688 <__exponent+0x4c>
 80096ac:	2330      	movs	r3, #48	; 0x30
 80096ae:	3130      	adds	r1, #48	; 0x30
 80096b0:	7083      	strb	r3, [r0, #2]
 80096b2:	70c1      	strb	r1, [r0, #3]
 80096b4:	1d03      	adds	r3, r0, #4
 80096b6:	e7f1      	b.n	800969c <__exponent+0x60>

080096b8 <_printf_float>:
 80096b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	ed2d 8b02 	vpush	{d8}
 80096c0:	b08d      	sub	sp, #52	; 0x34
 80096c2:	460c      	mov	r4, r1
 80096c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80096c8:	4616      	mov	r6, r2
 80096ca:	461f      	mov	r7, r3
 80096cc:	4605      	mov	r5, r0
 80096ce:	f001 fc0f 	bl	800aef0 <_localeconv_r>
 80096d2:	f8d0 a000 	ldr.w	sl, [r0]
 80096d6:	4650      	mov	r0, sl
 80096d8:	f7f6 fd9a 	bl	8000210 <strlen>
 80096dc:	2300      	movs	r3, #0
 80096de:	930a      	str	r3, [sp, #40]	; 0x28
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	9305      	str	r3, [sp, #20]
 80096e4:	f8d8 3000 	ldr.w	r3, [r8]
 80096e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80096ec:	3307      	adds	r3, #7
 80096ee:	f023 0307 	bic.w	r3, r3, #7
 80096f2:	f103 0208 	add.w	r2, r3, #8
 80096f6:	f8c8 2000 	str.w	r2, [r8]
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009702:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009706:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800970a:	9307      	str	r3, [sp, #28]
 800970c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009710:	ee08 0a10 	vmov	s16, r0
 8009714:	4b9f      	ldr	r3, [pc, #636]	; (8009994 <_printf_float+0x2dc>)
 8009716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800971a:	f04f 32ff 	mov.w	r2, #4294967295
 800971e:	f7f7 fa25 	bl	8000b6c <__aeabi_dcmpun>
 8009722:	bb88      	cbnz	r0, 8009788 <_printf_float+0xd0>
 8009724:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009728:	4b9a      	ldr	r3, [pc, #616]	; (8009994 <_printf_float+0x2dc>)
 800972a:	f04f 32ff 	mov.w	r2, #4294967295
 800972e:	f7f7 f9ff 	bl	8000b30 <__aeabi_dcmple>
 8009732:	bb48      	cbnz	r0, 8009788 <_printf_float+0xd0>
 8009734:	2200      	movs	r2, #0
 8009736:	2300      	movs	r3, #0
 8009738:	4640      	mov	r0, r8
 800973a:	4649      	mov	r1, r9
 800973c:	f7f7 f9ee 	bl	8000b1c <__aeabi_dcmplt>
 8009740:	b110      	cbz	r0, 8009748 <_printf_float+0x90>
 8009742:	232d      	movs	r3, #45	; 0x2d
 8009744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009748:	4b93      	ldr	r3, [pc, #588]	; (8009998 <_printf_float+0x2e0>)
 800974a:	4894      	ldr	r0, [pc, #592]	; (800999c <_printf_float+0x2e4>)
 800974c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009750:	bf94      	ite	ls
 8009752:	4698      	movls	r8, r3
 8009754:	4680      	movhi	r8, r0
 8009756:	2303      	movs	r3, #3
 8009758:	6123      	str	r3, [r4, #16]
 800975a:	9b05      	ldr	r3, [sp, #20]
 800975c:	f023 0204 	bic.w	r2, r3, #4
 8009760:	6022      	str	r2, [r4, #0]
 8009762:	f04f 0900 	mov.w	r9, #0
 8009766:	9700      	str	r7, [sp, #0]
 8009768:	4633      	mov	r3, r6
 800976a:	aa0b      	add	r2, sp, #44	; 0x2c
 800976c:	4621      	mov	r1, r4
 800976e:	4628      	mov	r0, r5
 8009770:	f000 f9d8 	bl	8009b24 <_printf_common>
 8009774:	3001      	adds	r0, #1
 8009776:	f040 8090 	bne.w	800989a <_printf_float+0x1e2>
 800977a:	f04f 30ff 	mov.w	r0, #4294967295
 800977e:	b00d      	add	sp, #52	; 0x34
 8009780:	ecbd 8b02 	vpop	{d8}
 8009784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009788:	4642      	mov	r2, r8
 800978a:	464b      	mov	r3, r9
 800978c:	4640      	mov	r0, r8
 800978e:	4649      	mov	r1, r9
 8009790:	f7f7 f9ec 	bl	8000b6c <__aeabi_dcmpun>
 8009794:	b140      	cbz	r0, 80097a8 <_printf_float+0xf0>
 8009796:	464b      	mov	r3, r9
 8009798:	2b00      	cmp	r3, #0
 800979a:	bfbc      	itt	lt
 800979c:	232d      	movlt	r3, #45	; 0x2d
 800979e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80097a2:	487f      	ldr	r0, [pc, #508]	; (80099a0 <_printf_float+0x2e8>)
 80097a4:	4b7f      	ldr	r3, [pc, #508]	; (80099a4 <_printf_float+0x2ec>)
 80097a6:	e7d1      	b.n	800974c <_printf_float+0x94>
 80097a8:	6863      	ldr	r3, [r4, #4]
 80097aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80097ae:	9206      	str	r2, [sp, #24]
 80097b0:	1c5a      	adds	r2, r3, #1
 80097b2:	d13f      	bne.n	8009834 <_printf_float+0x17c>
 80097b4:	2306      	movs	r3, #6
 80097b6:	6063      	str	r3, [r4, #4]
 80097b8:	9b05      	ldr	r3, [sp, #20]
 80097ba:	6861      	ldr	r1, [r4, #4]
 80097bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80097c0:	2300      	movs	r3, #0
 80097c2:	9303      	str	r3, [sp, #12]
 80097c4:	ab0a      	add	r3, sp, #40	; 0x28
 80097c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80097ca:	ab09      	add	r3, sp, #36	; 0x24
 80097cc:	ec49 8b10 	vmov	d0, r8, r9
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	6022      	str	r2, [r4, #0]
 80097d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097d8:	4628      	mov	r0, r5
 80097da:	f7ff fecd 	bl	8009578 <__cvt>
 80097de:	9b06      	ldr	r3, [sp, #24]
 80097e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097e2:	2b47      	cmp	r3, #71	; 0x47
 80097e4:	4680      	mov	r8, r0
 80097e6:	d108      	bne.n	80097fa <_printf_float+0x142>
 80097e8:	1cc8      	adds	r0, r1, #3
 80097ea:	db02      	blt.n	80097f2 <_printf_float+0x13a>
 80097ec:	6863      	ldr	r3, [r4, #4]
 80097ee:	4299      	cmp	r1, r3
 80097f0:	dd41      	ble.n	8009876 <_printf_float+0x1be>
 80097f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80097f6:	fa5f fb8b 	uxtb.w	fp, fp
 80097fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097fe:	d820      	bhi.n	8009842 <_printf_float+0x18a>
 8009800:	3901      	subs	r1, #1
 8009802:	465a      	mov	r2, fp
 8009804:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009808:	9109      	str	r1, [sp, #36]	; 0x24
 800980a:	f7ff ff17 	bl	800963c <__exponent>
 800980e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009810:	1813      	adds	r3, r2, r0
 8009812:	2a01      	cmp	r2, #1
 8009814:	4681      	mov	r9, r0
 8009816:	6123      	str	r3, [r4, #16]
 8009818:	dc02      	bgt.n	8009820 <_printf_float+0x168>
 800981a:	6822      	ldr	r2, [r4, #0]
 800981c:	07d2      	lsls	r2, r2, #31
 800981e:	d501      	bpl.n	8009824 <_printf_float+0x16c>
 8009820:	3301      	adds	r3, #1
 8009822:	6123      	str	r3, [r4, #16]
 8009824:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009828:	2b00      	cmp	r3, #0
 800982a:	d09c      	beq.n	8009766 <_printf_float+0xae>
 800982c:	232d      	movs	r3, #45	; 0x2d
 800982e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009832:	e798      	b.n	8009766 <_printf_float+0xae>
 8009834:	9a06      	ldr	r2, [sp, #24]
 8009836:	2a47      	cmp	r2, #71	; 0x47
 8009838:	d1be      	bne.n	80097b8 <_printf_float+0x100>
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1bc      	bne.n	80097b8 <_printf_float+0x100>
 800983e:	2301      	movs	r3, #1
 8009840:	e7b9      	b.n	80097b6 <_printf_float+0xfe>
 8009842:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009846:	d118      	bne.n	800987a <_printf_float+0x1c2>
 8009848:	2900      	cmp	r1, #0
 800984a:	6863      	ldr	r3, [r4, #4]
 800984c:	dd0b      	ble.n	8009866 <_printf_float+0x1ae>
 800984e:	6121      	str	r1, [r4, #16]
 8009850:	b913      	cbnz	r3, 8009858 <_printf_float+0x1a0>
 8009852:	6822      	ldr	r2, [r4, #0]
 8009854:	07d0      	lsls	r0, r2, #31
 8009856:	d502      	bpl.n	800985e <_printf_float+0x1a6>
 8009858:	3301      	adds	r3, #1
 800985a:	440b      	add	r3, r1
 800985c:	6123      	str	r3, [r4, #16]
 800985e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009860:	f04f 0900 	mov.w	r9, #0
 8009864:	e7de      	b.n	8009824 <_printf_float+0x16c>
 8009866:	b913      	cbnz	r3, 800986e <_printf_float+0x1b6>
 8009868:	6822      	ldr	r2, [r4, #0]
 800986a:	07d2      	lsls	r2, r2, #31
 800986c:	d501      	bpl.n	8009872 <_printf_float+0x1ba>
 800986e:	3302      	adds	r3, #2
 8009870:	e7f4      	b.n	800985c <_printf_float+0x1a4>
 8009872:	2301      	movs	r3, #1
 8009874:	e7f2      	b.n	800985c <_printf_float+0x1a4>
 8009876:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800987a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987c:	4299      	cmp	r1, r3
 800987e:	db05      	blt.n	800988c <_printf_float+0x1d4>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	6121      	str	r1, [r4, #16]
 8009884:	07d8      	lsls	r0, r3, #31
 8009886:	d5ea      	bpl.n	800985e <_printf_float+0x1a6>
 8009888:	1c4b      	adds	r3, r1, #1
 800988a:	e7e7      	b.n	800985c <_printf_float+0x1a4>
 800988c:	2900      	cmp	r1, #0
 800988e:	bfd4      	ite	le
 8009890:	f1c1 0202 	rsble	r2, r1, #2
 8009894:	2201      	movgt	r2, #1
 8009896:	4413      	add	r3, r2
 8009898:	e7e0      	b.n	800985c <_printf_float+0x1a4>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	055a      	lsls	r2, r3, #21
 800989e:	d407      	bmi.n	80098b0 <_printf_float+0x1f8>
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	4642      	mov	r2, r8
 80098a4:	4631      	mov	r1, r6
 80098a6:	4628      	mov	r0, r5
 80098a8:	47b8      	blx	r7
 80098aa:	3001      	adds	r0, #1
 80098ac:	d12c      	bne.n	8009908 <_printf_float+0x250>
 80098ae:	e764      	b.n	800977a <_printf_float+0xc2>
 80098b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098b4:	f240 80e0 	bls.w	8009a78 <_printf_float+0x3c0>
 80098b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098bc:	2200      	movs	r2, #0
 80098be:	2300      	movs	r3, #0
 80098c0:	f7f7 f922 	bl	8000b08 <__aeabi_dcmpeq>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d034      	beq.n	8009932 <_printf_float+0x27a>
 80098c8:	4a37      	ldr	r2, [pc, #220]	; (80099a8 <_printf_float+0x2f0>)
 80098ca:	2301      	movs	r3, #1
 80098cc:	4631      	mov	r1, r6
 80098ce:	4628      	mov	r0, r5
 80098d0:	47b8      	blx	r7
 80098d2:	3001      	adds	r0, #1
 80098d4:	f43f af51 	beq.w	800977a <_printf_float+0xc2>
 80098d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098dc:	429a      	cmp	r2, r3
 80098de:	db02      	blt.n	80098e6 <_printf_float+0x22e>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	07d8      	lsls	r0, r3, #31
 80098e4:	d510      	bpl.n	8009908 <_printf_float+0x250>
 80098e6:	ee18 3a10 	vmov	r3, s16
 80098ea:	4652      	mov	r2, sl
 80098ec:	4631      	mov	r1, r6
 80098ee:	4628      	mov	r0, r5
 80098f0:	47b8      	blx	r7
 80098f2:	3001      	adds	r0, #1
 80098f4:	f43f af41 	beq.w	800977a <_printf_float+0xc2>
 80098f8:	f04f 0800 	mov.w	r8, #0
 80098fc:	f104 091a 	add.w	r9, r4, #26
 8009900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009902:	3b01      	subs	r3, #1
 8009904:	4543      	cmp	r3, r8
 8009906:	dc09      	bgt.n	800991c <_printf_float+0x264>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	079b      	lsls	r3, r3, #30
 800990c:	f100 8105 	bmi.w	8009b1a <_printf_float+0x462>
 8009910:	68e0      	ldr	r0, [r4, #12]
 8009912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009914:	4298      	cmp	r0, r3
 8009916:	bfb8      	it	lt
 8009918:	4618      	movlt	r0, r3
 800991a:	e730      	b.n	800977e <_printf_float+0xc6>
 800991c:	2301      	movs	r3, #1
 800991e:	464a      	mov	r2, r9
 8009920:	4631      	mov	r1, r6
 8009922:	4628      	mov	r0, r5
 8009924:	47b8      	blx	r7
 8009926:	3001      	adds	r0, #1
 8009928:	f43f af27 	beq.w	800977a <_printf_float+0xc2>
 800992c:	f108 0801 	add.w	r8, r8, #1
 8009930:	e7e6      	b.n	8009900 <_printf_float+0x248>
 8009932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009934:	2b00      	cmp	r3, #0
 8009936:	dc39      	bgt.n	80099ac <_printf_float+0x2f4>
 8009938:	4a1b      	ldr	r2, [pc, #108]	; (80099a8 <_printf_float+0x2f0>)
 800993a:	2301      	movs	r3, #1
 800993c:	4631      	mov	r1, r6
 800993e:	4628      	mov	r0, r5
 8009940:	47b8      	blx	r7
 8009942:	3001      	adds	r0, #1
 8009944:	f43f af19 	beq.w	800977a <_printf_float+0xc2>
 8009948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800994c:	4313      	orrs	r3, r2
 800994e:	d102      	bne.n	8009956 <_printf_float+0x29e>
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	07d9      	lsls	r1, r3, #31
 8009954:	d5d8      	bpl.n	8009908 <_printf_float+0x250>
 8009956:	ee18 3a10 	vmov	r3, s16
 800995a:	4652      	mov	r2, sl
 800995c:	4631      	mov	r1, r6
 800995e:	4628      	mov	r0, r5
 8009960:	47b8      	blx	r7
 8009962:	3001      	adds	r0, #1
 8009964:	f43f af09 	beq.w	800977a <_printf_float+0xc2>
 8009968:	f04f 0900 	mov.w	r9, #0
 800996c:	f104 0a1a 	add.w	sl, r4, #26
 8009970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009972:	425b      	negs	r3, r3
 8009974:	454b      	cmp	r3, r9
 8009976:	dc01      	bgt.n	800997c <_printf_float+0x2c4>
 8009978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800997a:	e792      	b.n	80098a2 <_printf_float+0x1ea>
 800997c:	2301      	movs	r3, #1
 800997e:	4652      	mov	r2, sl
 8009980:	4631      	mov	r1, r6
 8009982:	4628      	mov	r0, r5
 8009984:	47b8      	blx	r7
 8009986:	3001      	adds	r0, #1
 8009988:	f43f aef7 	beq.w	800977a <_printf_float+0xc2>
 800998c:	f109 0901 	add.w	r9, r9, #1
 8009990:	e7ee      	b.n	8009970 <_printf_float+0x2b8>
 8009992:	bf00      	nop
 8009994:	7fefffff 	.word	0x7fefffff
 8009998:	0800c238 	.word	0x0800c238
 800999c:	0800c23c 	.word	0x0800c23c
 80099a0:	0800c244 	.word	0x0800c244
 80099a4:	0800c240 	.word	0x0800c240
 80099a8:	0800c248 	.word	0x0800c248
 80099ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099b0:	429a      	cmp	r2, r3
 80099b2:	bfa8      	it	ge
 80099b4:	461a      	movge	r2, r3
 80099b6:	2a00      	cmp	r2, #0
 80099b8:	4691      	mov	r9, r2
 80099ba:	dc37      	bgt.n	8009a2c <_printf_float+0x374>
 80099bc:	f04f 0b00 	mov.w	fp, #0
 80099c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099c4:	f104 021a 	add.w	r2, r4, #26
 80099c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099ca:	9305      	str	r3, [sp, #20]
 80099cc:	eba3 0309 	sub.w	r3, r3, r9
 80099d0:	455b      	cmp	r3, fp
 80099d2:	dc33      	bgt.n	8009a3c <_printf_float+0x384>
 80099d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099d8:	429a      	cmp	r2, r3
 80099da:	db3b      	blt.n	8009a54 <_printf_float+0x39c>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	07da      	lsls	r2, r3, #31
 80099e0:	d438      	bmi.n	8009a54 <_printf_float+0x39c>
 80099e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e4:	9a05      	ldr	r2, [sp, #20]
 80099e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099e8:	1a9a      	subs	r2, r3, r2
 80099ea:	eba3 0901 	sub.w	r9, r3, r1
 80099ee:	4591      	cmp	r9, r2
 80099f0:	bfa8      	it	ge
 80099f2:	4691      	movge	r9, r2
 80099f4:	f1b9 0f00 	cmp.w	r9, #0
 80099f8:	dc35      	bgt.n	8009a66 <_printf_float+0x3ae>
 80099fa:	f04f 0800 	mov.w	r8, #0
 80099fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a02:	f104 0a1a 	add.w	sl, r4, #26
 8009a06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a0a:	1a9b      	subs	r3, r3, r2
 8009a0c:	eba3 0309 	sub.w	r3, r3, r9
 8009a10:	4543      	cmp	r3, r8
 8009a12:	f77f af79 	ble.w	8009908 <_printf_float+0x250>
 8009a16:	2301      	movs	r3, #1
 8009a18:	4652      	mov	r2, sl
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	47b8      	blx	r7
 8009a20:	3001      	adds	r0, #1
 8009a22:	f43f aeaa 	beq.w	800977a <_printf_float+0xc2>
 8009a26:	f108 0801 	add.w	r8, r8, #1
 8009a2a:	e7ec      	b.n	8009a06 <_printf_float+0x34e>
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	4631      	mov	r1, r6
 8009a30:	4642      	mov	r2, r8
 8009a32:	4628      	mov	r0, r5
 8009a34:	47b8      	blx	r7
 8009a36:	3001      	adds	r0, #1
 8009a38:	d1c0      	bne.n	80099bc <_printf_float+0x304>
 8009a3a:	e69e      	b.n	800977a <_printf_float+0xc2>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	4631      	mov	r1, r6
 8009a40:	4628      	mov	r0, r5
 8009a42:	9205      	str	r2, [sp, #20]
 8009a44:	47b8      	blx	r7
 8009a46:	3001      	adds	r0, #1
 8009a48:	f43f ae97 	beq.w	800977a <_printf_float+0xc2>
 8009a4c:	9a05      	ldr	r2, [sp, #20]
 8009a4e:	f10b 0b01 	add.w	fp, fp, #1
 8009a52:	e7b9      	b.n	80099c8 <_printf_float+0x310>
 8009a54:	ee18 3a10 	vmov	r3, s16
 8009a58:	4652      	mov	r2, sl
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	47b8      	blx	r7
 8009a60:	3001      	adds	r0, #1
 8009a62:	d1be      	bne.n	80099e2 <_printf_float+0x32a>
 8009a64:	e689      	b.n	800977a <_printf_float+0xc2>
 8009a66:	9a05      	ldr	r2, [sp, #20]
 8009a68:	464b      	mov	r3, r9
 8009a6a:	4442      	add	r2, r8
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	4628      	mov	r0, r5
 8009a70:	47b8      	blx	r7
 8009a72:	3001      	adds	r0, #1
 8009a74:	d1c1      	bne.n	80099fa <_printf_float+0x342>
 8009a76:	e680      	b.n	800977a <_printf_float+0xc2>
 8009a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a7a:	2a01      	cmp	r2, #1
 8009a7c:	dc01      	bgt.n	8009a82 <_printf_float+0x3ca>
 8009a7e:	07db      	lsls	r3, r3, #31
 8009a80:	d538      	bpl.n	8009af4 <_printf_float+0x43c>
 8009a82:	2301      	movs	r3, #1
 8009a84:	4642      	mov	r2, r8
 8009a86:	4631      	mov	r1, r6
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b8      	blx	r7
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	f43f ae74 	beq.w	800977a <_printf_float+0xc2>
 8009a92:	ee18 3a10 	vmov	r3, s16
 8009a96:	4652      	mov	r2, sl
 8009a98:	4631      	mov	r1, r6
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	47b8      	blx	r7
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	f43f ae6b 	beq.w	800977a <_printf_float+0xc2>
 8009aa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f7f7 f82c 	bl	8000b08 <__aeabi_dcmpeq>
 8009ab0:	b9d8      	cbnz	r0, 8009aea <_printf_float+0x432>
 8009ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ab4:	f108 0201 	add.w	r2, r8, #1
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	4631      	mov	r1, r6
 8009abc:	4628      	mov	r0, r5
 8009abe:	47b8      	blx	r7
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d10e      	bne.n	8009ae2 <_printf_float+0x42a>
 8009ac4:	e659      	b.n	800977a <_printf_float+0xc2>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	4652      	mov	r2, sl
 8009aca:	4631      	mov	r1, r6
 8009acc:	4628      	mov	r0, r5
 8009ace:	47b8      	blx	r7
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	f43f ae52 	beq.w	800977a <_printf_float+0xc2>
 8009ad6:	f108 0801 	add.w	r8, r8, #1
 8009ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009adc:	3b01      	subs	r3, #1
 8009ade:	4543      	cmp	r3, r8
 8009ae0:	dcf1      	bgt.n	8009ac6 <_printf_float+0x40e>
 8009ae2:	464b      	mov	r3, r9
 8009ae4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ae8:	e6dc      	b.n	80098a4 <_printf_float+0x1ec>
 8009aea:	f04f 0800 	mov.w	r8, #0
 8009aee:	f104 0a1a 	add.w	sl, r4, #26
 8009af2:	e7f2      	b.n	8009ada <_printf_float+0x422>
 8009af4:	2301      	movs	r3, #1
 8009af6:	4642      	mov	r2, r8
 8009af8:	e7df      	b.n	8009aba <_printf_float+0x402>
 8009afa:	2301      	movs	r3, #1
 8009afc:	464a      	mov	r2, r9
 8009afe:	4631      	mov	r1, r6
 8009b00:	4628      	mov	r0, r5
 8009b02:	47b8      	blx	r7
 8009b04:	3001      	adds	r0, #1
 8009b06:	f43f ae38 	beq.w	800977a <_printf_float+0xc2>
 8009b0a:	f108 0801 	add.w	r8, r8, #1
 8009b0e:	68e3      	ldr	r3, [r4, #12]
 8009b10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b12:	1a5b      	subs	r3, r3, r1
 8009b14:	4543      	cmp	r3, r8
 8009b16:	dcf0      	bgt.n	8009afa <_printf_float+0x442>
 8009b18:	e6fa      	b.n	8009910 <_printf_float+0x258>
 8009b1a:	f04f 0800 	mov.w	r8, #0
 8009b1e:	f104 0919 	add.w	r9, r4, #25
 8009b22:	e7f4      	b.n	8009b0e <_printf_float+0x456>

08009b24 <_printf_common>:
 8009b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b28:	4616      	mov	r6, r2
 8009b2a:	4699      	mov	r9, r3
 8009b2c:	688a      	ldr	r2, [r1, #8]
 8009b2e:	690b      	ldr	r3, [r1, #16]
 8009b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b34:	4293      	cmp	r3, r2
 8009b36:	bfb8      	it	lt
 8009b38:	4613      	movlt	r3, r2
 8009b3a:	6033      	str	r3, [r6, #0]
 8009b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b40:	4607      	mov	r7, r0
 8009b42:	460c      	mov	r4, r1
 8009b44:	b10a      	cbz	r2, 8009b4a <_printf_common+0x26>
 8009b46:	3301      	adds	r3, #1
 8009b48:	6033      	str	r3, [r6, #0]
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	0699      	lsls	r1, r3, #26
 8009b4e:	bf42      	ittt	mi
 8009b50:	6833      	ldrmi	r3, [r6, #0]
 8009b52:	3302      	addmi	r3, #2
 8009b54:	6033      	strmi	r3, [r6, #0]
 8009b56:	6825      	ldr	r5, [r4, #0]
 8009b58:	f015 0506 	ands.w	r5, r5, #6
 8009b5c:	d106      	bne.n	8009b6c <_printf_common+0x48>
 8009b5e:	f104 0a19 	add.w	sl, r4, #25
 8009b62:	68e3      	ldr	r3, [r4, #12]
 8009b64:	6832      	ldr	r2, [r6, #0]
 8009b66:	1a9b      	subs	r3, r3, r2
 8009b68:	42ab      	cmp	r3, r5
 8009b6a:	dc26      	bgt.n	8009bba <_printf_common+0x96>
 8009b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b70:	1e13      	subs	r3, r2, #0
 8009b72:	6822      	ldr	r2, [r4, #0]
 8009b74:	bf18      	it	ne
 8009b76:	2301      	movne	r3, #1
 8009b78:	0692      	lsls	r2, r2, #26
 8009b7a:	d42b      	bmi.n	8009bd4 <_printf_common+0xb0>
 8009b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b80:	4649      	mov	r1, r9
 8009b82:	4638      	mov	r0, r7
 8009b84:	47c0      	blx	r8
 8009b86:	3001      	adds	r0, #1
 8009b88:	d01e      	beq.n	8009bc8 <_printf_common+0xa4>
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	68e5      	ldr	r5, [r4, #12]
 8009b8e:	6832      	ldr	r2, [r6, #0]
 8009b90:	f003 0306 	and.w	r3, r3, #6
 8009b94:	2b04      	cmp	r3, #4
 8009b96:	bf08      	it	eq
 8009b98:	1aad      	subeq	r5, r5, r2
 8009b9a:	68a3      	ldr	r3, [r4, #8]
 8009b9c:	6922      	ldr	r2, [r4, #16]
 8009b9e:	bf0c      	ite	eq
 8009ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ba4:	2500      	movne	r5, #0
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	bfc4      	itt	gt
 8009baa:	1a9b      	subgt	r3, r3, r2
 8009bac:	18ed      	addgt	r5, r5, r3
 8009bae:	2600      	movs	r6, #0
 8009bb0:	341a      	adds	r4, #26
 8009bb2:	42b5      	cmp	r5, r6
 8009bb4:	d11a      	bne.n	8009bec <_printf_common+0xc8>
 8009bb6:	2000      	movs	r0, #0
 8009bb8:	e008      	b.n	8009bcc <_printf_common+0xa8>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4652      	mov	r2, sl
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	47c0      	blx	r8
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	d103      	bne.n	8009bd0 <_printf_common+0xac>
 8009bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd0:	3501      	adds	r5, #1
 8009bd2:	e7c6      	b.n	8009b62 <_printf_common+0x3e>
 8009bd4:	18e1      	adds	r1, r4, r3
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	2030      	movs	r0, #48	; 0x30
 8009bda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bde:	4422      	add	r2, r4
 8009be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009be8:	3302      	adds	r3, #2
 8009bea:	e7c7      	b.n	8009b7c <_printf_common+0x58>
 8009bec:	2301      	movs	r3, #1
 8009bee:	4622      	mov	r2, r4
 8009bf0:	4649      	mov	r1, r9
 8009bf2:	4638      	mov	r0, r7
 8009bf4:	47c0      	blx	r8
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	d0e6      	beq.n	8009bc8 <_printf_common+0xa4>
 8009bfa:	3601      	adds	r6, #1
 8009bfc:	e7d9      	b.n	8009bb2 <_printf_common+0x8e>
	...

08009c00 <_printf_i>:
 8009c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c04:	7e0f      	ldrb	r7, [r1, #24]
 8009c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c08:	2f78      	cmp	r7, #120	; 0x78
 8009c0a:	4691      	mov	r9, r2
 8009c0c:	4680      	mov	r8, r0
 8009c0e:	460c      	mov	r4, r1
 8009c10:	469a      	mov	sl, r3
 8009c12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c16:	d807      	bhi.n	8009c28 <_printf_i+0x28>
 8009c18:	2f62      	cmp	r7, #98	; 0x62
 8009c1a:	d80a      	bhi.n	8009c32 <_printf_i+0x32>
 8009c1c:	2f00      	cmp	r7, #0
 8009c1e:	f000 80d8 	beq.w	8009dd2 <_printf_i+0x1d2>
 8009c22:	2f58      	cmp	r7, #88	; 0x58
 8009c24:	f000 80a3 	beq.w	8009d6e <_printf_i+0x16e>
 8009c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c30:	e03a      	b.n	8009ca8 <_printf_i+0xa8>
 8009c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c36:	2b15      	cmp	r3, #21
 8009c38:	d8f6      	bhi.n	8009c28 <_printf_i+0x28>
 8009c3a:	a101      	add	r1, pc, #4	; (adr r1, 8009c40 <_printf_i+0x40>)
 8009c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c40:	08009c99 	.word	0x08009c99
 8009c44:	08009cad 	.word	0x08009cad
 8009c48:	08009c29 	.word	0x08009c29
 8009c4c:	08009c29 	.word	0x08009c29
 8009c50:	08009c29 	.word	0x08009c29
 8009c54:	08009c29 	.word	0x08009c29
 8009c58:	08009cad 	.word	0x08009cad
 8009c5c:	08009c29 	.word	0x08009c29
 8009c60:	08009c29 	.word	0x08009c29
 8009c64:	08009c29 	.word	0x08009c29
 8009c68:	08009c29 	.word	0x08009c29
 8009c6c:	08009db9 	.word	0x08009db9
 8009c70:	08009cdd 	.word	0x08009cdd
 8009c74:	08009d9b 	.word	0x08009d9b
 8009c78:	08009c29 	.word	0x08009c29
 8009c7c:	08009c29 	.word	0x08009c29
 8009c80:	08009ddb 	.word	0x08009ddb
 8009c84:	08009c29 	.word	0x08009c29
 8009c88:	08009cdd 	.word	0x08009cdd
 8009c8c:	08009c29 	.word	0x08009c29
 8009c90:	08009c29 	.word	0x08009c29
 8009c94:	08009da3 	.word	0x08009da3
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	1d1a      	adds	r2, r3, #4
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	602a      	str	r2, [r5, #0]
 8009ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e0a3      	b.n	8009df4 <_printf_i+0x1f4>
 8009cac:	6820      	ldr	r0, [r4, #0]
 8009cae:	6829      	ldr	r1, [r5, #0]
 8009cb0:	0606      	lsls	r6, r0, #24
 8009cb2:	f101 0304 	add.w	r3, r1, #4
 8009cb6:	d50a      	bpl.n	8009cce <_printf_i+0xce>
 8009cb8:	680e      	ldr	r6, [r1, #0]
 8009cba:	602b      	str	r3, [r5, #0]
 8009cbc:	2e00      	cmp	r6, #0
 8009cbe:	da03      	bge.n	8009cc8 <_printf_i+0xc8>
 8009cc0:	232d      	movs	r3, #45	; 0x2d
 8009cc2:	4276      	negs	r6, r6
 8009cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cc8:	485e      	ldr	r0, [pc, #376]	; (8009e44 <_printf_i+0x244>)
 8009cca:	230a      	movs	r3, #10
 8009ccc:	e019      	b.n	8009d02 <_printf_i+0x102>
 8009cce:	680e      	ldr	r6, [r1, #0]
 8009cd0:	602b      	str	r3, [r5, #0]
 8009cd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cd6:	bf18      	it	ne
 8009cd8:	b236      	sxthne	r6, r6
 8009cda:	e7ef      	b.n	8009cbc <_printf_i+0xbc>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	6820      	ldr	r0, [r4, #0]
 8009ce0:	1d19      	adds	r1, r3, #4
 8009ce2:	6029      	str	r1, [r5, #0]
 8009ce4:	0601      	lsls	r1, r0, #24
 8009ce6:	d501      	bpl.n	8009cec <_printf_i+0xec>
 8009ce8:	681e      	ldr	r6, [r3, #0]
 8009cea:	e002      	b.n	8009cf2 <_printf_i+0xf2>
 8009cec:	0646      	lsls	r6, r0, #25
 8009cee:	d5fb      	bpl.n	8009ce8 <_printf_i+0xe8>
 8009cf0:	881e      	ldrh	r6, [r3, #0]
 8009cf2:	4854      	ldr	r0, [pc, #336]	; (8009e44 <_printf_i+0x244>)
 8009cf4:	2f6f      	cmp	r7, #111	; 0x6f
 8009cf6:	bf0c      	ite	eq
 8009cf8:	2308      	moveq	r3, #8
 8009cfa:	230a      	movne	r3, #10
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d02:	6865      	ldr	r5, [r4, #4]
 8009d04:	60a5      	str	r5, [r4, #8]
 8009d06:	2d00      	cmp	r5, #0
 8009d08:	bfa2      	ittt	ge
 8009d0a:	6821      	ldrge	r1, [r4, #0]
 8009d0c:	f021 0104 	bicge.w	r1, r1, #4
 8009d10:	6021      	strge	r1, [r4, #0]
 8009d12:	b90e      	cbnz	r6, 8009d18 <_printf_i+0x118>
 8009d14:	2d00      	cmp	r5, #0
 8009d16:	d04d      	beq.n	8009db4 <_printf_i+0x1b4>
 8009d18:	4615      	mov	r5, r2
 8009d1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d1e:	fb03 6711 	mls	r7, r3, r1, r6
 8009d22:	5dc7      	ldrb	r7, [r0, r7]
 8009d24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d28:	4637      	mov	r7, r6
 8009d2a:	42bb      	cmp	r3, r7
 8009d2c:	460e      	mov	r6, r1
 8009d2e:	d9f4      	bls.n	8009d1a <_printf_i+0x11a>
 8009d30:	2b08      	cmp	r3, #8
 8009d32:	d10b      	bne.n	8009d4c <_printf_i+0x14c>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	07de      	lsls	r6, r3, #31
 8009d38:	d508      	bpl.n	8009d4c <_printf_i+0x14c>
 8009d3a:	6923      	ldr	r3, [r4, #16]
 8009d3c:	6861      	ldr	r1, [r4, #4]
 8009d3e:	4299      	cmp	r1, r3
 8009d40:	bfde      	ittt	le
 8009d42:	2330      	movle	r3, #48	; 0x30
 8009d44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d4c:	1b52      	subs	r2, r2, r5
 8009d4e:	6122      	str	r2, [r4, #16]
 8009d50:	f8cd a000 	str.w	sl, [sp]
 8009d54:	464b      	mov	r3, r9
 8009d56:	aa03      	add	r2, sp, #12
 8009d58:	4621      	mov	r1, r4
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	f7ff fee2 	bl	8009b24 <_printf_common>
 8009d60:	3001      	adds	r0, #1
 8009d62:	d14c      	bne.n	8009dfe <_printf_i+0x1fe>
 8009d64:	f04f 30ff 	mov.w	r0, #4294967295
 8009d68:	b004      	add	sp, #16
 8009d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6e:	4835      	ldr	r0, [pc, #212]	; (8009e44 <_printf_i+0x244>)
 8009d70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d74:	6829      	ldr	r1, [r5, #0]
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d7c:	6029      	str	r1, [r5, #0]
 8009d7e:	061d      	lsls	r5, r3, #24
 8009d80:	d514      	bpl.n	8009dac <_printf_i+0x1ac>
 8009d82:	07df      	lsls	r7, r3, #31
 8009d84:	bf44      	itt	mi
 8009d86:	f043 0320 	orrmi.w	r3, r3, #32
 8009d8a:	6023      	strmi	r3, [r4, #0]
 8009d8c:	b91e      	cbnz	r6, 8009d96 <_printf_i+0x196>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	f023 0320 	bic.w	r3, r3, #32
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	2310      	movs	r3, #16
 8009d98:	e7b0      	b.n	8009cfc <_printf_i+0xfc>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	f043 0320 	orr.w	r3, r3, #32
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	2378      	movs	r3, #120	; 0x78
 8009da4:	4828      	ldr	r0, [pc, #160]	; (8009e48 <_printf_i+0x248>)
 8009da6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009daa:	e7e3      	b.n	8009d74 <_printf_i+0x174>
 8009dac:	0659      	lsls	r1, r3, #25
 8009dae:	bf48      	it	mi
 8009db0:	b2b6      	uxthmi	r6, r6
 8009db2:	e7e6      	b.n	8009d82 <_printf_i+0x182>
 8009db4:	4615      	mov	r5, r2
 8009db6:	e7bb      	b.n	8009d30 <_printf_i+0x130>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	6826      	ldr	r6, [r4, #0]
 8009dbc:	6961      	ldr	r1, [r4, #20]
 8009dbe:	1d18      	adds	r0, r3, #4
 8009dc0:	6028      	str	r0, [r5, #0]
 8009dc2:	0635      	lsls	r5, r6, #24
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	d501      	bpl.n	8009dcc <_printf_i+0x1cc>
 8009dc8:	6019      	str	r1, [r3, #0]
 8009dca:	e002      	b.n	8009dd2 <_printf_i+0x1d2>
 8009dcc:	0670      	lsls	r0, r6, #25
 8009dce:	d5fb      	bpl.n	8009dc8 <_printf_i+0x1c8>
 8009dd0:	8019      	strh	r1, [r3, #0]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	6123      	str	r3, [r4, #16]
 8009dd6:	4615      	mov	r5, r2
 8009dd8:	e7ba      	b.n	8009d50 <_printf_i+0x150>
 8009dda:	682b      	ldr	r3, [r5, #0]
 8009ddc:	1d1a      	adds	r2, r3, #4
 8009dde:	602a      	str	r2, [r5, #0]
 8009de0:	681d      	ldr	r5, [r3, #0]
 8009de2:	6862      	ldr	r2, [r4, #4]
 8009de4:	2100      	movs	r1, #0
 8009de6:	4628      	mov	r0, r5
 8009de8:	f7f6 fa1a 	bl	8000220 <memchr>
 8009dec:	b108      	cbz	r0, 8009df2 <_printf_i+0x1f2>
 8009dee:	1b40      	subs	r0, r0, r5
 8009df0:	6060      	str	r0, [r4, #4]
 8009df2:	6863      	ldr	r3, [r4, #4]
 8009df4:	6123      	str	r3, [r4, #16]
 8009df6:	2300      	movs	r3, #0
 8009df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dfc:	e7a8      	b.n	8009d50 <_printf_i+0x150>
 8009dfe:	6923      	ldr	r3, [r4, #16]
 8009e00:	462a      	mov	r2, r5
 8009e02:	4649      	mov	r1, r9
 8009e04:	4640      	mov	r0, r8
 8009e06:	47d0      	blx	sl
 8009e08:	3001      	adds	r0, #1
 8009e0a:	d0ab      	beq.n	8009d64 <_printf_i+0x164>
 8009e0c:	6823      	ldr	r3, [r4, #0]
 8009e0e:	079b      	lsls	r3, r3, #30
 8009e10:	d413      	bmi.n	8009e3a <_printf_i+0x23a>
 8009e12:	68e0      	ldr	r0, [r4, #12]
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	4298      	cmp	r0, r3
 8009e18:	bfb8      	it	lt
 8009e1a:	4618      	movlt	r0, r3
 8009e1c:	e7a4      	b.n	8009d68 <_printf_i+0x168>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	4632      	mov	r2, r6
 8009e22:	4649      	mov	r1, r9
 8009e24:	4640      	mov	r0, r8
 8009e26:	47d0      	blx	sl
 8009e28:	3001      	adds	r0, #1
 8009e2a:	d09b      	beq.n	8009d64 <_printf_i+0x164>
 8009e2c:	3501      	adds	r5, #1
 8009e2e:	68e3      	ldr	r3, [r4, #12]
 8009e30:	9903      	ldr	r1, [sp, #12]
 8009e32:	1a5b      	subs	r3, r3, r1
 8009e34:	42ab      	cmp	r3, r5
 8009e36:	dcf2      	bgt.n	8009e1e <_printf_i+0x21e>
 8009e38:	e7eb      	b.n	8009e12 <_printf_i+0x212>
 8009e3a:	2500      	movs	r5, #0
 8009e3c:	f104 0619 	add.w	r6, r4, #25
 8009e40:	e7f5      	b.n	8009e2e <_printf_i+0x22e>
 8009e42:	bf00      	nop
 8009e44:	0800c24a 	.word	0x0800c24a
 8009e48:	0800c25b 	.word	0x0800c25b

08009e4c <cleanup_glue>:
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	460c      	mov	r4, r1
 8009e50:	6809      	ldr	r1, [r1, #0]
 8009e52:	4605      	mov	r5, r0
 8009e54:	b109      	cbz	r1, 8009e5a <cleanup_glue+0xe>
 8009e56:	f7ff fff9 	bl	8009e4c <cleanup_glue>
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e62:	f001 bc1b 	b.w	800b69c <_free_r>
	...

08009e68 <_reclaim_reent>:
 8009e68:	4b2c      	ldr	r3, [pc, #176]	; (8009f1c <_reclaim_reent+0xb4>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4283      	cmp	r3, r0
 8009e6e:	b570      	push	{r4, r5, r6, lr}
 8009e70:	4604      	mov	r4, r0
 8009e72:	d051      	beq.n	8009f18 <_reclaim_reent+0xb0>
 8009e74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009e76:	b143      	cbz	r3, 8009e8a <_reclaim_reent+0x22>
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d14a      	bne.n	8009f14 <_reclaim_reent+0xac>
 8009e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e80:	6819      	ldr	r1, [r3, #0]
 8009e82:	b111      	cbz	r1, 8009e8a <_reclaim_reent+0x22>
 8009e84:	4620      	mov	r0, r4
 8009e86:	f001 fc09 	bl	800b69c <_free_r>
 8009e8a:	6961      	ldr	r1, [r4, #20]
 8009e8c:	b111      	cbz	r1, 8009e94 <_reclaim_reent+0x2c>
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f001 fc04 	bl	800b69c <_free_r>
 8009e94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009e96:	b111      	cbz	r1, 8009e9e <_reclaim_reent+0x36>
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f001 fbff 	bl	800b69c <_free_r>
 8009e9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ea0:	b111      	cbz	r1, 8009ea8 <_reclaim_reent+0x40>
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f001 fbfa 	bl	800b69c <_free_r>
 8009ea8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009eaa:	b111      	cbz	r1, 8009eb2 <_reclaim_reent+0x4a>
 8009eac:	4620      	mov	r0, r4
 8009eae:	f001 fbf5 	bl	800b69c <_free_r>
 8009eb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009eb4:	b111      	cbz	r1, 8009ebc <_reclaim_reent+0x54>
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f001 fbf0 	bl	800b69c <_free_r>
 8009ebc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009ebe:	b111      	cbz	r1, 8009ec6 <_reclaim_reent+0x5e>
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f001 fbeb 	bl	800b69c <_free_r>
 8009ec6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009ec8:	b111      	cbz	r1, 8009ed0 <_reclaim_reent+0x68>
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f001 fbe6 	bl	800b69c <_free_r>
 8009ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ed2:	b111      	cbz	r1, 8009eda <_reclaim_reent+0x72>
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f001 fbe1 	bl	800b69c <_free_r>
 8009eda:	69a3      	ldr	r3, [r4, #24]
 8009edc:	b1e3      	cbz	r3, 8009f18 <_reclaim_reent+0xb0>
 8009ede:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	4798      	blx	r3
 8009ee4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009ee6:	b1b9      	cbz	r1, 8009f18 <_reclaim_reent+0xb0>
 8009ee8:	4620      	mov	r0, r4
 8009eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009eee:	f7ff bfad 	b.w	8009e4c <cleanup_glue>
 8009ef2:	5949      	ldr	r1, [r1, r5]
 8009ef4:	b941      	cbnz	r1, 8009f08 <_reclaim_reent+0xa0>
 8009ef6:	3504      	adds	r5, #4
 8009ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009efa:	2d80      	cmp	r5, #128	; 0x80
 8009efc:	68d9      	ldr	r1, [r3, #12]
 8009efe:	d1f8      	bne.n	8009ef2 <_reclaim_reent+0x8a>
 8009f00:	4620      	mov	r0, r4
 8009f02:	f001 fbcb 	bl	800b69c <_free_r>
 8009f06:	e7ba      	b.n	8009e7e <_reclaim_reent+0x16>
 8009f08:	680e      	ldr	r6, [r1, #0]
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f001 fbc6 	bl	800b69c <_free_r>
 8009f10:	4631      	mov	r1, r6
 8009f12:	e7ef      	b.n	8009ef4 <_reclaim_reent+0x8c>
 8009f14:	2500      	movs	r5, #0
 8009f16:	e7ef      	b.n	8009ef8 <_reclaim_reent+0x90>
 8009f18:	bd70      	pop	{r4, r5, r6, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20000014 	.word	0x20000014

08009f20 <_sbrk_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4d06      	ldr	r5, [pc, #24]	; (8009f3c <_sbrk_r+0x1c>)
 8009f24:	2300      	movs	r3, #0
 8009f26:	4604      	mov	r4, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	602b      	str	r3, [r5, #0]
 8009f2c:	f7f8 fd08 	bl	8002940 <_sbrk>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_sbrk_r+0x1a>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_sbrk_r+0x1a>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	20004598 	.word	0x20004598

08009f40 <sniprintf>:
 8009f40:	b40c      	push	{r2, r3}
 8009f42:	b530      	push	{r4, r5, lr}
 8009f44:	4b17      	ldr	r3, [pc, #92]	; (8009fa4 <sniprintf+0x64>)
 8009f46:	1e0c      	subs	r4, r1, #0
 8009f48:	681d      	ldr	r5, [r3, #0]
 8009f4a:	b09d      	sub	sp, #116	; 0x74
 8009f4c:	da08      	bge.n	8009f60 <sniprintf+0x20>
 8009f4e:	238b      	movs	r3, #139	; 0x8b
 8009f50:	602b      	str	r3, [r5, #0]
 8009f52:	f04f 30ff 	mov.w	r0, #4294967295
 8009f56:	b01d      	add	sp, #116	; 0x74
 8009f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f5c:	b002      	add	sp, #8
 8009f5e:	4770      	bx	lr
 8009f60:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009f64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009f68:	bf14      	ite	ne
 8009f6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f6e:	4623      	moveq	r3, r4
 8009f70:	9304      	str	r3, [sp, #16]
 8009f72:	9307      	str	r3, [sp, #28]
 8009f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f78:	9002      	str	r0, [sp, #8]
 8009f7a:	9006      	str	r0, [sp, #24]
 8009f7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009f82:	ab21      	add	r3, sp, #132	; 0x84
 8009f84:	a902      	add	r1, sp, #8
 8009f86:	4628      	mov	r0, r5
 8009f88:	9301      	str	r3, [sp, #4]
 8009f8a:	f001 fc2f 	bl	800b7ec <_svfiprintf_r>
 8009f8e:	1c43      	adds	r3, r0, #1
 8009f90:	bfbc      	itt	lt
 8009f92:	238b      	movlt	r3, #139	; 0x8b
 8009f94:	602b      	strlt	r3, [r5, #0]
 8009f96:	2c00      	cmp	r4, #0
 8009f98:	d0dd      	beq.n	8009f56 <sniprintf+0x16>
 8009f9a:	9b02      	ldr	r3, [sp, #8]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	701a      	strb	r2, [r3, #0]
 8009fa0:	e7d9      	b.n	8009f56 <sniprintf+0x16>
 8009fa2:	bf00      	nop
 8009fa4:	20000014 	.word	0x20000014

08009fa8 <__sread>:
 8009fa8:	b510      	push	{r4, lr}
 8009faa:	460c      	mov	r4, r1
 8009fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb0:	f001 fe76 	bl	800bca0 <_read_r>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	bfab      	itete	ge
 8009fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fba:	89a3      	ldrhlt	r3, [r4, #12]
 8009fbc:	181b      	addge	r3, r3, r0
 8009fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fc2:	bfac      	ite	ge
 8009fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fc6:	81a3      	strhlt	r3, [r4, #12]
 8009fc8:	bd10      	pop	{r4, pc}

08009fca <__swrite>:
 8009fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fce:	461f      	mov	r7, r3
 8009fd0:	898b      	ldrh	r3, [r1, #12]
 8009fd2:	05db      	lsls	r3, r3, #23
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	4616      	mov	r6, r2
 8009fda:	d505      	bpl.n	8009fe8 <__swrite+0x1e>
 8009fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f000 ff88 	bl	800aef8 <_lseek_r>
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ff2:	81a3      	strh	r3, [r4, #12]
 8009ff4:	4632      	mov	r2, r6
 8009ff6:	463b      	mov	r3, r7
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ffe:	f000 b817 	b.w	800a030 <_write_r>

0800a002 <__sseek>:
 800a002:	b510      	push	{r4, lr}
 800a004:	460c      	mov	r4, r1
 800a006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a00a:	f000 ff75 	bl	800aef8 <_lseek_r>
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	bf15      	itete	ne
 800a014:	6560      	strne	r0, [r4, #84]	; 0x54
 800a016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a01a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a01e:	81a3      	strheq	r3, [r4, #12]
 800a020:	bf18      	it	ne
 800a022:	81a3      	strhne	r3, [r4, #12]
 800a024:	bd10      	pop	{r4, pc}

0800a026 <__sclose>:
 800a026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a02a:	f000 b813 	b.w	800a054 <_close_r>
	...

0800a030 <_write_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4d07      	ldr	r5, [pc, #28]	; (800a050 <_write_r+0x20>)
 800a034:	4604      	mov	r4, r0
 800a036:	4608      	mov	r0, r1
 800a038:	4611      	mov	r1, r2
 800a03a:	2200      	movs	r2, #0
 800a03c:	602a      	str	r2, [r5, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	f7f8 fc2d 	bl	800289e <_write>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d102      	bne.n	800a04e <_write_r+0x1e>
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	b103      	cbz	r3, 800a04e <_write_r+0x1e>
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	bd38      	pop	{r3, r4, r5, pc}
 800a050:	20004598 	.word	0x20004598

0800a054 <_close_r>:
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4d06      	ldr	r5, [pc, #24]	; (800a070 <_close_r+0x1c>)
 800a058:	2300      	movs	r3, #0
 800a05a:	4604      	mov	r4, r0
 800a05c:	4608      	mov	r0, r1
 800a05e:	602b      	str	r3, [r5, #0]
 800a060:	f7f8 fc39 	bl	80028d6 <_close>
 800a064:	1c43      	adds	r3, r0, #1
 800a066:	d102      	bne.n	800a06e <_close_r+0x1a>
 800a068:	682b      	ldr	r3, [r5, #0]
 800a06a:	b103      	cbz	r3, 800a06e <_close_r+0x1a>
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	bd38      	pop	{r3, r4, r5, pc}
 800a070:	20004598 	.word	0x20004598

0800a074 <quorem>:
 800a074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a078:	6903      	ldr	r3, [r0, #16]
 800a07a:	690c      	ldr	r4, [r1, #16]
 800a07c:	42a3      	cmp	r3, r4
 800a07e:	4607      	mov	r7, r0
 800a080:	f2c0 8081 	blt.w	800a186 <quorem+0x112>
 800a084:	3c01      	subs	r4, #1
 800a086:	f101 0814 	add.w	r8, r1, #20
 800a08a:	f100 0514 	add.w	r5, r0, #20
 800a08e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a092:	9301      	str	r3, [sp, #4]
 800a094:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a098:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a09c:	3301      	adds	r3, #1
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0ac:	d331      	bcc.n	800a112 <quorem+0x9e>
 800a0ae:	f04f 0e00 	mov.w	lr, #0
 800a0b2:	4640      	mov	r0, r8
 800a0b4:	46ac      	mov	ip, r5
 800a0b6:	46f2      	mov	sl, lr
 800a0b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0bc:	b293      	uxth	r3, r2
 800a0be:	fb06 e303 	mla	r3, r6, r3, lr
 800a0c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	ebaa 0303 	sub.w	r3, sl, r3
 800a0cc:	f8dc a000 	ldr.w	sl, [ip]
 800a0d0:	0c12      	lsrs	r2, r2, #16
 800a0d2:	fa13 f38a 	uxtah	r3, r3, sl
 800a0d6:	fb06 e202 	mla	r2, r6, r2, lr
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	9b00      	ldr	r3, [sp, #0]
 800a0de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0e2:	b292      	uxth	r2, r2
 800a0e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0ec:	f8bd 3000 	ldrh.w	r3, [sp]
 800a0f0:	4581      	cmp	r9, r0
 800a0f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0f6:	f84c 3b04 	str.w	r3, [ip], #4
 800a0fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0fe:	d2db      	bcs.n	800a0b8 <quorem+0x44>
 800a100:	f855 300b 	ldr.w	r3, [r5, fp]
 800a104:	b92b      	cbnz	r3, 800a112 <quorem+0x9e>
 800a106:	9b01      	ldr	r3, [sp, #4]
 800a108:	3b04      	subs	r3, #4
 800a10a:	429d      	cmp	r5, r3
 800a10c:	461a      	mov	r2, r3
 800a10e:	d32e      	bcc.n	800a16e <quorem+0xfa>
 800a110:	613c      	str	r4, [r7, #16]
 800a112:	4638      	mov	r0, r7
 800a114:	f001 f9aa 	bl	800b46c <__mcmp>
 800a118:	2800      	cmp	r0, #0
 800a11a:	db24      	blt.n	800a166 <quorem+0xf2>
 800a11c:	3601      	adds	r6, #1
 800a11e:	4628      	mov	r0, r5
 800a120:	f04f 0c00 	mov.w	ip, #0
 800a124:	f858 2b04 	ldr.w	r2, [r8], #4
 800a128:	f8d0 e000 	ldr.w	lr, [r0]
 800a12c:	b293      	uxth	r3, r2
 800a12e:	ebac 0303 	sub.w	r3, ip, r3
 800a132:	0c12      	lsrs	r2, r2, #16
 800a134:	fa13 f38e 	uxtah	r3, r3, lr
 800a138:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a13c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a140:	b29b      	uxth	r3, r3
 800a142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a146:	45c1      	cmp	r9, r8
 800a148:	f840 3b04 	str.w	r3, [r0], #4
 800a14c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a150:	d2e8      	bcs.n	800a124 <quorem+0xb0>
 800a152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a15a:	b922      	cbnz	r2, 800a166 <quorem+0xf2>
 800a15c:	3b04      	subs	r3, #4
 800a15e:	429d      	cmp	r5, r3
 800a160:	461a      	mov	r2, r3
 800a162:	d30a      	bcc.n	800a17a <quorem+0x106>
 800a164:	613c      	str	r4, [r7, #16]
 800a166:	4630      	mov	r0, r6
 800a168:	b003      	add	sp, #12
 800a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16e:	6812      	ldr	r2, [r2, #0]
 800a170:	3b04      	subs	r3, #4
 800a172:	2a00      	cmp	r2, #0
 800a174:	d1cc      	bne.n	800a110 <quorem+0x9c>
 800a176:	3c01      	subs	r4, #1
 800a178:	e7c7      	b.n	800a10a <quorem+0x96>
 800a17a:	6812      	ldr	r2, [r2, #0]
 800a17c:	3b04      	subs	r3, #4
 800a17e:	2a00      	cmp	r2, #0
 800a180:	d1f0      	bne.n	800a164 <quorem+0xf0>
 800a182:	3c01      	subs	r4, #1
 800a184:	e7eb      	b.n	800a15e <quorem+0xea>
 800a186:	2000      	movs	r0, #0
 800a188:	e7ee      	b.n	800a168 <quorem+0xf4>
 800a18a:	0000      	movs	r0, r0
 800a18c:	0000      	movs	r0, r0
	...

0800a190 <_dtoa_r>:
 800a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	ed2d 8b04 	vpush	{d8-d9}
 800a198:	ec57 6b10 	vmov	r6, r7, d0
 800a19c:	b093      	sub	sp, #76	; 0x4c
 800a19e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a1a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1a4:	9106      	str	r1, [sp, #24]
 800a1a6:	ee10 aa10 	vmov	sl, s0
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ae:	930c      	str	r3, [sp, #48]	; 0x30
 800a1b0:	46bb      	mov	fp, r7
 800a1b2:	b975      	cbnz	r5, 800a1d2 <_dtoa_r+0x42>
 800a1b4:	2010      	movs	r0, #16
 800a1b6:	f000 feb1 	bl	800af1c <malloc>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	6260      	str	r0, [r4, #36]	; 0x24
 800a1be:	b920      	cbnz	r0, 800a1ca <_dtoa_r+0x3a>
 800a1c0:	4ba7      	ldr	r3, [pc, #668]	; (800a460 <_dtoa_r+0x2d0>)
 800a1c2:	21ea      	movs	r1, #234	; 0xea
 800a1c4:	48a7      	ldr	r0, [pc, #668]	; (800a464 <_dtoa_r+0x2d4>)
 800a1c6:	f001 fe4b 	bl	800be60 <__assert_func>
 800a1ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1ce:	6005      	str	r5, [r0, #0]
 800a1d0:	60c5      	str	r5, [r0, #12]
 800a1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1d4:	6819      	ldr	r1, [r3, #0]
 800a1d6:	b151      	cbz	r1, 800a1ee <_dtoa_r+0x5e>
 800a1d8:	685a      	ldr	r2, [r3, #4]
 800a1da:	604a      	str	r2, [r1, #4]
 800a1dc:	2301      	movs	r3, #1
 800a1de:	4093      	lsls	r3, r2
 800a1e0:	608b      	str	r3, [r1, #8]
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f000 ff00 	bl	800afe8 <_Bfree>
 800a1e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	1e3b      	subs	r3, r7, #0
 800a1f0:	bfaa      	itet	ge
 800a1f2:	2300      	movge	r3, #0
 800a1f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a1f8:	f8c8 3000 	strge.w	r3, [r8]
 800a1fc:	4b9a      	ldr	r3, [pc, #616]	; (800a468 <_dtoa_r+0x2d8>)
 800a1fe:	bfbc      	itt	lt
 800a200:	2201      	movlt	r2, #1
 800a202:	f8c8 2000 	strlt.w	r2, [r8]
 800a206:	ea33 030b 	bics.w	r3, r3, fp
 800a20a:	d11b      	bne.n	800a244 <_dtoa_r+0xb4>
 800a20c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a20e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a212:	6013      	str	r3, [r2, #0]
 800a214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a218:	4333      	orrs	r3, r6
 800a21a:	f000 8592 	beq.w	800ad42 <_dtoa_r+0xbb2>
 800a21e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a220:	b963      	cbnz	r3, 800a23c <_dtoa_r+0xac>
 800a222:	4b92      	ldr	r3, [pc, #584]	; (800a46c <_dtoa_r+0x2dc>)
 800a224:	e022      	b.n	800a26c <_dtoa_r+0xdc>
 800a226:	4b92      	ldr	r3, [pc, #584]	; (800a470 <_dtoa_r+0x2e0>)
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	3308      	adds	r3, #8
 800a22c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	9801      	ldr	r0, [sp, #4]
 800a232:	b013      	add	sp, #76	; 0x4c
 800a234:	ecbd 8b04 	vpop	{d8-d9}
 800a238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23c:	4b8b      	ldr	r3, [pc, #556]	; (800a46c <_dtoa_r+0x2dc>)
 800a23e:	9301      	str	r3, [sp, #4]
 800a240:	3303      	adds	r3, #3
 800a242:	e7f3      	b.n	800a22c <_dtoa_r+0x9c>
 800a244:	2200      	movs	r2, #0
 800a246:	2300      	movs	r3, #0
 800a248:	4650      	mov	r0, sl
 800a24a:	4659      	mov	r1, fp
 800a24c:	f7f6 fc5c 	bl	8000b08 <__aeabi_dcmpeq>
 800a250:	ec4b ab19 	vmov	d9, sl, fp
 800a254:	4680      	mov	r8, r0
 800a256:	b158      	cbz	r0, 800a270 <_dtoa_r+0xe0>
 800a258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a25a:	2301      	movs	r3, #1
 800a25c:	6013      	str	r3, [r2, #0]
 800a25e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a260:	2b00      	cmp	r3, #0
 800a262:	f000 856b 	beq.w	800ad3c <_dtoa_r+0xbac>
 800a266:	4883      	ldr	r0, [pc, #524]	; (800a474 <_dtoa_r+0x2e4>)
 800a268:	6018      	str	r0, [r3, #0]
 800a26a:	1e43      	subs	r3, r0, #1
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	e7df      	b.n	800a230 <_dtoa_r+0xa0>
 800a270:	ec4b ab10 	vmov	d0, sl, fp
 800a274:	aa10      	add	r2, sp, #64	; 0x40
 800a276:	a911      	add	r1, sp, #68	; 0x44
 800a278:	4620      	mov	r0, r4
 800a27a:	f001 f99d 	bl	800b5b8 <__d2b>
 800a27e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a282:	ee08 0a10 	vmov	s16, r0
 800a286:	2d00      	cmp	r5, #0
 800a288:	f000 8084 	beq.w	800a394 <_dtoa_r+0x204>
 800a28c:	ee19 3a90 	vmov	r3, s19
 800a290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a294:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a298:	4656      	mov	r6, sl
 800a29a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a29e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a2a6:	4b74      	ldr	r3, [pc, #464]	; (800a478 <_dtoa_r+0x2e8>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	f7f6 f80b 	bl	80002c8 <__aeabi_dsub>
 800a2b2:	a365      	add	r3, pc, #404	; (adr r3, 800a448 <_dtoa_r+0x2b8>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	f7f6 f9be 	bl	8000638 <__aeabi_dmul>
 800a2bc:	a364      	add	r3, pc, #400	; (adr r3, 800a450 <_dtoa_r+0x2c0>)
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	f7f6 f803 	bl	80002cc <__adddf3>
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	460f      	mov	r7, r1
 800a2cc:	f7f6 f94a 	bl	8000564 <__aeabi_i2d>
 800a2d0:	a361      	add	r3, pc, #388	; (adr r3, 800a458 <_dtoa_r+0x2c8>)
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	f7f6 f9af 	bl	8000638 <__aeabi_dmul>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4630      	mov	r0, r6
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	f7f5 fff3 	bl	80002cc <__adddf3>
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	460f      	mov	r7, r1
 800a2ea:	f7f6 fc55 	bl	8000b98 <__aeabi_d2iz>
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	9000      	str	r0, [sp, #0]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	f7f6 fc10 	bl	8000b1c <__aeabi_dcmplt>
 800a2fc:	b150      	cbz	r0, 800a314 <_dtoa_r+0x184>
 800a2fe:	9800      	ldr	r0, [sp, #0]
 800a300:	f7f6 f930 	bl	8000564 <__aeabi_i2d>
 800a304:	4632      	mov	r2, r6
 800a306:	463b      	mov	r3, r7
 800a308:	f7f6 fbfe 	bl	8000b08 <__aeabi_dcmpeq>
 800a30c:	b910      	cbnz	r0, 800a314 <_dtoa_r+0x184>
 800a30e:	9b00      	ldr	r3, [sp, #0]
 800a310:	3b01      	subs	r3, #1
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	9b00      	ldr	r3, [sp, #0]
 800a316:	2b16      	cmp	r3, #22
 800a318:	d85a      	bhi.n	800a3d0 <_dtoa_r+0x240>
 800a31a:	9a00      	ldr	r2, [sp, #0]
 800a31c:	4b57      	ldr	r3, [pc, #348]	; (800a47c <_dtoa_r+0x2ec>)
 800a31e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	ec51 0b19 	vmov	r0, r1, d9
 800a32a:	f7f6 fbf7 	bl	8000b1c <__aeabi_dcmplt>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d050      	beq.n	800a3d4 <_dtoa_r+0x244>
 800a332:	9b00      	ldr	r3, [sp, #0]
 800a334:	3b01      	subs	r3, #1
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	2300      	movs	r3, #0
 800a33a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a33c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a33e:	1b5d      	subs	r5, r3, r5
 800a340:	1e6b      	subs	r3, r5, #1
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	bf45      	ittet	mi
 800a346:	f1c5 0301 	rsbmi	r3, r5, #1
 800a34a:	9304      	strmi	r3, [sp, #16]
 800a34c:	2300      	movpl	r3, #0
 800a34e:	2300      	movmi	r3, #0
 800a350:	bf4c      	ite	mi
 800a352:	9305      	strmi	r3, [sp, #20]
 800a354:	9304      	strpl	r3, [sp, #16]
 800a356:	9b00      	ldr	r3, [sp, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	db3d      	blt.n	800a3d8 <_dtoa_r+0x248>
 800a35c:	9b05      	ldr	r3, [sp, #20]
 800a35e:	9a00      	ldr	r2, [sp, #0]
 800a360:	920a      	str	r2, [sp, #40]	; 0x28
 800a362:	4413      	add	r3, r2
 800a364:	9305      	str	r3, [sp, #20]
 800a366:	2300      	movs	r3, #0
 800a368:	9307      	str	r3, [sp, #28]
 800a36a:	9b06      	ldr	r3, [sp, #24]
 800a36c:	2b09      	cmp	r3, #9
 800a36e:	f200 8089 	bhi.w	800a484 <_dtoa_r+0x2f4>
 800a372:	2b05      	cmp	r3, #5
 800a374:	bfc4      	itt	gt
 800a376:	3b04      	subgt	r3, #4
 800a378:	9306      	strgt	r3, [sp, #24]
 800a37a:	9b06      	ldr	r3, [sp, #24]
 800a37c:	f1a3 0302 	sub.w	r3, r3, #2
 800a380:	bfcc      	ite	gt
 800a382:	2500      	movgt	r5, #0
 800a384:	2501      	movle	r5, #1
 800a386:	2b03      	cmp	r3, #3
 800a388:	f200 8087 	bhi.w	800a49a <_dtoa_r+0x30a>
 800a38c:	e8df f003 	tbb	[pc, r3]
 800a390:	59383a2d 	.word	0x59383a2d
 800a394:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a398:	441d      	add	r5, r3
 800a39a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	bfc1      	itttt	gt
 800a3a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a3aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800a3ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a3b2:	bfda      	itte	le
 800a3b4:	f1c3 0320 	rsble	r3, r3, #32
 800a3b8:	fa06 f003 	lslle.w	r0, r6, r3
 800a3bc:	4318      	orrgt	r0, r3
 800a3be:	f7f6 f8c1 	bl	8000544 <__aeabi_ui2d>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a3ca:	3d01      	subs	r5, #1
 800a3cc:	930e      	str	r3, [sp, #56]	; 0x38
 800a3ce:	e76a      	b.n	800a2a6 <_dtoa_r+0x116>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e7b2      	b.n	800a33a <_dtoa_r+0x1aa>
 800a3d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3d6:	e7b1      	b.n	800a33c <_dtoa_r+0x1ac>
 800a3d8:	9b04      	ldr	r3, [sp, #16]
 800a3da:	9a00      	ldr	r2, [sp, #0]
 800a3dc:	1a9b      	subs	r3, r3, r2
 800a3de:	9304      	str	r3, [sp, #16]
 800a3e0:	4253      	negs	r3, r2
 800a3e2:	9307      	str	r3, [sp, #28]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	930a      	str	r3, [sp, #40]	; 0x28
 800a3e8:	e7bf      	b.n	800a36a <_dtoa_r+0x1da>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	9308      	str	r3, [sp, #32]
 800a3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	dc55      	bgt.n	800a4a0 <_dtoa_r+0x310>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a3fe:	e00c      	b.n	800a41a <_dtoa_r+0x28a>
 800a400:	2301      	movs	r3, #1
 800a402:	e7f3      	b.n	800a3ec <_dtoa_r+0x25c>
 800a404:	2300      	movs	r3, #0
 800a406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a408:	9308      	str	r3, [sp, #32]
 800a40a:	9b00      	ldr	r3, [sp, #0]
 800a40c:	4413      	add	r3, r2
 800a40e:	9302      	str	r3, [sp, #8]
 800a410:	3301      	adds	r3, #1
 800a412:	2b01      	cmp	r3, #1
 800a414:	9303      	str	r3, [sp, #12]
 800a416:	bfb8      	it	lt
 800a418:	2301      	movlt	r3, #1
 800a41a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a41c:	2200      	movs	r2, #0
 800a41e:	6042      	str	r2, [r0, #4]
 800a420:	2204      	movs	r2, #4
 800a422:	f102 0614 	add.w	r6, r2, #20
 800a426:	429e      	cmp	r6, r3
 800a428:	6841      	ldr	r1, [r0, #4]
 800a42a:	d93d      	bls.n	800a4a8 <_dtoa_r+0x318>
 800a42c:	4620      	mov	r0, r4
 800a42e:	f000 fd9b 	bl	800af68 <_Balloc>
 800a432:	9001      	str	r0, [sp, #4]
 800a434:	2800      	cmp	r0, #0
 800a436:	d13b      	bne.n	800a4b0 <_dtoa_r+0x320>
 800a438:	4b11      	ldr	r3, [pc, #68]	; (800a480 <_dtoa_r+0x2f0>)
 800a43a:	4602      	mov	r2, r0
 800a43c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a440:	e6c0      	b.n	800a1c4 <_dtoa_r+0x34>
 800a442:	2301      	movs	r3, #1
 800a444:	e7df      	b.n	800a406 <_dtoa_r+0x276>
 800a446:	bf00      	nop
 800a448:	636f4361 	.word	0x636f4361
 800a44c:	3fd287a7 	.word	0x3fd287a7
 800a450:	8b60c8b3 	.word	0x8b60c8b3
 800a454:	3fc68a28 	.word	0x3fc68a28
 800a458:	509f79fb 	.word	0x509f79fb
 800a45c:	3fd34413 	.word	0x3fd34413
 800a460:	0800c37a 	.word	0x0800c37a
 800a464:	0800c391 	.word	0x0800c391
 800a468:	7ff00000 	.word	0x7ff00000
 800a46c:	0800c376 	.word	0x0800c376
 800a470:	0800c36d 	.word	0x0800c36d
 800a474:	0800c249 	.word	0x0800c249
 800a478:	3ff80000 	.word	0x3ff80000
 800a47c:	0800c490 	.word	0x0800c490
 800a480:	0800c3ec 	.word	0x0800c3ec
 800a484:	2501      	movs	r5, #1
 800a486:	2300      	movs	r3, #0
 800a488:	9306      	str	r3, [sp, #24]
 800a48a:	9508      	str	r5, [sp, #32]
 800a48c:	f04f 33ff 	mov.w	r3, #4294967295
 800a490:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a494:	2200      	movs	r2, #0
 800a496:	2312      	movs	r3, #18
 800a498:	e7b0      	b.n	800a3fc <_dtoa_r+0x26c>
 800a49a:	2301      	movs	r3, #1
 800a49c:	9308      	str	r3, [sp, #32]
 800a49e:	e7f5      	b.n	800a48c <_dtoa_r+0x2fc>
 800a4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4a6:	e7b8      	b.n	800a41a <_dtoa_r+0x28a>
 800a4a8:	3101      	adds	r1, #1
 800a4aa:	6041      	str	r1, [r0, #4]
 800a4ac:	0052      	lsls	r2, r2, #1
 800a4ae:	e7b8      	b.n	800a422 <_dtoa_r+0x292>
 800a4b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4b2:	9a01      	ldr	r2, [sp, #4]
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	2b0e      	cmp	r3, #14
 800a4ba:	f200 809d 	bhi.w	800a5f8 <_dtoa_r+0x468>
 800a4be:	2d00      	cmp	r5, #0
 800a4c0:	f000 809a 	beq.w	800a5f8 <_dtoa_r+0x468>
 800a4c4:	9b00      	ldr	r3, [sp, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	dd32      	ble.n	800a530 <_dtoa_r+0x3a0>
 800a4ca:	4ab7      	ldr	r2, [pc, #732]	; (800a7a8 <_dtoa_r+0x618>)
 800a4cc:	f003 030f 	and.w	r3, r3, #15
 800a4d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a4d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4d8:	9b00      	ldr	r3, [sp, #0]
 800a4da:	05d8      	lsls	r0, r3, #23
 800a4dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a4e0:	d516      	bpl.n	800a510 <_dtoa_r+0x380>
 800a4e2:	4bb2      	ldr	r3, [pc, #712]	; (800a7ac <_dtoa_r+0x61c>)
 800a4e4:	ec51 0b19 	vmov	r0, r1, d9
 800a4e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4ec:	f7f6 f9ce 	bl	800088c <__aeabi_ddiv>
 800a4f0:	f007 070f 	and.w	r7, r7, #15
 800a4f4:	4682      	mov	sl, r0
 800a4f6:	468b      	mov	fp, r1
 800a4f8:	2503      	movs	r5, #3
 800a4fa:	4eac      	ldr	r6, [pc, #688]	; (800a7ac <_dtoa_r+0x61c>)
 800a4fc:	b957      	cbnz	r7, 800a514 <_dtoa_r+0x384>
 800a4fe:	4642      	mov	r2, r8
 800a500:	464b      	mov	r3, r9
 800a502:	4650      	mov	r0, sl
 800a504:	4659      	mov	r1, fp
 800a506:	f7f6 f9c1 	bl	800088c <__aeabi_ddiv>
 800a50a:	4682      	mov	sl, r0
 800a50c:	468b      	mov	fp, r1
 800a50e:	e028      	b.n	800a562 <_dtoa_r+0x3d2>
 800a510:	2502      	movs	r5, #2
 800a512:	e7f2      	b.n	800a4fa <_dtoa_r+0x36a>
 800a514:	07f9      	lsls	r1, r7, #31
 800a516:	d508      	bpl.n	800a52a <_dtoa_r+0x39a>
 800a518:	4640      	mov	r0, r8
 800a51a:	4649      	mov	r1, r9
 800a51c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a520:	f7f6 f88a 	bl	8000638 <__aeabi_dmul>
 800a524:	3501      	adds	r5, #1
 800a526:	4680      	mov	r8, r0
 800a528:	4689      	mov	r9, r1
 800a52a:	107f      	asrs	r7, r7, #1
 800a52c:	3608      	adds	r6, #8
 800a52e:	e7e5      	b.n	800a4fc <_dtoa_r+0x36c>
 800a530:	f000 809b 	beq.w	800a66a <_dtoa_r+0x4da>
 800a534:	9b00      	ldr	r3, [sp, #0]
 800a536:	4f9d      	ldr	r7, [pc, #628]	; (800a7ac <_dtoa_r+0x61c>)
 800a538:	425e      	negs	r6, r3
 800a53a:	4b9b      	ldr	r3, [pc, #620]	; (800a7a8 <_dtoa_r+0x618>)
 800a53c:	f006 020f 	and.w	r2, r6, #15
 800a540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	ec51 0b19 	vmov	r0, r1, d9
 800a54c:	f7f6 f874 	bl	8000638 <__aeabi_dmul>
 800a550:	1136      	asrs	r6, r6, #4
 800a552:	4682      	mov	sl, r0
 800a554:	468b      	mov	fp, r1
 800a556:	2300      	movs	r3, #0
 800a558:	2502      	movs	r5, #2
 800a55a:	2e00      	cmp	r6, #0
 800a55c:	d17a      	bne.n	800a654 <_dtoa_r+0x4c4>
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1d3      	bne.n	800a50a <_dtoa_r+0x37a>
 800a562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 8082 	beq.w	800a66e <_dtoa_r+0x4de>
 800a56a:	4b91      	ldr	r3, [pc, #580]	; (800a7b0 <_dtoa_r+0x620>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	4650      	mov	r0, sl
 800a570:	4659      	mov	r1, fp
 800a572:	f7f6 fad3 	bl	8000b1c <__aeabi_dcmplt>
 800a576:	2800      	cmp	r0, #0
 800a578:	d079      	beq.n	800a66e <_dtoa_r+0x4de>
 800a57a:	9b03      	ldr	r3, [sp, #12]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d076      	beq.n	800a66e <_dtoa_r+0x4de>
 800a580:	9b02      	ldr	r3, [sp, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	dd36      	ble.n	800a5f4 <_dtoa_r+0x464>
 800a586:	9b00      	ldr	r3, [sp, #0]
 800a588:	4650      	mov	r0, sl
 800a58a:	4659      	mov	r1, fp
 800a58c:	1e5f      	subs	r7, r3, #1
 800a58e:	2200      	movs	r2, #0
 800a590:	4b88      	ldr	r3, [pc, #544]	; (800a7b4 <_dtoa_r+0x624>)
 800a592:	f7f6 f851 	bl	8000638 <__aeabi_dmul>
 800a596:	9e02      	ldr	r6, [sp, #8]
 800a598:	4682      	mov	sl, r0
 800a59a:	468b      	mov	fp, r1
 800a59c:	3501      	adds	r5, #1
 800a59e:	4628      	mov	r0, r5
 800a5a0:	f7f5 ffe0 	bl	8000564 <__aeabi_i2d>
 800a5a4:	4652      	mov	r2, sl
 800a5a6:	465b      	mov	r3, fp
 800a5a8:	f7f6 f846 	bl	8000638 <__aeabi_dmul>
 800a5ac:	4b82      	ldr	r3, [pc, #520]	; (800a7b8 <_dtoa_r+0x628>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f7f5 fe8c 	bl	80002cc <__adddf3>
 800a5b4:	46d0      	mov	r8, sl
 800a5b6:	46d9      	mov	r9, fp
 800a5b8:	4682      	mov	sl, r0
 800a5ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a5be:	2e00      	cmp	r6, #0
 800a5c0:	d158      	bne.n	800a674 <_dtoa_r+0x4e4>
 800a5c2:	4b7e      	ldr	r3, [pc, #504]	; (800a7bc <_dtoa_r+0x62c>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	4640      	mov	r0, r8
 800a5c8:	4649      	mov	r1, r9
 800a5ca:	f7f5 fe7d 	bl	80002c8 <__aeabi_dsub>
 800a5ce:	4652      	mov	r2, sl
 800a5d0:	465b      	mov	r3, fp
 800a5d2:	4680      	mov	r8, r0
 800a5d4:	4689      	mov	r9, r1
 800a5d6:	f7f6 fabf 	bl	8000b58 <__aeabi_dcmpgt>
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	f040 8295 	bne.w	800ab0a <_dtoa_r+0x97a>
 800a5e0:	4652      	mov	r2, sl
 800a5e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a5e6:	4640      	mov	r0, r8
 800a5e8:	4649      	mov	r1, r9
 800a5ea:	f7f6 fa97 	bl	8000b1c <__aeabi_dcmplt>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	f040 8289 	bne.w	800ab06 <_dtoa_r+0x976>
 800a5f4:	ec5b ab19 	vmov	sl, fp, d9
 800a5f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f2c0 8148 	blt.w	800a890 <_dtoa_r+0x700>
 800a600:	9a00      	ldr	r2, [sp, #0]
 800a602:	2a0e      	cmp	r2, #14
 800a604:	f300 8144 	bgt.w	800a890 <_dtoa_r+0x700>
 800a608:	4b67      	ldr	r3, [pc, #412]	; (800a7a8 <_dtoa_r+0x618>)
 800a60a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a60e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a614:	2b00      	cmp	r3, #0
 800a616:	f280 80d5 	bge.w	800a7c4 <_dtoa_r+0x634>
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f300 80d1 	bgt.w	800a7c4 <_dtoa_r+0x634>
 800a622:	f040 826f 	bne.w	800ab04 <_dtoa_r+0x974>
 800a626:	4b65      	ldr	r3, [pc, #404]	; (800a7bc <_dtoa_r+0x62c>)
 800a628:	2200      	movs	r2, #0
 800a62a:	4640      	mov	r0, r8
 800a62c:	4649      	mov	r1, r9
 800a62e:	f7f6 f803 	bl	8000638 <__aeabi_dmul>
 800a632:	4652      	mov	r2, sl
 800a634:	465b      	mov	r3, fp
 800a636:	f7f6 fa85 	bl	8000b44 <__aeabi_dcmpge>
 800a63a:	9e03      	ldr	r6, [sp, #12]
 800a63c:	4637      	mov	r7, r6
 800a63e:	2800      	cmp	r0, #0
 800a640:	f040 8245 	bne.w	800aace <_dtoa_r+0x93e>
 800a644:	9d01      	ldr	r5, [sp, #4]
 800a646:	2331      	movs	r3, #49	; 0x31
 800a648:	f805 3b01 	strb.w	r3, [r5], #1
 800a64c:	9b00      	ldr	r3, [sp, #0]
 800a64e:	3301      	adds	r3, #1
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	e240      	b.n	800aad6 <_dtoa_r+0x946>
 800a654:	07f2      	lsls	r2, r6, #31
 800a656:	d505      	bpl.n	800a664 <_dtoa_r+0x4d4>
 800a658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a65c:	f7f5 ffec 	bl	8000638 <__aeabi_dmul>
 800a660:	3501      	adds	r5, #1
 800a662:	2301      	movs	r3, #1
 800a664:	1076      	asrs	r6, r6, #1
 800a666:	3708      	adds	r7, #8
 800a668:	e777      	b.n	800a55a <_dtoa_r+0x3ca>
 800a66a:	2502      	movs	r5, #2
 800a66c:	e779      	b.n	800a562 <_dtoa_r+0x3d2>
 800a66e:	9f00      	ldr	r7, [sp, #0]
 800a670:	9e03      	ldr	r6, [sp, #12]
 800a672:	e794      	b.n	800a59e <_dtoa_r+0x40e>
 800a674:	9901      	ldr	r1, [sp, #4]
 800a676:	4b4c      	ldr	r3, [pc, #304]	; (800a7a8 <_dtoa_r+0x618>)
 800a678:	4431      	add	r1, r6
 800a67a:	910d      	str	r1, [sp, #52]	; 0x34
 800a67c:	9908      	ldr	r1, [sp, #32]
 800a67e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a686:	2900      	cmp	r1, #0
 800a688:	d043      	beq.n	800a712 <_dtoa_r+0x582>
 800a68a:	494d      	ldr	r1, [pc, #308]	; (800a7c0 <_dtoa_r+0x630>)
 800a68c:	2000      	movs	r0, #0
 800a68e:	f7f6 f8fd 	bl	800088c <__aeabi_ddiv>
 800a692:	4652      	mov	r2, sl
 800a694:	465b      	mov	r3, fp
 800a696:	f7f5 fe17 	bl	80002c8 <__aeabi_dsub>
 800a69a:	9d01      	ldr	r5, [sp, #4]
 800a69c:	4682      	mov	sl, r0
 800a69e:	468b      	mov	fp, r1
 800a6a0:	4649      	mov	r1, r9
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	f7f6 fa78 	bl	8000b98 <__aeabi_d2iz>
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	f7f5 ff5b 	bl	8000564 <__aeabi_i2d>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	f7f5 fe07 	bl	80002c8 <__aeabi_dsub>
 800a6ba:	3630      	adds	r6, #48	; 0x30
 800a6bc:	f805 6b01 	strb.w	r6, [r5], #1
 800a6c0:	4652      	mov	r2, sl
 800a6c2:	465b      	mov	r3, fp
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	4689      	mov	r9, r1
 800a6c8:	f7f6 fa28 	bl	8000b1c <__aeabi_dcmplt>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d163      	bne.n	800a798 <_dtoa_r+0x608>
 800a6d0:	4642      	mov	r2, r8
 800a6d2:	464b      	mov	r3, r9
 800a6d4:	4936      	ldr	r1, [pc, #216]	; (800a7b0 <_dtoa_r+0x620>)
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	f7f5 fdf6 	bl	80002c8 <__aeabi_dsub>
 800a6dc:	4652      	mov	r2, sl
 800a6de:	465b      	mov	r3, fp
 800a6e0:	f7f6 fa1c 	bl	8000b1c <__aeabi_dcmplt>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	f040 80b5 	bne.w	800a854 <_dtoa_r+0x6c4>
 800a6ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6ec:	429d      	cmp	r5, r3
 800a6ee:	d081      	beq.n	800a5f4 <_dtoa_r+0x464>
 800a6f0:	4b30      	ldr	r3, [pc, #192]	; (800a7b4 <_dtoa_r+0x624>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	4650      	mov	r0, sl
 800a6f6:	4659      	mov	r1, fp
 800a6f8:	f7f5 ff9e 	bl	8000638 <__aeabi_dmul>
 800a6fc:	4b2d      	ldr	r3, [pc, #180]	; (800a7b4 <_dtoa_r+0x624>)
 800a6fe:	4682      	mov	sl, r0
 800a700:	468b      	mov	fp, r1
 800a702:	4640      	mov	r0, r8
 800a704:	4649      	mov	r1, r9
 800a706:	2200      	movs	r2, #0
 800a708:	f7f5 ff96 	bl	8000638 <__aeabi_dmul>
 800a70c:	4680      	mov	r8, r0
 800a70e:	4689      	mov	r9, r1
 800a710:	e7c6      	b.n	800a6a0 <_dtoa_r+0x510>
 800a712:	4650      	mov	r0, sl
 800a714:	4659      	mov	r1, fp
 800a716:	f7f5 ff8f 	bl	8000638 <__aeabi_dmul>
 800a71a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a71c:	9d01      	ldr	r5, [sp, #4]
 800a71e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a720:	4682      	mov	sl, r0
 800a722:	468b      	mov	fp, r1
 800a724:	4649      	mov	r1, r9
 800a726:	4640      	mov	r0, r8
 800a728:	f7f6 fa36 	bl	8000b98 <__aeabi_d2iz>
 800a72c:	4606      	mov	r6, r0
 800a72e:	f7f5 ff19 	bl	8000564 <__aeabi_i2d>
 800a732:	3630      	adds	r6, #48	; 0x30
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	4640      	mov	r0, r8
 800a73a:	4649      	mov	r1, r9
 800a73c:	f7f5 fdc4 	bl	80002c8 <__aeabi_dsub>
 800a740:	f805 6b01 	strb.w	r6, [r5], #1
 800a744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a746:	429d      	cmp	r5, r3
 800a748:	4680      	mov	r8, r0
 800a74a:	4689      	mov	r9, r1
 800a74c:	f04f 0200 	mov.w	r2, #0
 800a750:	d124      	bne.n	800a79c <_dtoa_r+0x60c>
 800a752:	4b1b      	ldr	r3, [pc, #108]	; (800a7c0 <_dtoa_r+0x630>)
 800a754:	4650      	mov	r0, sl
 800a756:	4659      	mov	r1, fp
 800a758:	f7f5 fdb8 	bl	80002cc <__adddf3>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	4640      	mov	r0, r8
 800a762:	4649      	mov	r1, r9
 800a764:	f7f6 f9f8 	bl	8000b58 <__aeabi_dcmpgt>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d173      	bne.n	800a854 <_dtoa_r+0x6c4>
 800a76c:	4652      	mov	r2, sl
 800a76e:	465b      	mov	r3, fp
 800a770:	4913      	ldr	r1, [pc, #76]	; (800a7c0 <_dtoa_r+0x630>)
 800a772:	2000      	movs	r0, #0
 800a774:	f7f5 fda8 	bl	80002c8 <__aeabi_dsub>
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	4640      	mov	r0, r8
 800a77e:	4649      	mov	r1, r9
 800a780:	f7f6 f9cc 	bl	8000b1c <__aeabi_dcmplt>
 800a784:	2800      	cmp	r0, #0
 800a786:	f43f af35 	beq.w	800a5f4 <_dtoa_r+0x464>
 800a78a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a78c:	1e6b      	subs	r3, r5, #1
 800a78e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a790:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a794:	2b30      	cmp	r3, #48	; 0x30
 800a796:	d0f8      	beq.n	800a78a <_dtoa_r+0x5fa>
 800a798:	9700      	str	r7, [sp, #0]
 800a79a:	e049      	b.n	800a830 <_dtoa_r+0x6a0>
 800a79c:	4b05      	ldr	r3, [pc, #20]	; (800a7b4 <_dtoa_r+0x624>)
 800a79e:	f7f5 ff4b 	bl	8000638 <__aeabi_dmul>
 800a7a2:	4680      	mov	r8, r0
 800a7a4:	4689      	mov	r9, r1
 800a7a6:	e7bd      	b.n	800a724 <_dtoa_r+0x594>
 800a7a8:	0800c490 	.word	0x0800c490
 800a7ac:	0800c468 	.word	0x0800c468
 800a7b0:	3ff00000 	.word	0x3ff00000
 800a7b4:	40240000 	.word	0x40240000
 800a7b8:	401c0000 	.word	0x401c0000
 800a7bc:	40140000 	.word	0x40140000
 800a7c0:	3fe00000 	.word	0x3fe00000
 800a7c4:	9d01      	ldr	r5, [sp, #4]
 800a7c6:	4656      	mov	r6, sl
 800a7c8:	465f      	mov	r7, fp
 800a7ca:	4642      	mov	r2, r8
 800a7cc:	464b      	mov	r3, r9
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	4639      	mov	r1, r7
 800a7d2:	f7f6 f85b 	bl	800088c <__aeabi_ddiv>
 800a7d6:	f7f6 f9df 	bl	8000b98 <__aeabi_d2iz>
 800a7da:	4682      	mov	sl, r0
 800a7dc:	f7f5 fec2 	bl	8000564 <__aeabi_i2d>
 800a7e0:	4642      	mov	r2, r8
 800a7e2:	464b      	mov	r3, r9
 800a7e4:	f7f5 ff28 	bl	8000638 <__aeabi_dmul>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a7f4:	f7f5 fd68 	bl	80002c8 <__aeabi_dsub>
 800a7f8:	f805 6b01 	strb.w	r6, [r5], #1
 800a7fc:	9e01      	ldr	r6, [sp, #4]
 800a7fe:	9f03      	ldr	r7, [sp, #12]
 800a800:	1bae      	subs	r6, r5, r6
 800a802:	42b7      	cmp	r7, r6
 800a804:	4602      	mov	r2, r0
 800a806:	460b      	mov	r3, r1
 800a808:	d135      	bne.n	800a876 <_dtoa_r+0x6e6>
 800a80a:	f7f5 fd5f 	bl	80002cc <__adddf3>
 800a80e:	4642      	mov	r2, r8
 800a810:	464b      	mov	r3, r9
 800a812:	4606      	mov	r6, r0
 800a814:	460f      	mov	r7, r1
 800a816:	f7f6 f99f 	bl	8000b58 <__aeabi_dcmpgt>
 800a81a:	b9d0      	cbnz	r0, 800a852 <_dtoa_r+0x6c2>
 800a81c:	4642      	mov	r2, r8
 800a81e:	464b      	mov	r3, r9
 800a820:	4630      	mov	r0, r6
 800a822:	4639      	mov	r1, r7
 800a824:	f7f6 f970 	bl	8000b08 <__aeabi_dcmpeq>
 800a828:	b110      	cbz	r0, 800a830 <_dtoa_r+0x6a0>
 800a82a:	f01a 0f01 	tst.w	sl, #1
 800a82e:	d110      	bne.n	800a852 <_dtoa_r+0x6c2>
 800a830:	4620      	mov	r0, r4
 800a832:	ee18 1a10 	vmov	r1, s16
 800a836:	f000 fbd7 	bl	800afe8 <_Bfree>
 800a83a:	2300      	movs	r3, #0
 800a83c:	9800      	ldr	r0, [sp, #0]
 800a83e:	702b      	strb	r3, [r5, #0]
 800a840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a842:	3001      	adds	r0, #1
 800a844:	6018      	str	r0, [r3, #0]
 800a846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f43f acf1 	beq.w	800a230 <_dtoa_r+0xa0>
 800a84e:	601d      	str	r5, [r3, #0]
 800a850:	e4ee      	b.n	800a230 <_dtoa_r+0xa0>
 800a852:	9f00      	ldr	r7, [sp, #0]
 800a854:	462b      	mov	r3, r5
 800a856:	461d      	mov	r5, r3
 800a858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a85c:	2a39      	cmp	r2, #57	; 0x39
 800a85e:	d106      	bne.n	800a86e <_dtoa_r+0x6de>
 800a860:	9a01      	ldr	r2, [sp, #4]
 800a862:	429a      	cmp	r2, r3
 800a864:	d1f7      	bne.n	800a856 <_dtoa_r+0x6c6>
 800a866:	9901      	ldr	r1, [sp, #4]
 800a868:	2230      	movs	r2, #48	; 0x30
 800a86a:	3701      	adds	r7, #1
 800a86c:	700a      	strb	r2, [r1, #0]
 800a86e:	781a      	ldrb	r2, [r3, #0]
 800a870:	3201      	adds	r2, #1
 800a872:	701a      	strb	r2, [r3, #0]
 800a874:	e790      	b.n	800a798 <_dtoa_r+0x608>
 800a876:	4ba6      	ldr	r3, [pc, #664]	; (800ab10 <_dtoa_r+0x980>)
 800a878:	2200      	movs	r2, #0
 800a87a:	f7f5 fedd 	bl	8000638 <__aeabi_dmul>
 800a87e:	2200      	movs	r2, #0
 800a880:	2300      	movs	r3, #0
 800a882:	4606      	mov	r6, r0
 800a884:	460f      	mov	r7, r1
 800a886:	f7f6 f93f 	bl	8000b08 <__aeabi_dcmpeq>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d09d      	beq.n	800a7ca <_dtoa_r+0x63a>
 800a88e:	e7cf      	b.n	800a830 <_dtoa_r+0x6a0>
 800a890:	9a08      	ldr	r2, [sp, #32]
 800a892:	2a00      	cmp	r2, #0
 800a894:	f000 80d7 	beq.w	800aa46 <_dtoa_r+0x8b6>
 800a898:	9a06      	ldr	r2, [sp, #24]
 800a89a:	2a01      	cmp	r2, #1
 800a89c:	f300 80ba 	bgt.w	800aa14 <_dtoa_r+0x884>
 800a8a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	f000 80b2 	beq.w	800aa0c <_dtoa_r+0x87c>
 800a8a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8ac:	9e07      	ldr	r6, [sp, #28]
 800a8ae:	9d04      	ldr	r5, [sp, #16]
 800a8b0:	9a04      	ldr	r2, [sp, #16]
 800a8b2:	441a      	add	r2, r3
 800a8b4:	9204      	str	r2, [sp, #16]
 800a8b6:	9a05      	ldr	r2, [sp, #20]
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	441a      	add	r2, r3
 800a8bc:	4620      	mov	r0, r4
 800a8be:	9205      	str	r2, [sp, #20]
 800a8c0:	f000 fc4a 	bl	800b158 <__i2b>
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	2d00      	cmp	r5, #0
 800a8c8:	dd0c      	ble.n	800a8e4 <_dtoa_r+0x754>
 800a8ca:	9b05      	ldr	r3, [sp, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	dd09      	ble.n	800a8e4 <_dtoa_r+0x754>
 800a8d0:	42ab      	cmp	r3, r5
 800a8d2:	9a04      	ldr	r2, [sp, #16]
 800a8d4:	bfa8      	it	ge
 800a8d6:	462b      	movge	r3, r5
 800a8d8:	1ad2      	subs	r2, r2, r3
 800a8da:	9204      	str	r2, [sp, #16]
 800a8dc:	9a05      	ldr	r2, [sp, #20]
 800a8de:	1aed      	subs	r5, r5, r3
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	9305      	str	r3, [sp, #20]
 800a8e4:	9b07      	ldr	r3, [sp, #28]
 800a8e6:	b31b      	cbz	r3, 800a930 <_dtoa_r+0x7a0>
 800a8e8:	9b08      	ldr	r3, [sp, #32]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f000 80af 	beq.w	800aa4e <_dtoa_r+0x8be>
 800a8f0:	2e00      	cmp	r6, #0
 800a8f2:	dd13      	ble.n	800a91c <_dtoa_r+0x78c>
 800a8f4:	4639      	mov	r1, r7
 800a8f6:	4632      	mov	r2, r6
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 fced 	bl	800b2d8 <__pow5mult>
 800a8fe:	ee18 2a10 	vmov	r2, s16
 800a902:	4601      	mov	r1, r0
 800a904:	4607      	mov	r7, r0
 800a906:	4620      	mov	r0, r4
 800a908:	f000 fc3c 	bl	800b184 <__multiply>
 800a90c:	ee18 1a10 	vmov	r1, s16
 800a910:	4680      	mov	r8, r0
 800a912:	4620      	mov	r0, r4
 800a914:	f000 fb68 	bl	800afe8 <_Bfree>
 800a918:	ee08 8a10 	vmov	s16, r8
 800a91c:	9b07      	ldr	r3, [sp, #28]
 800a91e:	1b9a      	subs	r2, r3, r6
 800a920:	d006      	beq.n	800a930 <_dtoa_r+0x7a0>
 800a922:	ee18 1a10 	vmov	r1, s16
 800a926:	4620      	mov	r0, r4
 800a928:	f000 fcd6 	bl	800b2d8 <__pow5mult>
 800a92c:	ee08 0a10 	vmov	s16, r0
 800a930:	2101      	movs	r1, #1
 800a932:	4620      	mov	r0, r4
 800a934:	f000 fc10 	bl	800b158 <__i2b>
 800a938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	4606      	mov	r6, r0
 800a93e:	f340 8088 	ble.w	800aa52 <_dtoa_r+0x8c2>
 800a942:	461a      	mov	r2, r3
 800a944:	4601      	mov	r1, r0
 800a946:	4620      	mov	r0, r4
 800a948:	f000 fcc6 	bl	800b2d8 <__pow5mult>
 800a94c:	9b06      	ldr	r3, [sp, #24]
 800a94e:	2b01      	cmp	r3, #1
 800a950:	4606      	mov	r6, r0
 800a952:	f340 8081 	ble.w	800aa58 <_dtoa_r+0x8c8>
 800a956:	f04f 0800 	mov.w	r8, #0
 800a95a:	6933      	ldr	r3, [r6, #16]
 800a95c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a960:	6918      	ldr	r0, [r3, #16]
 800a962:	f000 fba9 	bl	800b0b8 <__hi0bits>
 800a966:	f1c0 0020 	rsb	r0, r0, #32
 800a96a:	9b05      	ldr	r3, [sp, #20]
 800a96c:	4418      	add	r0, r3
 800a96e:	f010 001f 	ands.w	r0, r0, #31
 800a972:	f000 8092 	beq.w	800aa9a <_dtoa_r+0x90a>
 800a976:	f1c0 0320 	rsb	r3, r0, #32
 800a97a:	2b04      	cmp	r3, #4
 800a97c:	f340 808a 	ble.w	800aa94 <_dtoa_r+0x904>
 800a980:	f1c0 001c 	rsb	r0, r0, #28
 800a984:	9b04      	ldr	r3, [sp, #16]
 800a986:	4403      	add	r3, r0
 800a988:	9304      	str	r3, [sp, #16]
 800a98a:	9b05      	ldr	r3, [sp, #20]
 800a98c:	4403      	add	r3, r0
 800a98e:	4405      	add	r5, r0
 800a990:	9305      	str	r3, [sp, #20]
 800a992:	9b04      	ldr	r3, [sp, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	dd07      	ble.n	800a9a8 <_dtoa_r+0x818>
 800a998:	ee18 1a10 	vmov	r1, s16
 800a99c:	461a      	mov	r2, r3
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 fcf4 	bl	800b38c <__lshift>
 800a9a4:	ee08 0a10 	vmov	s16, r0
 800a9a8:	9b05      	ldr	r3, [sp, #20]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	dd05      	ble.n	800a9ba <_dtoa_r+0x82a>
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 fcea 	bl	800b38c <__lshift>
 800a9b8:	4606      	mov	r6, r0
 800a9ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d06e      	beq.n	800aa9e <_dtoa_r+0x90e>
 800a9c0:	ee18 0a10 	vmov	r0, s16
 800a9c4:	4631      	mov	r1, r6
 800a9c6:	f000 fd51 	bl	800b46c <__mcmp>
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	da67      	bge.n	800aa9e <_dtoa_r+0x90e>
 800a9ce:	9b00      	ldr	r3, [sp, #0]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	ee18 1a10 	vmov	r1, s16
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	220a      	movs	r2, #10
 800a9da:	2300      	movs	r3, #0
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f000 fb25 	bl	800b02c <__multadd>
 800a9e2:	9b08      	ldr	r3, [sp, #32]
 800a9e4:	ee08 0a10 	vmov	s16, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f000 81b1 	beq.w	800ad50 <_dtoa_r+0xbc0>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	4639      	mov	r1, r7
 800a9f2:	220a      	movs	r2, #10
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f000 fb19 	bl	800b02c <__multadd>
 800a9fa:	9b02      	ldr	r3, [sp, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	4607      	mov	r7, r0
 800aa00:	f300 808e 	bgt.w	800ab20 <_dtoa_r+0x990>
 800aa04:	9b06      	ldr	r3, [sp, #24]
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	dc51      	bgt.n	800aaae <_dtoa_r+0x91e>
 800aa0a:	e089      	b.n	800ab20 <_dtoa_r+0x990>
 800aa0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa12:	e74b      	b.n	800a8ac <_dtoa_r+0x71c>
 800aa14:	9b03      	ldr	r3, [sp, #12]
 800aa16:	1e5e      	subs	r6, r3, #1
 800aa18:	9b07      	ldr	r3, [sp, #28]
 800aa1a:	42b3      	cmp	r3, r6
 800aa1c:	bfbf      	itttt	lt
 800aa1e:	9b07      	ldrlt	r3, [sp, #28]
 800aa20:	9607      	strlt	r6, [sp, #28]
 800aa22:	1af2      	sublt	r2, r6, r3
 800aa24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aa26:	bfb6      	itet	lt
 800aa28:	189b      	addlt	r3, r3, r2
 800aa2a:	1b9e      	subge	r6, r3, r6
 800aa2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aa2e:	9b03      	ldr	r3, [sp, #12]
 800aa30:	bfb8      	it	lt
 800aa32:	2600      	movlt	r6, #0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	bfb7      	itett	lt
 800aa38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aa3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aa40:	1a9d      	sublt	r5, r3, r2
 800aa42:	2300      	movlt	r3, #0
 800aa44:	e734      	b.n	800a8b0 <_dtoa_r+0x720>
 800aa46:	9e07      	ldr	r6, [sp, #28]
 800aa48:	9d04      	ldr	r5, [sp, #16]
 800aa4a:	9f08      	ldr	r7, [sp, #32]
 800aa4c:	e73b      	b.n	800a8c6 <_dtoa_r+0x736>
 800aa4e:	9a07      	ldr	r2, [sp, #28]
 800aa50:	e767      	b.n	800a922 <_dtoa_r+0x792>
 800aa52:	9b06      	ldr	r3, [sp, #24]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	dc18      	bgt.n	800aa8a <_dtoa_r+0x8fa>
 800aa58:	f1ba 0f00 	cmp.w	sl, #0
 800aa5c:	d115      	bne.n	800aa8a <_dtoa_r+0x8fa>
 800aa5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa62:	b993      	cbnz	r3, 800aa8a <_dtoa_r+0x8fa>
 800aa64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa68:	0d1b      	lsrs	r3, r3, #20
 800aa6a:	051b      	lsls	r3, r3, #20
 800aa6c:	b183      	cbz	r3, 800aa90 <_dtoa_r+0x900>
 800aa6e:	9b04      	ldr	r3, [sp, #16]
 800aa70:	3301      	adds	r3, #1
 800aa72:	9304      	str	r3, [sp, #16]
 800aa74:	9b05      	ldr	r3, [sp, #20]
 800aa76:	3301      	adds	r3, #1
 800aa78:	9305      	str	r3, [sp, #20]
 800aa7a:	f04f 0801 	mov.w	r8, #1
 800aa7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f47f af6a 	bne.w	800a95a <_dtoa_r+0x7ca>
 800aa86:	2001      	movs	r0, #1
 800aa88:	e76f      	b.n	800a96a <_dtoa_r+0x7da>
 800aa8a:	f04f 0800 	mov.w	r8, #0
 800aa8e:	e7f6      	b.n	800aa7e <_dtoa_r+0x8ee>
 800aa90:	4698      	mov	r8, r3
 800aa92:	e7f4      	b.n	800aa7e <_dtoa_r+0x8ee>
 800aa94:	f43f af7d 	beq.w	800a992 <_dtoa_r+0x802>
 800aa98:	4618      	mov	r0, r3
 800aa9a:	301c      	adds	r0, #28
 800aa9c:	e772      	b.n	800a984 <_dtoa_r+0x7f4>
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	dc37      	bgt.n	800ab14 <_dtoa_r+0x984>
 800aaa4:	9b06      	ldr	r3, [sp, #24]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	dd34      	ble.n	800ab14 <_dtoa_r+0x984>
 800aaaa:	9b03      	ldr	r3, [sp, #12]
 800aaac:	9302      	str	r3, [sp, #8]
 800aaae:	9b02      	ldr	r3, [sp, #8]
 800aab0:	b96b      	cbnz	r3, 800aace <_dtoa_r+0x93e>
 800aab2:	4631      	mov	r1, r6
 800aab4:	2205      	movs	r2, #5
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 fab8 	bl	800b02c <__multadd>
 800aabc:	4601      	mov	r1, r0
 800aabe:	4606      	mov	r6, r0
 800aac0:	ee18 0a10 	vmov	r0, s16
 800aac4:	f000 fcd2 	bl	800b46c <__mcmp>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	f73f adbb 	bgt.w	800a644 <_dtoa_r+0x4b4>
 800aace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad0:	9d01      	ldr	r5, [sp, #4]
 800aad2:	43db      	mvns	r3, r3
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	f04f 0800 	mov.w	r8, #0
 800aada:	4631      	mov	r1, r6
 800aadc:	4620      	mov	r0, r4
 800aade:	f000 fa83 	bl	800afe8 <_Bfree>
 800aae2:	2f00      	cmp	r7, #0
 800aae4:	f43f aea4 	beq.w	800a830 <_dtoa_r+0x6a0>
 800aae8:	f1b8 0f00 	cmp.w	r8, #0
 800aaec:	d005      	beq.n	800aafa <_dtoa_r+0x96a>
 800aaee:	45b8      	cmp	r8, r7
 800aaf0:	d003      	beq.n	800aafa <_dtoa_r+0x96a>
 800aaf2:	4641      	mov	r1, r8
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f000 fa77 	bl	800afe8 <_Bfree>
 800aafa:	4639      	mov	r1, r7
 800aafc:	4620      	mov	r0, r4
 800aafe:	f000 fa73 	bl	800afe8 <_Bfree>
 800ab02:	e695      	b.n	800a830 <_dtoa_r+0x6a0>
 800ab04:	2600      	movs	r6, #0
 800ab06:	4637      	mov	r7, r6
 800ab08:	e7e1      	b.n	800aace <_dtoa_r+0x93e>
 800ab0a:	9700      	str	r7, [sp, #0]
 800ab0c:	4637      	mov	r7, r6
 800ab0e:	e599      	b.n	800a644 <_dtoa_r+0x4b4>
 800ab10:	40240000 	.word	0x40240000
 800ab14:	9b08      	ldr	r3, [sp, #32]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 80ca 	beq.w	800acb0 <_dtoa_r+0xb20>
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	9302      	str	r3, [sp, #8]
 800ab20:	2d00      	cmp	r5, #0
 800ab22:	dd05      	ble.n	800ab30 <_dtoa_r+0x9a0>
 800ab24:	4639      	mov	r1, r7
 800ab26:	462a      	mov	r2, r5
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f000 fc2f 	bl	800b38c <__lshift>
 800ab2e:	4607      	mov	r7, r0
 800ab30:	f1b8 0f00 	cmp.w	r8, #0
 800ab34:	d05b      	beq.n	800abee <_dtoa_r+0xa5e>
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f000 fa15 	bl	800af68 <_Balloc>
 800ab3e:	4605      	mov	r5, r0
 800ab40:	b928      	cbnz	r0, 800ab4e <_dtoa_r+0x9be>
 800ab42:	4b87      	ldr	r3, [pc, #540]	; (800ad60 <_dtoa_r+0xbd0>)
 800ab44:	4602      	mov	r2, r0
 800ab46:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab4a:	f7ff bb3b 	b.w	800a1c4 <_dtoa_r+0x34>
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	3202      	adds	r2, #2
 800ab52:	0092      	lsls	r2, r2, #2
 800ab54:	f107 010c 	add.w	r1, r7, #12
 800ab58:	300c      	adds	r0, #12
 800ab5a:	f7fe fc62 	bl	8009422 <memcpy>
 800ab5e:	2201      	movs	r2, #1
 800ab60:	4629      	mov	r1, r5
 800ab62:	4620      	mov	r0, r4
 800ab64:	f000 fc12 	bl	800b38c <__lshift>
 800ab68:	9b01      	ldr	r3, [sp, #4]
 800ab6a:	f103 0901 	add.w	r9, r3, #1
 800ab6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ab72:	4413      	add	r3, r2
 800ab74:	9305      	str	r3, [sp, #20]
 800ab76:	f00a 0301 	and.w	r3, sl, #1
 800ab7a:	46b8      	mov	r8, r7
 800ab7c:	9304      	str	r3, [sp, #16]
 800ab7e:	4607      	mov	r7, r0
 800ab80:	4631      	mov	r1, r6
 800ab82:	ee18 0a10 	vmov	r0, s16
 800ab86:	f7ff fa75 	bl	800a074 <quorem>
 800ab8a:	4641      	mov	r1, r8
 800ab8c:	9002      	str	r0, [sp, #8]
 800ab8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab92:	ee18 0a10 	vmov	r0, s16
 800ab96:	f000 fc69 	bl	800b46c <__mcmp>
 800ab9a:	463a      	mov	r2, r7
 800ab9c:	9003      	str	r0, [sp, #12]
 800ab9e:	4631      	mov	r1, r6
 800aba0:	4620      	mov	r0, r4
 800aba2:	f000 fc7f 	bl	800b4a4 <__mdiff>
 800aba6:	68c2      	ldr	r2, [r0, #12]
 800aba8:	f109 3bff 	add.w	fp, r9, #4294967295
 800abac:	4605      	mov	r5, r0
 800abae:	bb02      	cbnz	r2, 800abf2 <_dtoa_r+0xa62>
 800abb0:	4601      	mov	r1, r0
 800abb2:	ee18 0a10 	vmov	r0, s16
 800abb6:	f000 fc59 	bl	800b46c <__mcmp>
 800abba:	4602      	mov	r2, r0
 800abbc:	4629      	mov	r1, r5
 800abbe:	4620      	mov	r0, r4
 800abc0:	9207      	str	r2, [sp, #28]
 800abc2:	f000 fa11 	bl	800afe8 <_Bfree>
 800abc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800abca:	ea43 0102 	orr.w	r1, r3, r2
 800abce:	9b04      	ldr	r3, [sp, #16]
 800abd0:	430b      	orrs	r3, r1
 800abd2:	464d      	mov	r5, r9
 800abd4:	d10f      	bne.n	800abf6 <_dtoa_r+0xa66>
 800abd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abda:	d02a      	beq.n	800ac32 <_dtoa_r+0xaa2>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	dd02      	ble.n	800abe8 <_dtoa_r+0xa58>
 800abe2:	9b02      	ldr	r3, [sp, #8]
 800abe4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800abe8:	f88b a000 	strb.w	sl, [fp]
 800abec:	e775      	b.n	800aada <_dtoa_r+0x94a>
 800abee:	4638      	mov	r0, r7
 800abf0:	e7ba      	b.n	800ab68 <_dtoa_r+0x9d8>
 800abf2:	2201      	movs	r2, #1
 800abf4:	e7e2      	b.n	800abbc <_dtoa_r+0xa2c>
 800abf6:	9b03      	ldr	r3, [sp, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	db04      	blt.n	800ac06 <_dtoa_r+0xa76>
 800abfc:	9906      	ldr	r1, [sp, #24]
 800abfe:	430b      	orrs	r3, r1
 800ac00:	9904      	ldr	r1, [sp, #16]
 800ac02:	430b      	orrs	r3, r1
 800ac04:	d122      	bne.n	800ac4c <_dtoa_r+0xabc>
 800ac06:	2a00      	cmp	r2, #0
 800ac08:	ddee      	ble.n	800abe8 <_dtoa_r+0xa58>
 800ac0a:	ee18 1a10 	vmov	r1, s16
 800ac0e:	2201      	movs	r2, #1
 800ac10:	4620      	mov	r0, r4
 800ac12:	f000 fbbb 	bl	800b38c <__lshift>
 800ac16:	4631      	mov	r1, r6
 800ac18:	ee08 0a10 	vmov	s16, r0
 800ac1c:	f000 fc26 	bl	800b46c <__mcmp>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	dc03      	bgt.n	800ac2c <_dtoa_r+0xa9c>
 800ac24:	d1e0      	bne.n	800abe8 <_dtoa_r+0xa58>
 800ac26:	f01a 0f01 	tst.w	sl, #1
 800ac2a:	d0dd      	beq.n	800abe8 <_dtoa_r+0xa58>
 800ac2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac30:	d1d7      	bne.n	800abe2 <_dtoa_r+0xa52>
 800ac32:	2339      	movs	r3, #57	; 0x39
 800ac34:	f88b 3000 	strb.w	r3, [fp]
 800ac38:	462b      	mov	r3, r5
 800ac3a:	461d      	mov	r5, r3
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac42:	2a39      	cmp	r2, #57	; 0x39
 800ac44:	d071      	beq.n	800ad2a <_dtoa_r+0xb9a>
 800ac46:	3201      	adds	r2, #1
 800ac48:	701a      	strb	r2, [r3, #0]
 800ac4a:	e746      	b.n	800aada <_dtoa_r+0x94a>
 800ac4c:	2a00      	cmp	r2, #0
 800ac4e:	dd07      	ble.n	800ac60 <_dtoa_r+0xad0>
 800ac50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac54:	d0ed      	beq.n	800ac32 <_dtoa_r+0xaa2>
 800ac56:	f10a 0301 	add.w	r3, sl, #1
 800ac5a:	f88b 3000 	strb.w	r3, [fp]
 800ac5e:	e73c      	b.n	800aada <_dtoa_r+0x94a>
 800ac60:	9b05      	ldr	r3, [sp, #20]
 800ac62:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ac66:	4599      	cmp	r9, r3
 800ac68:	d047      	beq.n	800acfa <_dtoa_r+0xb6a>
 800ac6a:	ee18 1a10 	vmov	r1, s16
 800ac6e:	2300      	movs	r3, #0
 800ac70:	220a      	movs	r2, #10
 800ac72:	4620      	mov	r0, r4
 800ac74:	f000 f9da 	bl	800b02c <__multadd>
 800ac78:	45b8      	cmp	r8, r7
 800ac7a:	ee08 0a10 	vmov	s16, r0
 800ac7e:	f04f 0300 	mov.w	r3, #0
 800ac82:	f04f 020a 	mov.w	r2, #10
 800ac86:	4641      	mov	r1, r8
 800ac88:	4620      	mov	r0, r4
 800ac8a:	d106      	bne.n	800ac9a <_dtoa_r+0xb0a>
 800ac8c:	f000 f9ce 	bl	800b02c <__multadd>
 800ac90:	4680      	mov	r8, r0
 800ac92:	4607      	mov	r7, r0
 800ac94:	f109 0901 	add.w	r9, r9, #1
 800ac98:	e772      	b.n	800ab80 <_dtoa_r+0x9f0>
 800ac9a:	f000 f9c7 	bl	800b02c <__multadd>
 800ac9e:	4639      	mov	r1, r7
 800aca0:	4680      	mov	r8, r0
 800aca2:	2300      	movs	r3, #0
 800aca4:	220a      	movs	r2, #10
 800aca6:	4620      	mov	r0, r4
 800aca8:	f000 f9c0 	bl	800b02c <__multadd>
 800acac:	4607      	mov	r7, r0
 800acae:	e7f1      	b.n	800ac94 <_dtoa_r+0xb04>
 800acb0:	9b03      	ldr	r3, [sp, #12]
 800acb2:	9302      	str	r3, [sp, #8]
 800acb4:	9d01      	ldr	r5, [sp, #4]
 800acb6:	ee18 0a10 	vmov	r0, s16
 800acba:	4631      	mov	r1, r6
 800acbc:	f7ff f9da 	bl	800a074 <quorem>
 800acc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800acc4:	9b01      	ldr	r3, [sp, #4]
 800acc6:	f805 ab01 	strb.w	sl, [r5], #1
 800acca:	1aea      	subs	r2, r5, r3
 800accc:	9b02      	ldr	r3, [sp, #8]
 800acce:	4293      	cmp	r3, r2
 800acd0:	dd09      	ble.n	800ace6 <_dtoa_r+0xb56>
 800acd2:	ee18 1a10 	vmov	r1, s16
 800acd6:	2300      	movs	r3, #0
 800acd8:	220a      	movs	r2, #10
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 f9a6 	bl	800b02c <__multadd>
 800ace0:	ee08 0a10 	vmov	s16, r0
 800ace4:	e7e7      	b.n	800acb6 <_dtoa_r+0xb26>
 800ace6:	9b02      	ldr	r3, [sp, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bfc8      	it	gt
 800acec:	461d      	movgt	r5, r3
 800acee:	9b01      	ldr	r3, [sp, #4]
 800acf0:	bfd8      	it	le
 800acf2:	2501      	movle	r5, #1
 800acf4:	441d      	add	r5, r3
 800acf6:	f04f 0800 	mov.w	r8, #0
 800acfa:	ee18 1a10 	vmov	r1, s16
 800acfe:	2201      	movs	r2, #1
 800ad00:	4620      	mov	r0, r4
 800ad02:	f000 fb43 	bl	800b38c <__lshift>
 800ad06:	4631      	mov	r1, r6
 800ad08:	ee08 0a10 	vmov	s16, r0
 800ad0c:	f000 fbae 	bl	800b46c <__mcmp>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	dc91      	bgt.n	800ac38 <_dtoa_r+0xaa8>
 800ad14:	d102      	bne.n	800ad1c <_dtoa_r+0xb8c>
 800ad16:	f01a 0f01 	tst.w	sl, #1
 800ad1a:	d18d      	bne.n	800ac38 <_dtoa_r+0xaa8>
 800ad1c:	462b      	mov	r3, r5
 800ad1e:	461d      	mov	r5, r3
 800ad20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad24:	2a30      	cmp	r2, #48	; 0x30
 800ad26:	d0fa      	beq.n	800ad1e <_dtoa_r+0xb8e>
 800ad28:	e6d7      	b.n	800aada <_dtoa_r+0x94a>
 800ad2a:	9a01      	ldr	r2, [sp, #4]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d184      	bne.n	800ac3a <_dtoa_r+0xaaa>
 800ad30:	9b00      	ldr	r3, [sp, #0]
 800ad32:	3301      	adds	r3, #1
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	2331      	movs	r3, #49	; 0x31
 800ad38:	7013      	strb	r3, [r2, #0]
 800ad3a:	e6ce      	b.n	800aada <_dtoa_r+0x94a>
 800ad3c:	4b09      	ldr	r3, [pc, #36]	; (800ad64 <_dtoa_r+0xbd4>)
 800ad3e:	f7ff ba95 	b.w	800a26c <_dtoa_r+0xdc>
 800ad42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f47f aa6e 	bne.w	800a226 <_dtoa_r+0x96>
 800ad4a:	4b07      	ldr	r3, [pc, #28]	; (800ad68 <_dtoa_r+0xbd8>)
 800ad4c:	f7ff ba8e 	b.w	800a26c <_dtoa_r+0xdc>
 800ad50:	9b02      	ldr	r3, [sp, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	dcae      	bgt.n	800acb4 <_dtoa_r+0xb24>
 800ad56:	9b06      	ldr	r3, [sp, #24]
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	f73f aea8 	bgt.w	800aaae <_dtoa_r+0x91e>
 800ad5e:	e7a9      	b.n	800acb4 <_dtoa_r+0xb24>
 800ad60:	0800c3ec 	.word	0x0800c3ec
 800ad64:	0800c248 	.word	0x0800c248
 800ad68:	0800c36d 	.word	0x0800c36d

0800ad6c <__sflush_r>:
 800ad6c:	898a      	ldrh	r2, [r1, #12]
 800ad6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad72:	4605      	mov	r5, r0
 800ad74:	0710      	lsls	r0, r2, #28
 800ad76:	460c      	mov	r4, r1
 800ad78:	d458      	bmi.n	800ae2c <__sflush_r+0xc0>
 800ad7a:	684b      	ldr	r3, [r1, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	dc05      	bgt.n	800ad8c <__sflush_r+0x20>
 800ad80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	dc02      	bgt.n	800ad8c <__sflush_r+0x20>
 800ad86:	2000      	movs	r0, #0
 800ad88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad8e:	2e00      	cmp	r6, #0
 800ad90:	d0f9      	beq.n	800ad86 <__sflush_r+0x1a>
 800ad92:	2300      	movs	r3, #0
 800ad94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad98:	682f      	ldr	r7, [r5, #0]
 800ad9a:	602b      	str	r3, [r5, #0]
 800ad9c:	d032      	beq.n	800ae04 <__sflush_r+0x98>
 800ad9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	075a      	lsls	r2, r3, #29
 800ada4:	d505      	bpl.n	800adb2 <__sflush_r+0x46>
 800ada6:	6863      	ldr	r3, [r4, #4]
 800ada8:	1ac0      	subs	r0, r0, r3
 800adaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adac:	b10b      	cbz	r3, 800adb2 <__sflush_r+0x46>
 800adae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adb0:	1ac0      	subs	r0, r0, r3
 800adb2:	2300      	movs	r3, #0
 800adb4:	4602      	mov	r2, r0
 800adb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adb8:	6a21      	ldr	r1, [r4, #32]
 800adba:	4628      	mov	r0, r5
 800adbc:	47b0      	blx	r6
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	d106      	bne.n	800add2 <__sflush_r+0x66>
 800adc4:	6829      	ldr	r1, [r5, #0]
 800adc6:	291d      	cmp	r1, #29
 800adc8:	d82c      	bhi.n	800ae24 <__sflush_r+0xb8>
 800adca:	4a2a      	ldr	r2, [pc, #168]	; (800ae74 <__sflush_r+0x108>)
 800adcc:	40ca      	lsrs	r2, r1
 800adce:	07d6      	lsls	r6, r2, #31
 800add0:	d528      	bpl.n	800ae24 <__sflush_r+0xb8>
 800add2:	2200      	movs	r2, #0
 800add4:	6062      	str	r2, [r4, #4]
 800add6:	04d9      	lsls	r1, r3, #19
 800add8:	6922      	ldr	r2, [r4, #16]
 800adda:	6022      	str	r2, [r4, #0]
 800addc:	d504      	bpl.n	800ade8 <__sflush_r+0x7c>
 800adde:	1c42      	adds	r2, r0, #1
 800ade0:	d101      	bne.n	800ade6 <__sflush_r+0x7a>
 800ade2:	682b      	ldr	r3, [r5, #0]
 800ade4:	b903      	cbnz	r3, 800ade8 <__sflush_r+0x7c>
 800ade6:	6560      	str	r0, [r4, #84]	; 0x54
 800ade8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adea:	602f      	str	r7, [r5, #0]
 800adec:	2900      	cmp	r1, #0
 800adee:	d0ca      	beq.n	800ad86 <__sflush_r+0x1a>
 800adf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adf4:	4299      	cmp	r1, r3
 800adf6:	d002      	beq.n	800adfe <__sflush_r+0x92>
 800adf8:	4628      	mov	r0, r5
 800adfa:	f000 fc4f 	bl	800b69c <_free_r>
 800adfe:	2000      	movs	r0, #0
 800ae00:	6360      	str	r0, [r4, #52]	; 0x34
 800ae02:	e7c1      	b.n	800ad88 <__sflush_r+0x1c>
 800ae04:	6a21      	ldr	r1, [r4, #32]
 800ae06:	2301      	movs	r3, #1
 800ae08:	4628      	mov	r0, r5
 800ae0a:	47b0      	blx	r6
 800ae0c:	1c41      	adds	r1, r0, #1
 800ae0e:	d1c7      	bne.n	800ada0 <__sflush_r+0x34>
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d0c4      	beq.n	800ada0 <__sflush_r+0x34>
 800ae16:	2b1d      	cmp	r3, #29
 800ae18:	d001      	beq.n	800ae1e <__sflush_r+0xb2>
 800ae1a:	2b16      	cmp	r3, #22
 800ae1c:	d101      	bne.n	800ae22 <__sflush_r+0xb6>
 800ae1e:	602f      	str	r7, [r5, #0]
 800ae20:	e7b1      	b.n	800ad86 <__sflush_r+0x1a>
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	e7ad      	b.n	800ad88 <__sflush_r+0x1c>
 800ae2c:	690f      	ldr	r7, [r1, #16]
 800ae2e:	2f00      	cmp	r7, #0
 800ae30:	d0a9      	beq.n	800ad86 <__sflush_r+0x1a>
 800ae32:	0793      	lsls	r3, r2, #30
 800ae34:	680e      	ldr	r6, [r1, #0]
 800ae36:	bf08      	it	eq
 800ae38:	694b      	ldreq	r3, [r1, #20]
 800ae3a:	600f      	str	r7, [r1, #0]
 800ae3c:	bf18      	it	ne
 800ae3e:	2300      	movne	r3, #0
 800ae40:	eba6 0807 	sub.w	r8, r6, r7
 800ae44:	608b      	str	r3, [r1, #8]
 800ae46:	f1b8 0f00 	cmp.w	r8, #0
 800ae4a:	dd9c      	ble.n	800ad86 <__sflush_r+0x1a>
 800ae4c:	6a21      	ldr	r1, [r4, #32]
 800ae4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae50:	4643      	mov	r3, r8
 800ae52:	463a      	mov	r2, r7
 800ae54:	4628      	mov	r0, r5
 800ae56:	47b0      	blx	r6
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	dc06      	bgt.n	800ae6a <__sflush_r+0xfe>
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae62:	81a3      	strh	r3, [r4, #12]
 800ae64:	f04f 30ff 	mov.w	r0, #4294967295
 800ae68:	e78e      	b.n	800ad88 <__sflush_r+0x1c>
 800ae6a:	4407      	add	r7, r0
 800ae6c:	eba8 0800 	sub.w	r8, r8, r0
 800ae70:	e7e9      	b.n	800ae46 <__sflush_r+0xda>
 800ae72:	bf00      	nop
 800ae74:	20400001 	.word	0x20400001

0800ae78 <_fflush_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	690b      	ldr	r3, [r1, #16]
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	460c      	mov	r4, r1
 800ae80:	b913      	cbnz	r3, 800ae88 <_fflush_r+0x10>
 800ae82:	2500      	movs	r5, #0
 800ae84:	4628      	mov	r0, r5
 800ae86:	bd38      	pop	{r3, r4, r5, pc}
 800ae88:	b118      	cbz	r0, 800ae92 <_fflush_r+0x1a>
 800ae8a:	6983      	ldr	r3, [r0, #24]
 800ae8c:	b90b      	cbnz	r3, 800ae92 <_fflush_r+0x1a>
 800ae8e:	f7fe fa03 	bl	8009298 <__sinit>
 800ae92:	4b14      	ldr	r3, [pc, #80]	; (800aee4 <_fflush_r+0x6c>)
 800ae94:	429c      	cmp	r4, r3
 800ae96:	d11b      	bne.n	800aed0 <_fflush_r+0x58>
 800ae98:	686c      	ldr	r4, [r5, #4]
 800ae9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d0ef      	beq.n	800ae82 <_fflush_r+0xa>
 800aea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aea4:	07d0      	lsls	r0, r2, #31
 800aea6:	d404      	bmi.n	800aeb2 <_fflush_r+0x3a>
 800aea8:	0599      	lsls	r1, r3, #22
 800aeaa:	d402      	bmi.n	800aeb2 <_fflush_r+0x3a>
 800aeac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeae:	f7fe fab6 	bl	800941e <__retarget_lock_acquire_recursive>
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	f7ff ff59 	bl	800ad6c <__sflush_r>
 800aeba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aebc:	07da      	lsls	r2, r3, #31
 800aebe:	4605      	mov	r5, r0
 800aec0:	d4e0      	bmi.n	800ae84 <_fflush_r+0xc>
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	059b      	lsls	r3, r3, #22
 800aec6:	d4dd      	bmi.n	800ae84 <_fflush_r+0xc>
 800aec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeca:	f7fe faa9 	bl	8009420 <__retarget_lock_release_recursive>
 800aece:	e7d9      	b.n	800ae84 <_fflush_r+0xc>
 800aed0:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <_fflush_r+0x70>)
 800aed2:	429c      	cmp	r4, r3
 800aed4:	d101      	bne.n	800aeda <_fflush_r+0x62>
 800aed6:	68ac      	ldr	r4, [r5, #8]
 800aed8:	e7df      	b.n	800ae9a <_fflush_r+0x22>
 800aeda:	4b04      	ldr	r3, [pc, #16]	; (800aeec <_fflush_r+0x74>)
 800aedc:	429c      	cmp	r4, r3
 800aede:	bf08      	it	eq
 800aee0:	68ec      	ldreq	r4, [r5, #12]
 800aee2:	e7da      	b.n	800ae9a <_fflush_r+0x22>
 800aee4:	0800c1f4 	.word	0x0800c1f4
 800aee8:	0800c214 	.word	0x0800c214
 800aeec:	0800c1d4 	.word	0x0800c1d4

0800aef0 <_localeconv_r>:
 800aef0:	4800      	ldr	r0, [pc, #0]	; (800aef4 <_localeconv_r+0x4>)
 800aef2:	4770      	bx	lr
 800aef4:	20000168 	.word	0x20000168

0800aef8 <_lseek_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4d07      	ldr	r5, [pc, #28]	; (800af18 <_lseek_r+0x20>)
 800aefc:	4604      	mov	r4, r0
 800aefe:	4608      	mov	r0, r1
 800af00:	4611      	mov	r1, r2
 800af02:	2200      	movs	r2, #0
 800af04:	602a      	str	r2, [r5, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	f7f7 fd0c 	bl	8002924 <_lseek>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d102      	bne.n	800af16 <_lseek_r+0x1e>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	b103      	cbz	r3, 800af16 <_lseek_r+0x1e>
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	20004598 	.word	0x20004598

0800af1c <malloc>:
 800af1c:	4b02      	ldr	r3, [pc, #8]	; (800af28 <malloc+0xc>)
 800af1e:	4601      	mov	r1, r0
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	f7fe bab5 	b.w	8009490 <_malloc_r>
 800af26:	bf00      	nop
 800af28:	20000014 	.word	0x20000014

0800af2c <__ascii_mbtowc>:
 800af2c:	b082      	sub	sp, #8
 800af2e:	b901      	cbnz	r1, 800af32 <__ascii_mbtowc+0x6>
 800af30:	a901      	add	r1, sp, #4
 800af32:	b142      	cbz	r2, 800af46 <__ascii_mbtowc+0x1a>
 800af34:	b14b      	cbz	r3, 800af4a <__ascii_mbtowc+0x1e>
 800af36:	7813      	ldrb	r3, [r2, #0]
 800af38:	600b      	str	r3, [r1, #0]
 800af3a:	7812      	ldrb	r2, [r2, #0]
 800af3c:	1e10      	subs	r0, r2, #0
 800af3e:	bf18      	it	ne
 800af40:	2001      	movne	r0, #1
 800af42:	b002      	add	sp, #8
 800af44:	4770      	bx	lr
 800af46:	4610      	mov	r0, r2
 800af48:	e7fb      	b.n	800af42 <__ascii_mbtowc+0x16>
 800af4a:	f06f 0001 	mvn.w	r0, #1
 800af4e:	e7f8      	b.n	800af42 <__ascii_mbtowc+0x16>

0800af50 <__malloc_lock>:
 800af50:	4801      	ldr	r0, [pc, #4]	; (800af58 <__malloc_lock+0x8>)
 800af52:	f7fe ba64 	b.w	800941e <__retarget_lock_acquire_recursive>
 800af56:	bf00      	nop
 800af58:	2000458c 	.word	0x2000458c

0800af5c <__malloc_unlock>:
 800af5c:	4801      	ldr	r0, [pc, #4]	; (800af64 <__malloc_unlock+0x8>)
 800af5e:	f7fe ba5f 	b.w	8009420 <__retarget_lock_release_recursive>
 800af62:	bf00      	nop
 800af64:	2000458c 	.word	0x2000458c

0800af68 <_Balloc>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af6c:	4604      	mov	r4, r0
 800af6e:	460d      	mov	r5, r1
 800af70:	b976      	cbnz	r6, 800af90 <_Balloc+0x28>
 800af72:	2010      	movs	r0, #16
 800af74:	f7ff ffd2 	bl	800af1c <malloc>
 800af78:	4602      	mov	r2, r0
 800af7a:	6260      	str	r0, [r4, #36]	; 0x24
 800af7c:	b920      	cbnz	r0, 800af88 <_Balloc+0x20>
 800af7e:	4b18      	ldr	r3, [pc, #96]	; (800afe0 <_Balloc+0x78>)
 800af80:	4818      	ldr	r0, [pc, #96]	; (800afe4 <_Balloc+0x7c>)
 800af82:	2166      	movs	r1, #102	; 0x66
 800af84:	f000 ff6c 	bl	800be60 <__assert_func>
 800af88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af8c:	6006      	str	r6, [r0, #0]
 800af8e:	60c6      	str	r6, [r0, #12]
 800af90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af92:	68f3      	ldr	r3, [r6, #12]
 800af94:	b183      	cbz	r3, 800afb8 <_Balloc+0x50>
 800af96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af9e:	b9b8      	cbnz	r0, 800afd0 <_Balloc+0x68>
 800afa0:	2101      	movs	r1, #1
 800afa2:	fa01 f605 	lsl.w	r6, r1, r5
 800afa6:	1d72      	adds	r2, r6, #5
 800afa8:	0092      	lsls	r2, r2, #2
 800afaa:	4620      	mov	r0, r4
 800afac:	f000 fb60 	bl	800b670 <_calloc_r>
 800afb0:	b160      	cbz	r0, 800afcc <_Balloc+0x64>
 800afb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afb6:	e00e      	b.n	800afd6 <_Balloc+0x6e>
 800afb8:	2221      	movs	r2, #33	; 0x21
 800afba:	2104      	movs	r1, #4
 800afbc:	4620      	mov	r0, r4
 800afbe:	f000 fb57 	bl	800b670 <_calloc_r>
 800afc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afc4:	60f0      	str	r0, [r6, #12]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1e4      	bne.n	800af96 <_Balloc+0x2e>
 800afcc:	2000      	movs	r0, #0
 800afce:	bd70      	pop	{r4, r5, r6, pc}
 800afd0:	6802      	ldr	r2, [r0, #0]
 800afd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afd6:	2300      	movs	r3, #0
 800afd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afdc:	e7f7      	b.n	800afce <_Balloc+0x66>
 800afde:	bf00      	nop
 800afe0:	0800c37a 	.word	0x0800c37a
 800afe4:	0800c407 	.word	0x0800c407

0800afe8 <_Bfree>:
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afec:	4605      	mov	r5, r0
 800afee:	460c      	mov	r4, r1
 800aff0:	b976      	cbnz	r6, 800b010 <_Bfree+0x28>
 800aff2:	2010      	movs	r0, #16
 800aff4:	f7ff ff92 	bl	800af1c <malloc>
 800aff8:	4602      	mov	r2, r0
 800affa:	6268      	str	r0, [r5, #36]	; 0x24
 800affc:	b920      	cbnz	r0, 800b008 <_Bfree+0x20>
 800affe:	4b09      	ldr	r3, [pc, #36]	; (800b024 <_Bfree+0x3c>)
 800b000:	4809      	ldr	r0, [pc, #36]	; (800b028 <_Bfree+0x40>)
 800b002:	218a      	movs	r1, #138	; 0x8a
 800b004:	f000 ff2c 	bl	800be60 <__assert_func>
 800b008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b00c:	6006      	str	r6, [r0, #0]
 800b00e:	60c6      	str	r6, [r0, #12]
 800b010:	b13c      	cbz	r4, 800b022 <_Bfree+0x3a>
 800b012:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b014:	6862      	ldr	r2, [r4, #4]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b01c:	6021      	str	r1, [r4, #0]
 800b01e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b022:	bd70      	pop	{r4, r5, r6, pc}
 800b024:	0800c37a 	.word	0x0800c37a
 800b028:	0800c407 	.word	0x0800c407

0800b02c <__multadd>:
 800b02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b030:	690d      	ldr	r5, [r1, #16]
 800b032:	4607      	mov	r7, r0
 800b034:	460c      	mov	r4, r1
 800b036:	461e      	mov	r6, r3
 800b038:	f101 0c14 	add.w	ip, r1, #20
 800b03c:	2000      	movs	r0, #0
 800b03e:	f8dc 3000 	ldr.w	r3, [ip]
 800b042:	b299      	uxth	r1, r3
 800b044:	fb02 6101 	mla	r1, r2, r1, r6
 800b048:	0c1e      	lsrs	r6, r3, #16
 800b04a:	0c0b      	lsrs	r3, r1, #16
 800b04c:	fb02 3306 	mla	r3, r2, r6, r3
 800b050:	b289      	uxth	r1, r1
 800b052:	3001      	adds	r0, #1
 800b054:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b058:	4285      	cmp	r5, r0
 800b05a:	f84c 1b04 	str.w	r1, [ip], #4
 800b05e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b062:	dcec      	bgt.n	800b03e <__multadd+0x12>
 800b064:	b30e      	cbz	r6, 800b0aa <__multadd+0x7e>
 800b066:	68a3      	ldr	r3, [r4, #8]
 800b068:	42ab      	cmp	r3, r5
 800b06a:	dc19      	bgt.n	800b0a0 <__multadd+0x74>
 800b06c:	6861      	ldr	r1, [r4, #4]
 800b06e:	4638      	mov	r0, r7
 800b070:	3101      	adds	r1, #1
 800b072:	f7ff ff79 	bl	800af68 <_Balloc>
 800b076:	4680      	mov	r8, r0
 800b078:	b928      	cbnz	r0, 800b086 <__multadd+0x5a>
 800b07a:	4602      	mov	r2, r0
 800b07c:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <__multadd+0x84>)
 800b07e:	480d      	ldr	r0, [pc, #52]	; (800b0b4 <__multadd+0x88>)
 800b080:	21b5      	movs	r1, #181	; 0xb5
 800b082:	f000 feed 	bl	800be60 <__assert_func>
 800b086:	6922      	ldr	r2, [r4, #16]
 800b088:	3202      	adds	r2, #2
 800b08a:	f104 010c 	add.w	r1, r4, #12
 800b08e:	0092      	lsls	r2, r2, #2
 800b090:	300c      	adds	r0, #12
 800b092:	f7fe f9c6 	bl	8009422 <memcpy>
 800b096:	4621      	mov	r1, r4
 800b098:	4638      	mov	r0, r7
 800b09a:	f7ff ffa5 	bl	800afe8 <_Bfree>
 800b09e:	4644      	mov	r4, r8
 800b0a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0a4:	3501      	adds	r5, #1
 800b0a6:	615e      	str	r6, [r3, #20]
 800b0a8:	6125      	str	r5, [r4, #16]
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b0:	0800c3ec 	.word	0x0800c3ec
 800b0b4:	0800c407 	.word	0x0800c407

0800b0b8 <__hi0bits>:
 800b0b8:	0c03      	lsrs	r3, r0, #16
 800b0ba:	041b      	lsls	r3, r3, #16
 800b0bc:	b9d3      	cbnz	r3, 800b0f4 <__hi0bits+0x3c>
 800b0be:	0400      	lsls	r0, r0, #16
 800b0c0:	2310      	movs	r3, #16
 800b0c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0c6:	bf04      	itt	eq
 800b0c8:	0200      	lsleq	r0, r0, #8
 800b0ca:	3308      	addeq	r3, #8
 800b0cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0d0:	bf04      	itt	eq
 800b0d2:	0100      	lsleq	r0, r0, #4
 800b0d4:	3304      	addeq	r3, #4
 800b0d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0da:	bf04      	itt	eq
 800b0dc:	0080      	lsleq	r0, r0, #2
 800b0de:	3302      	addeq	r3, #2
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	db05      	blt.n	800b0f0 <__hi0bits+0x38>
 800b0e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0e8:	f103 0301 	add.w	r3, r3, #1
 800b0ec:	bf08      	it	eq
 800b0ee:	2320      	moveq	r3, #32
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	4770      	bx	lr
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	e7e4      	b.n	800b0c2 <__hi0bits+0xa>

0800b0f8 <__lo0bits>:
 800b0f8:	6803      	ldr	r3, [r0, #0]
 800b0fa:	f013 0207 	ands.w	r2, r3, #7
 800b0fe:	4601      	mov	r1, r0
 800b100:	d00b      	beq.n	800b11a <__lo0bits+0x22>
 800b102:	07da      	lsls	r2, r3, #31
 800b104:	d423      	bmi.n	800b14e <__lo0bits+0x56>
 800b106:	0798      	lsls	r0, r3, #30
 800b108:	bf49      	itett	mi
 800b10a:	085b      	lsrmi	r3, r3, #1
 800b10c:	089b      	lsrpl	r3, r3, #2
 800b10e:	2001      	movmi	r0, #1
 800b110:	600b      	strmi	r3, [r1, #0]
 800b112:	bf5c      	itt	pl
 800b114:	600b      	strpl	r3, [r1, #0]
 800b116:	2002      	movpl	r0, #2
 800b118:	4770      	bx	lr
 800b11a:	b298      	uxth	r0, r3
 800b11c:	b9a8      	cbnz	r0, 800b14a <__lo0bits+0x52>
 800b11e:	0c1b      	lsrs	r3, r3, #16
 800b120:	2010      	movs	r0, #16
 800b122:	b2da      	uxtb	r2, r3
 800b124:	b90a      	cbnz	r2, 800b12a <__lo0bits+0x32>
 800b126:	3008      	adds	r0, #8
 800b128:	0a1b      	lsrs	r3, r3, #8
 800b12a:	071a      	lsls	r2, r3, #28
 800b12c:	bf04      	itt	eq
 800b12e:	091b      	lsreq	r3, r3, #4
 800b130:	3004      	addeq	r0, #4
 800b132:	079a      	lsls	r2, r3, #30
 800b134:	bf04      	itt	eq
 800b136:	089b      	lsreq	r3, r3, #2
 800b138:	3002      	addeq	r0, #2
 800b13a:	07da      	lsls	r2, r3, #31
 800b13c:	d403      	bmi.n	800b146 <__lo0bits+0x4e>
 800b13e:	085b      	lsrs	r3, r3, #1
 800b140:	f100 0001 	add.w	r0, r0, #1
 800b144:	d005      	beq.n	800b152 <__lo0bits+0x5a>
 800b146:	600b      	str	r3, [r1, #0]
 800b148:	4770      	bx	lr
 800b14a:	4610      	mov	r0, r2
 800b14c:	e7e9      	b.n	800b122 <__lo0bits+0x2a>
 800b14e:	2000      	movs	r0, #0
 800b150:	4770      	bx	lr
 800b152:	2020      	movs	r0, #32
 800b154:	4770      	bx	lr
	...

0800b158 <__i2b>:
 800b158:	b510      	push	{r4, lr}
 800b15a:	460c      	mov	r4, r1
 800b15c:	2101      	movs	r1, #1
 800b15e:	f7ff ff03 	bl	800af68 <_Balloc>
 800b162:	4602      	mov	r2, r0
 800b164:	b928      	cbnz	r0, 800b172 <__i2b+0x1a>
 800b166:	4b05      	ldr	r3, [pc, #20]	; (800b17c <__i2b+0x24>)
 800b168:	4805      	ldr	r0, [pc, #20]	; (800b180 <__i2b+0x28>)
 800b16a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b16e:	f000 fe77 	bl	800be60 <__assert_func>
 800b172:	2301      	movs	r3, #1
 800b174:	6144      	str	r4, [r0, #20]
 800b176:	6103      	str	r3, [r0, #16]
 800b178:	bd10      	pop	{r4, pc}
 800b17a:	bf00      	nop
 800b17c:	0800c3ec 	.word	0x0800c3ec
 800b180:	0800c407 	.word	0x0800c407

0800b184 <__multiply>:
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b188:	4691      	mov	r9, r2
 800b18a:	690a      	ldr	r2, [r1, #16]
 800b18c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b190:	429a      	cmp	r2, r3
 800b192:	bfb8      	it	lt
 800b194:	460b      	movlt	r3, r1
 800b196:	460c      	mov	r4, r1
 800b198:	bfbc      	itt	lt
 800b19a:	464c      	movlt	r4, r9
 800b19c:	4699      	movlt	r9, r3
 800b19e:	6927      	ldr	r7, [r4, #16]
 800b1a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1a4:	68a3      	ldr	r3, [r4, #8]
 800b1a6:	6861      	ldr	r1, [r4, #4]
 800b1a8:	eb07 060a 	add.w	r6, r7, sl
 800b1ac:	42b3      	cmp	r3, r6
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	bfb8      	it	lt
 800b1b2:	3101      	addlt	r1, #1
 800b1b4:	f7ff fed8 	bl	800af68 <_Balloc>
 800b1b8:	b930      	cbnz	r0, 800b1c8 <__multiply+0x44>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	4b44      	ldr	r3, [pc, #272]	; (800b2d0 <__multiply+0x14c>)
 800b1be:	4845      	ldr	r0, [pc, #276]	; (800b2d4 <__multiply+0x150>)
 800b1c0:	f240 115d 	movw	r1, #349	; 0x15d
 800b1c4:	f000 fe4c 	bl	800be60 <__assert_func>
 800b1c8:	f100 0514 	add.w	r5, r0, #20
 800b1cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1d0:	462b      	mov	r3, r5
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	4543      	cmp	r3, r8
 800b1d6:	d321      	bcc.n	800b21c <__multiply+0x98>
 800b1d8:	f104 0314 	add.w	r3, r4, #20
 800b1dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1e0:	f109 0314 	add.w	r3, r9, #20
 800b1e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1e8:	9202      	str	r2, [sp, #8]
 800b1ea:	1b3a      	subs	r2, r7, r4
 800b1ec:	3a15      	subs	r2, #21
 800b1ee:	f022 0203 	bic.w	r2, r2, #3
 800b1f2:	3204      	adds	r2, #4
 800b1f4:	f104 0115 	add.w	r1, r4, #21
 800b1f8:	428f      	cmp	r7, r1
 800b1fa:	bf38      	it	cc
 800b1fc:	2204      	movcc	r2, #4
 800b1fe:	9201      	str	r2, [sp, #4]
 800b200:	9a02      	ldr	r2, [sp, #8]
 800b202:	9303      	str	r3, [sp, #12]
 800b204:	429a      	cmp	r2, r3
 800b206:	d80c      	bhi.n	800b222 <__multiply+0x9e>
 800b208:	2e00      	cmp	r6, #0
 800b20a:	dd03      	ble.n	800b214 <__multiply+0x90>
 800b20c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b210:	2b00      	cmp	r3, #0
 800b212:	d05a      	beq.n	800b2ca <__multiply+0x146>
 800b214:	6106      	str	r6, [r0, #16]
 800b216:	b005      	add	sp, #20
 800b218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21c:	f843 2b04 	str.w	r2, [r3], #4
 800b220:	e7d8      	b.n	800b1d4 <__multiply+0x50>
 800b222:	f8b3 a000 	ldrh.w	sl, [r3]
 800b226:	f1ba 0f00 	cmp.w	sl, #0
 800b22a:	d024      	beq.n	800b276 <__multiply+0xf2>
 800b22c:	f104 0e14 	add.w	lr, r4, #20
 800b230:	46a9      	mov	r9, r5
 800b232:	f04f 0c00 	mov.w	ip, #0
 800b236:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b23a:	f8d9 1000 	ldr.w	r1, [r9]
 800b23e:	fa1f fb82 	uxth.w	fp, r2
 800b242:	b289      	uxth	r1, r1
 800b244:	fb0a 110b 	mla	r1, sl, fp, r1
 800b248:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b24c:	f8d9 2000 	ldr.w	r2, [r9]
 800b250:	4461      	add	r1, ip
 800b252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b256:	fb0a c20b 	mla	r2, sl, fp, ip
 800b25a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b25e:	b289      	uxth	r1, r1
 800b260:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b264:	4577      	cmp	r7, lr
 800b266:	f849 1b04 	str.w	r1, [r9], #4
 800b26a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b26e:	d8e2      	bhi.n	800b236 <__multiply+0xb2>
 800b270:	9a01      	ldr	r2, [sp, #4]
 800b272:	f845 c002 	str.w	ip, [r5, r2]
 800b276:	9a03      	ldr	r2, [sp, #12]
 800b278:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b27c:	3304      	adds	r3, #4
 800b27e:	f1b9 0f00 	cmp.w	r9, #0
 800b282:	d020      	beq.n	800b2c6 <__multiply+0x142>
 800b284:	6829      	ldr	r1, [r5, #0]
 800b286:	f104 0c14 	add.w	ip, r4, #20
 800b28a:	46ae      	mov	lr, r5
 800b28c:	f04f 0a00 	mov.w	sl, #0
 800b290:	f8bc b000 	ldrh.w	fp, [ip]
 800b294:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b298:	fb09 220b 	mla	r2, r9, fp, r2
 800b29c:	4492      	add	sl, r2
 800b29e:	b289      	uxth	r1, r1
 800b2a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b2a4:	f84e 1b04 	str.w	r1, [lr], #4
 800b2a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b2ac:	f8be 1000 	ldrh.w	r1, [lr]
 800b2b0:	0c12      	lsrs	r2, r2, #16
 800b2b2:	fb09 1102 	mla	r1, r9, r2, r1
 800b2b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b2ba:	4567      	cmp	r7, ip
 800b2bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2c0:	d8e6      	bhi.n	800b290 <__multiply+0x10c>
 800b2c2:	9a01      	ldr	r2, [sp, #4]
 800b2c4:	50a9      	str	r1, [r5, r2]
 800b2c6:	3504      	adds	r5, #4
 800b2c8:	e79a      	b.n	800b200 <__multiply+0x7c>
 800b2ca:	3e01      	subs	r6, #1
 800b2cc:	e79c      	b.n	800b208 <__multiply+0x84>
 800b2ce:	bf00      	nop
 800b2d0:	0800c3ec 	.word	0x0800c3ec
 800b2d4:	0800c407 	.word	0x0800c407

0800b2d8 <__pow5mult>:
 800b2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2dc:	4615      	mov	r5, r2
 800b2de:	f012 0203 	ands.w	r2, r2, #3
 800b2e2:	4606      	mov	r6, r0
 800b2e4:	460f      	mov	r7, r1
 800b2e6:	d007      	beq.n	800b2f8 <__pow5mult+0x20>
 800b2e8:	4c25      	ldr	r4, [pc, #148]	; (800b380 <__pow5mult+0xa8>)
 800b2ea:	3a01      	subs	r2, #1
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2f2:	f7ff fe9b 	bl	800b02c <__multadd>
 800b2f6:	4607      	mov	r7, r0
 800b2f8:	10ad      	asrs	r5, r5, #2
 800b2fa:	d03d      	beq.n	800b378 <__pow5mult+0xa0>
 800b2fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2fe:	b97c      	cbnz	r4, 800b320 <__pow5mult+0x48>
 800b300:	2010      	movs	r0, #16
 800b302:	f7ff fe0b 	bl	800af1c <malloc>
 800b306:	4602      	mov	r2, r0
 800b308:	6270      	str	r0, [r6, #36]	; 0x24
 800b30a:	b928      	cbnz	r0, 800b318 <__pow5mult+0x40>
 800b30c:	4b1d      	ldr	r3, [pc, #116]	; (800b384 <__pow5mult+0xac>)
 800b30e:	481e      	ldr	r0, [pc, #120]	; (800b388 <__pow5mult+0xb0>)
 800b310:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b314:	f000 fda4 	bl	800be60 <__assert_func>
 800b318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b31c:	6004      	str	r4, [r0, #0]
 800b31e:	60c4      	str	r4, [r0, #12]
 800b320:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b328:	b94c      	cbnz	r4, 800b33e <__pow5mult+0x66>
 800b32a:	f240 2171 	movw	r1, #625	; 0x271
 800b32e:	4630      	mov	r0, r6
 800b330:	f7ff ff12 	bl	800b158 <__i2b>
 800b334:	2300      	movs	r3, #0
 800b336:	f8c8 0008 	str.w	r0, [r8, #8]
 800b33a:	4604      	mov	r4, r0
 800b33c:	6003      	str	r3, [r0, #0]
 800b33e:	f04f 0900 	mov.w	r9, #0
 800b342:	07eb      	lsls	r3, r5, #31
 800b344:	d50a      	bpl.n	800b35c <__pow5mult+0x84>
 800b346:	4639      	mov	r1, r7
 800b348:	4622      	mov	r2, r4
 800b34a:	4630      	mov	r0, r6
 800b34c:	f7ff ff1a 	bl	800b184 <__multiply>
 800b350:	4639      	mov	r1, r7
 800b352:	4680      	mov	r8, r0
 800b354:	4630      	mov	r0, r6
 800b356:	f7ff fe47 	bl	800afe8 <_Bfree>
 800b35a:	4647      	mov	r7, r8
 800b35c:	106d      	asrs	r5, r5, #1
 800b35e:	d00b      	beq.n	800b378 <__pow5mult+0xa0>
 800b360:	6820      	ldr	r0, [r4, #0]
 800b362:	b938      	cbnz	r0, 800b374 <__pow5mult+0x9c>
 800b364:	4622      	mov	r2, r4
 800b366:	4621      	mov	r1, r4
 800b368:	4630      	mov	r0, r6
 800b36a:	f7ff ff0b 	bl	800b184 <__multiply>
 800b36e:	6020      	str	r0, [r4, #0]
 800b370:	f8c0 9000 	str.w	r9, [r0]
 800b374:	4604      	mov	r4, r0
 800b376:	e7e4      	b.n	800b342 <__pow5mult+0x6a>
 800b378:	4638      	mov	r0, r7
 800b37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b37e:	bf00      	nop
 800b380:	0800c558 	.word	0x0800c558
 800b384:	0800c37a 	.word	0x0800c37a
 800b388:	0800c407 	.word	0x0800c407

0800b38c <__lshift>:
 800b38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b390:	460c      	mov	r4, r1
 800b392:	6849      	ldr	r1, [r1, #4]
 800b394:	6923      	ldr	r3, [r4, #16]
 800b396:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b39a:	68a3      	ldr	r3, [r4, #8]
 800b39c:	4607      	mov	r7, r0
 800b39e:	4691      	mov	r9, r2
 800b3a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3a4:	f108 0601 	add.w	r6, r8, #1
 800b3a8:	42b3      	cmp	r3, r6
 800b3aa:	db0b      	blt.n	800b3c4 <__lshift+0x38>
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	f7ff fddb 	bl	800af68 <_Balloc>
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	b948      	cbnz	r0, 800b3ca <__lshift+0x3e>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	4b2a      	ldr	r3, [pc, #168]	; (800b464 <__lshift+0xd8>)
 800b3ba:	482b      	ldr	r0, [pc, #172]	; (800b468 <__lshift+0xdc>)
 800b3bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3c0:	f000 fd4e 	bl	800be60 <__assert_func>
 800b3c4:	3101      	adds	r1, #1
 800b3c6:	005b      	lsls	r3, r3, #1
 800b3c8:	e7ee      	b.n	800b3a8 <__lshift+0x1c>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f100 0114 	add.w	r1, r0, #20
 800b3d0:	f100 0210 	add.w	r2, r0, #16
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	4553      	cmp	r3, sl
 800b3d8:	db37      	blt.n	800b44a <__lshift+0xbe>
 800b3da:	6920      	ldr	r0, [r4, #16]
 800b3dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3e0:	f104 0314 	add.w	r3, r4, #20
 800b3e4:	f019 091f 	ands.w	r9, r9, #31
 800b3e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b3f0:	d02f      	beq.n	800b452 <__lshift+0xc6>
 800b3f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b3f6:	468a      	mov	sl, r1
 800b3f8:	f04f 0c00 	mov.w	ip, #0
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	fa02 f209 	lsl.w	r2, r2, r9
 800b402:	ea42 020c 	orr.w	r2, r2, ip
 800b406:	f84a 2b04 	str.w	r2, [sl], #4
 800b40a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b40e:	4298      	cmp	r0, r3
 800b410:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b414:	d8f2      	bhi.n	800b3fc <__lshift+0x70>
 800b416:	1b03      	subs	r3, r0, r4
 800b418:	3b15      	subs	r3, #21
 800b41a:	f023 0303 	bic.w	r3, r3, #3
 800b41e:	3304      	adds	r3, #4
 800b420:	f104 0215 	add.w	r2, r4, #21
 800b424:	4290      	cmp	r0, r2
 800b426:	bf38      	it	cc
 800b428:	2304      	movcc	r3, #4
 800b42a:	f841 c003 	str.w	ip, [r1, r3]
 800b42e:	f1bc 0f00 	cmp.w	ip, #0
 800b432:	d001      	beq.n	800b438 <__lshift+0xac>
 800b434:	f108 0602 	add.w	r6, r8, #2
 800b438:	3e01      	subs	r6, #1
 800b43a:	4638      	mov	r0, r7
 800b43c:	612e      	str	r6, [r5, #16]
 800b43e:	4621      	mov	r1, r4
 800b440:	f7ff fdd2 	bl	800afe8 <_Bfree>
 800b444:	4628      	mov	r0, r5
 800b446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b44a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b44e:	3301      	adds	r3, #1
 800b450:	e7c1      	b.n	800b3d6 <__lshift+0x4a>
 800b452:	3904      	subs	r1, #4
 800b454:	f853 2b04 	ldr.w	r2, [r3], #4
 800b458:	f841 2f04 	str.w	r2, [r1, #4]!
 800b45c:	4298      	cmp	r0, r3
 800b45e:	d8f9      	bhi.n	800b454 <__lshift+0xc8>
 800b460:	e7ea      	b.n	800b438 <__lshift+0xac>
 800b462:	bf00      	nop
 800b464:	0800c3ec 	.word	0x0800c3ec
 800b468:	0800c407 	.word	0x0800c407

0800b46c <__mcmp>:
 800b46c:	b530      	push	{r4, r5, lr}
 800b46e:	6902      	ldr	r2, [r0, #16]
 800b470:	690c      	ldr	r4, [r1, #16]
 800b472:	1b12      	subs	r2, r2, r4
 800b474:	d10e      	bne.n	800b494 <__mcmp+0x28>
 800b476:	f100 0314 	add.w	r3, r0, #20
 800b47a:	3114      	adds	r1, #20
 800b47c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b480:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b484:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b488:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b48c:	42a5      	cmp	r5, r4
 800b48e:	d003      	beq.n	800b498 <__mcmp+0x2c>
 800b490:	d305      	bcc.n	800b49e <__mcmp+0x32>
 800b492:	2201      	movs	r2, #1
 800b494:	4610      	mov	r0, r2
 800b496:	bd30      	pop	{r4, r5, pc}
 800b498:	4283      	cmp	r3, r0
 800b49a:	d3f3      	bcc.n	800b484 <__mcmp+0x18>
 800b49c:	e7fa      	b.n	800b494 <__mcmp+0x28>
 800b49e:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a2:	e7f7      	b.n	800b494 <__mcmp+0x28>

0800b4a4 <__mdiff>:
 800b4a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a8:	460c      	mov	r4, r1
 800b4aa:	4606      	mov	r6, r0
 800b4ac:	4611      	mov	r1, r2
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	4690      	mov	r8, r2
 800b4b2:	f7ff ffdb 	bl	800b46c <__mcmp>
 800b4b6:	1e05      	subs	r5, r0, #0
 800b4b8:	d110      	bne.n	800b4dc <__mdiff+0x38>
 800b4ba:	4629      	mov	r1, r5
 800b4bc:	4630      	mov	r0, r6
 800b4be:	f7ff fd53 	bl	800af68 <_Balloc>
 800b4c2:	b930      	cbnz	r0, 800b4d2 <__mdiff+0x2e>
 800b4c4:	4b3a      	ldr	r3, [pc, #232]	; (800b5b0 <__mdiff+0x10c>)
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	f240 2132 	movw	r1, #562	; 0x232
 800b4cc:	4839      	ldr	r0, [pc, #228]	; (800b5b4 <__mdiff+0x110>)
 800b4ce:	f000 fcc7 	bl	800be60 <__assert_func>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4dc:	bfa4      	itt	ge
 800b4de:	4643      	movge	r3, r8
 800b4e0:	46a0      	movge	r8, r4
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4e8:	bfa6      	itte	ge
 800b4ea:	461c      	movge	r4, r3
 800b4ec:	2500      	movge	r5, #0
 800b4ee:	2501      	movlt	r5, #1
 800b4f0:	f7ff fd3a 	bl	800af68 <_Balloc>
 800b4f4:	b920      	cbnz	r0, 800b500 <__mdiff+0x5c>
 800b4f6:	4b2e      	ldr	r3, [pc, #184]	; (800b5b0 <__mdiff+0x10c>)
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4fe:	e7e5      	b.n	800b4cc <__mdiff+0x28>
 800b500:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b504:	6926      	ldr	r6, [r4, #16]
 800b506:	60c5      	str	r5, [r0, #12]
 800b508:	f104 0914 	add.w	r9, r4, #20
 800b50c:	f108 0514 	add.w	r5, r8, #20
 800b510:	f100 0e14 	add.w	lr, r0, #20
 800b514:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b518:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b51c:	f108 0210 	add.w	r2, r8, #16
 800b520:	46f2      	mov	sl, lr
 800b522:	2100      	movs	r1, #0
 800b524:	f859 3b04 	ldr.w	r3, [r9], #4
 800b528:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b52c:	fa1f f883 	uxth.w	r8, r3
 800b530:	fa11 f18b 	uxtah	r1, r1, fp
 800b534:	0c1b      	lsrs	r3, r3, #16
 800b536:	eba1 0808 	sub.w	r8, r1, r8
 800b53a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b53e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b542:	fa1f f888 	uxth.w	r8, r8
 800b546:	1419      	asrs	r1, r3, #16
 800b548:	454e      	cmp	r6, r9
 800b54a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b54e:	f84a 3b04 	str.w	r3, [sl], #4
 800b552:	d8e7      	bhi.n	800b524 <__mdiff+0x80>
 800b554:	1b33      	subs	r3, r6, r4
 800b556:	3b15      	subs	r3, #21
 800b558:	f023 0303 	bic.w	r3, r3, #3
 800b55c:	3304      	adds	r3, #4
 800b55e:	3415      	adds	r4, #21
 800b560:	42a6      	cmp	r6, r4
 800b562:	bf38      	it	cc
 800b564:	2304      	movcc	r3, #4
 800b566:	441d      	add	r5, r3
 800b568:	4473      	add	r3, lr
 800b56a:	469e      	mov	lr, r3
 800b56c:	462e      	mov	r6, r5
 800b56e:	4566      	cmp	r6, ip
 800b570:	d30e      	bcc.n	800b590 <__mdiff+0xec>
 800b572:	f10c 0203 	add.w	r2, ip, #3
 800b576:	1b52      	subs	r2, r2, r5
 800b578:	f022 0203 	bic.w	r2, r2, #3
 800b57c:	3d03      	subs	r5, #3
 800b57e:	45ac      	cmp	ip, r5
 800b580:	bf38      	it	cc
 800b582:	2200      	movcc	r2, #0
 800b584:	441a      	add	r2, r3
 800b586:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b58a:	b17b      	cbz	r3, 800b5ac <__mdiff+0x108>
 800b58c:	6107      	str	r7, [r0, #16]
 800b58e:	e7a3      	b.n	800b4d8 <__mdiff+0x34>
 800b590:	f856 8b04 	ldr.w	r8, [r6], #4
 800b594:	fa11 f288 	uxtah	r2, r1, r8
 800b598:	1414      	asrs	r4, r2, #16
 800b59a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b59e:	b292      	uxth	r2, r2
 800b5a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b5a4:	f84e 2b04 	str.w	r2, [lr], #4
 800b5a8:	1421      	asrs	r1, r4, #16
 800b5aa:	e7e0      	b.n	800b56e <__mdiff+0xca>
 800b5ac:	3f01      	subs	r7, #1
 800b5ae:	e7ea      	b.n	800b586 <__mdiff+0xe2>
 800b5b0:	0800c3ec 	.word	0x0800c3ec
 800b5b4:	0800c407 	.word	0x0800c407

0800b5b8 <__d2b>:
 800b5b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5bc:	4689      	mov	r9, r1
 800b5be:	2101      	movs	r1, #1
 800b5c0:	ec57 6b10 	vmov	r6, r7, d0
 800b5c4:	4690      	mov	r8, r2
 800b5c6:	f7ff fccf 	bl	800af68 <_Balloc>
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	b930      	cbnz	r0, 800b5dc <__d2b+0x24>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	4b25      	ldr	r3, [pc, #148]	; (800b668 <__d2b+0xb0>)
 800b5d2:	4826      	ldr	r0, [pc, #152]	; (800b66c <__d2b+0xb4>)
 800b5d4:	f240 310a 	movw	r1, #778	; 0x30a
 800b5d8:	f000 fc42 	bl	800be60 <__assert_func>
 800b5dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b5e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5e4:	bb35      	cbnz	r5, 800b634 <__d2b+0x7c>
 800b5e6:	2e00      	cmp	r6, #0
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	d028      	beq.n	800b63e <__d2b+0x86>
 800b5ec:	4668      	mov	r0, sp
 800b5ee:	9600      	str	r6, [sp, #0]
 800b5f0:	f7ff fd82 	bl	800b0f8 <__lo0bits>
 800b5f4:	9900      	ldr	r1, [sp, #0]
 800b5f6:	b300      	cbz	r0, 800b63a <__d2b+0x82>
 800b5f8:	9a01      	ldr	r2, [sp, #4]
 800b5fa:	f1c0 0320 	rsb	r3, r0, #32
 800b5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b602:	430b      	orrs	r3, r1
 800b604:	40c2      	lsrs	r2, r0
 800b606:	6163      	str	r3, [r4, #20]
 800b608:	9201      	str	r2, [sp, #4]
 800b60a:	9b01      	ldr	r3, [sp, #4]
 800b60c:	61a3      	str	r3, [r4, #24]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	bf14      	ite	ne
 800b612:	2202      	movne	r2, #2
 800b614:	2201      	moveq	r2, #1
 800b616:	6122      	str	r2, [r4, #16]
 800b618:	b1d5      	cbz	r5, 800b650 <__d2b+0x98>
 800b61a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b61e:	4405      	add	r5, r0
 800b620:	f8c9 5000 	str.w	r5, [r9]
 800b624:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b628:	f8c8 0000 	str.w	r0, [r8]
 800b62c:	4620      	mov	r0, r4
 800b62e:	b003      	add	sp, #12
 800b630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b638:	e7d5      	b.n	800b5e6 <__d2b+0x2e>
 800b63a:	6161      	str	r1, [r4, #20]
 800b63c:	e7e5      	b.n	800b60a <__d2b+0x52>
 800b63e:	a801      	add	r0, sp, #4
 800b640:	f7ff fd5a 	bl	800b0f8 <__lo0bits>
 800b644:	9b01      	ldr	r3, [sp, #4]
 800b646:	6163      	str	r3, [r4, #20]
 800b648:	2201      	movs	r2, #1
 800b64a:	6122      	str	r2, [r4, #16]
 800b64c:	3020      	adds	r0, #32
 800b64e:	e7e3      	b.n	800b618 <__d2b+0x60>
 800b650:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b654:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b658:	f8c9 0000 	str.w	r0, [r9]
 800b65c:	6918      	ldr	r0, [r3, #16]
 800b65e:	f7ff fd2b 	bl	800b0b8 <__hi0bits>
 800b662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b666:	e7df      	b.n	800b628 <__d2b+0x70>
 800b668:	0800c3ec 	.word	0x0800c3ec
 800b66c:	0800c407 	.word	0x0800c407

0800b670 <_calloc_r>:
 800b670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b672:	fba1 2402 	umull	r2, r4, r1, r2
 800b676:	b94c      	cbnz	r4, 800b68c <_calloc_r+0x1c>
 800b678:	4611      	mov	r1, r2
 800b67a:	9201      	str	r2, [sp, #4]
 800b67c:	f7fd ff08 	bl	8009490 <_malloc_r>
 800b680:	9a01      	ldr	r2, [sp, #4]
 800b682:	4605      	mov	r5, r0
 800b684:	b930      	cbnz	r0, 800b694 <_calloc_r+0x24>
 800b686:	4628      	mov	r0, r5
 800b688:	b003      	add	sp, #12
 800b68a:	bd30      	pop	{r4, r5, pc}
 800b68c:	220c      	movs	r2, #12
 800b68e:	6002      	str	r2, [r0, #0]
 800b690:	2500      	movs	r5, #0
 800b692:	e7f8      	b.n	800b686 <_calloc_r+0x16>
 800b694:	4621      	mov	r1, r4
 800b696:	f7fd fed2 	bl	800943e <memset>
 800b69a:	e7f4      	b.n	800b686 <_calloc_r+0x16>

0800b69c <_free_r>:
 800b69c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b69e:	2900      	cmp	r1, #0
 800b6a0:	d044      	beq.n	800b72c <_free_r+0x90>
 800b6a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6a6:	9001      	str	r0, [sp, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f1a1 0404 	sub.w	r4, r1, #4
 800b6ae:	bfb8      	it	lt
 800b6b0:	18e4      	addlt	r4, r4, r3
 800b6b2:	f7ff fc4d 	bl	800af50 <__malloc_lock>
 800b6b6:	4a1e      	ldr	r2, [pc, #120]	; (800b730 <_free_r+0x94>)
 800b6b8:	9801      	ldr	r0, [sp, #4]
 800b6ba:	6813      	ldr	r3, [r2, #0]
 800b6bc:	b933      	cbnz	r3, 800b6cc <_free_r+0x30>
 800b6be:	6063      	str	r3, [r4, #4]
 800b6c0:	6014      	str	r4, [r2, #0]
 800b6c2:	b003      	add	sp, #12
 800b6c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6c8:	f7ff bc48 	b.w	800af5c <__malloc_unlock>
 800b6cc:	42a3      	cmp	r3, r4
 800b6ce:	d908      	bls.n	800b6e2 <_free_r+0x46>
 800b6d0:	6825      	ldr	r5, [r4, #0]
 800b6d2:	1961      	adds	r1, r4, r5
 800b6d4:	428b      	cmp	r3, r1
 800b6d6:	bf01      	itttt	eq
 800b6d8:	6819      	ldreq	r1, [r3, #0]
 800b6da:	685b      	ldreq	r3, [r3, #4]
 800b6dc:	1949      	addeq	r1, r1, r5
 800b6de:	6021      	streq	r1, [r4, #0]
 800b6e0:	e7ed      	b.n	800b6be <_free_r+0x22>
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	b10b      	cbz	r3, 800b6ec <_free_r+0x50>
 800b6e8:	42a3      	cmp	r3, r4
 800b6ea:	d9fa      	bls.n	800b6e2 <_free_r+0x46>
 800b6ec:	6811      	ldr	r1, [r2, #0]
 800b6ee:	1855      	adds	r5, r2, r1
 800b6f0:	42a5      	cmp	r5, r4
 800b6f2:	d10b      	bne.n	800b70c <_free_r+0x70>
 800b6f4:	6824      	ldr	r4, [r4, #0]
 800b6f6:	4421      	add	r1, r4
 800b6f8:	1854      	adds	r4, r2, r1
 800b6fa:	42a3      	cmp	r3, r4
 800b6fc:	6011      	str	r1, [r2, #0]
 800b6fe:	d1e0      	bne.n	800b6c2 <_free_r+0x26>
 800b700:	681c      	ldr	r4, [r3, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	6053      	str	r3, [r2, #4]
 800b706:	4421      	add	r1, r4
 800b708:	6011      	str	r1, [r2, #0]
 800b70a:	e7da      	b.n	800b6c2 <_free_r+0x26>
 800b70c:	d902      	bls.n	800b714 <_free_r+0x78>
 800b70e:	230c      	movs	r3, #12
 800b710:	6003      	str	r3, [r0, #0]
 800b712:	e7d6      	b.n	800b6c2 <_free_r+0x26>
 800b714:	6825      	ldr	r5, [r4, #0]
 800b716:	1961      	adds	r1, r4, r5
 800b718:	428b      	cmp	r3, r1
 800b71a:	bf04      	itt	eq
 800b71c:	6819      	ldreq	r1, [r3, #0]
 800b71e:	685b      	ldreq	r3, [r3, #4]
 800b720:	6063      	str	r3, [r4, #4]
 800b722:	bf04      	itt	eq
 800b724:	1949      	addeq	r1, r1, r5
 800b726:	6021      	streq	r1, [r4, #0]
 800b728:	6054      	str	r4, [r2, #4]
 800b72a:	e7ca      	b.n	800b6c2 <_free_r+0x26>
 800b72c:	b003      	add	sp, #12
 800b72e:	bd30      	pop	{r4, r5, pc}
 800b730:	20004590 	.word	0x20004590

0800b734 <__ssputs_r>:
 800b734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b738:	688e      	ldr	r6, [r1, #8]
 800b73a:	429e      	cmp	r6, r3
 800b73c:	4682      	mov	sl, r0
 800b73e:	460c      	mov	r4, r1
 800b740:	4690      	mov	r8, r2
 800b742:	461f      	mov	r7, r3
 800b744:	d838      	bhi.n	800b7b8 <__ssputs_r+0x84>
 800b746:	898a      	ldrh	r2, [r1, #12]
 800b748:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b74c:	d032      	beq.n	800b7b4 <__ssputs_r+0x80>
 800b74e:	6825      	ldr	r5, [r4, #0]
 800b750:	6909      	ldr	r1, [r1, #16]
 800b752:	eba5 0901 	sub.w	r9, r5, r1
 800b756:	6965      	ldr	r5, [r4, #20]
 800b758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b75c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b760:	3301      	adds	r3, #1
 800b762:	444b      	add	r3, r9
 800b764:	106d      	asrs	r5, r5, #1
 800b766:	429d      	cmp	r5, r3
 800b768:	bf38      	it	cc
 800b76a:	461d      	movcc	r5, r3
 800b76c:	0553      	lsls	r3, r2, #21
 800b76e:	d531      	bpl.n	800b7d4 <__ssputs_r+0xa0>
 800b770:	4629      	mov	r1, r5
 800b772:	f7fd fe8d 	bl	8009490 <_malloc_r>
 800b776:	4606      	mov	r6, r0
 800b778:	b950      	cbnz	r0, 800b790 <__ssputs_r+0x5c>
 800b77a:	230c      	movs	r3, #12
 800b77c:	f8ca 3000 	str.w	r3, [sl]
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b786:	81a3      	strh	r3, [r4, #12]
 800b788:	f04f 30ff 	mov.w	r0, #4294967295
 800b78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b790:	6921      	ldr	r1, [r4, #16]
 800b792:	464a      	mov	r2, r9
 800b794:	f7fd fe45 	bl	8009422 <memcpy>
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7a2:	81a3      	strh	r3, [r4, #12]
 800b7a4:	6126      	str	r6, [r4, #16]
 800b7a6:	6165      	str	r5, [r4, #20]
 800b7a8:	444e      	add	r6, r9
 800b7aa:	eba5 0509 	sub.w	r5, r5, r9
 800b7ae:	6026      	str	r6, [r4, #0]
 800b7b0:	60a5      	str	r5, [r4, #8]
 800b7b2:	463e      	mov	r6, r7
 800b7b4:	42be      	cmp	r6, r7
 800b7b6:	d900      	bls.n	800b7ba <__ssputs_r+0x86>
 800b7b8:	463e      	mov	r6, r7
 800b7ba:	6820      	ldr	r0, [r4, #0]
 800b7bc:	4632      	mov	r2, r6
 800b7be:	4641      	mov	r1, r8
 800b7c0:	f000 fbe4 	bl	800bf8c <memmove>
 800b7c4:	68a3      	ldr	r3, [r4, #8]
 800b7c6:	1b9b      	subs	r3, r3, r6
 800b7c8:	60a3      	str	r3, [r4, #8]
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	4433      	add	r3, r6
 800b7ce:	6023      	str	r3, [r4, #0]
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	e7db      	b.n	800b78c <__ssputs_r+0x58>
 800b7d4:	462a      	mov	r2, r5
 800b7d6:	f000 fbf3 	bl	800bfc0 <_realloc_r>
 800b7da:	4606      	mov	r6, r0
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d1e1      	bne.n	800b7a4 <__ssputs_r+0x70>
 800b7e0:	6921      	ldr	r1, [r4, #16]
 800b7e2:	4650      	mov	r0, sl
 800b7e4:	f7ff ff5a 	bl	800b69c <_free_r>
 800b7e8:	e7c7      	b.n	800b77a <__ssputs_r+0x46>
	...

0800b7ec <_svfiprintf_r>:
 800b7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	4698      	mov	r8, r3
 800b7f2:	898b      	ldrh	r3, [r1, #12]
 800b7f4:	061b      	lsls	r3, r3, #24
 800b7f6:	b09d      	sub	sp, #116	; 0x74
 800b7f8:	4607      	mov	r7, r0
 800b7fa:	460d      	mov	r5, r1
 800b7fc:	4614      	mov	r4, r2
 800b7fe:	d50e      	bpl.n	800b81e <_svfiprintf_r+0x32>
 800b800:	690b      	ldr	r3, [r1, #16]
 800b802:	b963      	cbnz	r3, 800b81e <_svfiprintf_r+0x32>
 800b804:	2140      	movs	r1, #64	; 0x40
 800b806:	f7fd fe43 	bl	8009490 <_malloc_r>
 800b80a:	6028      	str	r0, [r5, #0]
 800b80c:	6128      	str	r0, [r5, #16]
 800b80e:	b920      	cbnz	r0, 800b81a <_svfiprintf_r+0x2e>
 800b810:	230c      	movs	r3, #12
 800b812:	603b      	str	r3, [r7, #0]
 800b814:	f04f 30ff 	mov.w	r0, #4294967295
 800b818:	e0d1      	b.n	800b9be <_svfiprintf_r+0x1d2>
 800b81a:	2340      	movs	r3, #64	; 0x40
 800b81c:	616b      	str	r3, [r5, #20]
 800b81e:	2300      	movs	r3, #0
 800b820:	9309      	str	r3, [sp, #36]	; 0x24
 800b822:	2320      	movs	r3, #32
 800b824:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b828:	f8cd 800c 	str.w	r8, [sp, #12]
 800b82c:	2330      	movs	r3, #48	; 0x30
 800b82e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9d8 <_svfiprintf_r+0x1ec>
 800b832:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b836:	f04f 0901 	mov.w	r9, #1
 800b83a:	4623      	mov	r3, r4
 800b83c:	469a      	mov	sl, r3
 800b83e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b842:	b10a      	cbz	r2, 800b848 <_svfiprintf_r+0x5c>
 800b844:	2a25      	cmp	r2, #37	; 0x25
 800b846:	d1f9      	bne.n	800b83c <_svfiprintf_r+0x50>
 800b848:	ebba 0b04 	subs.w	fp, sl, r4
 800b84c:	d00b      	beq.n	800b866 <_svfiprintf_r+0x7a>
 800b84e:	465b      	mov	r3, fp
 800b850:	4622      	mov	r2, r4
 800b852:	4629      	mov	r1, r5
 800b854:	4638      	mov	r0, r7
 800b856:	f7ff ff6d 	bl	800b734 <__ssputs_r>
 800b85a:	3001      	adds	r0, #1
 800b85c:	f000 80aa 	beq.w	800b9b4 <_svfiprintf_r+0x1c8>
 800b860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b862:	445a      	add	r2, fp
 800b864:	9209      	str	r2, [sp, #36]	; 0x24
 800b866:	f89a 3000 	ldrb.w	r3, [sl]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f000 80a2 	beq.w	800b9b4 <_svfiprintf_r+0x1c8>
 800b870:	2300      	movs	r3, #0
 800b872:	f04f 32ff 	mov.w	r2, #4294967295
 800b876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b87a:	f10a 0a01 	add.w	sl, sl, #1
 800b87e:	9304      	str	r3, [sp, #16]
 800b880:	9307      	str	r3, [sp, #28]
 800b882:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b886:	931a      	str	r3, [sp, #104]	; 0x68
 800b888:	4654      	mov	r4, sl
 800b88a:	2205      	movs	r2, #5
 800b88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b890:	4851      	ldr	r0, [pc, #324]	; (800b9d8 <_svfiprintf_r+0x1ec>)
 800b892:	f7f4 fcc5 	bl	8000220 <memchr>
 800b896:	9a04      	ldr	r2, [sp, #16]
 800b898:	b9d8      	cbnz	r0, 800b8d2 <_svfiprintf_r+0xe6>
 800b89a:	06d0      	lsls	r0, r2, #27
 800b89c:	bf44      	itt	mi
 800b89e:	2320      	movmi	r3, #32
 800b8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8a4:	0711      	lsls	r1, r2, #28
 800b8a6:	bf44      	itt	mi
 800b8a8:	232b      	movmi	r3, #43	; 0x2b
 800b8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b8b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8b4:	d015      	beq.n	800b8e2 <_svfiprintf_r+0xf6>
 800b8b6:	9a07      	ldr	r2, [sp, #28]
 800b8b8:	4654      	mov	r4, sl
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	f04f 0c0a 	mov.w	ip, #10
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8c6:	3b30      	subs	r3, #48	; 0x30
 800b8c8:	2b09      	cmp	r3, #9
 800b8ca:	d94e      	bls.n	800b96a <_svfiprintf_r+0x17e>
 800b8cc:	b1b0      	cbz	r0, 800b8fc <_svfiprintf_r+0x110>
 800b8ce:	9207      	str	r2, [sp, #28]
 800b8d0:	e014      	b.n	800b8fc <_svfiprintf_r+0x110>
 800b8d2:	eba0 0308 	sub.w	r3, r0, r8
 800b8d6:	fa09 f303 	lsl.w	r3, r9, r3
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	9304      	str	r3, [sp, #16]
 800b8de:	46a2      	mov	sl, r4
 800b8e0:	e7d2      	b.n	800b888 <_svfiprintf_r+0x9c>
 800b8e2:	9b03      	ldr	r3, [sp, #12]
 800b8e4:	1d19      	adds	r1, r3, #4
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	9103      	str	r1, [sp, #12]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	bfbb      	ittet	lt
 800b8ee:	425b      	neglt	r3, r3
 800b8f0:	f042 0202 	orrlt.w	r2, r2, #2
 800b8f4:	9307      	strge	r3, [sp, #28]
 800b8f6:	9307      	strlt	r3, [sp, #28]
 800b8f8:	bfb8      	it	lt
 800b8fa:	9204      	strlt	r2, [sp, #16]
 800b8fc:	7823      	ldrb	r3, [r4, #0]
 800b8fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b900:	d10c      	bne.n	800b91c <_svfiprintf_r+0x130>
 800b902:	7863      	ldrb	r3, [r4, #1]
 800b904:	2b2a      	cmp	r3, #42	; 0x2a
 800b906:	d135      	bne.n	800b974 <_svfiprintf_r+0x188>
 800b908:	9b03      	ldr	r3, [sp, #12]
 800b90a:	1d1a      	adds	r2, r3, #4
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	9203      	str	r2, [sp, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	bfb8      	it	lt
 800b914:	f04f 33ff 	movlt.w	r3, #4294967295
 800b918:	3402      	adds	r4, #2
 800b91a:	9305      	str	r3, [sp, #20]
 800b91c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9e8 <_svfiprintf_r+0x1fc>
 800b920:	7821      	ldrb	r1, [r4, #0]
 800b922:	2203      	movs	r2, #3
 800b924:	4650      	mov	r0, sl
 800b926:	f7f4 fc7b 	bl	8000220 <memchr>
 800b92a:	b140      	cbz	r0, 800b93e <_svfiprintf_r+0x152>
 800b92c:	2340      	movs	r3, #64	; 0x40
 800b92e:	eba0 000a 	sub.w	r0, r0, sl
 800b932:	fa03 f000 	lsl.w	r0, r3, r0
 800b936:	9b04      	ldr	r3, [sp, #16]
 800b938:	4303      	orrs	r3, r0
 800b93a:	3401      	adds	r4, #1
 800b93c:	9304      	str	r3, [sp, #16]
 800b93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b942:	4826      	ldr	r0, [pc, #152]	; (800b9dc <_svfiprintf_r+0x1f0>)
 800b944:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b948:	2206      	movs	r2, #6
 800b94a:	f7f4 fc69 	bl	8000220 <memchr>
 800b94e:	2800      	cmp	r0, #0
 800b950:	d038      	beq.n	800b9c4 <_svfiprintf_r+0x1d8>
 800b952:	4b23      	ldr	r3, [pc, #140]	; (800b9e0 <_svfiprintf_r+0x1f4>)
 800b954:	bb1b      	cbnz	r3, 800b99e <_svfiprintf_r+0x1b2>
 800b956:	9b03      	ldr	r3, [sp, #12]
 800b958:	3307      	adds	r3, #7
 800b95a:	f023 0307 	bic.w	r3, r3, #7
 800b95e:	3308      	adds	r3, #8
 800b960:	9303      	str	r3, [sp, #12]
 800b962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b964:	4433      	add	r3, r6
 800b966:	9309      	str	r3, [sp, #36]	; 0x24
 800b968:	e767      	b.n	800b83a <_svfiprintf_r+0x4e>
 800b96a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b96e:	460c      	mov	r4, r1
 800b970:	2001      	movs	r0, #1
 800b972:	e7a5      	b.n	800b8c0 <_svfiprintf_r+0xd4>
 800b974:	2300      	movs	r3, #0
 800b976:	3401      	adds	r4, #1
 800b978:	9305      	str	r3, [sp, #20]
 800b97a:	4619      	mov	r1, r3
 800b97c:	f04f 0c0a 	mov.w	ip, #10
 800b980:	4620      	mov	r0, r4
 800b982:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b986:	3a30      	subs	r2, #48	; 0x30
 800b988:	2a09      	cmp	r2, #9
 800b98a:	d903      	bls.n	800b994 <_svfiprintf_r+0x1a8>
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d0c5      	beq.n	800b91c <_svfiprintf_r+0x130>
 800b990:	9105      	str	r1, [sp, #20]
 800b992:	e7c3      	b.n	800b91c <_svfiprintf_r+0x130>
 800b994:	fb0c 2101 	mla	r1, ip, r1, r2
 800b998:	4604      	mov	r4, r0
 800b99a:	2301      	movs	r3, #1
 800b99c:	e7f0      	b.n	800b980 <_svfiprintf_r+0x194>
 800b99e:	ab03      	add	r3, sp, #12
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	462a      	mov	r2, r5
 800b9a4:	4b0f      	ldr	r3, [pc, #60]	; (800b9e4 <_svfiprintf_r+0x1f8>)
 800b9a6:	a904      	add	r1, sp, #16
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	f7fd fe85 	bl	80096b8 <_printf_float>
 800b9ae:	1c42      	adds	r2, r0, #1
 800b9b0:	4606      	mov	r6, r0
 800b9b2:	d1d6      	bne.n	800b962 <_svfiprintf_r+0x176>
 800b9b4:	89ab      	ldrh	r3, [r5, #12]
 800b9b6:	065b      	lsls	r3, r3, #25
 800b9b8:	f53f af2c 	bmi.w	800b814 <_svfiprintf_r+0x28>
 800b9bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9be:	b01d      	add	sp, #116	; 0x74
 800b9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c4:	ab03      	add	r3, sp, #12
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	462a      	mov	r2, r5
 800b9ca:	4b06      	ldr	r3, [pc, #24]	; (800b9e4 <_svfiprintf_r+0x1f8>)
 800b9cc:	a904      	add	r1, sp, #16
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	f7fe f916 	bl	8009c00 <_printf_i>
 800b9d4:	e7eb      	b.n	800b9ae <_svfiprintf_r+0x1c2>
 800b9d6:	bf00      	nop
 800b9d8:	0800c564 	.word	0x0800c564
 800b9dc:	0800c56e 	.word	0x0800c56e
 800b9e0:	080096b9 	.word	0x080096b9
 800b9e4:	0800b735 	.word	0x0800b735
 800b9e8:	0800c56a 	.word	0x0800c56a

0800b9ec <__sfputc_r>:
 800b9ec:	6893      	ldr	r3, [r2, #8]
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	b410      	push	{r4}
 800b9f4:	6093      	str	r3, [r2, #8]
 800b9f6:	da08      	bge.n	800ba0a <__sfputc_r+0x1e>
 800b9f8:	6994      	ldr	r4, [r2, #24]
 800b9fa:	42a3      	cmp	r3, r4
 800b9fc:	db01      	blt.n	800ba02 <__sfputc_r+0x16>
 800b9fe:	290a      	cmp	r1, #10
 800ba00:	d103      	bne.n	800ba0a <__sfputc_r+0x1e>
 800ba02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba06:	f000 b95d 	b.w	800bcc4 <__swbuf_r>
 800ba0a:	6813      	ldr	r3, [r2, #0]
 800ba0c:	1c58      	adds	r0, r3, #1
 800ba0e:	6010      	str	r0, [r2, #0]
 800ba10:	7019      	strb	r1, [r3, #0]
 800ba12:	4608      	mov	r0, r1
 800ba14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <__sfputs_r>:
 800ba1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	460f      	mov	r7, r1
 800ba20:	4614      	mov	r4, r2
 800ba22:	18d5      	adds	r5, r2, r3
 800ba24:	42ac      	cmp	r4, r5
 800ba26:	d101      	bne.n	800ba2c <__sfputs_r+0x12>
 800ba28:	2000      	movs	r0, #0
 800ba2a:	e007      	b.n	800ba3c <__sfputs_r+0x22>
 800ba2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba30:	463a      	mov	r2, r7
 800ba32:	4630      	mov	r0, r6
 800ba34:	f7ff ffda 	bl	800b9ec <__sfputc_r>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d1f3      	bne.n	800ba24 <__sfputs_r+0xa>
 800ba3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba40 <_vfiprintf_r>:
 800ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba44:	460d      	mov	r5, r1
 800ba46:	b09d      	sub	sp, #116	; 0x74
 800ba48:	4614      	mov	r4, r2
 800ba4a:	4698      	mov	r8, r3
 800ba4c:	4606      	mov	r6, r0
 800ba4e:	b118      	cbz	r0, 800ba58 <_vfiprintf_r+0x18>
 800ba50:	6983      	ldr	r3, [r0, #24]
 800ba52:	b90b      	cbnz	r3, 800ba58 <_vfiprintf_r+0x18>
 800ba54:	f7fd fc20 	bl	8009298 <__sinit>
 800ba58:	4b89      	ldr	r3, [pc, #548]	; (800bc80 <_vfiprintf_r+0x240>)
 800ba5a:	429d      	cmp	r5, r3
 800ba5c:	d11b      	bne.n	800ba96 <_vfiprintf_r+0x56>
 800ba5e:	6875      	ldr	r5, [r6, #4]
 800ba60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba62:	07d9      	lsls	r1, r3, #31
 800ba64:	d405      	bmi.n	800ba72 <_vfiprintf_r+0x32>
 800ba66:	89ab      	ldrh	r3, [r5, #12]
 800ba68:	059a      	lsls	r2, r3, #22
 800ba6a:	d402      	bmi.n	800ba72 <_vfiprintf_r+0x32>
 800ba6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba6e:	f7fd fcd6 	bl	800941e <__retarget_lock_acquire_recursive>
 800ba72:	89ab      	ldrh	r3, [r5, #12]
 800ba74:	071b      	lsls	r3, r3, #28
 800ba76:	d501      	bpl.n	800ba7c <_vfiprintf_r+0x3c>
 800ba78:	692b      	ldr	r3, [r5, #16]
 800ba7a:	b9eb      	cbnz	r3, 800bab8 <_vfiprintf_r+0x78>
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f000 f980 	bl	800bd84 <__swsetup_r>
 800ba84:	b1c0      	cbz	r0, 800bab8 <_vfiprintf_r+0x78>
 800ba86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba88:	07dc      	lsls	r4, r3, #31
 800ba8a:	d50e      	bpl.n	800baaa <_vfiprintf_r+0x6a>
 800ba8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba90:	b01d      	add	sp, #116	; 0x74
 800ba92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba96:	4b7b      	ldr	r3, [pc, #492]	; (800bc84 <_vfiprintf_r+0x244>)
 800ba98:	429d      	cmp	r5, r3
 800ba9a:	d101      	bne.n	800baa0 <_vfiprintf_r+0x60>
 800ba9c:	68b5      	ldr	r5, [r6, #8]
 800ba9e:	e7df      	b.n	800ba60 <_vfiprintf_r+0x20>
 800baa0:	4b79      	ldr	r3, [pc, #484]	; (800bc88 <_vfiprintf_r+0x248>)
 800baa2:	429d      	cmp	r5, r3
 800baa4:	bf08      	it	eq
 800baa6:	68f5      	ldreq	r5, [r6, #12]
 800baa8:	e7da      	b.n	800ba60 <_vfiprintf_r+0x20>
 800baaa:	89ab      	ldrh	r3, [r5, #12]
 800baac:	0598      	lsls	r0, r3, #22
 800baae:	d4ed      	bmi.n	800ba8c <_vfiprintf_r+0x4c>
 800bab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bab2:	f7fd fcb5 	bl	8009420 <__retarget_lock_release_recursive>
 800bab6:	e7e9      	b.n	800ba8c <_vfiprintf_r+0x4c>
 800bab8:	2300      	movs	r3, #0
 800baba:	9309      	str	r3, [sp, #36]	; 0x24
 800babc:	2320      	movs	r3, #32
 800babe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bac2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bac6:	2330      	movs	r3, #48	; 0x30
 800bac8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc8c <_vfiprintf_r+0x24c>
 800bacc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bad0:	f04f 0901 	mov.w	r9, #1
 800bad4:	4623      	mov	r3, r4
 800bad6:	469a      	mov	sl, r3
 800bad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800badc:	b10a      	cbz	r2, 800bae2 <_vfiprintf_r+0xa2>
 800bade:	2a25      	cmp	r2, #37	; 0x25
 800bae0:	d1f9      	bne.n	800bad6 <_vfiprintf_r+0x96>
 800bae2:	ebba 0b04 	subs.w	fp, sl, r4
 800bae6:	d00b      	beq.n	800bb00 <_vfiprintf_r+0xc0>
 800bae8:	465b      	mov	r3, fp
 800baea:	4622      	mov	r2, r4
 800baec:	4629      	mov	r1, r5
 800baee:	4630      	mov	r0, r6
 800baf0:	f7ff ff93 	bl	800ba1a <__sfputs_r>
 800baf4:	3001      	adds	r0, #1
 800baf6:	f000 80aa 	beq.w	800bc4e <_vfiprintf_r+0x20e>
 800bafa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bafc:	445a      	add	r2, fp
 800bafe:	9209      	str	r2, [sp, #36]	; 0x24
 800bb00:	f89a 3000 	ldrb.w	r3, [sl]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f000 80a2 	beq.w	800bc4e <_vfiprintf_r+0x20e>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb14:	f10a 0a01 	add.w	sl, sl, #1
 800bb18:	9304      	str	r3, [sp, #16]
 800bb1a:	9307      	str	r3, [sp, #28]
 800bb1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb20:	931a      	str	r3, [sp, #104]	; 0x68
 800bb22:	4654      	mov	r4, sl
 800bb24:	2205      	movs	r2, #5
 800bb26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb2a:	4858      	ldr	r0, [pc, #352]	; (800bc8c <_vfiprintf_r+0x24c>)
 800bb2c:	f7f4 fb78 	bl	8000220 <memchr>
 800bb30:	9a04      	ldr	r2, [sp, #16]
 800bb32:	b9d8      	cbnz	r0, 800bb6c <_vfiprintf_r+0x12c>
 800bb34:	06d1      	lsls	r1, r2, #27
 800bb36:	bf44      	itt	mi
 800bb38:	2320      	movmi	r3, #32
 800bb3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb3e:	0713      	lsls	r3, r2, #28
 800bb40:	bf44      	itt	mi
 800bb42:	232b      	movmi	r3, #43	; 0x2b
 800bb44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb48:	f89a 3000 	ldrb.w	r3, [sl]
 800bb4c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb4e:	d015      	beq.n	800bb7c <_vfiprintf_r+0x13c>
 800bb50:	9a07      	ldr	r2, [sp, #28]
 800bb52:	4654      	mov	r4, sl
 800bb54:	2000      	movs	r0, #0
 800bb56:	f04f 0c0a 	mov.w	ip, #10
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb60:	3b30      	subs	r3, #48	; 0x30
 800bb62:	2b09      	cmp	r3, #9
 800bb64:	d94e      	bls.n	800bc04 <_vfiprintf_r+0x1c4>
 800bb66:	b1b0      	cbz	r0, 800bb96 <_vfiprintf_r+0x156>
 800bb68:	9207      	str	r2, [sp, #28]
 800bb6a:	e014      	b.n	800bb96 <_vfiprintf_r+0x156>
 800bb6c:	eba0 0308 	sub.w	r3, r0, r8
 800bb70:	fa09 f303 	lsl.w	r3, r9, r3
 800bb74:	4313      	orrs	r3, r2
 800bb76:	9304      	str	r3, [sp, #16]
 800bb78:	46a2      	mov	sl, r4
 800bb7a:	e7d2      	b.n	800bb22 <_vfiprintf_r+0xe2>
 800bb7c:	9b03      	ldr	r3, [sp, #12]
 800bb7e:	1d19      	adds	r1, r3, #4
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	9103      	str	r1, [sp, #12]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	bfbb      	ittet	lt
 800bb88:	425b      	neglt	r3, r3
 800bb8a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb8e:	9307      	strge	r3, [sp, #28]
 800bb90:	9307      	strlt	r3, [sp, #28]
 800bb92:	bfb8      	it	lt
 800bb94:	9204      	strlt	r2, [sp, #16]
 800bb96:	7823      	ldrb	r3, [r4, #0]
 800bb98:	2b2e      	cmp	r3, #46	; 0x2e
 800bb9a:	d10c      	bne.n	800bbb6 <_vfiprintf_r+0x176>
 800bb9c:	7863      	ldrb	r3, [r4, #1]
 800bb9e:	2b2a      	cmp	r3, #42	; 0x2a
 800bba0:	d135      	bne.n	800bc0e <_vfiprintf_r+0x1ce>
 800bba2:	9b03      	ldr	r3, [sp, #12]
 800bba4:	1d1a      	adds	r2, r3, #4
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	9203      	str	r2, [sp, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	bfb8      	it	lt
 800bbae:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbb2:	3402      	adds	r4, #2
 800bbb4:	9305      	str	r3, [sp, #20]
 800bbb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc9c <_vfiprintf_r+0x25c>
 800bbba:	7821      	ldrb	r1, [r4, #0]
 800bbbc:	2203      	movs	r2, #3
 800bbbe:	4650      	mov	r0, sl
 800bbc0:	f7f4 fb2e 	bl	8000220 <memchr>
 800bbc4:	b140      	cbz	r0, 800bbd8 <_vfiprintf_r+0x198>
 800bbc6:	2340      	movs	r3, #64	; 0x40
 800bbc8:	eba0 000a 	sub.w	r0, r0, sl
 800bbcc:	fa03 f000 	lsl.w	r0, r3, r0
 800bbd0:	9b04      	ldr	r3, [sp, #16]
 800bbd2:	4303      	orrs	r3, r0
 800bbd4:	3401      	adds	r4, #1
 800bbd6:	9304      	str	r3, [sp, #16]
 800bbd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbdc:	482c      	ldr	r0, [pc, #176]	; (800bc90 <_vfiprintf_r+0x250>)
 800bbde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbe2:	2206      	movs	r2, #6
 800bbe4:	f7f4 fb1c 	bl	8000220 <memchr>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d03f      	beq.n	800bc6c <_vfiprintf_r+0x22c>
 800bbec:	4b29      	ldr	r3, [pc, #164]	; (800bc94 <_vfiprintf_r+0x254>)
 800bbee:	bb1b      	cbnz	r3, 800bc38 <_vfiprintf_r+0x1f8>
 800bbf0:	9b03      	ldr	r3, [sp, #12]
 800bbf2:	3307      	adds	r3, #7
 800bbf4:	f023 0307 	bic.w	r3, r3, #7
 800bbf8:	3308      	adds	r3, #8
 800bbfa:	9303      	str	r3, [sp, #12]
 800bbfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbfe:	443b      	add	r3, r7
 800bc00:	9309      	str	r3, [sp, #36]	; 0x24
 800bc02:	e767      	b.n	800bad4 <_vfiprintf_r+0x94>
 800bc04:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc08:	460c      	mov	r4, r1
 800bc0a:	2001      	movs	r0, #1
 800bc0c:	e7a5      	b.n	800bb5a <_vfiprintf_r+0x11a>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	3401      	adds	r4, #1
 800bc12:	9305      	str	r3, [sp, #20]
 800bc14:	4619      	mov	r1, r3
 800bc16:	f04f 0c0a 	mov.w	ip, #10
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc20:	3a30      	subs	r2, #48	; 0x30
 800bc22:	2a09      	cmp	r2, #9
 800bc24:	d903      	bls.n	800bc2e <_vfiprintf_r+0x1ee>
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d0c5      	beq.n	800bbb6 <_vfiprintf_r+0x176>
 800bc2a:	9105      	str	r1, [sp, #20]
 800bc2c:	e7c3      	b.n	800bbb6 <_vfiprintf_r+0x176>
 800bc2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc32:	4604      	mov	r4, r0
 800bc34:	2301      	movs	r3, #1
 800bc36:	e7f0      	b.n	800bc1a <_vfiprintf_r+0x1da>
 800bc38:	ab03      	add	r3, sp, #12
 800bc3a:	9300      	str	r3, [sp, #0]
 800bc3c:	462a      	mov	r2, r5
 800bc3e:	4b16      	ldr	r3, [pc, #88]	; (800bc98 <_vfiprintf_r+0x258>)
 800bc40:	a904      	add	r1, sp, #16
 800bc42:	4630      	mov	r0, r6
 800bc44:	f7fd fd38 	bl	80096b8 <_printf_float>
 800bc48:	4607      	mov	r7, r0
 800bc4a:	1c78      	adds	r0, r7, #1
 800bc4c:	d1d6      	bne.n	800bbfc <_vfiprintf_r+0x1bc>
 800bc4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc50:	07d9      	lsls	r1, r3, #31
 800bc52:	d405      	bmi.n	800bc60 <_vfiprintf_r+0x220>
 800bc54:	89ab      	ldrh	r3, [r5, #12]
 800bc56:	059a      	lsls	r2, r3, #22
 800bc58:	d402      	bmi.n	800bc60 <_vfiprintf_r+0x220>
 800bc5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc5c:	f7fd fbe0 	bl	8009420 <__retarget_lock_release_recursive>
 800bc60:	89ab      	ldrh	r3, [r5, #12]
 800bc62:	065b      	lsls	r3, r3, #25
 800bc64:	f53f af12 	bmi.w	800ba8c <_vfiprintf_r+0x4c>
 800bc68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc6a:	e711      	b.n	800ba90 <_vfiprintf_r+0x50>
 800bc6c:	ab03      	add	r3, sp, #12
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	462a      	mov	r2, r5
 800bc72:	4b09      	ldr	r3, [pc, #36]	; (800bc98 <_vfiprintf_r+0x258>)
 800bc74:	a904      	add	r1, sp, #16
 800bc76:	4630      	mov	r0, r6
 800bc78:	f7fd ffc2 	bl	8009c00 <_printf_i>
 800bc7c:	e7e4      	b.n	800bc48 <_vfiprintf_r+0x208>
 800bc7e:	bf00      	nop
 800bc80:	0800c1f4 	.word	0x0800c1f4
 800bc84:	0800c214 	.word	0x0800c214
 800bc88:	0800c1d4 	.word	0x0800c1d4
 800bc8c:	0800c564 	.word	0x0800c564
 800bc90:	0800c56e 	.word	0x0800c56e
 800bc94:	080096b9 	.word	0x080096b9
 800bc98:	0800ba1b 	.word	0x0800ba1b
 800bc9c:	0800c56a 	.word	0x0800c56a

0800bca0 <_read_r>:
 800bca0:	b538      	push	{r3, r4, r5, lr}
 800bca2:	4d07      	ldr	r5, [pc, #28]	; (800bcc0 <_read_r+0x20>)
 800bca4:	4604      	mov	r4, r0
 800bca6:	4608      	mov	r0, r1
 800bca8:	4611      	mov	r1, r2
 800bcaa:	2200      	movs	r2, #0
 800bcac:	602a      	str	r2, [r5, #0]
 800bcae:	461a      	mov	r2, r3
 800bcb0:	f7f6 fdd8 	bl	8002864 <_read>
 800bcb4:	1c43      	adds	r3, r0, #1
 800bcb6:	d102      	bne.n	800bcbe <_read_r+0x1e>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	b103      	cbz	r3, 800bcbe <_read_r+0x1e>
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	bd38      	pop	{r3, r4, r5, pc}
 800bcc0:	20004598 	.word	0x20004598

0800bcc4 <__swbuf_r>:
 800bcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc6:	460e      	mov	r6, r1
 800bcc8:	4614      	mov	r4, r2
 800bcca:	4605      	mov	r5, r0
 800bccc:	b118      	cbz	r0, 800bcd6 <__swbuf_r+0x12>
 800bcce:	6983      	ldr	r3, [r0, #24]
 800bcd0:	b90b      	cbnz	r3, 800bcd6 <__swbuf_r+0x12>
 800bcd2:	f7fd fae1 	bl	8009298 <__sinit>
 800bcd6:	4b21      	ldr	r3, [pc, #132]	; (800bd5c <__swbuf_r+0x98>)
 800bcd8:	429c      	cmp	r4, r3
 800bcda:	d12b      	bne.n	800bd34 <__swbuf_r+0x70>
 800bcdc:	686c      	ldr	r4, [r5, #4]
 800bcde:	69a3      	ldr	r3, [r4, #24]
 800bce0:	60a3      	str	r3, [r4, #8]
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	071a      	lsls	r2, r3, #28
 800bce6:	d52f      	bpl.n	800bd48 <__swbuf_r+0x84>
 800bce8:	6923      	ldr	r3, [r4, #16]
 800bcea:	b36b      	cbz	r3, 800bd48 <__swbuf_r+0x84>
 800bcec:	6923      	ldr	r3, [r4, #16]
 800bcee:	6820      	ldr	r0, [r4, #0]
 800bcf0:	1ac0      	subs	r0, r0, r3
 800bcf2:	6963      	ldr	r3, [r4, #20]
 800bcf4:	b2f6      	uxtb	r6, r6
 800bcf6:	4283      	cmp	r3, r0
 800bcf8:	4637      	mov	r7, r6
 800bcfa:	dc04      	bgt.n	800bd06 <__swbuf_r+0x42>
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f7ff f8ba 	bl	800ae78 <_fflush_r>
 800bd04:	bb30      	cbnz	r0, 800bd54 <__swbuf_r+0x90>
 800bd06:	68a3      	ldr	r3, [r4, #8]
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	60a3      	str	r3, [r4, #8]
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	1c5a      	adds	r2, r3, #1
 800bd10:	6022      	str	r2, [r4, #0]
 800bd12:	701e      	strb	r6, [r3, #0]
 800bd14:	6963      	ldr	r3, [r4, #20]
 800bd16:	3001      	adds	r0, #1
 800bd18:	4283      	cmp	r3, r0
 800bd1a:	d004      	beq.n	800bd26 <__swbuf_r+0x62>
 800bd1c:	89a3      	ldrh	r3, [r4, #12]
 800bd1e:	07db      	lsls	r3, r3, #31
 800bd20:	d506      	bpl.n	800bd30 <__swbuf_r+0x6c>
 800bd22:	2e0a      	cmp	r6, #10
 800bd24:	d104      	bne.n	800bd30 <__swbuf_r+0x6c>
 800bd26:	4621      	mov	r1, r4
 800bd28:	4628      	mov	r0, r5
 800bd2a:	f7ff f8a5 	bl	800ae78 <_fflush_r>
 800bd2e:	b988      	cbnz	r0, 800bd54 <__swbuf_r+0x90>
 800bd30:	4638      	mov	r0, r7
 800bd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd34:	4b0a      	ldr	r3, [pc, #40]	; (800bd60 <__swbuf_r+0x9c>)
 800bd36:	429c      	cmp	r4, r3
 800bd38:	d101      	bne.n	800bd3e <__swbuf_r+0x7a>
 800bd3a:	68ac      	ldr	r4, [r5, #8]
 800bd3c:	e7cf      	b.n	800bcde <__swbuf_r+0x1a>
 800bd3e:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <__swbuf_r+0xa0>)
 800bd40:	429c      	cmp	r4, r3
 800bd42:	bf08      	it	eq
 800bd44:	68ec      	ldreq	r4, [r5, #12]
 800bd46:	e7ca      	b.n	800bcde <__swbuf_r+0x1a>
 800bd48:	4621      	mov	r1, r4
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	f000 f81a 	bl	800bd84 <__swsetup_r>
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d0cb      	beq.n	800bcec <__swbuf_r+0x28>
 800bd54:	f04f 37ff 	mov.w	r7, #4294967295
 800bd58:	e7ea      	b.n	800bd30 <__swbuf_r+0x6c>
 800bd5a:	bf00      	nop
 800bd5c:	0800c1f4 	.word	0x0800c1f4
 800bd60:	0800c214 	.word	0x0800c214
 800bd64:	0800c1d4 	.word	0x0800c1d4

0800bd68 <__ascii_wctomb>:
 800bd68:	b149      	cbz	r1, 800bd7e <__ascii_wctomb+0x16>
 800bd6a:	2aff      	cmp	r2, #255	; 0xff
 800bd6c:	bf85      	ittet	hi
 800bd6e:	238a      	movhi	r3, #138	; 0x8a
 800bd70:	6003      	strhi	r3, [r0, #0]
 800bd72:	700a      	strbls	r2, [r1, #0]
 800bd74:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd78:	bf98      	it	ls
 800bd7a:	2001      	movls	r0, #1
 800bd7c:	4770      	bx	lr
 800bd7e:	4608      	mov	r0, r1
 800bd80:	4770      	bx	lr
	...

0800bd84 <__swsetup_r>:
 800bd84:	4b32      	ldr	r3, [pc, #200]	; (800be50 <__swsetup_r+0xcc>)
 800bd86:	b570      	push	{r4, r5, r6, lr}
 800bd88:	681d      	ldr	r5, [r3, #0]
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	b125      	cbz	r5, 800bd9a <__swsetup_r+0x16>
 800bd90:	69ab      	ldr	r3, [r5, #24]
 800bd92:	b913      	cbnz	r3, 800bd9a <__swsetup_r+0x16>
 800bd94:	4628      	mov	r0, r5
 800bd96:	f7fd fa7f 	bl	8009298 <__sinit>
 800bd9a:	4b2e      	ldr	r3, [pc, #184]	; (800be54 <__swsetup_r+0xd0>)
 800bd9c:	429c      	cmp	r4, r3
 800bd9e:	d10f      	bne.n	800bdc0 <__swsetup_r+0x3c>
 800bda0:	686c      	ldr	r4, [r5, #4]
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bda8:	0719      	lsls	r1, r3, #28
 800bdaa:	d42c      	bmi.n	800be06 <__swsetup_r+0x82>
 800bdac:	06dd      	lsls	r5, r3, #27
 800bdae:	d411      	bmi.n	800bdd4 <__swsetup_r+0x50>
 800bdb0:	2309      	movs	r3, #9
 800bdb2:	6033      	str	r3, [r6, #0]
 800bdb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bdb8:	81a3      	strh	r3, [r4, #12]
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbe:	e03e      	b.n	800be3e <__swsetup_r+0xba>
 800bdc0:	4b25      	ldr	r3, [pc, #148]	; (800be58 <__swsetup_r+0xd4>)
 800bdc2:	429c      	cmp	r4, r3
 800bdc4:	d101      	bne.n	800bdca <__swsetup_r+0x46>
 800bdc6:	68ac      	ldr	r4, [r5, #8]
 800bdc8:	e7eb      	b.n	800bda2 <__swsetup_r+0x1e>
 800bdca:	4b24      	ldr	r3, [pc, #144]	; (800be5c <__swsetup_r+0xd8>)
 800bdcc:	429c      	cmp	r4, r3
 800bdce:	bf08      	it	eq
 800bdd0:	68ec      	ldreq	r4, [r5, #12]
 800bdd2:	e7e6      	b.n	800bda2 <__swsetup_r+0x1e>
 800bdd4:	0758      	lsls	r0, r3, #29
 800bdd6:	d512      	bpl.n	800bdfe <__swsetup_r+0x7a>
 800bdd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdda:	b141      	cbz	r1, 800bdee <__swsetup_r+0x6a>
 800bddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bde0:	4299      	cmp	r1, r3
 800bde2:	d002      	beq.n	800bdea <__swsetup_r+0x66>
 800bde4:	4630      	mov	r0, r6
 800bde6:	f7ff fc59 	bl	800b69c <_free_r>
 800bdea:	2300      	movs	r3, #0
 800bdec:	6363      	str	r3, [r4, #52]	; 0x34
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bdf4:	81a3      	strh	r3, [r4, #12]
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	6063      	str	r3, [r4, #4]
 800bdfa:	6923      	ldr	r3, [r4, #16]
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f043 0308 	orr.w	r3, r3, #8
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	6923      	ldr	r3, [r4, #16]
 800be08:	b94b      	cbnz	r3, 800be1e <__swsetup_r+0x9a>
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be14:	d003      	beq.n	800be1e <__swsetup_r+0x9a>
 800be16:	4621      	mov	r1, r4
 800be18:	4630      	mov	r0, r6
 800be1a:	f000 f877 	bl	800bf0c <__smakebuf_r>
 800be1e:	89a0      	ldrh	r0, [r4, #12]
 800be20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be24:	f010 0301 	ands.w	r3, r0, #1
 800be28:	d00a      	beq.n	800be40 <__swsetup_r+0xbc>
 800be2a:	2300      	movs	r3, #0
 800be2c:	60a3      	str	r3, [r4, #8]
 800be2e:	6963      	ldr	r3, [r4, #20]
 800be30:	425b      	negs	r3, r3
 800be32:	61a3      	str	r3, [r4, #24]
 800be34:	6923      	ldr	r3, [r4, #16]
 800be36:	b943      	cbnz	r3, 800be4a <__swsetup_r+0xc6>
 800be38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be3c:	d1ba      	bne.n	800bdb4 <__swsetup_r+0x30>
 800be3e:	bd70      	pop	{r4, r5, r6, pc}
 800be40:	0781      	lsls	r1, r0, #30
 800be42:	bf58      	it	pl
 800be44:	6963      	ldrpl	r3, [r4, #20]
 800be46:	60a3      	str	r3, [r4, #8]
 800be48:	e7f4      	b.n	800be34 <__swsetup_r+0xb0>
 800be4a:	2000      	movs	r0, #0
 800be4c:	e7f7      	b.n	800be3e <__swsetup_r+0xba>
 800be4e:	bf00      	nop
 800be50:	20000014 	.word	0x20000014
 800be54:	0800c1f4 	.word	0x0800c1f4
 800be58:	0800c214 	.word	0x0800c214
 800be5c:	0800c1d4 	.word	0x0800c1d4

0800be60 <__assert_func>:
 800be60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be62:	4614      	mov	r4, r2
 800be64:	461a      	mov	r2, r3
 800be66:	4b09      	ldr	r3, [pc, #36]	; (800be8c <__assert_func+0x2c>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4605      	mov	r5, r0
 800be6c:	68d8      	ldr	r0, [r3, #12]
 800be6e:	b14c      	cbz	r4, 800be84 <__assert_func+0x24>
 800be70:	4b07      	ldr	r3, [pc, #28]	; (800be90 <__assert_func+0x30>)
 800be72:	9100      	str	r1, [sp, #0]
 800be74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be78:	4906      	ldr	r1, [pc, #24]	; (800be94 <__assert_func+0x34>)
 800be7a:	462b      	mov	r3, r5
 800be7c:	f000 f80e 	bl	800be9c <fiprintf>
 800be80:	f000 f8cd 	bl	800c01e <abort>
 800be84:	4b04      	ldr	r3, [pc, #16]	; (800be98 <__assert_func+0x38>)
 800be86:	461c      	mov	r4, r3
 800be88:	e7f3      	b.n	800be72 <__assert_func+0x12>
 800be8a:	bf00      	nop
 800be8c:	20000014 	.word	0x20000014
 800be90:	0800c575 	.word	0x0800c575
 800be94:	0800c582 	.word	0x0800c582
 800be98:	0800c5b0 	.word	0x0800c5b0

0800be9c <fiprintf>:
 800be9c:	b40e      	push	{r1, r2, r3}
 800be9e:	b503      	push	{r0, r1, lr}
 800bea0:	4601      	mov	r1, r0
 800bea2:	ab03      	add	r3, sp, #12
 800bea4:	4805      	ldr	r0, [pc, #20]	; (800bebc <fiprintf+0x20>)
 800bea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800beaa:	6800      	ldr	r0, [r0, #0]
 800beac:	9301      	str	r3, [sp, #4]
 800beae:	f7ff fdc7 	bl	800ba40 <_vfiprintf_r>
 800beb2:	b002      	add	sp, #8
 800beb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800beb8:	b003      	add	sp, #12
 800beba:	4770      	bx	lr
 800bebc:	20000014 	.word	0x20000014

0800bec0 <__swhatbuf_r>:
 800bec0:	b570      	push	{r4, r5, r6, lr}
 800bec2:	460e      	mov	r6, r1
 800bec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec8:	2900      	cmp	r1, #0
 800beca:	b096      	sub	sp, #88	; 0x58
 800becc:	4614      	mov	r4, r2
 800bece:	461d      	mov	r5, r3
 800bed0:	da08      	bge.n	800bee4 <__swhatbuf_r+0x24>
 800bed2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bed6:	2200      	movs	r2, #0
 800bed8:	602a      	str	r2, [r5, #0]
 800beda:	061a      	lsls	r2, r3, #24
 800bedc:	d410      	bmi.n	800bf00 <__swhatbuf_r+0x40>
 800bede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bee2:	e00e      	b.n	800bf02 <__swhatbuf_r+0x42>
 800bee4:	466a      	mov	r2, sp
 800bee6:	f000 f8a1 	bl	800c02c <_fstat_r>
 800beea:	2800      	cmp	r0, #0
 800beec:	dbf1      	blt.n	800bed2 <__swhatbuf_r+0x12>
 800beee:	9a01      	ldr	r2, [sp, #4]
 800bef0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bef4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bef8:	425a      	negs	r2, r3
 800befa:	415a      	adcs	r2, r3
 800befc:	602a      	str	r2, [r5, #0]
 800befe:	e7ee      	b.n	800bede <__swhatbuf_r+0x1e>
 800bf00:	2340      	movs	r3, #64	; 0x40
 800bf02:	2000      	movs	r0, #0
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	b016      	add	sp, #88	; 0x58
 800bf08:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf0c <__smakebuf_r>:
 800bf0c:	898b      	ldrh	r3, [r1, #12]
 800bf0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf10:	079d      	lsls	r5, r3, #30
 800bf12:	4606      	mov	r6, r0
 800bf14:	460c      	mov	r4, r1
 800bf16:	d507      	bpl.n	800bf28 <__smakebuf_r+0x1c>
 800bf18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf1c:	6023      	str	r3, [r4, #0]
 800bf1e:	6123      	str	r3, [r4, #16]
 800bf20:	2301      	movs	r3, #1
 800bf22:	6163      	str	r3, [r4, #20]
 800bf24:	b002      	add	sp, #8
 800bf26:	bd70      	pop	{r4, r5, r6, pc}
 800bf28:	ab01      	add	r3, sp, #4
 800bf2a:	466a      	mov	r2, sp
 800bf2c:	f7ff ffc8 	bl	800bec0 <__swhatbuf_r>
 800bf30:	9900      	ldr	r1, [sp, #0]
 800bf32:	4605      	mov	r5, r0
 800bf34:	4630      	mov	r0, r6
 800bf36:	f7fd faab 	bl	8009490 <_malloc_r>
 800bf3a:	b948      	cbnz	r0, 800bf50 <__smakebuf_r+0x44>
 800bf3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf40:	059a      	lsls	r2, r3, #22
 800bf42:	d4ef      	bmi.n	800bf24 <__smakebuf_r+0x18>
 800bf44:	f023 0303 	bic.w	r3, r3, #3
 800bf48:	f043 0302 	orr.w	r3, r3, #2
 800bf4c:	81a3      	strh	r3, [r4, #12]
 800bf4e:	e7e3      	b.n	800bf18 <__smakebuf_r+0xc>
 800bf50:	4b0d      	ldr	r3, [pc, #52]	; (800bf88 <__smakebuf_r+0x7c>)
 800bf52:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	6020      	str	r0, [r4, #0]
 800bf58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf5c:	81a3      	strh	r3, [r4, #12]
 800bf5e:	9b00      	ldr	r3, [sp, #0]
 800bf60:	6163      	str	r3, [r4, #20]
 800bf62:	9b01      	ldr	r3, [sp, #4]
 800bf64:	6120      	str	r0, [r4, #16]
 800bf66:	b15b      	cbz	r3, 800bf80 <__smakebuf_r+0x74>
 800bf68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	f000 f86f 	bl	800c050 <_isatty_r>
 800bf72:	b128      	cbz	r0, 800bf80 <__smakebuf_r+0x74>
 800bf74:	89a3      	ldrh	r3, [r4, #12]
 800bf76:	f023 0303 	bic.w	r3, r3, #3
 800bf7a:	f043 0301 	orr.w	r3, r3, #1
 800bf7e:	81a3      	strh	r3, [r4, #12]
 800bf80:	89a0      	ldrh	r0, [r4, #12]
 800bf82:	4305      	orrs	r5, r0
 800bf84:	81a5      	strh	r5, [r4, #12]
 800bf86:	e7cd      	b.n	800bf24 <__smakebuf_r+0x18>
 800bf88:	08009231 	.word	0x08009231

0800bf8c <memmove>:
 800bf8c:	4288      	cmp	r0, r1
 800bf8e:	b510      	push	{r4, lr}
 800bf90:	eb01 0402 	add.w	r4, r1, r2
 800bf94:	d902      	bls.n	800bf9c <memmove+0x10>
 800bf96:	4284      	cmp	r4, r0
 800bf98:	4623      	mov	r3, r4
 800bf9a:	d807      	bhi.n	800bfac <memmove+0x20>
 800bf9c:	1e43      	subs	r3, r0, #1
 800bf9e:	42a1      	cmp	r1, r4
 800bfa0:	d008      	beq.n	800bfb4 <memmove+0x28>
 800bfa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfaa:	e7f8      	b.n	800bf9e <memmove+0x12>
 800bfac:	4402      	add	r2, r0
 800bfae:	4601      	mov	r1, r0
 800bfb0:	428a      	cmp	r2, r1
 800bfb2:	d100      	bne.n	800bfb6 <memmove+0x2a>
 800bfb4:	bd10      	pop	{r4, pc}
 800bfb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfbe:	e7f7      	b.n	800bfb0 <memmove+0x24>

0800bfc0 <_realloc_r>:
 800bfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc4:	4680      	mov	r8, r0
 800bfc6:	4614      	mov	r4, r2
 800bfc8:	460e      	mov	r6, r1
 800bfca:	b921      	cbnz	r1, 800bfd6 <_realloc_r+0x16>
 800bfcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd0:	4611      	mov	r1, r2
 800bfd2:	f7fd ba5d 	b.w	8009490 <_malloc_r>
 800bfd6:	b92a      	cbnz	r2, 800bfe4 <_realloc_r+0x24>
 800bfd8:	f7ff fb60 	bl	800b69c <_free_r>
 800bfdc:	4625      	mov	r5, r4
 800bfde:	4628      	mov	r0, r5
 800bfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe4:	f000 f844 	bl	800c070 <_malloc_usable_size_r>
 800bfe8:	4284      	cmp	r4, r0
 800bfea:	4607      	mov	r7, r0
 800bfec:	d802      	bhi.n	800bff4 <_realloc_r+0x34>
 800bfee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bff2:	d812      	bhi.n	800c01a <_realloc_r+0x5a>
 800bff4:	4621      	mov	r1, r4
 800bff6:	4640      	mov	r0, r8
 800bff8:	f7fd fa4a 	bl	8009490 <_malloc_r>
 800bffc:	4605      	mov	r5, r0
 800bffe:	2800      	cmp	r0, #0
 800c000:	d0ed      	beq.n	800bfde <_realloc_r+0x1e>
 800c002:	42bc      	cmp	r4, r7
 800c004:	4622      	mov	r2, r4
 800c006:	4631      	mov	r1, r6
 800c008:	bf28      	it	cs
 800c00a:	463a      	movcs	r2, r7
 800c00c:	f7fd fa09 	bl	8009422 <memcpy>
 800c010:	4631      	mov	r1, r6
 800c012:	4640      	mov	r0, r8
 800c014:	f7ff fb42 	bl	800b69c <_free_r>
 800c018:	e7e1      	b.n	800bfde <_realloc_r+0x1e>
 800c01a:	4635      	mov	r5, r6
 800c01c:	e7df      	b.n	800bfde <_realloc_r+0x1e>

0800c01e <abort>:
 800c01e:	b508      	push	{r3, lr}
 800c020:	2006      	movs	r0, #6
 800c022:	f000 f855 	bl	800c0d0 <raise>
 800c026:	2001      	movs	r0, #1
 800c028:	f7f6 fc12 	bl	8002850 <_exit>

0800c02c <_fstat_r>:
 800c02c:	b538      	push	{r3, r4, r5, lr}
 800c02e:	4d07      	ldr	r5, [pc, #28]	; (800c04c <_fstat_r+0x20>)
 800c030:	2300      	movs	r3, #0
 800c032:	4604      	mov	r4, r0
 800c034:	4608      	mov	r0, r1
 800c036:	4611      	mov	r1, r2
 800c038:	602b      	str	r3, [r5, #0]
 800c03a:	f7f6 fc58 	bl	80028ee <_fstat>
 800c03e:	1c43      	adds	r3, r0, #1
 800c040:	d102      	bne.n	800c048 <_fstat_r+0x1c>
 800c042:	682b      	ldr	r3, [r5, #0]
 800c044:	b103      	cbz	r3, 800c048 <_fstat_r+0x1c>
 800c046:	6023      	str	r3, [r4, #0]
 800c048:	bd38      	pop	{r3, r4, r5, pc}
 800c04a:	bf00      	nop
 800c04c:	20004598 	.word	0x20004598

0800c050 <_isatty_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4d06      	ldr	r5, [pc, #24]	; (800c06c <_isatty_r+0x1c>)
 800c054:	2300      	movs	r3, #0
 800c056:	4604      	mov	r4, r0
 800c058:	4608      	mov	r0, r1
 800c05a:	602b      	str	r3, [r5, #0]
 800c05c:	f7f6 fc57 	bl	800290e <_isatty>
 800c060:	1c43      	adds	r3, r0, #1
 800c062:	d102      	bne.n	800c06a <_isatty_r+0x1a>
 800c064:	682b      	ldr	r3, [r5, #0]
 800c066:	b103      	cbz	r3, 800c06a <_isatty_r+0x1a>
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
 800c06c:	20004598 	.word	0x20004598

0800c070 <_malloc_usable_size_r>:
 800c070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c074:	1f18      	subs	r0, r3, #4
 800c076:	2b00      	cmp	r3, #0
 800c078:	bfbc      	itt	lt
 800c07a:	580b      	ldrlt	r3, [r1, r0]
 800c07c:	18c0      	addlt	r0, r0, r3
 800c07e:	4770      	bx	lr

0800c080 <_raise_r>:
 800c080:	291f      	cmp	r1, #31
 800c082:	b538      	push	{r3, r4, r5, lr}
 800c084:	4604      	mov	r4, r0
 800c086:	460d      	mov	r5, r1
 800c088:	d904      	bls.n	800c094 <_raise_r+0x14>
 800c08a:	2316      	movs	r3, #22
 800c08c:	6003      	str	r3, [r0, #0]
 800c08e:	f04f 30ff 	mov.w	r0, #4294967295
 800c092:	bd38      	pop	{r3, r4, r5, pc}
 800c094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c096:	b112      	cbz	r2, 800c09e <_raise_r+0x1e>
 800c098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c09c:	b94b      	cbnz	r3, 800c0b2 <_raise_r+0x32>
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f000 f830 	bl	800c104 <_getpid_r>
 800c0a4:	462a      	mov	r2, r5
 800c0a6:	4601      	mov	r1, r0
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ae:	f000 b817 	b.w	800c0e0 <_kill_r>
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d00a      	beq.n	800c0cc <_raise_r+0x4c>
 800c0b6:	1c59      	adds	r1, r3, #1
 800c0b8:	d103      	bne.n	800c0c2 <_raise_r+0x42>
 800c0ba:	2316      	movs	r3, #22
 800c0bc:	6003      	str	r3, [r0, #0]
 800c0be:	2001      	movs	r0, #1
 800c0c0:	e7e7      	b.n	800c092 <_raise_r+0x12>
 800c0c2:	2400      	movs	r4, #0
 800c0c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0c8:	4628      	mov	r0, r5
 800c0ca:	4798      	blx	r3
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	e7e0      	b.n	800c092 <_raise_r+0x12>

0800c0d0 <raise>:
 800c0d0:	4b02      	ldr	r3, [pc, #8]	; (800c0dc <raise+0xc>)
 800c0d2:	4601      	mov	r1, r0
 800c0d4:	6818      	ldr	r0, [r3, #0]
 800c0d6:	f7ff bfd3 	b.w	800c080 <_raise_r>
 800c0da:	bf00      	nop
 800c0dc:	20000014 	.word	0x20000014

0800c0e0 <_kill_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d07      	ldr	r5, [pc, #28]	; (800c100 <_kill_r+0x20>)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	4608      	mov	r0, r1
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	602b      	str	r3, [r5, #0]
 800c0ee:	f7f6 fb9f 	bl	8002830 <_kill>
 800c0f2:	1c43      	adds	r3, r0, #1
 800c0f4:	d102      	bne.n	800c0fc <_kill_r+0x1c>
 800c0f6:	682b      	ldr	r3, [r5, #0]
 800c0f8:	b103      	cbz	r3, 800c0fc <_kill_r+0x1c>
 800c0fa:	6023      	str	r3, [r4, #0]
 800c0fc:	bd38      	pop	{r3, r4, r5, pc}
 800c0fe:	bf00      	nop
 800c100:	20004598 	.word	0x20004598

0800c104 <_getpid_r>:
 800c104:	f7f6 bb8c 	b.w	8002820 <_getpid>

0800c108 <_init>:
 800c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10a:	bf00      	nop
 800c10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10e:	bc08      	pop	{r3}
 800c110:	469e      	mov	lr, r3
 800c112:	4770      	bx	lr

0800c114 <_fini>:
 800c114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c116:	bf00      	nop
 800c118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c11a:	bc08      	pop	{r3}
 800c11c:	469e      	mov	lr, r3
 800c11e:	4770      	bx	lr
