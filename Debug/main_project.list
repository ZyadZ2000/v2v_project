
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800bba8  0800bba8  0001bba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c04c  0800c04c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c04c  0800c04c  0001c04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c054  0800c054  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c054  0800c054  0001c054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c058  0800c058  0001c058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043ac  200001e8  0800c240  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004594  0800c240  00024594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018012  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399f  00000000  00000000  00038226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0003bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a4e  00000000  00000000  0003e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018eef  00000000  00000000  00063b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc022  00000000  00000000  0007ca2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158a4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000606c  00000000  00000000  00158aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bb90 	.word	0x0800bb90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800bb90 	.word	0x0800bb90

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <HAL_CAR_CTRL_voidForward>:
#include "CAR_CTRL_interface.h"


/* Move RC Car To The Forward Direction */
void HAL_CAR_CTRL_voidForward(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2104      	movs	r1, #4
 8000f94:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <HAL_CAR_CTRL_voidForward+0x34>)
 8000f96:	f002 fc19 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <HAL_CAR_CTRL_voidForward+0x34>)
 8000fa0:	f002 fc14 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_CAR_CTRL_voidForward+0x34>)
 8000fac:	f002 fc0e 	bl	80037cc <HAL_GPIO_WritePin>

	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <HAL_CAR_CTRL_voidForward+0x34>)
 8000fb8:	f002 fc08 	bl	80037cc <HAL_GPIO_WritePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40020800 	.word	0x40020800

08000fc4 <HAL_CAR_CTRL_voidBackward>:


/* Move RC Car To The Backward Direction */
void HAL_CAR_CTRL_voidBackward(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2104      	movs	r1, #4
 8000fcc:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <HAL_CAR_CTRL_voidBackward+0x34>)
 8000fce:	f002 fbfd 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <HAL_CAR_CTRL_voidBackward+0x34>)
 8000fd8:	f002 fbf8 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <HAL_CAR_CTRL_voidBackward+0x34>)
 8000fe4:	f002 fbf2 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fee:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <HAL_CAR_CTRL_voidBackward+0x34>)
 8000ff0:	f002 fbec 	bl	80037cc <HAL_GPIO_WritePin>

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40020800 	.word	0x40020800

08000ffc <HAL_CAR_CTRL_voidRight>:


/* Move RC Car To The Right Direction */
void HAL_CAR_CTRL_voidRight(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2104      	movs	r1, #4
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <HAL_CAR_CTRL_voidRight+0x34>)
 8001006:	f002 fbe1 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	2108      	movs	r1, #8
 800100e:	4808      	ldr	r0, [pc, #32]	; (8001030 <HAL_CAR_CTRL_voidRight+0x34>)
 8001010:	f002 fbdc 	bl	80037cc <HAL_GPIO_WritePin>
//	MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_CAR_CTRL_voidRight+0x34>)
 800101c:	f002 fbd6 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001026:	4802      	ldr	r0, [pc, #8]	; (8001030 <HAL_CAR_CTRL_voidRight+0x34>)
 8001028:	f002 fbd0 	bl	80037cc <HAL_GPIO_WritePin>

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40020800 	.word	0x40020800

08001034 <HAL_CAR_CTRL_voidLeft>:


/* Move RC Car To The Left Direction */
void HAL_CAR_CTRL_voidLeft(void)
{	
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2104      	movs	r1, #4
 800103c:	480a      	ldr	r0, [pc, #40]	; (8001068 <HAL_CAR_CTRL_voidLeft+0x34>)
 800103e:	f002 fbc5 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2108      	movs	r1, #8
 8001046:	4808      	ldr	r0, [pc, #32]	; (8001068 <HAL_CAR_CTRL_voidLeft+0x34>)
 8001048:	f002 fbc0 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_CAR_CTRL_voidLeft+0x34>)
 8001054:	f002 fbba 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800105e:	4802      	ldr	r0, [pc, #8]	; (8001068 <HAL_CAR_CTRL_voidLeft+0x34>)
 8001060:	f002 fbb4 	bl	80037cc <HAL_GPIO_WritePin>


}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40020800 	.word	0x40020800

0800106c <HAL_CAR_CTRL_voidStop>:


/* Stop RC Car In The Current Position */
void HAL_CAR_CTRL_voidStop(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2104      	movs	r1, #4
 8001074:	480a      	ldr	r0, [pc, #40]	; (80010a0 <HAL_CAR_CTRL_voidStop+0x34>)
 8001076:	f002 fba9 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2108      	movs	r1, #8
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <HAL_CAR_CTRL_voidStop+0x34>)
 8001080:	f002 fba4 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_CAR_CTRL_voidStop+0x34>)
 800108c:	f002 fb9e 	bl	80037cc <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001096:	4802      	ldr	r0, [pc, #8]	; (80010a0 <HAL_CAR_CTRL_voidStop+0x34>)
 8001098:	f002 fb98 	bl	80037cc <HAL_GPIO_WritePin>

	
	
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40020800 	.word	0x40020800

080010a4 <CLCD_voidSendCommand>:
#include "delay.h"


//SEND COMMAND TO LCD//
static void CLCD_voidSendCommand(LCD_Data Copy_u8Command)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	7138      	strb	r0, [r7, #4]
	//ACTIVATE SENDING COMMAND(RS)//
	 HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_RS_PIN , GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b2:	4822      	ldr	r0, [pc, #136]	; (800113c <CLCD_voidSendCommand+0x98>)
 80010b4:	f002 fb8a 	bl	80037cc <HAL_GPIO_WritePin>

	//ACTIVATE WRITING(RW)//
	 HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_RW_PIN , GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010be:	481f      	ldr	r0, [pc, #124]	; (800113c <CLCD_voidSendCommand+0x98>)
 80010c0:	f002 fb84 	bl	80037cc <HAL_GPIO_WritePin>

	//SEND COMMAND//
	 HAL_GPIO_WritePin(CLCD_D4_PORT , CLCD_D4_PIN , (u8)Copy_u8Command.Pin.D4);
 80010c4:	793b      	ldrb	r3, [r7, #4]
 80010c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d2:	481b      	ldr	r0, [pc, #108]	; (8001140 <CLCD_voidSendCommand+0x9c>)
 80010d4:	f002 fb7a 	bl	80037cc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLCD_D5_PORT , CLCD_D5_PIN , (u8)Copy_u8Command.Pin.D5);
 80010d8:	793b      	ldrb	r3, [r7, #4]
 80010da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e6:	4816      	ldr	r0, [pc, #88]	; (8001140 <CLCD_voidSendCommand+0x9c>)
 80010e8:	f002 fb70 	bl	80037cc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLCD_D6_PORT , CLCD_D6_PIN , (u8)Copy_u8Command.Pin.D6);
 80010ec:	793b      	ldrb	r3, [r7, #4]
 80010ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	461a      	mov	r2, r3
 80010f6:	2140      	movs	r1, #64	; 0x40
 80010f8:	4812      	ldr	r0, [pc, #72]	; (8001144 <CLCD_voidSendCommand+0xa0>)
 80010fa:	f002 fb67 	bl	80037cc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLCD_D7_PORT , CLCD_D7_PIN , (u8)Copy_u8Command.Pin.D7);
 80010fe:	793b      	ldrb	r3, [r7, #4]
 8001100:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <CLCD_voidSendCommand+0xa0>)
 800110c:	f002 fb5e 	bl	80037cc <HAL_GPIO_WritePin>
	//MGPIO_u8SetPortValue(CLCD_DATA_PORT , Copy_u8Command);

	//ENABLE PULSE WITH 2 MS DELAY//
	 HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_E_PIN , GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001116:	4809      	ldr	r0, [pc, #36]	; (800113c <CLCD_voidSendCommand+0x98>)
 8001118:	f002 fb58 	bl	80037cc <HAL_GPIO_WritePin>

	DELAY_MS(2);
 800111c:	2002      	movs	r0, #2
 800111e:	f006 faf7 	bl	8007710 <vTaskDelay>
	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_E_PIN , GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <CLCD_voidSendCommand+0x98>)
 800112a:	f002 fb4f 	bl	80037cc <HAL_GPIO_WritePin>

	DELAY_MS(5);
 800112e:	2005      	movs	r0, #5
 8001130:	f006 faee 	bl	8007710 <vTaskDelay>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40020400 	.word	0x40020400
 8001140:	40020000 	.word	0x40020000
 8001144:	40020800 	.word	0x40020800

08001148 <CLCD_voidSendData>:


//SEND DATA TO LCD//
static void CLCD_voidSendData(LCD_Data Copy_u8Data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	7138      	strb	r0, [r7, #4]

	//ACTIVATE SENDING COMMAND(RS)//
	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_RS_PIN , GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	4822      	ldr	r0, [pc, #136]	; (80011e0 <CLCD_voidSendData+0x98>)
 8001158:	f002 fb38 	bl	80037cc <HAL_GPIO_WritePin>

	//ACTIVATE WRITING(RW)//
	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_RW_PIN , GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001162:	481f      	ldr	r0, [pc, #124]	; (80011e0 <CLCD_voidSendData+0x98>)
 8001164:	f002 fb32 	bl	80037cc <HAL_GPIO_WritePin>

	//SEND COMMAND//
	HAL_GPIO_WritePin(CLCD_D4_PORT , CLCD_D4_PIN , (u8)Copy_u8Data.Pin.D4);
 8001168:	793b      	ldrb	r3, [r7, #4]
 800116a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001176:	481b      	ldr	r0, [pc, #108]	; (80011e4 <CLCD_voidSendData+0x9c>)
 8001178:	f002 fb28 	bl	80037cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLCD_D5_PORT , CLCD_D5_PIN , (u8)Copy_u8Data.Pin.D5);
 800117c:	793b      	ldrb	r3, [r7, #4]
 800117e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118a:	4816      	ldr	r0, [pc, #88]	; (80011e4 <CLCD_voidSendData+0x9c>)
 800118c:	f002 fb1e 	bl	80037cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLCD_D6_PORT , CLCD_D6_PIN , (u8)Copy_u8Data.Pin.D6);
 8001190:	793b      	ldrb	r3, [r7, #4]
 8001192:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	4812      	ldr	r0, [pc, #72]	; (80011e8 <CLCD_voidSendData+0xa0>)
 800119e:	f002 fb15 	bl	80037cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLCD_D7_PORT , CLCD_D7_PIN , (u8)Copy_u8Data.Pin.D7);
 80011a2:	793b      	ldrb	r3, [r7, #4]
 80011a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <CLCD_voidSendData+0xa0>)
 80011b0:	f002 fb0c 	bl	80037cc <HAL_GPIO_WritePin>
	//MGPIO_u8SetPortValue(CLCD_DATA_PORT , Copy_u8Data);

	//ENABLE PULSE WITH 2 MS DELAY//
	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_E_PIN , GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ba:	4809      	ldr	r0, [pc, #36]	; (80011e0 <CLCD_voidSendData+0x98>)
 80011bc:	f002 fb06 	bl	80037cc <HAL_GPIO_WritePin>

	DELAY_MS(2);
 80011c0:	2002      	movs	r0, #2
 80011c2:	f006 faa5 	bl	8007710 <vTaskDelay>

	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_E_PIN , GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <CLCD_voidSendData+0x98>)
 80011ce:	f002 fafd 	bl	80037cc <HAL_GPIO_WritePin>

	DELAY_MS(5);
 80011d2:	2005      	movs	r0, #5
 80011d4:	f006 fa9c 	bl	8007710 <vTaskDelay>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020800 	.word	0x40020800

080011ec <CLCD_voidInit>:


//INTIALIZATION OF LCD//
void CLCD_voidInit(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	LCD_Data DataPins;

	//WAIT FOR MORE THAN 40 MS //
	DELAY_MS(40);
 80011f2:	2028      	movs	r0, #40	; 0x28
 80011f4:	f006 fa8c 	bl	8007710 <vTaskDelay>


	//FUNCTION SET : 1 LINE , 5*8 FONT SIZE//
	//CLCD_voidSendCommand(0b00110000);
	DataPins.Pins = 0b0010;
 80011f8:	793b      	ldrb	r3, [r7, #4]
 80011fa:	2202      	movs	r2, #2
 80011fc:	f362 0303 	bfi	r3, r2, #0, #4
 8001200:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 8001202:	7938      	ldrb	r0, [r7, #4]
 8001204:	f7ff ff4e 	bl	80010a4 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(DataPins);
 8001208:	7938      	ldrb	r0, [r7, #4]
 800120a:	f7ff ff4b 	bl	80010a4 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(DataPins);
 800120e:	7938      	ldrb	r0, [r7, #4]
 8001210:	f7ff ff48 	bl	80010a4 <CLCD_voidSendCommand>

	//DISPLAY ON/OFF CONTROL : DISPLAY ENABLED , CURSOR NOT ENABLED , BLINK CURSOR NOT ENABLED//
	//CLCD_voidSendCommand(0b00001100);
	DataPins.Pins = 0b0000;
 8001214:	793b      	ldrb	r3, [r7, #4]
 8001216:	f36f 0303 	bfc	r3, #0, #4
 800121a:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 800121c:	7938      	ldrb	r0, [r7, #4]
 800121e:	f7ff ff41 	bl	80010a4 <CLCD_voidSendCommand>

	DataPins.Pins = 0b1100;
 8001222:	793b      	ldrb	r3, [r7, #4]
 8001224:	220c      	movs	r2, #12
 8001226:	f362 0303 	bfi	r3, r2, #0, #4
 800122a:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 800122c:	7938      	ldrb	r0, [r7, #4]
 800122e:	f7ff ff39 	bl	80010a4 <CLCD_voidSendCommand>

	//DISPLAY CLEAR//
	//CLCD_voidSendCommand(0b00000001);
	CLCD_voidDisplayClear();
 8001232:	f000 f817 	bl	8001264 <CLCD_voidDisplayClear>

	//ACTIVATE WRITING ON 2 LINES//
	DataPins.Pins = 0b0010;
 8001236:	793b      	ldrb	r3, [r7, #4]
 8001238:	2202      	movs	r2, #2
 800123a:	f362 0303 	bfi	r3, r2, #0, #4
 800123e:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 8001240:	7938      	ldrb	r0, [r7, #4]
 8001242:	f7ff ff2f 	bl	80010a4 <CLCD_voidSendCommand>

	DataPins.Pins = 0b1000;
 8001246:	793b      	ldrb	r3, [r7, #4]
 8001248:	2208      	movs	r2, #8
 800124a:	f362 0303 	bfi	r3, r2, #0, #4
 800124e:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 8001250:	7938      	ldrb	r0, [r7, #4]
 8001252:	f7ff ff27 	bl	80010a4 <CLCD_voidSendCommand>
	//CLCD_voidSendCommand(0X38);

	DELAY_MS(5);
 8001256:	2005      	movs	r0, #5
 8001258:	f006 fa5a 	bl	8007710 <vTaskDelay>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <CLCD_voidDisplayClear>:


void CLCD_voidDisplayClear(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
	LCD_Data DataPins;

	//DISPLAY CLEAR//
	//CLCD_voidSendCommand(0b00000001);
	DataPins.Pins = 0b0000;
 800126a:	793b      	ldrb	r3, [r7, #4]
 800126c:	f36f 0303 	bfc	r3, #0, #4
 8001270:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 8001272:	7938      	ldrb	r0, [r7, #4]
 8001274:	f7ff ff16 	bl	80010a4 <CLCD_voidSendCommand>

	DataPins.Pins = 0b0001;
 8001278:	793b      	ldrb	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f362 0303 	bfi	r3, r2, #0, #4
 8001280:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 8001282:	7938      	ldrb	r0, [r7, #4]
 8001284:	f7ff ff0e 	bl	80010a4 <CLCD_voidSendCommand>

	DELAY_MS(20);
 8001288:	2014      	movs	r0, #20
 800128a:	f006 fa41 	bl	8007710 <vTaskDelay>

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <CLCD_voidSendString>:



//SEND STRING DATA TO LCD//
void CLCD_voidSendString(const char *Copy_pcString)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
	u8 Local_u8Counter = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
	LCD_Data DataPins;

	//PRINT EACH CHAR UNTIL IT REACH NULL CHAR//
	while(Copy_pcString[Local_u8Counter] != '\0')
 80012a2:	e023      	b.n	80012ec <CLCD_voidSendString+0x56>
	{
		//SEND CHAR BY CHAR TO THE END OF THE STRING//
		DataPins.Pins = Copy_pcString[Local_u8Counter] >> 4;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f003 030f 	and.w	r3, r3, #15
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	7b3b      	ldrb	r3, [r7, #12]
 80012b8:	f362 0303 	bfi	r3, r2, #0, #4
 80012bc:	733b      	strb	r3, [r7, #12]
		CLCD_voidSendData(DataPins);
 80012be:	7b38      	ldrb	r0, [r7, #12]
 80012c0:	f7ff ff42 	bl	8001148 <CLCD_voidSendData>

		DataPins.Pins = Copy_pcString[Local_u8Counter];
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	7b3b      	ldrb	r3, [r7, #12]
 80012d4:	f362 0303 	bfi	r3, r2, #0, #4
 80012d8:	733b      	strb	r3, [r7, #12]
		CLCD_voidSendData(DataPins);
 80012da:	7b38      	ldrb	r0, [r7, #12]
 80012dc:	f7ff ff34 	bl	8001148 <CLCD_voidSendData>

		Local_u8Counter++;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	3301      	adds	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]

		DELAY_MS(10);
 80012e6:	200a      	movs	r0, #10
 80012e8:	f006 fa12 	bl	8007710 <vTaskDelay>
	while(Copy_pcString[Local_u8Counter] != '\0')
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1d5      	bne.n	80012a4 <CLCD_voidSendString+0xe>
	}
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <CLCD_voidGoToXY>:



//GO TO SPECIFIC POSITION//
void CLCD_voidGoToXY(u8 Copy_u8Xpos , u8 Copy_u8Ypos)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	460a      	mov	r2, r1
 800130c:	71fb      	strb	r3, [r7, #7]
 800130e:	4613      	mov	r3, r2
 8001310:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8Address;
	LCD_Data DataPins;

	//LOCATION IN THE FRIST LINE //
	if (Copy_u8Xpos == 0)
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8Ypos;
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e005      	b.n	800132a <CLCD_voidGoToXY+0x28>
	}

	//LOCATION IN THE SECOND LINE //
	else if(Copy_u8Xpos == 1)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d102      	bne.n	800132a <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = Copy_u8Ypos + 0X40;
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	3340      	adds	r3, #64	; 0x40
 8001328:	73fb      	strb	r3, [r7, #15]
	}

	Local_u8Address |= 0X80;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001330:	73fb      	strb	r3, [r7, #15]

	DataPins.Pins = Local_u8Address >> 4;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	b2da      	uxtb	r2, r3
 800133e:	7b3b      	ldrb	r3, [r7, #12]
 8001340:	f362 0303 	bfi	r3, r2, #0, #4
 8001344:	733b      	strb	r3, [r7, #12]
	CLCD_voidSendCommand(DataPins);
 8001346:	7b38      	ldrb	r0, [r7, #12]
 8001348:	f7ff feac 	bl	80010a4 <CLCD_voidSendCommand>

	DataPins.Pins = Local_u8Address;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	b2da      	uxtb	r2, r3
 8001354:	7b3b      	ldrb	r3, [r7, #12]
 8001356:	f362 0303 	bfi	r3, r2, #0, #4
 800135a:	733b      	strb	r3, [r7, #12]
	CLCD_voidSendCommand(DataPins);
 800135c:	7b38      	ldrb	r0, [r7, #12]
 800135e:	f7ff fea1 	bl	80010a4 <CLCD_voidSendCommand>

	//SET DDRAM ADDRESS COMMAND //
	//CLCD_voidSendCommand(Local_u8Address|0X80);

	DELAY_MS(5);
 8001362:	2005      	movs	r0, #5
 8001364:	f006 f9d4 	bl	8007710 <vTaskDelay>

}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <Build_Msg>:
	return Dec;
}

/*msg should be array of 32 chars*/
void Build_Msg(char *msg, double lat, double longt, char NS, char EW,
		double direction) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b090      	sub	sp, #64	; 0x40
 8001374:	af00      	add	r7, sp, #0
 8001376:	61f8      	str	r0, [r7, #28]
 8001378:	ed87 0b04 	vstr	d0, [r7, #16]
 800137c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001380:	460b      	mov	r3, r1
 8001382:	ed87 2b00 	vstr	d2, [r7]
 8001386:	76fb      	strb	r3, [r7, #27]
 8001388:	4613      	mov	r3, r2
 800138a:	76bb      	strb	r3, [r7, #26]

	char direction_string[8] = { 0 };
 800138c:	2300      	movs	r3, #0
 800138e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001390:	2300      	movs	r3, #0
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
	char longtiude[11] = { 0 };
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	f8c3 2003 	str.w	r2, [r3, #3]
	char lattiude[11] = { 0 };
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	f8c3 2003 	str.w	r2, [r3, #3]
	//lat = lat * 100;
	//longt = longt *100;

	// from double to string
	sprintf(lattiude, "%.6f", lat);
 80013b4:	f107 0020 	add.w	r0, r7, #32
 80013b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013bc:	4957      	ldr	r1, [pc, #348]	; (800151c <Build_Msg+0x1ac>)
 80013be:	f008 fb17 	bl	80099f0 <siprintf>
	sprintf(longtiude, "%.6f", longt);
 80013c2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80013c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013ca:	4954      	ldr	r1, [pc, #336]	; (800151c <Build_Msg+0x1ac>)
 80013cc:	f008 fb10 	bl	80099f0 <siprintf>
	sprintf(direction_string, "%.3f", direction);
 80013d0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80013d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013d8:	4951      	ldr	r1, [pc, #324]	; (8001520 <Build_Msg+0x1b0>)
 80013da:	f008 fb09 	bl	80099f0 <siprintf>

	msg[0] = '#';
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	2223      	movs	r2, #35	; 0x23
 80013e2:	701a      	strb	r2, [r3, #0]
	msg[1] = lattiude[0];
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3301      	adds	r3, #1
 80013e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013ec:	701a      	strb	r2, [r3, #0]
	msg[2] = lattiude[1];
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3302      	adds	r3, #2
 80013f2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80013f6:	701a      	strb	r2, [r3, #0]
	msg[3] = lattiude[2];
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	3303      	adds	r3, #3
 80013fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001400:	701a      	strb	r2, [r3, #0]
	msg[4] = lattiude[3];
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800140a:	701a      	strb	r2, [r3, #0]
	msg[5] = lattiude[4];
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	3305      	adds	r3, #5
 8001410:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001414:	701a      	strb	r2, [r3, #0]
	msg[6] = lattiude[5];
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3306      	adds	r3, #6
 800141a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800141e:	701a      	strb	r2, [r3, #0]
	msg[7] = lattiude[6];
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	3307      	adds	r3, #7
 8001424:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001428:	701a      	strb	r2, [r3, #0]
	msg[8] = lattiude[7];
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3308      	adds	r3, #8
 800142e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001432:	701a      	strb	r2, [r3, #0]
	msg[9] = lattiude[8];
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	3309      	adds	r3, #9
 8001438:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800143c:	701a      	strb	r2, [r3, #0]
	msg[10] = lattiude[9];
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	330a      	adds	r3, #10
 8001442:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001446:	701a      	strb	r2, [r3, #0]

	msg[11] = NS;
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	330b      	adds	r3, #11
 800144c:	7efa      	ldrb	r2, [r7, #27]
 800144e:	701a      	strb	r2, [r3, #0]

	msg[12] = longtiude[0];
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	330c      	adds	r3, #12
 8001454:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001458:	701a      	strb	r2, [r3, #0]
	msg[13] = longtiude[1];
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	330d      	adds	r3, #13
 800145e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001462:	701a      	strb	r2, [r3, #0]
	msg[14] = longtiude[2];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	330e      	adds	r3, #14
 8001468:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800146c:	701a      	strb	r2, [r3, #0]
	msg[15] = longtiude[3];
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	330f      	adds	r3, #15
 8001472:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001476:	701a      	strb	r2, [r3, #0]
	msg[16] = longtiude[4];
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	3310      	adds	r3, #16
 800147c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001480:	701a      	strb	r2, [r3, #0]
	msg[17] = longtiude[5];
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3311      	adds	r3, #17
 8001486:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800148a:	701a      	strb	r2, [r3, #0]
	msg[18] = longtiude[6];
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	3312      	adds	r3, #18
 8001490:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001494:	701a      	strb	r2, [r3, #0]
	msg[19] = longtiude[7];
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3313      	adds	r3, #19
 800149a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800149e:	701a      	strb	r2, [r3, #0]
	msg[20] = longtiude[8];
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	3314      	adds	r3, #20
 80014a4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80014a8:	701a      	strb	r2, [r3, #0]
	msg[21] = longtiude[9];
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3315      	adds	r3, #21
 80014ae:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80014b2:	701a      	strb	r2, [r3, #0]
	msg[22] = EW;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	3316      	adds	r3, #22
 80014b8:	7eba      	ldrb	r2, [r7, #26]
 80014ba:	701a      	strb	r2, [r3, #0]
	msg[23] = direction_string[0];
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	3317      	adds	r3, #23
 80014c0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80014c4:	701a      	strb	r2, [r3, #0]
	msg[24] = direction_string[1];
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3318      	adds	r3, #24
 80014ca:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80014ce:	701a      	strb	r2, [r3, #0]
	msg[25] = direction_string[2];
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	3319      	adds	r3, #25
 80014d4:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80014d8:	701a      	strb	r2, [r3, #0]
	msg[26] = direction_string[3];
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	331a      	adds	r3, #26
 80014de:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80014e2:	701a      	strb	r2, [r3, #0]
	msg[27] = direction_string[4];
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	331b      	adds	r3, #27
 80014e8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80014ec:	701a      	strb	r2, [r3, #0]
	msg[28] = direction_string[5];
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	331c      	adds	r3, #28
 80014f2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80014f6:	701a      	strb	r2, [r3, #0]
	msg[29] = direction_string[6];
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	331d      	adds	r3, #29
 80014fc:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001500:	701a      	strb	r2, [r3, #0]
	msg[30] = '#';
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	331e      	adds	r3, #30
 8001506:	2223      	movs	r2, #35	; 0x23
 8001508:	701a      	strb	r2, [r3, #0]
	msg[31] = '\0';
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	331f      	adds	r3, #31
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
	/*3003.95734N3116.64210E# is the message
	 * first 10 chars is lattiude N
	 * then 10 chars for longtiude then E 
	 * And # specifies the end of message */

}
 8001512:	bf00      	nop
 8001514:	3740      	adds	r7, #64	; 0x40
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	0800bba8 	.word	0x0800bba8
 8001520:	0800bbb0 	.word	0x0800bbb0

08001524 <Task_sendMessage>:
extern receiving_state current_screen_frame;
extern uint8_t HeaderFrame[7];
extern uint8_t DataFrame[20];
extern uint8_t arrested_car[20];

void Task_sendMessage(void *parameters) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(send_message_semaphore, 0);
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <Task_sendMessage+0x8c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f005 fca8 	bl	8006e88 <xQueueSemaphoreTake>
	vTaskSuspend(NULL);
 8001538:	2000      	movs	r0, #0
 800153a:	f006 f91d 	bl	8007778 <vTaskSuspend>
	while (1) {
		//Construct the message
		taskENTER_CRITICAL();
 800153e:	f007 f899 	bl	8008674 <vPortEnterCritical>
		Build_Msg((char*) tx_buffer, my_car_latitude, my_car_longitude,
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <Task_sendMessage+0x90>)
 8001544:	ed93 7b00 	vldr	d7, [r3]
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <Task_sendMessage+0x94>)
 800154a:	ed93 6b00 	vldr	d6, [r3]
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <Task_sendMessage+0x98>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <Task_sendMessage+0x9c>)
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	491b      	ldr	r1, [pc, #108]	; (80015c4 <Task_sendMessage+0xa0>)
 8001558:	ed91 5b00 	vldr	d5, [r1]
 800155c:	eeb0 2a45 	vmov.f32	s4, s10
 8001560:	eef0 2a65 	vmov.f32	s5, s11
 8001564:	4619      	mov	r1, r3
 8001566:	eeb0 1a46 	vmov.f32	s2, s12
 800156a:	eef0 1a66 	vmov.f32	s3, s13
 800156e:	eeb0 0a47 	vmov.f32	s0, s14
 8001572:	eef0 0a67 	vmov.f32	s1, s15
 8001576:	4814      	ldr	r0, [pc, #80]	; (80015c8 <Task_sendMessage+0xa4>)
 8001578:	f7ff fefa 	bl	8001370 <Build_Msg>
				north_south, east_west, car_direction);
		taskEXIT_CRITICAL();
 800157c:	f007 f8aa 	bl	80086d4 <vPortExitCritical>

		HAL_UART_Transmit_DMA(&huart1, tx_buffer, 32);
 8001580:	2220      	movs	r2, #32
 8001582:	4911      	ldr	r1, [pc, #68]	; (80015c8 <Task_sendMessage+0xa4>)
 8001584:	4811      	ldr	r0, [pc, #68]	; (80015cc <Task_sendMessage+0xa8>)
 8001586:	f004 fa37 	bl	80059f8 <HAL_UART_Transmit_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <Task_sendMessage+0xac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <Task_sendMessage+0xac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0208 	bic.w	r2, r2, #8
 8001598:	601a      	str	r2, [r3, #0]
		vTaskSuspend(NULL);
 800159a:	2000      	movs	r0, #0
 800159c:	f006 f8ec 	bl	8007778 <vTaskSuspend>
		xSemaphoreTake(send_message_semaphore, portMAX_DELAY);
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <Task_sendMessage+0x8c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	4618      	mov	r0, r3
 80015aa:	f005 fc6d 	bl	8006e88 <xQueueSemaphoreTake>
		taskENTER_CRITICAL();
 80015ae:	e7c6      	b.n	800153e <Task_sendMessage+0x1a>
 80015b0:	200007e0 	.word	0x200007e0
 80015b4:	200007f0 	.word	0x200007f0
 80015b8:	200007f8 	.word	0x200007f8
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000001 	.word	0x20000001
 80015c4:	20000800 	.word	0x20000800
 80015c8:	200007c0 	.word	0x200007c0
 80015cc:	20000618 	.word	0x20000618
 80015d0:	200006a0 	.word	0x200006a0

080015d4 <Task_speedCalculation>:
		HAL_UART_Receive_DMA(&huart1, rx_buffer, 32);
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
	}
}

void Task_speedCalculation(void *parameters) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

	float current_speed = 0;
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
	float previous_speed = 0;
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

	float speed_difference = 0;
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]

	TickType_t xLastWakeTime;

	taskENTER_CRITICAL();
 80015ee:	f007 f841 	bl	8008674 <vPortEnterCritical>

	slit_count = 0;
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <Task_speedCalculation+0xc0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	801a      	strh	r2, [r3, #0]
	xLastWakeTime = xTaskGetTickCount();
 80015f8:	f006 fa64 	bl	8007ac4 <xTaskGetTickCount>
 80015fc:	4603      	mov	r3, r0
 80015fe:	60bb      	str	r3, [r7, #8]

	taskEXIT_CRITICAL();
 8001600:	f007 f868 	bl	80086d4 <vPortExitCritical>

	while (1) {

		vTaskDelayUntil(&xLastWakeTime, 500 / portTICK_RATE_MS);
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800160c:	4618      	mov	r0, r3
 800160e:	f006 f801 	bl	8007614 <vTaskDelayUntil>

		taskENTER_CRITICAL();
 8001612:	f007 f82f 	bl	8008674 <vPortEnterCritical>

		/* (1.6328 / 2) = 0.8164 */
		//current_speed = (uint16_t) (0.8164 * slit_count); //In Cm/Sec
		current_speed = (slit_count / 20.0) * 120.0; //RPM
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <Task_speedCalculation+0xc0>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ffa1 	bl	8000564 <__aeabi_i2d>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <Task_speedCalculation+0xc4>)
 8001628:	f7ff f930 	bl	800088c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <Task_speedCalculation+0xc8>)
 800163a:	f7fe fffd 	bl	8000638 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff facf 	bl	8000be8 <__aeabi_d2f>
 800164a:	4603      	mov	r3, r0
 800164c:	613b      	str	r3, [r7, #16]
		slit_count = 0;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <Task_speedCalculation+0xc0>)
 8001650:	2200      	movs	r2, #0
 8001652:	801a      	strh	r2, [r3, #0]

		taskEXIT_CRITICAL();
 8001654:	f007 f83e 	bl	80086d4 <vPortExitCritical>

		speed_difference = current_speed - previous_speed;
 8001658:	ed97 7a04 	vldr	s14, [r7, #16]
 800165c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001664:	edc7 7a03 	vstr	s15, [r7, #12]

		previous_speed = current_speed;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	617b      	str	r3, [r7, #20]

		if (speed_difference < SS_VELOCITY_THRESHOLD) {
 800166c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001670:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80016a0 <Task_speedCalculation+0xcc>
 8001674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167c:	d508      	bpl.n	8001690 <Task_speedCalculation+0xbc>
			//Transmit UART Message using DMA
			//taskENTER_CRITICAL();
			//vTaskResume(send_message_task_handle);
			CLCD_voidDisplayClear();
 800167e:	f7ff fdf1 	bl	8001264 <CLCD_voidDisplayClear>
			CLCD_voidGoToXY(0, 0);
 8001682:	2100      	movs	r1, #0
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fe3c 	bl	8001302 <CLCD_voidGoToXY>
			CLCD_voidSendString("Sending...");
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <Task_speedCalculation+0xd0>)
 800168c:	f7ff fe03 	bl	8001296 <CLCD_voidSendString>
		vTaskDelayUntil(&xLastWakeTime, 500 / portTICK_RATE_MS);
 8001690:	e7b8      	b.n	8001604 <Task_speedCalculation+0x30>
 8001692:	bf00      	nop
 8001694:	200007ec 	.word	0x200007ec
 8001698:	40340000 	.word	0x40340000
 800169c:	405e0000 	.word	0x405e0000
 80016a0:	c47a0000 	.word	0xc47a0000
 80016a4:	0800bbd4 	.word	0x0800bbd4

080016a8 <Task_controlCar>:
		taskEXIT_CRITICAL();
	}

}

void Task_controlCar(void *parameters) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

	uint8_t Local_u8Received_data = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]

	TickType_t xLastWakeTime;

	xLastWakeTime = xTaskGetTickCount();
 80016b4:	f006 fa06 	bl	8007ac4 <xTaskGetTickCount>
 80016b8:	4603      	mov	r3, r0
 80016ba:	60bb      	str	r3, [r7, #8]

	while (1) {
		Local_u8Received_data = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]

		HAL_UART_Receive_IT(&huart4, &Local_u8Received_data, 1);
 80016c0:	f107 030f 	add.w	r3, r7, #15
 80016c4:	2201      	movs	r2, #1
 80016c6:	4619      	mov	r1, r3
 80016c8:	4829      	ldr	r0, [pc, #164]	; (8001770 <Task_controlCar+0xc8>)
 80016ca:	f004 f964 	bl	8005996 <HAL_UART_Receive_IT>

		vTaskDelayUntil(&xLastWakeTime, 100 / portTICK_RATE_MS);
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	2164      	movs	r1, #100	; 0x64
 80016d4:	4618      	mov	r0, r3
 80016d6:	f005 ff9d 	bl	8007614 <vTaskDelayUntil>

		if (Local_u8Received_data != 'f' && Local_u8Received_data != 'b'
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	2b66      	cmp	r3, #102	; 0x66
 80016de:	d021      	beq.n	8001724 <Task_controlCar+0x7c>
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b62      	cmp	r3, #98	; 0x62
 80016e4:	d01e      	beq.n	8001724 <Task_controlCar+0x7c>
				&& Local_u8Received_data != 'l' && Local_u8Received_data != 'r'
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	2b6c      	cmp	r3, #108	; 0x6c
 80016ea:	d01b      	beq.n	8001724 <Task_controlCar+0x7c>
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	2b72      	cmp	r3, #114	; 0x72
 80016f0:	d018      	beq.n	8001724 <Task_controlCar+0x7c>
				&& Local_u8Received_data != 's') {
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	2b73      	cmp	r3, #115	; 0x73
 80016f6:	d015      	beq.n	8001724 <Task_controlCar+0x7c>
			/* Decrease The Speed Gradually */
			if ((TIM3->CCR1) >= 10) {
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <Task_controlCar+0xcc>)
 80016fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	d90a      	bls.n	8001716 <Task_controlCar+0x6e>
				TIM3->CCR1 -= 1;
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <Task_controlCar+0xcc>)
 8001702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001704:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <Task_controlCar+0xcc>)
 8001706:	3b01      	subs	r3, #1
 8001708:	6353      	str	r3, [r2, #52]	; 0x34
				TIM12->CCR1 -= 1;
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <Task_controlCar+0xd0>)
 800170c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170e:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <Task_controlCar+0xd0>)
 8001710:	3b01      	subs	r3, #1
 8001712:	6353      	str	r3, [r2, #52]	; 0x34
			if ((TIM3->CCR1) >= 10) {
 8001714:	e02b      	b.n	800176e <Task_controlCar+0xc6>
			}
			/* Stop The RC Car */
			else {
				TIM3->CCR1 = 0;
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <Task_controlCar+0xcc>)
 8001718:	2200      	movs	r2, #0
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM12->CCR1 = 0;
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <Task_controlCar+0xd0>)
 800171e:	2200      	movs	r2, #0
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
			if ((TIM3->CCR1) >= 10) {
 8001722:	e024      	b.n	800176e <Task_controlCar+0xc6>
			}
		} else {

			/* Return To The Normal Speed */
			TIM3->CCR1 = 75;
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <Task_controlCar+0xcc>)
 8001726:	224b      	movs	r2, #75	; 0x4b
 8001728:	635a      	str	r2, [r3, #52]	; 0x34
			TIM12->CCR1 = 75;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <Task_controlCar+0xd0>)
 800172c:	224b      	movs	r2, #75	; 0x4b
 800172e:	635a      	str	r2, [r3, #52]	; 0x34

			/* Direction Change According To The Received Direction */
			if (Local_u8Received_data == 'f')
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	2b66      	cmp	r3, #102	; 0x66
 8001734:	d102      	bne.n	800173c <Task_controlCar+0x94>
				HAL_CAR_CTRL_voidForward();
 8001736:	f7ff fc29 	bl	8000f8c <HAL_CAR_CTRL_voidForward>
 800173a:	e7bf      	b.n	80016bc <Task_controlCar+0x14>
			else if (Local_u8Received_data == 'b')
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b62      	cmp	r3, #98	; 0x62
 8001740:	d102      	bne.n	8001748 <Task_controlCar+0xa0>
				HAL_CAR_CTRL_voidBackward();
 8001742:	f7ff fc3f 	bl	8000fc4 <HAL_CAR_CTRL_voidBackward>
 8001746:	e7b9      	b.n	80016bc <Task_controlCar+0x14>
			else if (Local_u8Received_data == 'l')
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b6c      	cmp	r3, #108	; 0x6c
 800174c:	d102      	bne.n	8001754 <Task_controlCar+0xac>
				HAL_CAR_CTRL_voidRight();
 800174e:	f7ff fc55 	bl	8000ffc <HAL_CAR_CTRL_voidRight>
 8001752:	e7b3      	b.n	80016bc <Task_controlCar+0x14>
			else if (Local_u8Received_data == 'r')
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	2b72      	cmp	r3, #114	; 0x72
 8001758:	d102      	bne.n	8001760 <Task_controlCar+0xb8>
				HAL_CAR_CTRL_voidLeft();
 800175a:	f7ff fc6b 	bl	8001034 <HAL_CAR_CTRL_voidLeft>
 800175e:	e7ad      	b.n	80016bc <Task_controlCar+0x14>
			else if (Local_u8Received_data == 's') {
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	2b73      	cmp	r3, #115	; 0x73
 8001764:	d1aa      	bne.n	80016bc <Task_controlCar+0x14>
				HAL_CAR_CTRL_voidStop();
 8001766:	f7ff fc81 	bl	800106c <HAL_CAR_CTRL_voidStop>
				CLCD_voidDisplayClear();
 800176a:	f7ff fd7b 	bl	8001264 <CLCD_voidDisplayClear>
		Local_u8Received_data = 0;
 800176e:	e7a5      	b.n	80016bc <Task_controlCar+0x14>
 8001770:	20000590 	.word	0x20000590
 8001774:	40000400 	.word	0x40000400
 8001778:	40001800 	.word	0x40001800

0800177c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800178c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <vApplicationGetIdleTaskMemory+0x30>)
 8001792:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000204 	.word	0x20000204
 80017ac:	200002b8 	.word	0x200002b8

080017b0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0c      	blt.n	80017dc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4907      	ldr	r1, [pc, #28]	; (80017e8 <__NVIC_ClearPendingIRQ+0x38>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	3360      	adds	r3, #96	; 0x60
 80017d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100

080017ec <HAL_UART_RxCpltCallback>:
extern uint8_t icFlag;
extern uint32_t edge1Time;
extern uint32_t edge2Time;
extern uint8_t edgeNumber;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]

	if (huart->Instance == UART5) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a10      	ldr	r2, [pc, #64]	; (8001840 <HAL_UART_RxCpltCallback+0x54>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01a      	beq.n	8001838 <HAL_UART_RxCpltCallback+0x4c>

		xSemaphoreGiveFromISR(touchScreen_semaphore, &xHigherPriorityTaskWoken);

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
#endif
	} else if (huart->Instance == USART1) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <HAL_UART_RxCpltCallback+0x58>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d115      	bne.n	8001838 <HAL_UART_RxCpltCallback+0x4c>
		NVIC_ClearPendingIRQ(USART1_IRQn);
 800180c:	2025      	movs	r0, #37	; 0x25
 800180e:	f7ff ffcf 	bl	80017b0 <__NVIC_ClearPendingIRQ>

		xSemaphoreGiveFromISR(receive_message_semaphore,
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_UART_RxCpltCallback+0x5c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f107 020c 	add.w	r2, r7, #12
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f005 faa6 	bl	8006d6e <xQueueGiveFromISR>
				&xHigherPriorityTaskWoken);

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d007      	beq.n	8001838 <HAL_UART_RxCpltCallback+0x4c>
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_UART_RxCpltCallback+0x60>)
 800182a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	f3bf 8f4f 	dsb	sy
 8001834:	f3bf 8f6f 	isb	sy
	}
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40005000 	.word	0x40005000
 8001844:	40011000 	.word	0x40011000
 8001848:	200007e4 	.word	0x200007e4
 800184c:	e000ed04 	.word	0xe000ed04

08001850 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_UART_TxCpltCallback+0x34>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d10c      	bne.n	800187c <HAL_UART_TxCpltCallback+0x2c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
		NVIC_ClearPendingIRQ(USART1_IRQn);
 8001866:	2025      	movs	r0, #37	; 0x25
 8001868:	f7ff ffa2 	bl	80017b0 <__NVIC_ClearPendingIRQ>
		xSemaphoreGiveFromISR(send_message_semaphore,
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_UART_TxCpltCallback+0x38>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f107 020c 	add.w	r2, r7, #12
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f005 fa79 	bl	8006d6e <xQueueGiveFromISR>
				&xHigherPriorityTaskWoken);
	}
}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40011000 	.word	0x40011000
 8001888:	200007e0 	.word	0x200007e0

0800188c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d106      	bne.n	80018aa <HAL_GPIO_EXTI_Callback+0x1e>
		slit_count++;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x2c>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	3301      	adds	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80018a8:	801a      	strh	r2, [r3, #0]
	}
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200007ec 	.word	0x200007ec

080018bc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	if (edgeNumber == 0) {
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_TIM_IC_CaptureCallback+0x50>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <HAL_TIM_IC_CaptureCallback+0x26>
		edge1Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80018cc:	2100      	movs	r1, #0
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f003 fade 	bl	8004e90 <HAL_TIM_ReadCapturedValue>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <HAL_TIM_IC_CaptureCallback+0x54>)
 80018d8:	6013      	str	r3, [r2, #0]
		edgeNumber = 1;
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_TIM_IC_CaptureCallback+0x50>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
	} else if (edgeNumber == 1) {
		edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		edgeNumber = 0;
		icFlag = 1;
	}
}
 80018e0:	e010      	b.n	8001904 <HAL_TIM_IC_CaptureCallback+0x48>
	} else if (edgeNumber == 1) {
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_TIM_IC_CaptureCallback+0x50>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d10c      	bne.n	8001904 <HAL_TIM_IC_CaptureCallback+0x48>
		edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80018ea:	2100      	movs	r1, #0
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f003 facf 	bl	8004e90 <HAL_TIM_ReadCapturedValue>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_TIM_IC_CaptureCallback+0x58>)
 80018f6:	6013      	str	r3, [r2, #0]
		edgeNumber = 0;
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <HAL_TIM_IC_CaptureCallback+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
		icFlag = 1;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000809 	.word	0x20000809
 8001910:	2000080c 	.word	0x2000080c
 8001914:	20000810 	.word	0x20000810
 8001918:	20000808 	.word	0x20000808

0800191c <Task_initialization>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Task_initialization(void *parameters) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af02      	add	r7, sp, #8
 8001922:	6078      	str	r0, [r7, #4]

	send_message_semaphore = xSemaphoreCreateBinary();
 8001924:	2203      	movs	r2, #3
 8001926:	2100      	movs	r1, #0
 8001928:	2001      	movs	r0, #1
 800192a:	f005 f9c7 	bl	8006cbc <xQueueGenericCreate>
 800192e:	4603      	mov	r3, r0
 8001930:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <Task_initialization+0x9c>)
 8001932:	6013      	str	r3, [r2, #0]
	receive_message_semaphore = xSemaphoreCreateBinary();
 8001934:	2203      	movs	r2, #3
 8001936:	2100      	movs	r1, #0
 8001938:	2001      	movs	r0, #1
 800193a:	f005 f9bf 	bl	8006cbc <xQueueGenericCreate>
 800193e:	4603      	mov	r3, r0
 8001940:	4a1e      	ldr	r2, [pc, #120]	; (80019bc <Task_initialization+0xa0>)
 8001942:	6013      	str	r3, [r2, #0]
	//touchScreen_semaphore = xSemaphoreCreateBinary();
	//car_control_semaphore = xSemaphoreCreateBinary();

	CLCD_voidInit();
 8001944:	f7ff fc52 	bl	80011ec <CLCD_voidInit>
	CLCD_voidGoToXY(0, 0);
 8001948:	2100      	movs	r1, #0
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff fcd9 	bl	8001302 <CLCD_voidGoToXY>
	CLCD_voidSendString("WELCOME TO V2X");
 8001950:	481b      	ldr	r0, [pc, #108]	; (80019c0 <Task_initialization+0xa4>)
 8001952:	f7ff fca0 	bl	8001296 <CLCD_voidSendString>
	CLCD_voidGoToXY(1, 2);
 8001956:	2102      	movs	r1, #2
 8001958:	2001      	movs	r0, #1
 800195a:	f7ff fcd2 	bl	8001302 <CLCD_voidGoToXY>
	CLCD_voidSendString("GP: 2023");
 800195e:	4819      	ldr	r0, [pc, #100]	; (80019c4 <Task_initialization+0xa8>)
 8001960:	f7ff fc99 	bl	8001296 <CLCD_voidSendString>

	vTaskDelay(3000 / portTICK_RATE_MS);
 8001964:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001968:	f005 fed2 	bl	8007710 <vTaskDelay>
	NULL);

	xTaskCreate(&Task_directionOfCar, "Car_direction", 240, NULL, 5,
	NULL);
#endif
	xTaskCreate(&Task_speedCalculation, "Speed_Calculation", 240, NULL, 3,
 800196c:	2300      	movs	r3, #0
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2303      	movs	r3, #3
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2300      	movs	r3, #0
 8001976:	22f0      	movs	r2, #240	; 0xf0
 8001978:	4913      	ldr	r1, [pc, #76]	; (80019c8 <Task_initialization+0xac>)
 800197a:	4814      	ldr	r0, [pc, #80]	; (80019cc <Task_initialization+0xb0>)
 800197c:	f005 fc6d 	bl	800725a <xTaskCreate>
	NULL);

	xTaskCreate(&Task_sendMessage, "Message_Sending", 240, NULL, 6,
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <Task_initialization+0xb4>)
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	2306      	movs	r3, #6
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	22f0      	movs	r2, #240	; 0xf0
 800198c:	4911      	ldr	r1, [pc, #68]	; (80019d4 <Task_initialization+0xb8>)
 800198e:	4812      	ldr	r0, [pc, #72]	; (80019d8 <Task_initialization+0xbc>)
 8001990:	f005 fc63 	bl	800725a <xTaskCreate>
			&send_message_task_handle);

	xTaskCreate(&Task_controlCar, "Car_Control", 240, NULL, 7,
 8001994:	2300      	movs	r3, #0
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	2307      	movs	r3, #7
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2300      	movs	r3, #0
 800199e:	22f0      	movs	r2, #240	; 0xf0
 80019a0:	490e      	ldr	r1, [pc, #56]	; (80019dc <Task_initialization+0xc0>)
 80019a2:	480f      	ldr	r0, [pc, #60]	; (80019e0 <Task_initialization+0xc4>)
 80019a4:	f005 fc59 	bl	800725a <xTaskCreate>
#if 0
	xTaskCreate(&Task_touchScreen, "Touch_Screen", 240, NULL, 1,
	NULL);
#endif

	vTaskDelete(NULL);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f005 fda3 	bl	80074f4 <vTaskDelete>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200007e0 	.word	0x200007e0
 80019bc:	200007e4 	.word	0x200007e4
 80019c0:	0800bbe8 	.word	0x0800bbe8
 80019c4:	0800bbf8 	.word	0x0800bbf8
 80019c8:	0800bc04 	.word	0x0800bc04
 80019cc:	080015d5 	.word	0x080015d5
 80019d0:	200007e8 	.word	0x200007e8
 80019d4:	0800bc18 	.word	0x0800bc18
 80019d8:	08001525 	.word	0x08001525
 80019dc:	0800bc28 	.word	0x0800bc28
 80019e0:	080016a9 	.word	0x080016a9

080019e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019ea:	f000 ffd5 	bl	8002998 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019ee:	f000 f82f 	bl	8001a50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019f2:	f000 facd 	bl	8001f90 <MX_GPIO_Init>
	MX_DMA_Init();
 80019f6:	f000 fa8d 	bl	8001f14 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80019fa:	f000 fa37 	bl	8001e6c <MX_USART1_UART_Init>
	MX_TIM3_Init();
 80019fe:	f000 f899 	bl	8001b34 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001a02:	f000 f90d 	bl	8001c20 <MX_TIM4_Init>
	MX_TIM12_Init();
 8001a06:	f000 f97b 	bl	8001d00 <MX_TIM12_Init>
	MX_UART4_Init();
 8001a0a:	f000 f9db 	bl	8001dc4 <MX_UART4_Init>
	MX_UART5_Init();
 8001a0e:	f000 fa03 	bl	8001e18 <MX_UART5_Init>
	MX_USART3_UART_Init();
 8001a12:	f000 fa55 	bl	8001ec0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a16:	2100      	movs	r1, #0
 8001a18:	4809      	ldr	r0, [pc, #36]	; (8001a40 <main+0x5c>)
 8001a1a:	f002 fde9 	bl	80045f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4808      	ldr	r0, [pc, #32]	; (8001a44 <main+0x60>)
 8001a22:	f002 fde5 	bl	80045f0 <HAL_TIM_PWM_Start>
	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(&Task_initialization, "Initialization", 240, NULL, 8,
 8001a26:	2300      	movs	r3, #0
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	22f0      	movs	r2, #240	; 0xf0
 8001a32:	4905      	ldr	r1, [pc, #20]	; (8001a48 <main+0x64>)
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <main+0x68>)
 8001a36:	f005 fc10 	bl	800725a <xTaskCreate>
	NULL);
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	vTaskStartScheduler();
 8001a3a:	f005 ff2f 	bl	800789c <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001a3e:	e7fe      	b.n	8001a3e <main+0x5a>
 8001a40:	200004b8 	.word	0x200004b8
 8001a44:	20000548 	.word	0x20000548
 8001a48:	0800bc34 	.word	0x0800bc34
 8001a4c:	0800191d 	.word	0x0800191d

08001a50 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b094      	sub	sp, #80	; 0x50
 8001a54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	2234      	movs	r2, #52	; 0x34
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f007 fa45 	bl	8008eee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <SystemClock_Config+0xdc>)
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	4a2b      	ldr	r2, [pc, #172]	; (8001b2c <SystemClock_Config+0xdc>)
 8001a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a82:	6413      	str	r3, [r2, #64]	; 0x40
 8001a84:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <SystemClock_Config+0xdc>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a90:	2300      	movs	r3, #0
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <SystemClock_Config+0xe0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a25      	ldr	r2, [pc, #148]	; (8001b30 <SystemClock_Config+0xe0>)
 8001a9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <SystemClock_Config+0xe0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab4:	2310      	movs	r3, #16
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001abc:	2300      	movs	r3, #0
 8001abe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001ac4:	23b4      	movs	r3, #180	; 0xb4
 8001ac6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001acc:	2302      	movs	r3, #2
 8001ace:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 fa43 	bl	8003f64 <HAL_RCC_OscConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x98>
		Error_Handler();
 8001ae4:	f000 faf8 	bl	80020d8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001ae8:	f001 fea2 	bl	8003830 <HAL_PWREx_EnableOverDrive>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0xa6>
		Error_Handler();
 8001af2:	f000 faf1 	bl	80020d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001af6:	230f      	movs	r3, #15
 8001af8:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001afa:	2302      	movs	r3, #2
 8001afc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b06:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	2105      	movs	r1, #5
 8001b14:	4618      	mov	r0, r3
 8001b16:	f001 fedb 	bl	80038d0 <HAL_RCC_ClockConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <SystemClock_Config+0xd4>
		Error_Handler();
 8001b20:	f000 fada 	bl	80020d8 <Error_Handler>
	}
}
 8001b24:	bf00      	nop
 8001b26:	3750      	adds	r7, #80	; 0x50
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40007000 	.word	0x40007000

08001b34 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08e      	sub	sp, #56	; 0x38
 8001b38:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	615a      	str	r2, [r3, #20]
 8001b62:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001b64:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <MX_TIM3_Init+0xe4>)
 8001b66:	4a2d      	ldr	r2, [pc, #180]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001b68:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 29;
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <MX_TIM3_Init+0xe4>)
 8001b6c:	221d      	movs	r2, #29
 8001b6e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <MX_TIM3_Init+0xe4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 99;
 8001b76:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <MX_TIM3_Init+0xe4>)
 8001b78:	2263      	movs	r2, #99	; 0x63
 8001b7a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <MX_TIM3_Init+0xe4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <MX_TIM3_Init+0xe4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001b88:	4823      	ldr	r0, [pc, #140]	; (8001c18 <MX_TIM3_Init+0xe4>)
 8001b8a:	f002 fc89 	bl	80044a0 <HAL_TIM_Base_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM3_Init+0x64>
		Error_Handler();
 8001b94:	f000 faa0 	bl	80020d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	481c      	ldr	r0, [pc, #112]	; (8001c18 <MX_TIM3_Init+0xe4>)
 8001ba6:	f003 f8ab 	bl	8004d00 <HAL_TIM_ConfigClockSource>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM3_Init+0x80>
		Error_Handler();
 8001bb0:	f000 fa92 	bl	80020d8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001bb4:	4818      	ldr	r0, [pc, #96]	; (8001c18 <MX_TIM3_Init+0xe4>)
 8001bb6:	f002 fcc2 	bl	800453e <HAL_TIM_PWM_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0x90>
		Error_Handler();
 8001bc0:	f000 fa8a 	bl	80020d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001bcc:	f107 0320 	add.w	r3, r7, #32
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4811      	ldr	r0, [pc, #68]	; (8001c18 <MX_TIM3_Init+0xe4>)
 8001bd4:	f003 fe02 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM3_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8001bde:	f000 fa7b 	bl	80020d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be2:	2360      	movs	r3, #96	; 0x60
 8001be4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4807      	ldr	r0, [pc, #28]	; (8001c18 <MX_TIM3_Init+0xe4>)
 8001bfa:	f002 ffbf 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8001c04:	f000 fa68 	bl	80020d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001c08:	4803      	ldr	r0, [pc, #12]	; (8001c18 <MX_TIM3_Init+0xe4>)
 8001c0a:	f000 fb13 	bl	8002234 <HAL_TIM_MspPostInit>

}
 8001c0e:	bf00      	nop
 8001c10:	3738      	adds	r7, #56	; 0x38
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200004b8 	.word	0x200004b8
 8001c1c:	40000400 	.word	0x40000400

08001c20 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001c26:	f107 0318 	add.w	r3, r7, #24
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <MX_TIM4_Init+0xd8>)
 8001c4c:	4a2b      	ldr	r2, [pc, #172]	; (8001cfc <MX_TIM4_Init+0xdc>)
 8001c4e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 15;
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <MX_TIM4_Init+0xd8>)
 8001c52:	220f      	movs	r2, #15
 8001c54:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <MX_TIM4_Init+0xd8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001c5c:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <MX_TIM4_Init+0xd8>)
 8001c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c62:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <MX_TIM4_Init+0xd8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6a:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <MX_TIM4_Init+0xd8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001c70:	4821      	ldr	r0, [pc, #132]	; (8001cf8 <MX_TIM4_Init+0xd8>)
 8001c72:	f002 fc15 	bl	80044a0 <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM4_Init+0x60>
		Error_Handler();
 8001c7c:	f000 fa2c 	bl	80020d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c84:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001c86:	f107 0318 	add.w	r3, r7, #24
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	481a      	ldr	r0, [pc, #104]	; (8001cf8 <MX_TIM4_Init+0xd8>)
 8001c8e:	f003 f837 	bl	8004d00 <HAL_TIM_ConfigClockSource>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM4_Init+0x7c>
		Error_Handler();
 8001c98:	f000 fa1e 	bl	80020d8 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 8001c9c:	4816      	ldr	r0, [pc, #88]	; (8001cf8 <MX_TIM4_Init+0xd8>)
 8001c9e:	f002 fd6f 	bl	8004780 <HAL_TIM_IC_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM4_Init+0x8c>
		Error_Handler();
 8001ca8:	f000 fa16 	bl	80020d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480f      	ldr	r0, [pc, #60]	; (8001cf8 <MX_TIM4_Init+0xd8>)
 8001cbc:	f003 fd8e 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM4_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 8001cc6:	f000 fa07 	bl	80020d8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001cca:	230a      	movs	r3, #10
 8001ccc:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 4;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_TIM4_Init+0xd8>)
 8001ce2:	f002 feae 	bl	8004a42 <HAL_TIM_IC_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM4_Init+0xd0>
		Error_Handler();
 8001cec:	f000 f9f4 	bl	80020d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	3728      	adds	r7, #40	; 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000500 	.word	0x20000500
 8001cfc:	40000800 	.word	0x40000800

08001d00 <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001d06:	f107 0320 	add.w	r3, r7, #32
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]
 8001d22:	615a      	str	r2, [r3, #20]
 8001d24:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <MX_TIM12_Init+0xbc>)
 8001d28:	4a25      	ldr	r2, [pc, #148]	; (8001dc0 <MX_TIM12_Init+0xc0>)
 8001d2a:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 29;
 8001d2c:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <MX_TIM12_Init+0xbc>)
 8001d2e:	221d      	movs	r2, #29
 8001d30:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <MX_TIM12_Init+0xbc>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 99;
 8001d38:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <MX_TIM12_Init+0xbc>)
 8001d3a:	2263      	movs	r2, #99	; 0x63
 8001d3c:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <MX_TIM12_Init+0xbc>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <MX_TIM12_Init+0xbc>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 8001d4a:	481c      	ldr	r0, [pc, #112]	; (8001dbc <MX_TIM12_Init+0xbc>)
 8001d4c:	f002 fba8 	bl	80044a0 <HAL_TIM_Base_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM12_Init+0x5a>
		Error_Handler();
 8001d56:	f000 f9bf 	bl	80020d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5e:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 8001d60:	f107 0320 	add.w	r3, r7, #32
 8001d64:	4619      	mov	r1, r3
 8001d66:	4815      	ldr	r0, [pc, #84]	; (8001dbc <MX_TIM12_Init+0xbc>)
 8001d68:	f002 ffca 	bl	8004d00 <HAL_TIM_ConfigClockSource>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM12_Init+0x76>
		Error_Handler();
 8001d72:	f000 f9b1 	bl	80020d8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8001d76:	4811      	ldr	r0, [pc, #68]	; (8001dbc <MX_TIM12_Init+0xbc>)
 8001d78:	f002 fbe1 	bl	800453e <HAL_TIM_PWM_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM12_Init+0x86>
		Error_Handler();
 8001d82:	f000 f9a9 	bl	80020d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d86:	2360      	movs	r3, #96	; 0x60
 8001d88:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1)
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4807      	ldr	r0, [pc, #28]	; (8001dbc <MX_TIM12_Init+0xbc>)
 8001d9e:	f002 feed 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM12_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8001da8:	f000 f996 	bl	80020d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <MX_TIM12_Init+0xbc>)
 8001dae:	f000 fa41 	bl	8002234 <HAL_TIM_MspPostInit>

}
 8001db2:	bf00      	nop
 8001db4:	3730      	adds	r7, #48	; 0x30
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000548 	.word	0x20000548
 8001dc0:	40001800 	.word	0x40001800

08001dc4 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_UART4_Init+0x4c>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <MX_UART4_Init+0x50>)
 8001dcc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <MX_UART4_Init+0x4c>)
 8001dd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dd4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_UART4_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_UART4_Init+0x4c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <MX_UART4_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_UART4_Init+0x4c>)
 8001dea:	220c      	movs	r2, #12
 8001dec:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <MX_UART4_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_UART4_Init+0x4c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001dfa:	4805      	ldr	r0, [pc, #20]	; (8001e10 <MX_UART4_Init+0x4c>)
 8001dfc:	f003 fd7e 	bl	80058fc <HAL_UART_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_UART4_Init+0x46>
		Error_Handler();
 8001e06:	f000 f967 	bl	80020d8 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000590 	.word	0x20000590
 8001e14:	40004c00 	.word	0x40004c00

08001e18 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_UART5_Init+0x4c>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <MX_UART5_Init+0x50>)
 8001e20:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <MX_UART5_Init+0x4c>)
 8001e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e28:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <MX_UART5_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <MX_UART5_Init+0x4c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <MX_UART5_Init+0x4c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <MX_UART5_Init+0x4c>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <MX_UART5_Init+0x4c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <MX_UART5_Init+0x4c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <MX_UART5_Init+0x4c>)
 8001e50:	f003 fd54 	bl	80058fc <HAL_UART_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_UART5_Init+0x46>
		Error_Handler();
 8001e5a:	f000 f93d 	bl	80020d8 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200005d4 	.word	0x200005d4
 8001e68:	40005000 	.word	0x40005000

08001e6c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <MX_USART1_UART_Init+0x50>)
 8001e74:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e7c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	f003 fd2a 	bl	80058fc <HAL_UART_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001eae:	f000 f913 	bl	80020d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000618 	.word	0x20000618
 8001ebc:	40011000 	.word	0x40011000

08001ec0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <MX_USART3_UART_Init+0x4c>)
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <MX_USART3_UART_Init+0x50>)
 8001ec8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <MX_USART3_UART_Init+0x4c>)
 8001ecc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ed0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <MX_USART3_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_USART3_UART_Init+0x4c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <MX_USART3_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_USART3_UART_Init+0x4c>)
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <MX_USART3_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_USART3_UART_Init+0x4c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <MX_USART3_UART_Init+0x4c>)
 8001ef8:	f003 fd00 	bl	80058fc <HAL_UART_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001f02:	f000 f8e9 	bl	80020d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000065c 	.word	0x2000065c
 8001f10:	40004800 	.word	0x40004800

08001f14 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <MX_DMA_Init+0x78>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a1a      	ldr	r2, [pc, #104]	; (8001f8c <MX_DMA_Init+0x78>)
 8001f24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <MX_DMA_Init+0x78>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <MX_DMA_Init+0x78>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <MX_DMA_Init+0x78>)
 8001f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_DMA_Init+0x78>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2105      	movs	r1, #5
 8001f56:	200c      	movs	r0, #12
 8001f58:	f000 fe6b 	bl	8002c32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001f5c:	200c      	movs	r0, #12
 8001f5e:	f000 fe84 	bl	8002c6a <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2105      	movs	r1, #5
 8001f66:	203a      	movs	r0, #58	; 0x3a
 8001f68:	f000 fe63 	bl	8002c32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f6c:	203a      	movs	r0, #58	; 0x3a
 8001f6e:	f000 fe7c 	bl	8002c6a <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2105      	movs	r1, #5
 8001f76:	2046      	movs	r0, #70	; 0x46
 8001f78:	f000 fe5b 	bl	8002c32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001f7c:	2046      	movs	r0, #70	; 0x46
 8001f7e:	f000 fe74 	bl	8002c6a <HAL_NVIC_EnableIRQ>

}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <MX_GPIO_Init+0x138>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a46      	ldr	r2, [pc, #280]	; (80020c8 <MX_GPIO_Init+0x138>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <MX_GPIO_Init+0x138>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <MX_GPIO_Init+0x138>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a3f      	ldr	r2, [pc, #252]	; (80020c8 <MX_GPIO_Init+0x138>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <MX_GPIO_Init+0x138>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <MX_GPIO_Init+0x138>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a38      	ldr	r2, [pc, #224]	; (80020c8 <MX_GPIO_Init+0x138>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <MX_GPIO_Init+0x138>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <MX_GPIO_Init+0x138>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a31      	ldr	r2, [pc, #196]	; (80020c8 <MX_GPIO_Init+0x138>)
 8002004:	f043 0308 	orr.w	r3, r3, #8
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <MX_GPIO_Init+0x138>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8002016:	2200      	movs	r2, #0
 8002018:	f24c 31cc 	movw	r1, #50124	; 0xc3cc
 800201c:	482b      	ldr	r0, [pc, #172]	; (80020cc <MX_GPIO_Init+0x13c>)
 800201e:	f001 fbd5 	bl	80037cc <HAL_GPIO_WritePin>
			GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6
					| GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_12,
 8002022:	2200      	movs	r2, #0
 8002024:	f641 0104 	movw	r1, #6148	; 0x1804
 8002028:	4829      	ldr	r0, [pc, #164]	; (80020d0 <MX_GPIO_Init+0x140>)
 800202a:	f001 fbcf 	bl	80037cc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800202e:	2200      	movs	r2, #0
 8002030:	f24b 01b8 	movw	r1, #45240	; 0xb0b8
 8002034:	4827      	ldr	r0, [pc, #156]	; (80020d4 <MX_GPIO_Init+0x144>)
 8002036:	f001 fbc9 	bl	80037cc <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15 | GPIO_PIN_3 | GPIO_PIN_4
					| GPIO_PIN_5 | GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pins : PC14 PC15 PC2 PC3
	 PC6 PC7 PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_2 | GPIO_PIN_3
 800203a:	f24c 33cc 	movw	r3, #50124	; 0xc3cc
 800203e:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	481e      	ldr	r0, [pc, #120]	; (80020cc <MX_GPIO_Init+0x13c>)
 8002054:	f001 fa26 	bl	80034a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002058:	2301      	movs	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800205c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002060:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4817      	ldr	r0, [pc, #92]	; (80020cc <MX_GPIO_Init+0x13c>)
 800206e:	f001 fa19 	bl	80034a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_12;
 8002072:	f641 0304 	movw	r3, #6148	; 0x1804
 8002076:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002078:	2301      	movs	r3, #1
 800207a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	4811      	ldr	r0, [pc, #68]	; (80020d0 <MX_GPIO_Init+0x140>)
 800208c:	f001 fa0a 	bl	80034a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB15 PB3
	 PB4 PB5 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15 | GPIO_PIN_3
 8002090:	f24b 03b8 	movw	r3, #45240	; 0xb0b8
 8002094:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002096:	2301      	movs	r3, #1
 8002098:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a2:	f107 0314 	add.w	r3, r7, #20
 80020a6:	4619      	mov	r1, r3
 80020a8:	480a      	ldr	r0, [pc, #40]	; (80020d4 <MX_GPIO_Init+0x144>)
 80020aa:	f001 f9fb 	bl	80034a4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2105      	movs	r1, #5
 80020b2:	2006      	movs	r0, #6
 80020b4:	f000 fdbd 	bl	8002c32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020b8:	2006      	movs	r0, #6
 80020ba:	f000 fdd6 	bl	8002c6a <HAL_NVIC_EnableIRQ>

}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40020400 	.word	0x40020400

080020d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020dc:	b672      	cpsid	i
}
 80020de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80020e0:	e7fe      	b.n	80020e0 <Error_Handler+0x8>
	...

080020e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_MspInit+0x54>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	4a11      	ldr	r2, [pc, #68]	; (8002138 <HAL_MspInit+0x54>)
 80020f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f8:	6453      	str	r3, [r2, #68]	; 0x44
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_MspInit+0x54>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_MspInit+0x54>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_MspInit+0x54>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_MspInit+0x54>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	210f      	movs	r1, #15
 8002126:	f06f 0001 	mvn.w	r0, #1
 800212a:	f000 fd82 	bl	8002c32 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800

0800213c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	; 0x30
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a31      	ldr	r2, [pc, #196]	; (8002220 <HAL_TIM_Base_MspInit+0xe4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10e      	bne.n	800217c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_TIM_Base_MspInit+0xe8>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a2f      	ldr	r2, [pc, #188]	; (8002224 <HAL_TIM_Base_MspInit+0xe8>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_TIM_Base_MspInit+0xe8>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800217a:	e04c      	b.n	8002216 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a29      	ldr	r2, [pc, #164]	; (8002228 <HAL_TIM_Base_MspInit+0xec>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d134      	bne.n	80021f0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_TIM_Base_MspInit+0xe8>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a25      	ldr	r2, [pc, #148]	; (8002224 <HAL_TIM_Base_MspInit+0xe8>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b23      	ldr	r3, [pc, #140]	; (8002224 <HAL_TIM_Base_MspInit+0xe8>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <HAL_TIM_Base_MspInit+0xe8>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a1e      	ldr	r2, [pc, #120]	; (8002224 <HAL_TIM_Base_MspInit+0xe8>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_TIM_Base_MspInit+0xe8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021be:	2340      	movs	r3, #64	; 0x40
 80021c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021ce:	2302      	movs	r3, #2
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	f107 031c 	add.w	r3, r7, #28
 80021d6:	4619      	mov	r1, r3
 80021d8:	4814      	ldr	r0, [pc, #80]	; (800222c <HAL_TIM_Base_MspInit+0xf0>)
 80021da:	f001 f963 	bl	80034a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2105      	movs	r1, #5
 80021e2:	201e      	movs	r0, #30
 80021e4:	f000 fd25 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021e8:	201e      	movs	r0, #30
 80021ea:	f000 fd3e 	bl	8002c6a <HAL_NVIC_EnableIRQ>
}
 80021ee:	e012      	b.n	8002216 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM12)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <HAL_TIM_Base_MspInit+0xf4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10d      	bne.n	8002216 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_TIM_Base_MspInit+0xe8>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_TIM_Base_MspInit+0xe8>)
 8002204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_TIM_Base_MspInit+0xe8>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
}
 8002216:	bf00      	nop
 8002218:	3730      	adds	r7, #48	; 0x30
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40000400 	.word	0x40000400
 8002224:	40023800 	.word	0x40023800
 8002228:	40000800 	.word	0x40000800
 800222c:	40020400 	.word	0x40020400
 8002230:	40001800 	.word	0x40001800

08002234 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <HAL_TIM_MspPostInit+0xb0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d11e      	bne.n	8002294 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <HAL_TIM_MspPostInit+0xb4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a22      	ldr	r2, [pc, #136]	; (80022e8 <HAL_TIM_MspPostInit+0xb4>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <HAL_TIM_MspPostInit+0xb4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002272:	2340      	movs	r3, #64	; 0x40
 8002274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002282:	2302      	movs	r3, #2
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4817      	ldr	r0, [pc, #92]	; (80022ec <HAL_TIM_MspPostInit+0xb8>)
 800228e:	f001 f909 	bl	80034a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002292:	e023      	b.n	80022dc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <HAL_TIM_MspPostInit+0xbc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d11e      	bne.n	80022dc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_TIM_MspPostInit+0xb4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_TIM_MspPostInit+0xb4>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_TIM_MspPostInit+0xb4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80022cc:	2309      	movs	r3, #9
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4619      	mov	r1, r3
 80022d6:	4807      	ldr	r0, [pc, #28]	; (80022f4 <HAL_TIM_MspPostInit+0xc0>)
 80022d8:	f001 f8e4 	bl	80034a4 <HAL_GPIO_Init>
}
 80022dc:	bf00      	nop
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40001800 	.word	0x40001800
 80022f4:	40020400 	.word	0x40020400

080022f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b092      	sub	sp, #72	; 0x48
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a94      	ldr	r2, [pc, #592]	; (8002568 <HAL_UART_MspInit+0x270>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d135      	bne.n	8002386 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
 800231e:	4b93      	ldr	r3, [pc, #588]	; (800256c <HAL_UART_MspInit+0x274>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a92      	ldr	r2, [pc, #584]	; (800256c <HAL_UART_MspInit+0x274>)
 8002324:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b90      	ldr	r3, [pc, #576]	; (800256c <HAL_UART_MspInit+0x274>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
 8002334:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233a:	4b8c      	ldr	r3, [pc, #560]	; (800256c <HAL_UART_MspInit+0x274>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a8b      	ldr	r2, [pc, #556]	; (800256c <HAL_UART_MspInit+0x274>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b89      	ldr	r3, [pc, #548]	; (800256c <HAL_UART_MspInit+0x274>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002352:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002364:	2308      	movs	r3, #8
 8002366:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800236c:	4619      	mov	r1, r3
 800236e:	4880      	ldr	r0, [pc, #512]	; (8002570 <HAL_UART_MspInit+0x278>)
 8002370:	f001 f898 	bl	80034a4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2105      	movs	r1, #5
 8002378:	2034      	movs	r0, #52	; 0x34
 800237a:	f000 fc5a 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800237e:	2034      	movs	r0, #52	; 0x34
 8002380:	f000 fc73 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002384:	e185      	b.n	8002692 <HAL_UART_MspInit+0x39a>
  else if(huart->Instance==UART5)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7a      	ldr	r2, [pc, #488]	; (8002574 <HAL_UART_MspInit+0x27c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d153      	bne.n	8002438 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002390:	2300      	movs	r3, #0
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
 8002394:	4b75      	ldr	r3, [pc, #468]	; (800256c <HAL_UART_MspInit+0x274>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	4a74      	ldr	r2, [pc, #464]	; (800256c <HAL_UART_MspInit+0x274>)
 800239a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800239e:	6413      	str	r3, [r2, #64]	; 0x40
 80023a0:	4b72      	ldr	r3, [pc, #456]	; (800256c <HAL_UART_MspInit+0x274>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	4b6e      	ldr	r3, [pc, #440]	; (800256c <HAL_UART_MspInit+0x274>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	4a6d      	ldr	r2, [pc, #436]	; (800256c <HAL_UART_MspInit+0x274>)
 80023b6:	f043 0304 	orr.w	r3, r3, #4
 80023ba:	6313      	str	r3, [r2, #48]	; 0x30
 80023bc:	4b6b      	ldr	r3, [pc, #428]	; (800256c <HAL_UART_MspInit+0x274>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c8:	2300      	movs	r3, #0
 80023ca:	623b      	str	r3, [r7, #32]
 80023cc:	4b67      	ldr	r3, [pc, #412]	; (800256c <HAL_UART_MspInit+0x274>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4a66      	ldr	r2, [pc, #408]	; (800256c <HAL_UART_MspInit+0x274>)
 80023d2:	f043 0308 	orr.w	r3, r3, #8
 80023d6:	6313      	str	r3, [r2, #48]	; 0x30
 80023d8:	4b64      	ldr	r3, [pc, #400]	; (800256c <HAL_UART_MspInit+0x274>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80023f6:	2308      	movs	r3, #8
 80023f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023fe:	4619      	mov	r1, r3
 8002400:	485b      	ldr	r0, [pc, #364]	; (8002570 <HAL_UART_MspInit+0x278>)
 8002402:	f001 f84f 	bl	80034a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002406:	2304      	movs	r3, #4
 8002408:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002416:	2308      	movs	r3, #8
 8002418:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800241a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800241e:	4619      	mov	r1, r3
 8002420:	4855      	ldr	r0, [pc, #340]	; (8002578 <HAL_UART_MspInit+0x280>)
 8002422:	f001 f83f 	bl	80034a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2105      	movs	r1, #5
 800242a:	2035      	movs	r0, #53	; 0x35
 800242c:	f000 fc01 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002430:	2035      	movs	r0, #53	; 0x35
 8002432:	f000 fc1a 	bl	8002c6a <HAL_NVIC_EnableIRQ>
}
 8002436:	e12c      	b.n	8002692 <HAL_UART_MspInit+0x39a>
  else if(huart->Instance==USART1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a4f      	ldr	r2, [pc, #316]	; (800257c <HAL_UART_MspInit+0x284>)
 800243e:	4293      	cmp	r3, r2
 8002440:	f040 80a8 	bne.w	8002594 <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	4b48      	ldr	r3, [pc, #288]	; (800256c <HAL_UART_MspInit+0x274>)
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	4a47      	ldr	r2, [pc, #284]	; (800256c <HAL_UART_MspInit+0x274>)
 800244e:	f043 0310 	orr.w	r3, r3, #16
 8002452:	6453      	str	r3, [r2, #68]	; 0x44
 8002454:	4b45      	ldr	r3, [pc, #276]	; (800256c <HAL_UART_MspInit+0x274>)
 8002456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	4b41      	ldr	r3, [pc, #260]	; (800256c <HAL_UART_MspInit+0x274>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4a40      	ldr	r2, [pc, #256]	; (800256c <HAL_UART_MspInit+0x274>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6313      	str	r3, [r2, #48]	; 0x30
 8002470:	4b3e      	ldr	r3, [pc, #248]	; (800256c <HAL_UART_MspInit+0x274>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800247c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248a:	2303      	movs	r3, #3
 800248c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800248e:	2307      	movs	r3, #7
 8002490:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002492:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002496:	4619      	mov	r1, r3
 8002498:	4839      	ldr	r0, [pc, #228]	; (8002580 <HAL_UART_MspInit+0x288>)
 800249a:	f001 f803 	bl	80034a4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800249e:	4b39      	ldr	r3, [pc, #228]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024a0:	4a39      	ldr	r2, [pc, #228]	; (8002588 <HAL_UART_MspInit+0x290>)
 80024a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80024a4:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ac:	4b35      	ldr	r3, [pc, #212]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b2:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c0:	4b30      	ldr	r3, [pc, #192]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024d2:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024d8:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024de:	4829      	ldr	r0, [pc, #164]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024e0:	f000 fbde 	bl	8002ca0 <HAL_DMA_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 80024ea:	f7ff fdf5 	bl	80020d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a24      	ldr	r2, [pc, #144]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024f2:	639a      	str	r2, [r3, #56]	; 0x38
 80024f4:	4a23      	ldr	r2, [pc, #140]	; (8002584 <HAL_UART_MspInit+0x28c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_UART_MspInit+0x294>)
 80024fc:	4a24      	ldr	r2, [pc, #144]	; (8002590 <HAL_UART_MspInit+0x298>)
 80024fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_UART_MspInit+0x294>)
 8002502:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002506:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002508:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_UART_MspInit+0x294>)
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800250e:	4b1f      	ldr	r3, [pc, #124]	; (800258c <HAL_UART_MspInit+0x294>)
 8002510:	2200      	movs	r2, #0
 8002512:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_UART_MspInit+0x294>)
 8002516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800251a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_UART_MspInit+0x294>)
 800251e:	2200      	movs	r2, #0
 8002520:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_UART_MspInit+0x294>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002528:	4b18      	ldr	r3, [pc, #96]	; (800258c <HAL_UART_MspInit+0x294>)
 800252a:	2200      	movs	r2, #0
 800252c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <HAL_UART_MspInit+0x294>)
 8002530:	2200      	movs	r2, #0
 8002532:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_UART_MspInit+0x294>)
 8002536:	2200      	movs	r2, #0
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800253a:	4814      	ldr	r0, [pc, #80]	; (800258c <HAL_UART_MspInit+0x294>)
 800253c:	f000 fbb0 	bl	8002ca0 <HAL_DMA_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_UART_MspInit+0x252>
      Error_Handler();
 8002546:	f7ff fdc7 	bl	80020d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a0f      	ldr	r2, [pc, #60]	; (800258c <HAL_UART_MspInit+0x294>)
 800254e:	635a      	str	r2, [r3, #52]	; 0x34
 8002550:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_UART_MspInit+0x294>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2105      	movs	r1, #5
 800255a:	2025      	movs	r0, #37	; 0x25
 800255c:	f000 fb69 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002560:	2025      	movs	r0, #37	; 0x25
 8002562:	f000 fb82 	bl	8002c6a <HAL_NVIC_EnableIRQ>
}
 8002566:	e094      	b.n	8002692 <HAL_UART_MspInit+0x39a>
 8002568:	40004c00 	.word	0x40004c00
 800256c:	40023800 	.word	0x40023800
 8002570:	40020800 	.word	0x40020800
 8002574:	40005000 	.word	0x40005000
 8002578:	40020c00 	.word	0x40020c00
 800257c:	40011000 	.word	0x40011000
 8002580:	40020000 	.word	0x40020000
 8002584:	200006a0 	.word	0x200006a0
 8002588:	40026440 	.word	0x40026440
 800258c:	20000700 	.word	0x20000700
 8002590:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART3)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a40      	ldr	r2, [pc, #256]	; (800269c <HAL_UART_MspInit+0x3a4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d179      	bne.n	8002692 <HAL_UART_MspInit+0x39a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <HAL_UART_MspInit+0x3a8>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a3e      	ldr	r2, [pc, #248]	; (80026a0 <HAL_UART_MspInit+0x3a8>)
 80025a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b3c      	ldr	r3, [pc, #240]	; (80026a0 <HAL_UART_MspInit+0x3a8>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <HAL_UART_MspInit+0x3a8>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a37      	ldr	r2, [pc, #220]	; (80026a0 <HAL_UART_MspInit+0x3a8>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <HAL_UART_MspInit+0x3a8>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <HAL_UART_MspInit+0x3a8>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a30      	ldr	r2, [pc, #192]	; (80026a0 <HAL_UART_MspInit+0x3a8>)
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <HAL_UART_MspInit+0x3a8>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80025f2:	2320      	movs	r3, #32
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002602:	2307      	movs	r3, #7
 8002604:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002606:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800260a:	4619      	mov	r1, r3
 800260c:	4825      	ldr	r0, [pc, #148]	; (80026a4 <HAL_UART_MspInit+0x3ac>)
 800260e:	f000 ff49 	bl	80034a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002620:	2303      	movs	r3, #3
 8002622:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002624:	2307      	movs	r3, #7
 8002626:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002628:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800262c:	4619      	mov	r1, r3
 800262e:	481e      	ldr	r0, [pc, #120]	; (80026a8 <HAL_UART_MspInit+0x3b0>)
 8002630:	f000 ff38 	bl	80034a4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 8002636:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <HAL_UART_MspInit+0x3b8>)
 8002638:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 800263c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002640:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002642:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002648:	4b18      	ldr	r3, [pc, #96]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 8002650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002654:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 8002658:	2200      	movs	r2, #0
 800265a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 8002664:	2200      	movs	r2, #0
 8002666:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 800266a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800266e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002670:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 8002672:	2200      	movs	r2, #0
 8002674:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002676:	480d      	ldr	r0, [pc, #52]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 8002678:	f000 fb12 	bl	8002ca0 <HAL_DMA_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_UART_MspInit+0x38e>
      Error_Handler();
 8002682:	f7ff fd29 	bl	80020d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a08      	ldr	r2, [pc, #32]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 800268a:	639a      	str	r2, [r3, #56]	; 0x38
 800268c:	4a07      	ldr	r2, [pc, #28]	; (80026ac <HAL_UART_MspInit+0x3b4>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002692:	bf00      	nop
 8002694:	3748      	adds	r7, #72	; 0x48
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40004800 	.word	0x40004800
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020800 	.word	0x40020800
 80026a8:	40020400 	.word	0x40020400
 80026ac:	20000760 	.word	0x20000760
 80026b0:	40026028 	.word	0x40026028

080026b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <NMI_Handler+0x4>

080026ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <HardFault_Handler+0x4>

080026c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <MemManage_Handler+0x4>

080026c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <BusFault_Handler+0x4>

080026cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <UsageFault_Handler+0x4>

080026d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e4:	f000 f9aa 	bl	8002a3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80026e8:	f005 fcfa 	bl	80080e0 <xTaskGetSchedulerState>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80026f2:	f006 f851 	bl	8008798 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}

080026fa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80026fe:	2001      	movs	r0, #1
 8002700:	f001 f87e 	bl	8003800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}

08002708 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <DMA1_Stream1_IRQHandler+0x10>)
 800270e:	f000 fc5f 	bl	8002fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000760 	.word	0x20000760

0800271c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <TIM4_IRQHandler+0x10>)
 8002722:	f002 f886 	bl	8004832 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000500 	.word	0x20000500

08002730 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <USART1_IRQHandler+0x10>)
 8002736:	f003 f9dd 	bl	8005af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000618 	.word	0x20000618

08002744 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <UART4_IRQHandler+0x10>)
 800274a:	f003 f9d3 	bl	8005af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000590 	.word	0x20000590

08002758 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <UART5_IRQHandler+0x10>)
 800275e:	f003 f9c9 	bl	8005af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200005d4 	.word	0x200005d4

0800276c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <DMA2_Stream2_IRQHandler+0x10>)
 8002772:	f000 fc2d 	bl	8002fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200006a0 	.word	0x200006a0

08002780 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <DMA2_Stream7_IRQHandler+0x10>)
 8002786:	f000 fc23 	bl	8002fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000700 	.word	0x20000700

08002794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
	return 1;
 8002798:	2301      	movs	r3, #1
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <_kill>:

int _kill(int pid, int sig)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027ae:	f006 fa6d 	bl	8008c8c <__errno>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2216      	movs	r2, #22
 80027b6:	601a      	str	r2, [r3, #0]
	return -1;
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <_exit>:

void _exit (int status)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ffe7 	bl	80027a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027d6:	e7fe      	b.n	80027d6 <_exit+0x12>

080027d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	e00a      	b.n	8002800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027ea:	f3af 8000 	nop.w
 80027ee:	4601      	mov	r1, r0
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	60ba      	str	r2, [r7, #8]
 80027f6:	b2ca      	uxtb	r2, r1
 80027f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3301      	adds	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	dbf0      	blt.n	80027ea <_read+0x12>
	}

return len;
 8002808:	687b      	ldr	r3, [r7, #4]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e009      	b.n	8002838 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	60ba      	str	r2, [r7, #8]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3301      	adds	r3, #1
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	429a      	cmp	r2, r3
 800283e:	dbf1      	blt.n	8002824 <_write+0x12>
	}
	return len;
 8002840:	687b      	ldr	r3, [r7, #4]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <_close>:

int _close(int file)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
	return -1;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002872:	605a      	str	r2, [r3, #4]
	return 0;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <_isatty>:

int _isatty(int file)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
	return 1;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
	return 0;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <_sbrk+0x5c>)
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <_sbrk+0x60>)
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <_sbrk+0x64>)
 80028d2:	4a12      	ldr	r2, [pc, #72]	; (800291c <_sbrk+0x68>)
 80028d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <_sbrk+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d207      	bcs.n	80028f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e4:	f006 f9d2 	bl	8008c8c <__errno>
 80028e8:	4603      	mov	r3, r0
 80028ea:	220c      	movs	r2, #12
 80028ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	e009      	b.n	8002908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <_sbrk+0x64>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <_sbrk+0x64>)
 8002904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20020000 	.word	0x20020000
 8002914:	00000400 	.word	0x00000400
 8002918:	20000814 	.word	0x20000814
 800291c:	20004598 	.word	0x20004598

08002920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <SystemInit+0x20>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <SystemInit+0x20>)
 800292c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800297c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002948:	480d      	ldr	r0, [pc, #52]	; (8002980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800294a:	490e      	ldr	r1, [pc, #56]	; (8002984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800294c:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002950:	e002      	b.n	8002958 <LoopCopyDataInit>

08002952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002956:	3304      	adds	r3, #4

08002958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800295c:	d3f9      	bcc.n	8002952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295e:	4a0b      	ldr	r2, [pc, #44]	; (800298c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002960:	4c0b      	ldr	r4, [pc, #44]	; (8002990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002964:	e001      	b.n	800296a <LoopFillZerobss>

08002966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002968:	3204      	adds	r2, #4

0800296a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800296c:	d3fb      	bcc.n	8002966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800296e:	f7ff ffd7 	bl	8002920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002972:	f006 fa87 	bl	8008e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002976:	f7ff f835 	bl	80019e4 <main>
  bx  lr    
 800297a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800297c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002984:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002988:	0800c05c 	.word	0x0800c05c
  ldr r2, =_sbss
 800298c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002990:	20004594 	.word	0x20004594

08002994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002994:	e7fe      	b.n	8002994 <ADC_IRQHandler>
	...

08002998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <HAL_Init+0x40>)
 80029a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_Init+0x40>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <HAL_Init+0x40>)
 80029ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HAL_Init+0x40>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c0:	2003      	movs	r0, #3
 80029c2:	f000 f92b 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c6:	200f      	movs	r0, #15
 80029c8:	f000 f808 	bl	80029dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029cc:	f7ff fb8a 	bl	80020e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00

080029dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_InitTick+0x54>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_InitTick+0x58>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f943 	bl	8002c86 <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0f      	cmp	r3, #15
 8002a0e:	d80a      	bhi.n	8002a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	2200      	movs	r2, #0
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f000 f90b 	bl	8002c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4a06      	ldr	r2, [pc, #24]	; (8002a38 <HAL_InitTick+0x5c>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000004 	.word	0x20000004
 8002a34:	2000000c 	.word	0x2000000c
 8002a38:	20000008 	.word	0x20000008

08002a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_IncTick+0x20>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_IncTick+0x24>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <HAL_IncTick+0x24>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	2000000c 	.word	0x2000000c
 8002a60:	20000818 	.word	0x20000818

08002a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_GetTick+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000818 	.word	0x20000818

08002a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60d3      	str	r3, [r2, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <__NVIC_GetPriorityGrouping+0x18>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 0307 	and.w	r3, r3, #7
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	db0b      	blt.n	8002b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	f003 021f 	and.w	r2, r3, #31
 8002af8:	4907      	ldr	r1, [pc, #28]	; (8002b18 <__NVIC_EnableIRQ+0x38>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2001      	movs	r0, #1
 8002b02:	fa00 f202 	lsl.w	r2, r0, r2
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000e100 	.word	0xe000e100

08002b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	; (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	; (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
         );
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7ff ff8e 	bl	8002b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff29 	bl	8002a7c <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c44:	f7ff ff3e 	bl	8002ac4 <__NVIC_GetPriorityGrouping>
 8002c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ff8e 	bl	8002b70 <NVIC_EncodePriority>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff5d 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff31 	bl	8002ae0 <__NVIC_EnableIRQ>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffa2 	bl	8002bd8 <SysTick_Config>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff feda 	bl	8002a64 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e099      	b.n	8002df0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cdc:	e00f      	b.n	8002cfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cde:	f7ff fec1 	bl	8002a64 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d908      	bls.n	8002cfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e078      	b.n	8002df0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e8      	bne.n	8002cde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <HAL_DMA_Init+0x158>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d107      	bne.n	8002d68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	4313      	orrs	r3, r2
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f023 0307 	bic.w	r3, r3, #7
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d117      	bne.n	8002dc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fb01 	bl	80033ac <DMA_CheckFifoParam>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2240      	movs	r2, #64	; 0x40
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e016      	b.n	8002df0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fab8 	bl	8003340 <DMA_CalcBaseAndBitshift>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	223f      	movs	r2, #63	; 0x3f
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	f010803f 	.word	0xf010803f

08002dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_DMA_Start_IT+0x26>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e040      	b.n	8002ea4 <HAL_DMA_Start_IT+0xa8>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d12f      	bne.n	8002e96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fa4a 	bl	80032e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	223f      	movs	r2, #63	; 0x3f
 8002e56:	409a      	lsls	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0216 	orr.w	r2, r2, #22
 8002e6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0208 	orr.w	r2, r2, #8
 8002e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e005      	b.n	8002ea2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002eba:	f7ff fdd3 	bl	8002a64 <HAL_GetTick>
 8002ebe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d008      	beq.n	8002ede <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e052      	b.n	8002f84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0216 	bic.w	r2, r2, #22
 8002eec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002efc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <HAL_DMA_Abort+0x62>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0208 	bic.w	r2, r2, #8
 8002f1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f2e:	e013      	b.n	8002f58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f30:	f7ff fd98 	bl	8002a64 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b05      	cmp	r3, #5
 8002f3c:	d90c      	bls.n	8002f58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2203      	movs	r2, #3
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e015      	b.n	8002f84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e4      	bne.n	8002f30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6a:	223f      	movs	r2, #63	; 0x3f
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d004      	beq.n	8002faa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2280      	movs	r2, #128	; 0x80
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00c      	b.n	8002fc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2205      	movs	r2, #5
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fdc:	4b8e      	ldr	r3, [pc, #568]	; (8003218 <HAL_DMA_IRQHandler+0x248>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a8e      	ldr	r2, [pc, #568]	; (800321c <HAL_DMA_IRQHandler+0x24c>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0a9b      	lsrs	r3, r3, #10
 8002fe8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01a      	beq.n	800303c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d013      	beq.n	800303c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0204 	bic.w	r2, r2, #4
 8003022:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	2208      	movs	r2, #8
 800302a:	409a      	lsls	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003034:	f043 0201 	orr.w	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	2201      	movs	r2, #1
 8003042:	409a      	lsls	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d012      	beq.n	8003072 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305e:	2201      	movs	r2, #1
 8003060:	409a      	lsls	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f043 0202 	orr.w	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	2204      	movs	r2, #4
 8003078:	409a      	lsls	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d012      	beq.n	80030a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00b      	beq.n	80030a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	2204      	movs	r2, #4
 8003096:	409a      	lsls	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f043 0204 	orr.w	r2, r3, #4
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	2210      	movs	r2, #16
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d043      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d03c      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	2210      	movs	r2, #16
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d018      	beq.n	8003112 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d024      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
 80030fe:	e01f      	b.n	8003140 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01b      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
 8003110:	e016      	b.n	8003140 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d107      	bne.n	8003130 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0208 	bic.w	r2, r2, #8
 800312e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	2220      	movs	r2, #32
 8003146:	409a      	lsls	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 808f 	beq.w	8003270 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8087 	beq.w	8003270 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	2220      	movs	r2, #32
 8003168:	409a      	lsls	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b05      	cmp	r3, #5
 8003178:	d136      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0216 	bic.w	r2, r2, #22
 8003188:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003198:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <HAL_DMA_IRQHandler+0x1da>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0208 	bic.w	r2, r2, #8
 80031b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	223f      	movs	r2, #63	; 0x3f
 80031c0:	409a      	lsls	r2, r3
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d07e      	beq.n	80032dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
        }
        return;
 80031e6:	e079      	b.n	80032dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01d      	beq.n	8003232 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10d      	bne.n	8003220 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	2b00      	cmp	r3, #0
 800320a:	d031      	beq.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
 8003214:	e02c      	b.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
 8003216:	bf00      	nop
 8003218:	20000004 	.word	0x20000004
 800321c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d023      	beq.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
 8003230:	e01e      	b.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10f      	bne.n	8003260 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0210 	bic.w	r2, r2, #16
 800324e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003274:	2b00      	cmp	r3, #0
 8003276:	d032      	beq.n	80032de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d022      	beq.n	80032ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2205      	movs	r2, #5
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	3301      	adds	r3, #1
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d307      	bcc.n	80032b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f2      	bne.n	800329c <HAL_DMA_IRQHandler+0x2cc>
 80032b6:	e000      	b.n	80032ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
 80032da:	e000      	b.n	80032de <HAL_DMA_IRQHandler+0x30e>
        return;
 80032dc:	bf00      	nop
    }
  }
}
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003300:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d108      	bne.n	8003324 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003322:	e007      	b.n	8003334 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	60da      	str	r2, [r3, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	3b10      	subs	r3, #16
 8003350:	4a14      	ldr	r2, [pc, #80]	; (80033a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800335a:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <DMA_CalcBaseAndBitshift+0x68>)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b03      	cmp	r3, #3
 800336c:	d909      	bls.n	8003382 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	1d1a      	adds	r2, r3, #4
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	659a      	str	r2, [r3, #88]	; 0x58
 8003380:	e007      	b.n	8003392 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	aaaaaaab 	.word	0xaaaaaaab
 80033a8:	0800bc64 	.word	0x0800bc64

080033ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d11f      	bne.n	8003406 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d856      	bhi.n	800347a <DMA_CheckFifoParam+0xce>
 80033cc:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <DMA_CheckFifoParam+0x28>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033f7 	.word	0x080033f7
 80033dc:	080033e5 	.word	0x080033e5
 80033e0:	0800347b 	.word	0x0800347b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d046      	beq.n	800347e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f4:	e043      	b.n	800347e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033fe:	d140      	bne.n	8003482 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003404:	e03d      	b.n	8003482 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340e:	d121      	bne.n	8003454 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d837      	bhi.n	8003486 <DMA_CheckFifoParam+0xda>
 8003416:	a201      	add	r2, pc, #4	; (adr r2, 800341c <DMA_CheckFifoParam+0x70>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	0800342d 	.word	0x0800342d
 8003420:	08003433 	.word	0x08003433
 8003424:	0800342d 	.word	0x0800342d
 8003428:	08003445 	.word	0x08003445
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      break;
 8003430:	e030      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d025      	beq.n	800348a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003442:	e022      	b.n	800348a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800344c:	d11f      	bne.n	800348e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003452:	e01c      	b.n	800348e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d903      	bls.n	8003462 <DMA_CheckFifoParam+0xb6>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d003      	beq.n	8003468 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003460:	e018      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
      break;
 8003466:	e015      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      break;
 8003478:	e00b      	b.n	8003492 <DMA_CheckFifoParam+0xe6>
      break;
 800347a:	bf00      	nop
 800347c:	e00a      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 800347e:	bf00      	nop
 8003480:	e008      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 8003482:	bf00      	nop
 8003484:	e006      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 8003486:	bf00      	nop
 8003488:	e004      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 800348a:	bf00      	nop
 800348c:	e002      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;   
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 8003492:	bf00      	nop
    }
  } 
  
  return status; 
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop

080034a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	; 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	e165      	b.n	800378c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034c0:	2201      	movs	r2, #1
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	429a      	cmp	r2, r3
 80034da:	f040 8154 	bne.w	8003786 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d005      	beq.n	80034f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d130      	bne.n	8003558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	2203      	movs	r2, #3
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800352c:	2201      	movs	r2, #1
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 0201 	and.w	r2, r3, #1
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	2b03      	cmp	r3, #3
 8003562:	d017      	beq.n	8003594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	2203      	movs	r2, #3
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d123      	bne.n	80035e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	08da      	lsrs	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3208      	adds	r2, #8
 80035a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	220f      	movs	r2, #15
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	08da      	lsrs	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3208      	adds	r2, #8
 80035e2:	69b9      	ldr	r1, [r7, #24]
 80035e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	2203      	movs	r2, #3
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0203 	and.w	r2, r3, #3
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80ae 	beq.w	8003786 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	4b5d      	ldr	r3, [pc, #372]	; (80037a4 <HAL_GPIO_Init+0x300>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	4a5c      	ldr	r2, [pc, #368]	; (80037a4 <HAL_GPIO_Init+0x300>)
 8003634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003638:	6453      	str	r3, [r2, #68]	; 0x44
 800363a:	4b5a      	ldr	r3, [pc, #360]	; (80037a4 <HAL_GPIO_Init+0x300>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003646:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_GPIO_Init+0x304>)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	089b      	lsrs	r3, r3, #2
 800364c:	3302      	adds	r3, #2
 800364e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	220f      	movs	r2, #15
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a4f      	ldr	r2, [pc, #316]	; (80037ac <HAL_GPIO_Init+0x308>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d025      	beq.n	80036be <HAL_GPIO_Init+0x21a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a4e      	ldr	r2, [pc, #312]	; (80037b0 <HAL_GPIO_Init+0x30c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01f      	beq.n	80036ba <HAL_GPIO_Init+0x216>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a4d      	ldr	r2, [pc, #308]	; (80037b4 <HAL_GPIO_Init+0x310>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d019      	beq.n	80036b6 <HAL_GPIO_Init+0x212>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4c      	ldr	r2, [pc, #304]	; (80037b8 <HAL_GPIO_Init+0x314>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_GPIO_Init+0x20e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4b      	ldr	r2, [pc, #300]	; (80037bc <HAL_GPIO_Init+0x318>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00d      	beq.n	80036ae <HAL_GPIO_Init+0x20a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4a      	ldr	r2, [pc, #296]	; (80037c0 <HAL_GPIO_Init+0x31c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <HAL_GPIO_Init+0x206>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a49      	ldr	r2, [pc, #292]	; (80037c4 <HAL_GPIO_Init+0x320>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_GPIO_Init+0x202>
 80036a2:	2306      	movs	r3, #6
 80036a4:	e00c      	b.n	80036c0 <HAL_GPIO_Init+0x21c>
 80036a6:	2307      	movs	r3, #7
 80036a8:	e00a      	b.n	80036c0 <HAL_GPIO_Init+0x21c>
 80036aa:	2305      	movs	r3, #5
 80036ac:	e008      	b.n	80036c0 <HAL_GPIO_Init+0x21c>
 80036ae:	2304      	movs	r3, #4
 80036b0:	e006      	b.n	80036c0 <HAL_GPIO_Init+0x21c>
 80036b2:	2303      	movs	r3, #3
 80036b4:	e004      	b.n	80036c0 <HAL_GPIO_Init+0x21c>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e002      	b.n	80036c0 <HAL_GPIO_Init+0x21c>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_GPIO_Init+0x21c>
 80036be:	2300      	movs	r3, #0
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	f002 0203 	and.w	r2, r2, #3
 80036c6:	0092      	lsls	r2, r2, #2
 80036c8:	4093      	lsls	r3, r2
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036d0:	4935      	ldr	r1, [pc, #212]	; (80037a8 <HAL_GPIO_Init+0x304>)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	3302      	adds	r3, #2
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036de:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <HAL_GPIO_Init+0x324>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003702:	4a31      	ldr	r2, [pc, #196]	; (80037c8 <HAL_GPIO_Init+0x324>)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003708:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <HAL_GPIO_Init+0x324>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800372c:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <HAL_GPIO_Init+0x324>)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003732:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <HAL_GPIO_Init+0x324>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003756:	4a1c      	ldr	r2, [pc, #112]	; (80037c8 <HAL_GPIO_Init+0x324>)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <HAL_GPIO_Init+0x324>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003780:	4a11      	ldr	r2, [pc, #68]	; (80037c8 <HAL_GPIO_Init+0x324>)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3301      	adds	r3, #1
 800378a:	61fb      	str	r3, [r7, #28]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	f67f ae96 	bls.w	80034c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	3724      	adds	r7, #36	; 0x24
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40013800 	.word	0x40013800
 80037ac:	40020000 	.word	0x40020000
 80037b0:	40020400 	.word	0x40020400
 80037b4:	40020800 	.word	0x40020800
 80037b8:	40020c00 	.word	0x40020c00
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40021400 	.word	0x40021400
 80037c4:	40021800 	.word	0x40021800
 80037c8:	40013c00 	.word	0x40013c00

080037cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
 80037d8:	4613      	mov	r3, r2
 80037da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037dc:	787b      	ldrb	r3, [r7, #1]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037e2:	887a      	ldrh	r2, [r7, #2]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037e8:	e003      	b.n	80037f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037ea:	887b      	ldrh	r3, [r7, #2]
 80037ec:	041a      	lsls	r2, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	619a      	str	r2, [r3, #24]
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003816:	4a05      	ldr	r2, [pc, #20]	; (800382c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe f834 	bl	800188c <HAL_GPIO_EXTI_Callback>
  }
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40013c00 	.word	0x40013c00

08003830 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800385c:	f7ff f902 	bl	8002a64 <HAL_GetTick>
 8003860:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003862:	e009      	b.n	8003878 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003864:	f7ff f8fe 	bl	8002a64 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003872:	d901      	bls.n	8003878 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e01f      	b.n	80038b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003884:	d1ee      	bne.n	8003864 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800388c:	f7ff f8ea 	bl	8002a64 <HAL_GetTick>
 8003890:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003892:	e009      	b.n	80038a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003894:	f7ff f8e6 	bl	8002a64 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038a2:	d901      	bls.n	80038a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e007      	b.n	80038b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038a8:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038b4:	d1ee      	bne.n	8003894 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	420e0040 	.word	0x420e0040
 80038c8:	40007000 	.word	0x40007000
 80038cc:	420e0044 	.word	0x420e0044

080038d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0cc      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e4:	4b68      	ldr	r3, [pc, #416]	; (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d90c      	bls.n	800390c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b65      	ldr	r3, [pc, #404]	; (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b63      	ldr	r3, [pc, #396]	; (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0b8      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003924:	4b59      	ldr	r3, [pc, #356]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4a58      	ldr	r2, [pc, #352]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800392e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800393c:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a52      	ldr	r2, [pc, #328]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003948:	4b50      	ldr	r3, [pc, #320]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	494d      	ldr	r1, [pc, #308]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d044      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d107      	bne.n	800397e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d119      	bne.n	80039ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e07f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d003      	beq.n	800398e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398a:	2b03      	cmp	r3, #3
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398e:	4b3f      	ldr	r3, [pc, #252]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e06f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399e:	4b3b      	ldr	r3, [pc, #236]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e067      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ae:	4b37      	ldr	r3, [pc, #220]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 0203 	bic.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4934      	ldr	r1, [pc, #208]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c0:	f7ff f850 	bl	8002a64 <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	e00a      	b.n	80039de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c8:	f7ff f84c 	bl	8002a64 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e04f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 020c 	and.w	r2, r3, #12
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1eb      	bne.n	80039c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d20c      	bcs.n	8003a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e032      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a24:	4b19      	ldr	r3, [pc, #100]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4916      	ldr	r1, [pc, #88]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	490e      	ldr	r1, [pc, #56]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a56:	f000 f855 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	490a      	ldr	r1, [pc, #40]	; (8003a90 <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	5ccb      	ldrb	r3, [r1, r3]
 8003a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6e:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a72:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe ffb0 	bl	80029dc <HAL_InitTick>

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40023c00 	.word	0x40023c00
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	0800bc4c 	.word	0x0800bc4c
 8003a94:	20000004 	.word	0x20000004
 8003a98:	20000008 	.word	0x20000008

08003a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000004 	.word	0x20000004

08003ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ab8:	f7ff fff0 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	0a9b      	lsrs	r3, r3, #10
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	4903      	ldr	r1, [pc, #12]	; (8003ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	0800bc5c 	.word	0x0800bc5c

08003adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ae0:	f7ff ffdc 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	0b5b      	lsrs	r3, r3, #13
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4903      	ldr	r1, [pc, #12]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40023800 	.word	0x40023800
 8003b00:	0800bc5c 	.word	0x0800bc5c

08003b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b08:	b0ae      	sub	sp, #184	; 0xb8
 8003b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b2a:	4bcb      	ldr	r3, [pc, #812]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	f200 8206 	bhi.w	8003f44 <HAL_RCC_GetSysClockFreq+0x440>
 8003b38:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3e:	bf00      	nop
 8003b40:	08003b75 	.word	0x08003b75
 8003b44:	08003f45 	.word	0x08003f45
 8003b48:	08003f45 	.word	0x08003f45
 8003b4c:	08003f45 	.word	0x08003f45
 8003b50:	08003b7d 	.word	0x08003b7d
 8003b54:	08003f45 	.word	0x08003f45
 8003b58:	08003f45 	.word	0x08003f45
 8003b5c:	08003f45 	.word	0x08003f45
 8003b60:	08003b85 	.word	0x08003b85
 8003b64:	08003f45 	.word	0x08003f45
 8003b68:	08003f45 	.word	0x08003f45
 8003b6c:	08003f45 	.word	0x08003f45
 8003b70:	08003d75 	.word	0x08003d75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b74:	4bb9      	ldr	r3, [pc, #740]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x358>)
 8003b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003b7a:	e1e7      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b7c:	4bb8      	ldr	r3, [pc, #736]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b82:	e1e3      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b84:	4bb4      	ldr	r3, [pc, #720]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b90:	4bb1      	ldr	r3, [pc, #708]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d071      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9c:	4bae      	ldr	r3, [pc, #696]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ba8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003bbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	462b      	mov	r3, r5
 8003bc6:	f04f 0000 	mov.w	r0, #0
 8003bca:	f04f 0100 	mov.w	r1, #0
 8003bce:	0159      	lsls	r1, r3, #5
 8003bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd4:	0150      	lsls	r0, r2, #5
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4621      	mov	r1, r4
 8003bdc:	1a51      	subs	r1, r2, r1
 8003bde:	6439      	str	r1, [r7, #64]	; 0x40
 8003be0:	4629      	mov	r1, r5
 8003be2:	eb63 0301 	sbc.w	r3, r3, r1
 8003be6:	647b      	str	r3, [r7, #68]	; 0x44
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	018b      	lsls	r3, r1, #6
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bfe:	4641      	mov	r1, r8
 8003c00:	018a      	lsls	r2, r1, #6
 8003c02:	4641      	mov	r1, r8
 8003c04:	1a51      	subs	r1, r2, r1
 8003c06:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c08:	4649      	mov	r1, r9
 8003c0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	00cb      	lsls	r3, r1, #3
 8003c20:	4641      	mov	r1, r8
 8003c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c26:	4641      	mov	r1, r8
 8003c28:	00ca      	lsls	r2, r1, #3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4622      	mov	r2, r4
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
 8003c36:	462b      	mov	r3, r5
 8003c38:	460a      	mov	r2, r1
 8003c3a:	eb42 0303 	adc.w	r3, r2, r3
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	024b      	lsls	r3, r1, #9
 8003c50:	4621      	mov	r1, r4
 8003c52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c56:	4621      	mov	r1, r4
 8003c58:	024a      	lsls	r2, r1, #9
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c70:	f7fd f80a 	bl	8000c88 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c7e:	e067      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c80:	4b75      	ldr	r3, [pc, #468]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c98:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ca2:	4622      	mov	r2, r4
 8003ca4:	462b      	mov	r3, r5
 8003ca6:	f04f 0000 	mov.w	r0, #0
 8003caa:	f04f 0100 	mov.w	r1, #0
 8003cae:	0159      	lsls	r1, r3, #5
 8003cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb4:	0150      	lsls	r0, r2, #5
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4621      	mov	r1, r4
 8003cbc:	1a51      	subs	r1, r2, r1
 8003cbe:	62b9      	str	r1, [r7, #40]	; 0x28
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	018b      	lsls	r3, r1, #6
 8003cd8:	4641      	mov	r1, r8
 8003cda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cde:	4641      	mov	r1, r8
 8003ce0:	018a      	lsls	r2, r1, #6
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ce8:	4649      	mov	r1, r9
 8003cea:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d02:	4692      	mov	sl, r2
 8003d04:	469b      	mov	fp, r3
 8003d06:	4623      	mov	r3, r4
 8003d08:	eb1a 0303 	adds.w	r3, sl, r3
 8003d0c:	623b      	str	r3, [r7, #32]
 8003d0e:	462b      	mov	r3, r5
 8003d10:	eb4b 0303 	adc.w	r3, fp, r3
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d22:	4629      	mov	r1, r5
 8003d24:	028b      	lsls	r3, r1, #10
 8003d26:	4621      	mov	r1, r4
 8003d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	028a      	lsls	r2, r1, #10
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d38:	2200      	movs	r2, #0
 8003d3a:	673b      	str	r3, [r7, #112]	; 0x70
 8003d3c:	677a      	str	r2, [r7, #116]	; 0x74
 8003d3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d42:	f7fc ffa1 	bl	8000c88 <__aeabi_uldivmod>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d50:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003d62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d72:	e0eb      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d74:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d80:	4b35      	ldr	r3, [pc, #212]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d06b      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8c:	4b32      	ldr	r3, [pc, #200]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	2200      	movs	r2, #0
 8003d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003da0:	2300      	movs	r3, #0
 8003da2:	667b      	str	r3, [r7, #100]	; 0x64
 8003da4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003da8:	4622      	mov	r2, r4
 8003daa:	462b      	mov	r3, r5
 8003dac:	f04f 0000 	mov.w	r0, #0
 8003db0:	f04f 0100 	mov.w	r1, #0
 8003db4:	0159      	lsls	r1, r3, #5
 8003db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dba:	0150      	lsls	r0, r2, #5
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	1a51      	subs	r1, r2, r1
 8003dc4:	61b9      	str	r1, [r7, #24]
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	eb63 0301 	sbc.w	r3, r3, r1
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003dda:	4659      	mov	r1, fp
 8003ddc:	018b      	lsls	r3, r1, #6
 8003dde:	4651      	mov	r1, sl
 8003de0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003de4:	4651      	mov	r1, sl
 8003de6:	018a      	lsls	r2, r1, #6
 8003de8:	4651      	mov	r1, sl
 8003dea:	ebb2 0801 	subs.w	r8, r2, r1
 8003dee:	4659      	mov	r1, fp
 8003df0:	eb63 0901 	sbc.w	r9, r3, r1
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e08:	4690      	mov	r8, r2
 8003e0a:	4699      	mov	r9, r3
 8003e0c:	4623      	mov	r3, r4
 8003e0e:	eb18 0303 	adds.w	r3, r8, r3
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	462b      	mov	r3, r5
 8003e16:	eb49 0303 	adc.w	r3, r9, r3
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e28:	4629      	mov	r1, r5
 8003e2a:	024b      	lsls	r3, r1, #9
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e32:	4621      	mov	r1, r4
 8003e34:	024a      	lsls	r2, r1, #9
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e3e:	2200      	movs	r2, #0
 8003e40:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e42:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e48:	f7fc ff1e 	bl	8000c88 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4613      	mov	r3, r2
 8003e52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e56:	e065      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x420>
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	00f42400 	.word	0x00f42400
 8003e60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e64:	4b3d      	ldr	r3, [pc, #244]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x458>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	4611      	mov	r1, r2
 8003e70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e74:	653b      	str	r3, [r7, #80]	; 0x50
 8003e76:	2300      	movs	r3, #0
 8003e78:	657b      	str	r3, [r7, #84]	; 0x54
 8003e7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003e7e:	4642      	mov	r2, r8
 8003e80:	464b      	mov	r3, r9
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f04f 0100 	mov.w	r1, #0
 8003e8a:	0159      	lsls	r1, r3, #5
 8003e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e90:	0150      	lsls	r0, r2, #5
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4641      	mov	r1, r8
 8003e98:	1a51      	subs	r1, r2, r1
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003eb0:	4659      	mov	r1, fp
 8003eb2:	018b      	lsls	r3, r1, #6
 8003eb4:	4651      	mov	r1, sl
 8003eb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eba:	4651      	mov	r1, sl
 8003ebc:	018a      	lsls	r2, r1, #6
 8003ebe:	4651      	mov	r1, sl
 8003ec0:	1a54      	subs	r4, r2, r1
 8003ec2:	4659      	mov	r1, fp
 8003ec4:	eb63 0501 	sbc.w	r5, r3, r1
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	00eb      	lsls	r3, r5, #3
 8003ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ed6:	00e2      	lsls	r2, r4, #3
 8003ed8:	4614      	mov	r4, r2
 8003eda:	461d      	mov	r5, r3
 8003edc:	4643      	mov	r3, r8
 8003ede:	18e3      	adds	r3, r4, r3
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	464b      	mov	r3, r9
 8003ee4:	eb45 0303 	adc.w	r3, r5, r3
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	028b      	lsls	r3, r1, #10
 8003efa:	4621      	mov	r1, r4
 8003efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f00:	4621      	mov	r1, r4
 8003f02:	028a      	lsls	r2, r1, #10
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f10:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003f12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f16:	f7fc feb7 	bl	8000c88 <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4613      	mov	r3, r2
 8003f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x458>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	0f1b      	lsrs	r3, r3, #28
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003f32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f42:	e003      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	37b8      	adds	r7, #184	; 0xb8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	00f42400 	.word	0x00f42400

08003f64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e28d      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8083 	beq.w	800408a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f84:	4b94      	ldr	r3, [pc, #592]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 030c 	and.w	r3, r3, #12
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d019      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f90:	4b91      	ldr	r3, [pc, #580]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f9c:	4b8e      	ldr	r3, [pc, #568]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003faa:	4b8b      	ldr	r3, [pc, #556]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fb2:	2b0c      	cmp	r3, #12
 8003fb4:	d112      	bne.n	8003fdc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb6:	4b88      	ldr	r3, [pc, #544]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc2:	d10b      	bne.n	8003fdc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc4:	4b84      	ldr	r3, [pc, #528]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d05b      	beq.n	8004088 <HAL_RCC_OscConfig+0x124>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d157      	bne.n	8004088 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e25a      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x90>
 8003fe6:	4b7c      	ldr	r3, [pc, #496]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7b      	ldr	r2, [pc, #492]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e01d      	b.n	8004030 <HAL_RCC_OscConfig+0xcc>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0xb4>
 8003ffe:	4b76      	ldr	r3, [pc, #472]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a75      	ldr	r2, [pc, #468]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b73      	ldr	r3, [pc, #460]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a72      	ldr	r2, [pc, #456]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0xcc>
 8004018:	4b6f      	ldr	r3, [pc, #444]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a6e      	ldr	r2, [pc, #440]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 800401e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b6c      	ldr	r3, [pc, #432]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a6b      	ldr	r2, [pc, #428]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 800402a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fe fd14 	bl	8002a64 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004040:	f7fe fd10 	bl	8002a64 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e21f      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b61      	ldr	r3, [pc, #388]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0xdc>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fe fd00 	bl	8002a64 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004068:	f7fe fcfc 	bl	8002a64 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e20b      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	4b57      	ldr	r3, [pc, #348]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x104>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d06f      	beq.n	8004176 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004096:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d017      	beq.n	80040d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040a2:	4b4d      	ldr	r3, [pc, #308]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d105      	bne.n	80040ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040ae:	4b4a      	ldr	r3, [pc, #296]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ba:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040c2:	2b0c      	cmp	r3, #12
 80040c4:	d11c      	bne.n	8004100 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040c6:	4b44      	ldr	r3, [pc, #272]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d116      	bne.n	8004100 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d2:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_RCC_OscConfig+0x186>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d001      	beq.n	80040ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e1d3      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ea:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4937      	ldr	r1, [pc, #220]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fe:	e03a      	b.n	8004176 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d020      	beq.n	800414a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004108:	4b34      	ldr	r3, [pc, #208]	; (80041dc <HAL_RCC_OscConfig+0x278>)
 800410a:	2201      	movs	r2, #1
 800410c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7fe fca9 	bl	8002a64 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004116:	f7fe fca5 	bl	8002a64 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e1b4      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004128:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0f0      	beq.n	8004116 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004134:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4925      	ldr	r1, [pc, #148]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 8004144:	4313      	orrs	r3, r2
 8004146:	600b      	str	r3, [r1, #0]
 8004148:	e015      	b.n	8004176 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <HAL_RCC_OscConfig+0x278>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fe fc88 	bl	8002a64 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004158:	f7fe fc84 	bl	8002a64 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e193      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416a:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d036      	beq.n	80041f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d016      	beq.n	80041b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800418a:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 800418c:	2201      	movs	r2, #1
 800418e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004190:	f7fe fc68 	bl	8002a64 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004198:	f7fe fc64 	bl	8002a64 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e173      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041aa:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCC_OscConfig+0x274>)
 80041ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x234>
 80041b6:	e01b      	b.n	80041f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7fe fc51 	bl	8002a64 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c4:	e00e      	b.n	80041e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c6:	f7fe fc4d 	bl	8002a64 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d907      	bls.n	80041e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e15c      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
 80041d8:	40023800 	.word	0x40023800
 80041dc:	42470000 	.word	0x42470000
 80041e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e4:	4b8a      	ldr	r3, [pc, #552]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ea      	bne.n	80041c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8097 	beq.w	800432c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041fe:	2300      	movs	r3, #0
 8004200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004202:	4b83      	ldr	r3, [pc, #524]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10f      	bne.n	800422e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	4b7f      	ldr	r3, [pc, #508]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4a7e      	ldr	r2, [pc, #504]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421c:	6413      	str	r3, [r2, #64]	; 0x40
 800421e:	4b7c      	ldr	r3, [pc, #496]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800422a:	2301      	movs	r3, #1
 800422c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422e:	4b79      	ldr	r3, [pc, #484]	; (8004414 <HAL_RCC_OscConfig+0x4b0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d118      	bne.n	800426c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800423a:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x4b0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a75      	ldr	r2, [pc, #468]	; (8004414 <HAL_RCC_OscConfig+0x4b0>)
 8004240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004246:	f7fe fc0d 	bl	8002a64 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424e:	f7fe fc09 	bl	8002a64 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e118      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004260:	4b6c      	ldr	r3, [pc, #432]	; (8004414 <HAL_RCC_OscConfig+0x4b0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d106      	bne.n	8004282 <HAL_RCC_OscConfig+0x31e>
 8004274:	4b66      	ldr	r3, [pc, #408]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4a65      	ldr	r2, [pc, #404]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
 8004280:	e01c      	b.n	80042bc <HAL_RCC_OscConfig+0x358>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b05      	cmp	r3, #5
 8004288:	d10c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x340>
 800428a:	4b61      	ldr	r3, [pc, #388]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a60      	ldr	r2, [pc, #384]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 8004290:	f043 0304 	orr.w	r3, r3, #4
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
 8004296:	4b5e      	ldr	r3, [pc, #376]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a5d      	ldr	r2, [pc, #372]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70
 80042a2:	e00b      	b.n	80042bc <HAL_RCC_OscConfig+0x358>
 80042a4:	4b5a      	ldr	r3, [pc, #360]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	4a59      	ldr	r2, [pc, #356]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	6713      	str	r3, [r2, #112]	; 0x70
 80042b0:	4b57      	ldr	r3, [pc, #348]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	4a56      	ldr	r2, [pc, #344]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 80042b6:	f023 0304 	bic.w	r3, r3, #4
 80042ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d015      	beq.n	80042f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c4:	f7fe fbce 	bl	8002a64 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042cc:	f7fe fbca 	bl	8002a64 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e0d7      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e2:	4b4b      	ldr	r3, [pc, #300]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ee      	beq.n	80042cc <HAL_RCC_OscConfig+0x368>
 80042ee:	e014      	b.n	800431a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fe fbb8 	bl	8002a64 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f6:	e00a      	b.n	800430e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f8:	f7fe fbb4 	bl	8002a64 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f241 3288 	movw	r2, #5000	; 0x1388
 8004306:	4293      	cmp	r3, r2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e0c1      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430e:	4b40      	ldr	r3, [pc, #256]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1ee      	bne.n	80042f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800431a:	7dfb      	ldrb	r3, [r7, #23]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d105      	bne.n	800432c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004320:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	4a3a      	ldr	r2, [pc, #232]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 8004326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800432a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80ad 	beq.w	8004490 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004336:	4b36      	ldr	r3, [pc, #216]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b08      	cmp	r3, #8
 8004340:	d060      	beq.n	8004404 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d145      	bne.n	80043d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434a:	4b33      	ldr	r3, [pc, #204]	; (8004418 <HAL_RCC_OscConfig+0x4b4>)
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fe fb88 	bl	8002a64 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004358:	f7fe fb84 	bl	8002a64 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e093      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436a:	4b29      	ldr	r3, [pc, #164]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	019b      	lsls	r3, r3, #6
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	085b      	lsrs	r3, r3, #1
 800438e:	3b01      	subs	r3, #1
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	061b      	lsls	r3, r3, #24
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	071b      	lsls	r3, r3, #28
 80043a2:	491b      	ldr	r1, [pc, #108]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a8:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <HAL_RCC_OscConfig+0x4b4>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7fe fb59 	bl	8002a64 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b6:	f7fe fb55 	bl	8002a64 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e064      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c8:	4b11      	ldr	r3, [pc, #68]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x452>
 80043d4:	e05c      	b.n	8004490 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_RCC_OscConfig+0x4b4>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fe fb42 	bl	8002a64 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fe fb3e 	bl	8002a64 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e04d      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RCC_OscConfig+0x4ac>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x480>
 8004402:	e045      	b.n	8004490 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d107      	bne.n	800441c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e040      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
 8004410:	40023800 	.word	0x40023800
 8004414:	40007000 	.word	0x40007000
 8004418:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800441c:	4b1f      	ldr	r3, [pc, #124]	; (800449c <HAL_RCC_OscConfig+0x538>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d030      	beq.n	800448c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004434:	429a      	cmp	r2, r3
 8004436:	d129      	bne.n	800448c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d122      	bne.n	800448c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800444c:	4013      	ands	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004452:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004454:	4293      	cmp	r3, r2
 8004456:	d119      	bne.n	800448c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	085b      	lsrs	r3, r3, #1
 8004464:	3b01      	subs	r3, #1
 8004466:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d10f      	bne.n	800448c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d107      	bne.n	800448c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800

080044a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e041      	b.n	8004536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fd fe38 	bl	800213c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f000 fd42 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e041      	b.n	80045d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f839 	bl	80045dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f000 fcf3 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <HAL_TIM_PWM_Start+0x24>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e022      	b.n	800465a <HAL_TIM_PWM_Start+0x6a>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d109      	bne.n	800462e <HAL_TIM_PWM_Start+0x3e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	bf14      	ite	ne
 8004626:	2301      	movne	r3, #1
 8004628:	2300      	moveq	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	e015      	b.n	800465a <HAL_TIM_PWM_Start+0x6a>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d109      	bne.n	8004648 <HAL_TIM_PWM_Start+0x58>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e008      	b.n	800465a <HAL_TIM_PWM_Start+0x6a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e07c      	b.n	800475c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <HAL_TIM_PWM_Start+0x82>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004670:	e013      	b.n	800469a <HAL_TIM_PWM_Start+0xaa>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d104      	bne.n	8004682 <HAL_TIM_PWM_Start+0x92>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004680:	e00b      	b.n	800469a <HAL_TIM_PWM_Start+0xaa>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d104      	bne.n	8004692 <HAL_TIM_PWM_Start+0xa2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004690:	e003      	b.n	800469a <HAL_TIM_PWM_Start+0xaa>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2201      	movs	r2, #1
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 f874 	bl	8005790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2d      	ldr	r2, [pc, #180]	; (8004764 <HAL_TIM_PWM_Start+0x174>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <HAL_TIM_PWM_Start+0xcc>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2c      	ldr	r2, [pc, #176]	; (8004768 <HAL_TIM_PWM_Start+0x178>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d101      	bne.n	80046c0 <HAL_TIM_PWM_Start+0xd0>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_TIM_PWM_Start+0xd2>
 80046c0:	2300      	movs	r3, #0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a22      	ldr	r2, [pc, #136]	; (8004764 <HAL_TIM_PWM_Start+0x174>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e8:	d01d      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1f      	ldr	r2, [pc, #124]	; (800476c <HAL_TIM_PWM_Start+0x17c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d018      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1d      	ldr	r2, [pc, #116]	; (8004770 <HAL_TIM_PWM_Start+0x180>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1c      	ldr	r2, [pc, #112]	; (8004774 <HAL_TIM_PWM_Start+0x184>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a16      	ldr	r2, [pc, #88]	; (8004768 <HAL_TIM_PWM_Start+0x178>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a18      	ldr	r2, [pc, #96]	; (8004778 <HAL_TIM_PWM_Start+0x188>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a16      	ldr	r2, [pc, #88]	; (800477c <HAL_TIM_PWM_Start+0x18c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d111      	bne.n	800474a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b06      	cmp	r3, #6
 8004736:	d010      	beq.n	800475a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004748:	e007      	b.n	800475a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40010000 	.word	0x40010000
 8004768:	40010400 	.word	0x40010400
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40014000 	.word	0x40014000
 800477c:	40001800 	.word	0x40001800

08004780 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e041      	b.n	8004816 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f839 	bl	800481e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	4610      	mov	r0, r2
 80047c0:	f000 fbd2 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b02      	cmp	r3, #2
 8004846:	d122      	bne.n	800488e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b02      	cmp	r3, #2
 8004854:	d11b      	bne.n	800488e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f06f 0202 	mvn.w	r2, #2
 800485e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7fd f821 	bl	80018bc <HAL_TIM_IC_CaptureCallback>
 800487a:	e005      	b.n	8004888 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fb55 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fb5c 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b04      	cmp	r3, #4
 800489a:	d122      	bne.n	80048e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d11b      	bne.n	80048e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f06f 0204 	mvn.w	r2, #4
 80048b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7fc fff7 	bl	80018bc <HAL_TIM_IC_CaptureCallback>
 80048ce:	e005      	b.n	80048dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fb2b 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fb32 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d122      	bne.n	8004936 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d11b      	bne.n	8004936 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f06f 0208 	mvn.w	r2, #8
 8004906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2204      	movs	r2, #4
 800490c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7fc ffcd 	bl	80018bc <HAL_TIM_IC_CaptureCallback>
 8004922:	e005      	b.n	8004930 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fb01 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fb08 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b10      	cmp	r3, #16
 8004942:	d122      	bne.n	800498a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b10      	cmp	r3, #16
 8004950:	d11b      	bne.n	800498a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f06f 0210 	mvn.w	r2, #16
 800495a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2208      	movs	r2, #8
 8004960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7fc ffa3 	bl	80018bc <HAL_TIM_IC_CaptureCallback>
 8004976:	e005      	b.n	8004984 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fad7 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fade 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b01      	cmp	r3, #1
 8004996:	d10e      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d107      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f06f 0201 	mvn.w	r2, #1
 80049ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fab1 	bl	8004f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c0:	2b80      	cmp	r3, #128	; 0x80
 80049c2:	d10e      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b80      	cmp	r3, #128	; 0x80
 80049d0:	d107      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 ff83 	bl	80058e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d10e      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d107      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 faa3 	bl	8004f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d10e      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d107      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f06f 0220 	mvn.w	r2, #32
 8004a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 ff4d 	bl	80058d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b086      	sub	sp, #24
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e088      	b.n	8004b72 <HAL_TIM_IC_ConfigChannel+0x130>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d11b      	bne.n	8004aa6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6819      	ldr	r1, [r3, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f000 fcc3 	bl	8005408 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 020c 	bic.w	r2, r2, #12
 8004a90:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6999      	ldr	r1, [r3, #24]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	619a      	str	r2, [r3, #24]
 8004aa4:	e060      	b.n	8004b68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d11c      	bne.n	8004ae6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f000 fd47 	bl	800554e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ace:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6999      	ldr	r1, [r3, #24]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	021a      	lsls	r2, r3, #8
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	619a      	str	r2, [r3, #24]
 8004ae4:	e040      	b.n	8004b68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d11b      	bne.n	8004b24 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f000 fd94 	bl	8005628 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 020c 	bic.w	r2, r2, #12
 8004b0e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69d9      	ldr	r1, [r3, #28]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	61da      	str	r2, [r3, #28]
 8004b22:	e021      	b.n	8004b68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	d11c      	bne.n	8004b64 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6819      	ldr	r1, [r3, #0]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f000 fdb1 	bl	80056a0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b4c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69d9      	ldr	r1, [r3, #28]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	021a      	lsls	r2, r3, #8
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	61da      	str	r2, [r3, #28]
 8004b62:	e001      	b.n	8004b68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e0ae      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b0c      	cmp	r3, #12
 8004ba6:	f200 809f 	bhi.w	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004be5 	.word	0x08004be5
 8004bb4:	08004ce9 	.word	0x08004ce9
 8004bb8:	08004ce9 	.word	0x08004ce9
 8004bbc:	08004ce9 	.word	0x08004ce9
 8004bc0:	08004c25 	.word	0x08004c25
 8004bc4:	08004ce9 	.word	0x08004ce9
 8004bc8:	08004ce9 	.word	0x08004ce9
 8004bcc:	08004ce9 	.word	0x08004ce9
 8004bd0:	08004c67 	.word	0x08004c67
 8004bd4:	08004ce9 	.word	0x08004ce9
 8004bd8:	08004ce9 	.word	0x08004ce9
 8004bdc:	08004ce9 	.word	0x08004ce9
 8004be0:	08004ca7 	.word	0x08004ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fa5c 	bl	80050a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0208 	orr.w	r2, r2, #8
 8004bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
 8004c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6999      	ldr	r1, [r3, #24]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	619a      	str	r2, [r3, #24]
      break;
 8004c22:	e064      	b.n	8004cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 faac 	bl	8005188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6999      	ldr	r1, [r3, #24]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	021a      	lsls	r2, r3, #8
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	619a      	str	r2, [r3, #24]
      break;
 8004c64:	e043      	b.n	8004cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fb01 	bl	8005274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0208 	orr.w	r2, r2, #8
 8004c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0204 	bic.w	r2, r2, #4
 8004c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	61da      	str	r2, [r3, #28]
      break;
 8004ca4:	e023      	b.n	8004cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fb55 	bl	800535c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69d9      	ldr	r1, [r3, #28]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	021a      	lsls	r2, r3, #8
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	61da      	str	r2, [r3, #28]
      break;
 8004ce6:	e002      	b.n	8004cee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	75fb      	strb	r3, [r7, #23]
      break;
 8004cec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_TIM_ConfigClockSource+0x1c>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e0b4      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x186>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d54:	d03e      	beq.n	8004dd4 <HAL_TIM_ConfigClockSource+0xd4>
 8004d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5a:	f200 8087 	bhi.w	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d62:	f000 8086 	beq.w	8004e72 <HAL_TIM_ConfigClockSource+0x172>
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6a:	d87f      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d6c:	2b70      	cmp	r3, #112	; 0x70
 8004d6e:	d01a      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0xa6>
 8004d70:	2b70      	cmp	r3, #112	; 0x70
 8004d72:	d87b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d74:	2b60      	cmp	r3, #96	; 0x60
 8004d76:	d050      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x11a>
 8004d78:	2b60      	cmp	r3, #96	; 0x60
 8004d7a:	d877      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d7c:	2b50      	cmp	r3, #80	; 0x50
 8004d7e:	d03c      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0xfa>
 8004d80:	2b50      	cmp	r3, #80	; 0x50
 8004d82:	d873      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d058      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x13a>
 8004d88:	2b40      	cmp	r3, #64	; 0x40
 8004d8a:	d86f      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d8c:	2b30      	cmp	r3, #48	; 0x30
 8004d8e:	d064      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004d90:	2b30      	cmp	r3, #48	; 0x30
 8004d92:	d86b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d060      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d867      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d05c      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d05a      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004da4:	e062      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6899      	ldr	r1, [r3, #8]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f000 fccb 	bl	8005750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	609a      	str	r2, [r3, #8]
      break;
 8004dd2:	e04f      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6899      	ldr	r1, [r3, #8]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f000 fcb4 	bl	8005750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df6:	609a      	str	r2, [r3, #8]
      break;
 8004df8:	e03c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	461a      	mov	r2, r3
 8004e08:	f000 fb72 	bl	80054f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2150      	movs	r1, #80	; 0x50
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fc81 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8004e18:	e02c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	461a      	mov	r2, r3
 8004e28:	f000 fbce 	bl	80055c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2160      	movs	r1, #96	; 0x60
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fc71 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8004e38:	e01c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6859      	ldr	r1, [r3, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f000 fb52 	bl	80054f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2140      	movs	r1, #64	; 0x40
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fc61 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8004e58:	e00c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f000 fc58 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8004e6a:	e003      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	e000      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	d831      	bhi.n	8004f08 <HAL_TIM_ReadCapturedValue+0x78>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_TIM_ReadCapturedValue+0x1c>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004f09 	.word	0x08004f09
 8004eb4:	08004f09 	.word	0x08004f09
 8004eb8:	08004f09 	.word	0x08004f09
 8004ebc:	08004eeb 	.word	0x08004eeb
 8004ec0:	08004f09 	.word	0x08004f09
 8004ec4:	08004f09 	.word	0x08004f09
 8004ec8:	08004f09 	.word	0x08004f09
 8004ecc:	08004ef5 	.word	0x08004ef5
 8004ed0:	08004f09 	.word	0x08004f09
 8004ed4:	08004f09 	.word	0x08004f09
 8004ed8:	08004f09 	.word	0x08004f09
 8004edc:	08004eff 	.word	0x08004eff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee6:	60fb      	str	r3, [r7, #12]

      break;
 8004ee8:	e00f      	b.n	8004f0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	60fb      	str	r3, [r7, #12]

      break;
 8004ef2:	e00a      	b.n	8004f0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	60fb      	str	r3, [r7, #12]

      break;
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	60fb      	str	r3, [r7, #12]

      break;
 8004f06:	e000      	b.n	8004f0a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004f08:	bf00      	nop
  }

  return tmpreg;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a40      	ldr	r2, [pc, #256]	; (800507c <TIM_Base_SetConfig+0x114>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d00f      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a3d      	ldr	r2, [pc, #244]	; (8005080 <TIM_Base_SetConfig+0x118>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a3c      	ldr	r2, [pc, #240]	; (8005084 <TIM_Base_SetConfig+0x11c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a3b      	ldr	r2, [pc, #236]	; (8005088 <TIM_Base_SetConfig+0x120>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3a      	ldr	r2, [pc, #232]	; (800508c <TIM_Base_SetConfig+0x124>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d108      	bne.n	8004fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a2f      	ldr	r2, [pc, #188]	; (800507c <TIM_Base_SetConfig+0x114>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d02b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc8:	d027      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2c      	ldr	r2, [pc, #176]	; (8005080 <TIM_Base_SetConfig+0x118>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d023      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2b      	ldr	r2, [pc, #172]	; (8005084 <TIM_Base_SetConfig+0x11c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01f      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2a      	ldr	r2, [pc, #168]	; (8005088 <TIM_Base_SetConfig+0x120>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a29      	ldr	r2, [pc, #164]	; (800508c <TIM_Base_SetConfig+0x124>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d017      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a28      	ldr	r2, [pc, #160]	; (8005090 <TIM_Base_SetConfig+0x128>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a27      	ldr	r2, [pc, #156]	; (8005094 <TIM_Base_SetConfig+0x12c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00f      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a26      	ldr	r2, [pc, #152]	; (8005098 <TIM_Base_SetConfig+0x130>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a25      	ldr	r2, [pc, #148]	; (800509c <TIM_Base_SetConfig+0x134>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a24      	ldr	r2, [pc, #144]	; (80050a0 <TIM_Base_SetConfig+0x138>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <TIM_Base_SetConfig+0x13c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d108      	bne.n	800502c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a0a      	ldr	r2, [pc, #40]	; (800507c <TIM_Base_SetConfig+0x114>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_Base_SetConfig+0xf8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a0c      	ldr	r2, [pc, #48]	; (800508c <TIM_Base_SetConfig+0x124>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d103      	bne.n	8005068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	615a      	str	r2, [r3, #20]
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010000 	.word	0x40010000
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40010400 	.word	0x40010400
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800
 800509c:	40001800 	.word	0x40001800
 80050a0:	40001c00 	.word	0x40001c00
 80050a4:	40002000 	.word	0x40002000

080050a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f023 0201 	bic.w	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0303 	bic.w	r3, r3, #3
 80050de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 0302 	bic.w	r3, r3, #2
 80050f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a20      	ldr	r2, [pc, #128]	; (8005180 <TIM_OC1_SetConfig+0xd8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_OC1_SetConfig+0x64>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1f      	ldr	r2, [pc, #124]	; (8005184 <TIM_OC1_SetConfig+0xdc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10c      	bne.n	8005126 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0308 	bic.w	r3, r3, #8
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f023 0304 	bic.w	r3, r3, #4
 8005124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a15      	ldr	r2, [pc, #84]	; (8005180 <TIM_OC1_SetConfig+0xd8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC1_SetConfig+0x8e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a14      	ldr	r2, [pc, #80]	; (8005184 <TIM_OC1_SetConfig+0xdc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d111      	bne.n	800515a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	40010000 	.word	0x40010000
 8005184:	40010400 	.word	0x40010400

08005188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f023 0210 	bic.w	r2, r3, #16
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0320 	bic.w	r3, r3, #32
 80051d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a22      	ldr	r2, [pc, #136]	; (800526c <TIM_OC2_SetConfig+0xe4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_OC2_SetConfig+0x68>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a21      	ldr	r2, [pc, #132]	; (8005270 <TIM_OC2_SetConfig+0xe8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d10d      	bne.n	800520c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800520a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a17      	ldr	r2, [pc, #92]	; (800526c <TIM_OC2_SetConfig+0xe4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_OC2_SetConfig+0x94>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a16      	ldr	r2, [pc, #88]	; (8005270 <TIM_OC2_SetConfig+0xe8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d113      	bne.n	8005244 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800522a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40010000 	.word	0x40010000
 8005270:	40010400 	.word	0x40010400

08005274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0303 	bic.w	r3, r3, #3
 80052aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a21      	ldr	r2, [pc, #132]	; (8005354 <TIM_OC3_SetConfig+0xe0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC3_SetConfig+0x66>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a20      	ldr	r2, [pc, #128]	; (8005358 <TIM_OC3_SetConfig+0xe4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d10d      	bne.n	80052f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a16      	ldr	r2, [pc, #88]	; (8005354 <TIM_OC3_SetConfig+0xe0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d003      	beq.n	8005306 <TIM_OC3_SetConfig+0x92>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a15      	ldr	r2, [pc, #84]	; (8005358 <TIM_OC3_SetConfig+0xe4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d113      	bne.n	800532e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800530c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	621a      	str	r2, [r3, #32]
}
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	40010000 	.word	0x40010000
 8005358:	40010400 	.word	0x40010400

0800535c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a12      	ldr	r2, [pc, #72]	; (8005400 <TIM_OC4_SetConfig+0xa4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_OC4_SetConfig+0x68>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a11      	ldr	r2, [pc, #68]	; (8005404 <TIM_OC4_SetConfig+0xa8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d109      	bne.n	80053d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	019b      	lsls	r3, r3, #6
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000
 8005404:	40010400 	.word	0x40010400

08005408 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f023 0201 	bic.w	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4a28      	ldr	r2, [pc, #160]	; (80054d4 <TIM_TI1_SetConfig+0xcc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01b      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543c:	d017      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a25      	ldr	r2, [pc, #148]	; (80054d8 <TIM_TI1_SetConfig+0xd0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a24      	ldr	r2, [pc, #144]	; (80054dc <TIM_TI1_SetConfig+0xd4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4a23      	ldr	r2, [pc, #140]	; (80054e0 <TIM_TI1_SetConfig+0xd8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <TIM_TI1_SetConfig+0xdc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <TIM_TI1_SetConfig+0xe0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a20      	ldr	r2, [pc, #128]	; (80054ec <TIM_TI1_SetConfig+0xe4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <TIM_TI1_SetConfig+0x6a>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <TIM_TI1_SetConfig+0x6c>
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e003      	b.n	8005492 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f043 0301 	orr.w	r3, r3, #1
 8005490:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f023 030a 	bic.w	r3, r3, #10
 80054ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f003 030a 	and.w	r3, r3, #10
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40010400 	.word	0x40010400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40001800 	.word	0x40001800

080054f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0201 	bic.w	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800551a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f023 030a 	bic.w	r3, r3, #10
 800552c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800554e:	b480      	push	{r7}
 8005550:	b087      	sub	sp, #28
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
 800555a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f023 0210 	bic.w	r2, r3, #16
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800558c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	031b      	lsls	r3, r3, #12
 8005592:	b29b      	uxth	r3, r3
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f023 0210 	bic.w	r2, r3, #16
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	031b      	lsls	r3, r3, #12
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005604:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	621a      	str	r2, [r3, #32]
}
 800561c:	bf00      	nop
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 0303 	bic.w	r3, r3, #3
 8005654:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005664:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	b2db      	uxtb	r3, r3
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005678:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	621a      	str	r2, [r3, #32]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	021b      	lsls	r3, r3, #8
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	031b      	lsls	r3, r3, #12
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80056f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	031b      	lsls	r3, r3, #12
 80056f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	f043 0307 	orr.w	r3, r3, #7
 800573c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800576a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	431a      	orrs	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4313      	orrs	r3, r2
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	609a      	str	r2, [r3, #8]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2201      	movs	r2, #1
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1a      	ldr	r2, [r3, #32]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	401a      	ands	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	fa01 f303 	lsl.w	r3, r1, r3
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e05a      	b.n	80058aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a21      	ldr	r2, [pc, #132]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d022      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005840:	d01d      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1d      	ldr	r2, [pc, #116]	; (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d018      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1b      	ldr	r2, [pc, #108]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d013      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1a      	ldr	r2, [pc, #104]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00e      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d009      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a17      	ldr	r2, [pc, #92]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d004      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d10c      	bne.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4313      	orrs	r3, r2
 800588e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40010000 	.word	0x40010000
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800
 80058c4:	40000c00 	.word	0x40000c00
 80058c8:	40010400 	.word	0x40010400
 80058cc:	40014000 	.word	0x40014000
 80058d0:	40001800 	.word	0x40001800

080058d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e03f      	b.n	800598e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fc fce8 	bl	80022f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800593e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fe2b 	bl	800659c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	4613      	mov	r3, r2
 80059a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d11d      	bne.n	80059ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_UART_Receive_IT+0x26>
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e016      	b.n	80059ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Receive_IT+0x38>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e00f      	b.n	80059ee <HAL_UART_Receive_IT+0x58>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	461a      	mov	r2, r3
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fbd9 	bl	800619a <UART_Start_Receive_IT>
 80059e8:	4603      	mov	r3, r0
 80059ea:	e000      	b.n	80059ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80059ec:	2302      	movs	r3, #2
  }
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	; 0x30
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	d165      	bne.n	8005ade <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_UART_Transmit_DMA+0x26>
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e05e      	b.n	8005ae0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_UART_Transmit_DMA+0x38>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e057      	b.n	8005ae0 <HAL_UART_Transmit_DMA+0xe8>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	88fa      	ldrh	r2, [r7, #6]
 8005a42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	88fa      	ldrh	r2, [r7, #6]
 8005a48:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2221      	movs	r2, #33	; 0x21
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5c:	4a22      	ldr	r2, [pc, #136]	; (8005ae8 <HAL_UART_Transmit_DMA+0xf0>)
 8005a5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a64:	4a21      	ldr	r2, [pc, #132]	; (8005aec <HAL_UART_Transmit_DMA+0xf4>)
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6c:	4a20      	ldr	r2, [pc, #128]	; (8005af0 <HAL_UART_Transmit_DMA+0xf8>)
 8005a6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a74:	2200      	movs	r2, #0
 8005a76:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005a78:	f107 0308 	add.w	r3, r7, #8
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	6819      	ldr	r1, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	f7fd f9b4 	bl	8002dfc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a9c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3314      	adds	r3, #20
 8005aac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3314      	adds	r3, #20
 8005ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ac8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6a39      	ldr	r1, [r7, #32]
 8005acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e5      	bne.n	8005aa6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e000      	b.n	8005ae0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
  }
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3730      	adds	r7, #48	; 0x30
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	08006051 	.word	0x08006051
 8005aec:	080060eb 	.word	0x080060eb
 8005af0:	08006107 	.word	0x08006107

08005af4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b0ba      	sub	sp, #232	; 0xe8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10f      	bne.n	8005b5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <HAL_UART_IRQHandler+0x66>
 8005b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fc66 	bl	8006424 <UART_Receive_IT>
      return;
 8005b58:	e256      	b.n	8006008 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80de 	beq.w	8005d20 <HAL_UART_IRQHandler+0x22c>
 8005b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d106      	bne.n	8005b7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80d1 	beq.w	8005d20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <HAL_UART_IRQHandler+0xae>
 8005b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f043 0201 	orr.w	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <HAL_UART_IRQHandler+0xd2>
 8005bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f043 0202 	orr.w	r2, r3, #2
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <HAL_UART_IRQHandler+0xf6>
 8005bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	f043 0204 	orr.w	r2, r3, #4
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d011      	beq.n	8005c1a <HAL_UART_IRQHandler+0x126>
 8005bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d105      	bne.n	8005c0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d005      	beq.n	8005c1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f043 0208 	orr.w	r2, r3, #8
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 81ed 	beq.w	8005ffe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_UART_IRQHandler+0x14e>
 8005c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fbf1 	bl	8006424 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b40      	cmp	r3, #64	; 0x40
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d103      	bne.n	8005c6e <HAL_UART_IRQHandler+0x17a>
 8005c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d04f      	beq.n	8005d0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 faf9 	bl	8006266 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7e:	2b40      	cmp	r3, #64	; 0x40
 8005c80:	d141      	bne.n	8005d06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3314      	adds	r3, #20
 8005c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3314      	adds	r3, #20
 8005caa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1d9      	bne.n	8005c82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d013      	beq.n	8005cfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	4a7d      	ldr	r2, [pc, #500]	; (8005ed0 <HAL_UART_IRQHandler+0x3dc>)
 8005cdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fd f952 	bl	8002f8c <HAL_DMA_Abort_IT>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d016      	beq.n	8005d1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	e00e      	b.n	8005d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f990 	bl	8006024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d04:	e00a      	b.n	8005d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f98c 	bl	8006024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0c:	e006      	b.n	8005d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f988 	bl	8006024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d1a:	e170      	b.n	8005ffe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1c:	bf00      	nop
    return;
 8005d1e:	e16e      	b.n	8005ffe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	f040 814a 	bne.w	8005fbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2e:	f003 0310 	and.w	r3, r3, #16
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8143 	beq.w	8005fbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 813c 	beq.w	8005fbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d46:	2300      	movs	r3, #0
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	60bb      	str	r3, [r7, #8]
 8005d5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b40      	cmp	r3, #64	; 0x40
 8005d68:	f040 80b4 	bne.w	8005ed4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8140 	beq.w	8006002 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	f080 8139 	bcs.w	8006002 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da2:	f000 8088 	beq.w	8005eb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	330c      	adds	r3, #12
 8005dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005dd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1d9      	bne.n	8005da6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3314      	adds	r3, #20
 8005df8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e04:	f023 0301 	bic.w	r3, r3, #1
 8005e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3314      	adds	r3, #20
 8005e12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e1      	bne.n	8005df2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3314      	adds	r3, #20
 8005e34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e3      	bne.n	8005e2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	330c      	adds	r3, #12
 8005e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e86:	f023 0310 	bic.w	r3, r3, #16
 8005e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	330c      	adds	r3, #12
 8005e94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e98:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e3      	bne.n	8005e74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fc fffb 	bl	8002eac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f8b6 	bl	8006038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ecc:	e099      	b.n	8006002 <HAL_UART_IRQHandler+0x50e>
 8005ece:	bf00      	nop
 8005ed0:	0800632d 	.word	0x0800632d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 808b 	beq.w	8006006 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8086 	beq.w	8006006 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	330c      	adds	r3, #12
 8005f00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	330c      	adds	r3, #12
 8005f1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f1e:	647a      	str	r2, [r7, #68]	; 0x44
 8005f20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e3      	bne.n	8005efa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3314      	adds	r3, #20
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	623b      	str	r3, [r7, #32]
   return(result);
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	f023 0301 	bic.w	r3, r3, #1
 8005f48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3314      	adds	r3, #20
 8005f52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f56:	633a      	str	r2, [r7, #48]	; 0x30
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e3      	bne.n	8005f32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0310 	bic.w	r3, r3, #16
 8005f8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	330c      	adds	r3, #12
 8005f98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f9c:	61fa      	str	r2, [r7, #28]
 8005f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	69b9      	ldr	r1, [r7, #24]
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e3      	bne.n	8005f78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f83e 	bl	8006038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fbc:	e023      	b.n	8006006 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d009      	beq.n	8005fde <HAL_UART_IRQHandler+0x4ea>
 8005fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9bc 	bl	8006354 <UART_Transmit_IT>
    return;
 8005fdc:	e014      	b.n	8006008 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00e      	beq.n	8006008 <HAL_UART_IRQHandler+0x514>
 8005fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d008      	beq.n	8006008 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f9fc 	bl	80063f4 <UART_EndTransmit_IT>
    return;
 8005ffc:	e004      	b.n	8006008 <HAL_UART_IRQHandler+0x514>
    return;
 8005ffe:	bf00      	nop
 8006000:	e002      	b.n	8006008 <HAL_UART_IRQHandler+0x514>
      return;
 8006002:	bf00      	nop
 8006004:	e000      	b.n	8006008 <HAL_UART_IRQHandler+0x514>
      return;
 8006006:	bf00      	nop
  }
}
 8006008:	37e8      	adds	r7, #232	; 0xe8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop

08006010 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b090      	sub	sp, #64	; 0x40
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006068:	2b00      	cmp	r3, #0
 800606a:	d137      	bne.n	80060dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800606c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606e:	2200      	movs	r2, #0
 8006070:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3314      	adds	r3, #20
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	623b      	str	r3, [r7, #32]
   return(result);
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006088:	63bb      	str	r3, [r7, #56]	; 0x38
 800608a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3314      	adds	r3, #20
 8006090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006092:	633a      	str	r2, [r7, #48]	; 0x30
 8006094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e5      	bne.n	8006072 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	330c      	adds	r3, #12
 80060ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060bc:	637b      	str	r3, [r7, #52]	; 0x34
 80060be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060c6:	61fa      	str	r2, [r7, #28]
 80060c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	69b9      	ldr	r1, [r7, #24]
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	617b      	str	r3, [r7, #20]
   return(result);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e5      	bne.n	80060a6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060da:	e002      	b.n	80060e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80060dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80060de:	f7fb fbb7 	bl	8001850 <HAL_UART_TxCpltCallback>
}
 80060e2:	bf00      	nop
 80060e4:	3740      	adds	r7, #64	; 0x40
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff ff89 	bl	8006010 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060fe:	bf00      	nop
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	bf0c      	ite	eq
 8006126:	2301      	moveq	r3, #1
 8006128:	2300      	movne	r3, #0
 800612a:	b2db      	uxtb	r3, r3
 800612c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b21      	cmp	r3, #33	; 0x21
 8006138:	d108      	bne.n	800614c <UART_DMAError+0x46>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006146:	68b8      	ldr	r0, [r7, #8]
 8006148:	f000 f865 	bl	8006216 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	bf0c      	ite	eq
 800615a:	2301      	moveq	r3, #1
 800615c:	2300      	movne	r3, #0
 800615e:	b2db      	uxtb	r3, r3
 8006160:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b22      	cmp	r3, #34	; 0x22
 800616c:	d108      	bne.n	8006180 <UART_DMAError+0x7a>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2200      	movs	r2, #0
 8006178:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800617a:	68b8      	ldr	r0, [r7, #8]
 800617c:	f000 f873 	bl	8006266 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	f043 0210 	orr.w	r2, r3, #16
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800618c:	68b8      	ldr	r0, [r7, #8]
 800618e:	f7ff ff49 	bl	8006024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	4613      	mov	r3, r2
 80061a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	88fa      	ldrh	r2, [r7, #6]
 80061b8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2222      	movs	r2, #34	; 0x22
 80061c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695a      	ldr	r2, [r3, #20]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0220 	orr.w	r2, r2, #32
 8006206:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006216:	b480      	push	{r7}
 8006218:	b089      	sub	sp, #36	; 0x24
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	330c      	adds	r3, #12
 8006224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	60bb      	str	r3, [r7, #8]
   return(result);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	61ba      	str	r2, [r7, #24]
 8006240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	6979      	ldr	r1, [r7, #20]
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	613b      	str	r3, [r7, #16]
   return(result);
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e5      	bne.n	800621e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2220      	movs	r2, #32
 8006256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800625a:	bf00      	nop
 800625c:	3724      	adds	r7, #36	; 0x24
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006266:	b480      	push	{r7}
 8006268:	b095      	sub	sp, #84	; 0x54
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	330c      	adds	r3, #12
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006284:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	330c      	adds	r3, #12
 800628c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800628e:	643a      	str	r2, [r7, #64]	; 0x40
 8006290:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e5      	bne.n	800626e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3314      	adds	r3, #20
 80062a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	f023 0301 	bic.w	r3, r3, #1
 80062b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3314      	adds	r3, #20
 80062c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e5      	bne.n	80062a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d119      	bne.n	8006312 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	330c      	adds	r3, #12
 80062e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f023 0310 	bic.w	r3, r3, #16
 80062f4:	647b      	str	r3, [r7, #68]	; 0x44
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	330c      	adds	r3, #12
 80062fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062fe:	61ba      	str	r2, [r7, #24]
 8006300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	6979      	ldr	r1, [r7, #20]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	613b      	str	r3, [r7, #16]
   return(result);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e5      	bne.n	80062de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006320:	bf00      	nop
 8006322:	3754      	adds	r7, #84	; 0x54
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff fe6c 	bl	8006024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b21      	cmp	r3, #33	; 0x21
 8006366:	d13e      	bne.n	80063e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006370:	d114      	bne.n	800639c <UART_Transmit_IT+0x48>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d110      	bne.n	800639c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800638e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	1c9a      	adds	r2, r3, #2
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	621a      	str	r2, [r3, #32]
 800639a:	e008      	b.n	80063ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	1c59      	adds	r1, r3, #1
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6211      	str	r1, [r2, #32]
 80063a6:	781a      	ldrb	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	4619      	mov	r1, r3
 80063bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10f      	bne.n	80063e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e000      	b.n	80063e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063e6:	2302      	movs	r3, #2
  }
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800640a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7fb fa1b 	bl	8001850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08c      	sub	sp, #48	; 0x30
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b22      	cmp	r3, #34	; 0x22
 8006436:	f040 80ab 	bne.w	8006590 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006442:	d117      	bne.n	8006474 <UART_Receive_IT+0x50>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d113      	bne.n	8006474 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800644c:	2300      	movs	r3, #0
 800644e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006462:	b29a      	uxth	r2, r3
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	1c9a      	adds	r2, r3, #2
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	629a      	str	r2, [r3, #40]	; 0x28
 8006472:	e026      	b.n	80064c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006486:	d007      	beq.n	8006498 <UART_Receive_IT+0x74>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <UART_Receive_IT+0x82>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	e008      	b.n	80064b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	4619      	mov	r1, r3
 80064d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d15a      	bne.n	800658c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0220 	bic.w	r2, r2, #32
 80064e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695a      	ldr	r2, [r3, #20]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0201 	bic.w	r2, r2, #1
 8006504:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	2b01      	cmp	r3, #1
 8006514:	d135      	bne.n	8006582 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	330c      	adds	r3, #12
 8006522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	613b      	str	r3, [r7, #16]
   return(result);
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f023 0310 	bic.w	r3, r3, #16
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653c:	623a      	str	r2, [r7, #32]
 800653e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	69f9      	ldr	r1, [r7, #28]
 8006542:	6a3a      	ldr	r2, [r7, #32]
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	61bb      	str	r3, [r7, #24]
   return(result);
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e5      	bne.n	800651c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b10      	cmp	r3, #16
 800655c:	d10a      	bne.n	8006574 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7ff fd5c 	bl	8006038 <HAL_UARTEx_RxEventCallback>
 8006580:	e002      	b.n	8006588 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fb f932 	bl	80017ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	e002      	b.n	8006592 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	e000      	b.n	8006592 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006590:	2302      	movs	r3, #2
  }
}
 8006592:	4618      	mov	r0, r3
 8006594:	3730      	adds	r7, #48	; 0x30
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800659c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065a0:	b0c0      	sub	sp, #256	; 0x100
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	68d9      	ldr	r1, [r3, #12]
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	ea40 0301 	orr.w	r3, r0, r1
 80065c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	431a      	orrs	r2, r3
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065f4:	f021 010c 	bic.w	r1, r1, #12
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006602:	430b      	orrs	r3, r1
 8006604:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006616:	6999      	ldr	r1, [r3, #24]
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	ea40 0301 	orr.w	r3, r0, r1
 8006622:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b8f      	ldr	r3, [pc, #572]	; (8006868 <UART_SetConfig+0x2cc>)
 800662c:	429a      	cmp	r2, r3
 800662e:	d005      	beq.n	800663c <UART_SetConfig+0xa0>
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b8d      	ldr	r3, [pc, #564]	; (800686c <UART_SetConfig+0x2d0>)
 8006638:	429a      	cmp	r2, r3
 800663a:	d104      	bne.n	8006646 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800663c:	f7fd fa4e 	bl	8003adc <HAL_RCC_GetPCLK2Freq>
 8006640:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006644:	e003      	b.n	800664e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006646:	f7fd fa35 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 800664a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006658:	f040 810c 	bne.w	8006874 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800665c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006660:	2200      	movs	r2, #0
 8006662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006666:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800666a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800666e:	4622      	mov	r2, r4
 8006670:	462b      	mov	r3, r5
 8006672:	1891      	adds	r1, r2, r2
 8006674:	65b9      	str	r1, [r7, #88]	; 0x58
 8006676:	415b      	adcs	r3, r3
 8006678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800667a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800667e:	4621      	mov	r1, r4
 8006680:	eb12 0801 	adds.w	r8, r2, r1
 8006684:	4629      	mov	r1, r5
 8006686:	eb43 0901 	adc.w	r9, r3, r1
 800668a:	f04f 0200 	mov.w	r2, #0
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800669a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800669e:	4690      	mov	r8, r2
 80066a0:	4699      	mov	r9, r3
 80066a2:	4623      	mov	r3, r4
 80066a4:	eb18 0303 	adds.w	r3, r8, r3
 80066a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066ac:	462b      	mov	r3, r5
 80066ae:	eb49 0303 	adc.w	r3, r9, r3
 80066b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066ca:	460b      	mov	r3, r1
 80066cc:	18db      	adds	r3, r3, r3
 80066ce:	653b      	str	r3, [r7, #80]	; 0x50
 80066d0:	4613      	mov	r3, r2
 80066d2:	eb42 0303 	adc.w	r3, r2, r3
 80066d6:	657b      	str	r3, [r7, #84]	; 0x54
 80066d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066e0:	f7fa fad2 	bl	8000c88 <__aeabi_uldivmod>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4b61      	ldr	r3, [pc, #388]	; (8006870 <UART_SetConfig+0x2d4>)
 80066ea:	fba3 2302 	umull	r2, r3, r3, r2
 80066ee:	095b      	lsrs	r3, r3, #5
 80066f0:	011c      	lsls	r4, r3, #4
 80066f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006700:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006704:	4642      	mov	r2, r8
 8006706:	464b      	mov	r3, r9
 8006708:	1891      	adds	r1, r2, r2
 800670a:	64b9      	str	r1, [r7, #72]	; 0x48
 800670c:	415b      	adcs	r3, r3
 800670e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006710:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006714:	4641      	mov	r1, r8
 8006716:	eb12 0a01 	adds.w	sl, r2, r1
 800671a:	4649      	mov	r1, r9
 800671c:	eb43 0b01 	adc.w	fp, r3, r1
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800672c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006734:	4692      	mov	sl, r2
 8006736:	469b      	mov	fp, r3
 8006738:	4643      	mov	r3, r8
 800673a:	eb1a 0303 	adds.w	r3, sl, r3
 800673e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006742:	464b      	mov	r3, r9
 8006744:	eb4b 0303 	adc.w	r3, fp, r3
 8006748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006758:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800675c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006760:	460b      	mov	r3, r1
 8006762:	18db      	adds	r3, r3, r3
 8006764:	643b      	str	r3, [r7, #64]	; 0x40
 8006766:	4613      	mov	r3, r2
 8006768:	eb42 0303 	adc.w	r3, r2, r3
 800676c:	647b      	str	r3, [r7, #68]	; 0x44
 800676e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006772:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006776:	f7fa fa87 	bl	8000c88 <__aeabi_uldivmod>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4611      	mov	r1, r2
 8006780:	4b3b      	ldr	r3, [pc, #236]	; (8006870 <UART_SetConfig+0x2d4>)
 8006782:	fba3 2301 	umull	r2, r3, r3, r1
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	2264      	movs	r2, #100	; 0x64
 800678a:	fb02 f303 	mul.w	r3, r2, r3
 800678e:	1acb      	subs	r3, r1, r3
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006796:	4b36      	ldr	r3, [pc, #216]	; (8006870 <UART_SetConfig+0x2d4>)
 8006798:	fba3 2302 	umull	r2, r3, r3, r2
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067a4:	441c      	add	r4, r3
 80067a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067b8:	4642      	mov	r2, r8
 80067ba:	464b      	mov	r3, r9
 80067bc:	1891      	adds	r1, r2, r2
 80067be:	63b9      	str	r1, [r7, #56]	; 0x38
 80067c0:	415b      	adcs	r3, r3
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067c8:	4641      	mov	r1, r8
 80067ca:	1851      	adds	r1, r2, r1
 80067cc:	6339      	str	r1, [r7, #48]	; 0x30
 80067ce:	4649      	mov	r1, r9
 80067d0:	414b      	adcs	r3, r1
 80067d2:	637b      	str	r3, [r7, #52]	; 0x34
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067e0:	4659      	mov	r1, fp
 80067e2:	00cb      	lsls	r3, r1, #3
 80067e4:	4651      	mov	r1, sl
 80067e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ea:	4651      	mov	r1, sl
 80067ec:	00ca      	lsls	r2, r1, #3
 80067ee:	4610      	mov	r0, r2
 80067f0:	4619      	mov	r1, r3
 80067f2:	4603      	mov	r3, r0
 80067f4:	4642      	mov	r2, r8
 80067f6:	189b      	adds	r3, r3, r2
 80067f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067fc:	464b      	mov	r3, r9
 80067fe:	460a      	mov	r2, r1
 8006800:	eb42 0303 	adc.w	r3, r2, r3
 8006804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006814:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006818:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800681c:	460b      	mov	r3, r1
 800681e:	18db      	adds	r3, r3, r3
 8006820:	62bb      	str	r3, [r7, #40]	; 0x28
 8006822:	4613      	mov	r3, r2
 8006824:	eb42 0303 	adc.w	r3, r2, r3
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800682a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800682e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006832:	f7fa fa29 	bl	8000c88 <__aeabi_uldivmod>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <UART_SetConfig+0x2d4>)
 800683c:	fba3 1302 	umull	r1, r3, r3, r2
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	2164      	movs	r1, #100	; 0x64
 8006844:	fb01 f303 	mul.w	r3, r1, r3
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	3332      	adds	r3, #50	; 0x32
 800684e:	4a08      	ldr	r2, [pc, #32]	; (8006870 <UART_SetConfig+0x2d4>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	f003 0207 	and.w	r2, r3, #7
 800685a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4422      	add	r2, r4
 8006862:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006864:	e105      	b.n	8006a72 <UART_SetConfig+0x4d6>
 8006866:	bf00      	nop
 8006868:	40011000 	.word	0x40011000
 800686c:	40011400 	.word	0x40011400
 8006870:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006878:	2200      	movs	r2, #0
 800687a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800687e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006882:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006886:	4642      	mov	r2, r8
 8006888:	464b      	mov	r3, r9
 800688a:	1891      	adds	r1, r2, r2
 800688c:	6239      	str	r1, [r7, #32]
 800688e:	415b      	adcs	r3, r3
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
 8006892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006896:	4641      	mov	r1, r8
 8006898:	1854      	adds	r4, r2, r1
 800689a:	4649      	mov	r1, r9
 800689c:	eb43 0501 	adc.w	r5, r3, r1
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	00eb      	lsls	r3, r5, #3
 80068aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068ae:	00e2      	lsls	r2, r4, #3
 80068b0:	4614      	mov	r4, r2
 80068b2:	461d      	mov	r5, r3
 80068b4:	4643      	mov	r3, r8
 80068b6:	18e3      	adds	r3, r4, r3
 80068b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068bc:	464b      	mov	r3, r9
 80068be:	eb45 0303 	adc.w	r3, r5, r3
 80068c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068e2:	4629      	mov	r1, r5
 80068e4:	008b      	lsls	r3, r1, #2
 80068e6:	4621      	mov	r1, r4
 80068e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ec:	4621      	mov	r1, r4
 80068ee:	008a      	lsls	r2, r1, #2
 80068f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068f4:	f7fa f9c8 	bl	8000c88 <__aeabi_uldivmod>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4b60      	ldr	r3, [pc, #384]	; (8006a80 <UART_SetConfig+0x4e4>)
 80068fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	011c      	lsls	r4, r3, #4
 8006906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690a:	2200      	movs	r2, #0
 800690c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006910:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006914:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006918:	4642      	mov	r2, r8
 800691a:	464b      	mov	r3, r9
 800691c:	1891      	adds	r1, r2, r2
 800691e:	61b9      	str	r1, [r7, #24]
 8006920:	415b      	adcs	r3, r3
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006928:	4641      	mov	r1, r8
 800692a:	1851      	adds	r1, r2, r1
 800692c:	6139      	str	r1, [r7, #16]
 800692e:	4649      	mov	r1, r9
 8006930:	414b      	adcs	r3, r1
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006940:	4659      	mov	r1, fp
 8006942:	00cb      	lsls	r3, r1, #3
 8006944:	4651      	mov	r1, sl
 8006946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800694a:	4651      	mov	r1, sl
 800694c:	00ca      	lsls	r2, r1, #3
 800694e:	4610      	mov	r0, r2
 8006950:	4619      	mov	r1, r3
 8006952:	4603      	mov	r3, r0
 8006954:	4642      	mov	r2, r8
 8006956:	189b      	adds	r3, r3, r2
 8006958:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800695c:	464b      	mov	r3, r9
 800695e:	460a      	mov	r2, r1
 8006960:	eb42 0303 	adc.w	r3, r2, r3
 8006964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	67bb      	str	r3, [r7, #120]	; 0x78
 8006972:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006980:	4649      	mov	r1, r9
 8006982:	008b      	lsls	r3, r1, #2
 8006984:	4641      	mov	r1, r8
 8006986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800698a:	4641      	mov	r1, r8
 800698c:	008a      	lsls	r2, r1, #2
 800698e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006992:	f7fa f979 	bl	8000c88 <__aeabi_uldivmod>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4b39      	ldr	r3, [pc, #228]	; (8006a80 <UART_SetConfig+0x4e4>)
 800699c:	fba3 1302 	umull	r1, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	2164      	movs	r1, #100	; 0x64
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	3332      	adds	r3, #50	; 0x32
 80069ae:	4a34      	ldr	r2, [pc, #208]	; (8006a80 <UART_SetConfig+0x4e4>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ba:	441c      	add	r4, r3
 80069bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c0:	2200      	movs	r2, #0
 80069c2:	673b      	str	r3, [r7, #112]	; 0x70
 80069c4:	677a      	str	r2, [r7, #116]	; 0x74
 80069c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069ca:	4642      	mov	r2, r8
 80069cc:	464b      	mov	r3, r9
 80069ce:	1891      	adds	r1, r2, r2
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	415b      	adcs	r3, r3
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069da:	4641      	mov	r1, r8
 80069dc:	1851      	adds	r1, r2, r1
 80069de:	6039      	str	r1, [r7, #0]
 80069e0:	4649      	mov	r1, r9
 80069e2:	414b      	adcs	r3, r1
 80069e4:	607b      	str	r3, [r7, #4]
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069f2:	4659      	mov	r1, fp
 80069f4:	00cb      	lsls	r3, r1, #3
 80069f6:	4651      	mov	r1, sl
 80069f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069fc:	4651      	mov	r1, sl
 80069fe:	00ca      	lsls	r2, r1, #3
 8006a00:	4610      	mov	r0, r2
 8006a02:	4619      	mov	r1, r3
 8006a04:	4603      	mov	r3, r0
 8006a06:	4642      	mov	r2, r8
 8006a08:	189b      	adds	r3, r3, r2
 8006a0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	460a      	mov	r2, r1
 8006a10:	eb42 0303 	adc.w	r3, r2, r3
 8006a14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	663b      	str	r3, [r7, #96]	; 0x60
 8006a20:	667a      	str	r2, [r7, #100]	; 0x64
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a2e:	4649      	mov	r1, r9
 8006a30:	008b      	lsls	r3, r1, #2
 8006a32:	4641      	mov	r1, r8
 8006a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a38:	4641      	mov	r1, r8
 8006a3a:	008a      	lsls	r2, r1, #2
 8006a3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a40:	f7fa f922 	bl	8000c88 <__aeabi_uldivmod>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <UART_SetConfig+0x4e4>)
 8006a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	2164      	movs	r1, #100	; 0x64
 8006a52:	fb01 f303 	mul.w	r3, r1, r3
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	3332      	adds	r3, #50	; 0x32
 8006a5c:	4a08      	ldr	r2, [pc, #32]	; (8006a80 <UART_SetConfig+0x4e4>)
 8006a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	f003 020f 	and.w	r2, r3, #15
 8006a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4422      	add	r2, r4
 8006a70:	609a      	str	r2, [r3, #8]
}
 8006a72:	bf00      	nop
 8006a74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a7e:	bf00      	nop
 8006a80:	51eb851f 	.word	0x51eb851f

08006a84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f103 0208 	add.w	r2, r3, #8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f103 0208 	add.w	r2, r3, #8
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f103 0208 	add.w	r2, r3, #8
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	601a      	str	r2, [r3, #0]
}
 8006b1a:	bf00      	nop
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b26:	b480      	push	{r7}
 8006b28:	b085      	sub	sp, #20
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3c:	d103      	bne.n	8006b46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	e00c      	b.n	8006b60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e002      	b.n	8006b54 <vListInsert+0x2e>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d2f6      	bcs.n	8006b4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	601a      	str	r2, [r3, #0]
}
 8006b8c:	bf00      	nop
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6892      	ldr	r2, [r2, #8]
 8006bae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6852      	ldr	r2, [r2, #4]
 8006bb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d103      	bne.n	8006bcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	1e5a      	subs	r2, r3, #1
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c16:	f001 fd2d 	bl	8008674 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c22:	68f9      	ldr	r1, [r7, #12]
 8006c24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c26:	fb01 f303 	mul.w	r3, r1, r3
 8006c2a:	441a      	add	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	3b01      	subs	r3, #1
 8006c48:	68f9      	ldr	r1, [r7, #12]
 8006c4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
 8006c50:	441a      	add	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	22ff      	movs	r2, #255	; 0xff
 8006c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	22ff      	movs	r2, #255	; 0xff
 8006c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d114      	bne.n	8006c96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01a      	beq.n	8006caa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3310      	adds	r3, #16
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 f871 	bl	8007d60 <xTaskRemoveFromEventList>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d012      	beq.n	8006caa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <xQueueGenericReset+0xcc>)
 8006c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	e009      	b.n	8006caa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3310      	adds	r3, #16
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff fef2 	bl	8006a84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3324      	adds	r3, #36	; 0x24
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff feed 	bl	8006a84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006caa:	f001 fd13 	bl	80086d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cae:	2301      	movs	r3, #1
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08a      	sub	sp, #40	; 0x28
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	613b      	str	r3, [r7, #16]
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	fb02 f303 	mul.w	r3, r2, r3
 8006cee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	3348      	adds	r3, #72	; 0x48
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 fddf 	bl	80088b8 <pvPortMalloc>
 8006cfa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d011      	beq.n	8006d26 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	3348      	adds	r3, #72	; 0x48
 8006d0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d14:	79fa      	ldrb	r2, [r7, #7]
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f805 	bl	8006d30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d26:	69bb      	ldr	r3, [r7, #24]
	}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d103      	bne.n	8006d4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	e002      	b.n	8006d52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d5e:	2101      	movs	r1, #1
 8006d60:	69b8      	ldr	r0, [r7, #24]
 8006d62:	f7ff ff43 	bl	8006bec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d66:	bf00      	nop
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b08e      	sub	sp, #56	; 0x38
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	623b      	str	r3, [r7, #32]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	61fb      	str	r3, [r7, #28]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d103      	bne.n	8006dc6 <xQueueGiveFromISR+0x58>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <xQueueGiveFromISR+0x5c>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e000      	b.n	8006dcc <xQueueGiveFromISR+0x5e>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10a      	bne.n	8006de6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	61bb      	str	r3, [r7, #24]
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006de6:	f001 fd27 	bl	8008838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006dea:	f3ef 8211 	mrs	r2, BASEPRI
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	617a      	str	r2, [r7, #20]
 8006e00:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d22b      	bcs.n	8006e6e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d112      	bne.n	8006e58 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d016      	beq.n	8006e68 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	3324      	adds	r3, #36	; 0x24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 ff8e 	bl	8007d60 <xTaskRemoveFromEventList>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00e      	beq.n	8006e68 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2201      	movs	r2, #1
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	e007      	b.n	8006e68 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	b25a      	sxtb	r2, r3
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e6c:	e001      	b.n	8006e72 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
 8006e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e74:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3738      	adds	r7, #56	; 0x38
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08e      	sub	sp, #56	; 0x38
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e92:	2300      	movs	r3, #0
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	623b      	str	r3, [r7, #32]
}
 8006eb6:	bf00      	nop
 8006eb8:	e7fe      	b.n	8006eb8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	61fb      	str	r3, [r7, #28]
}
 8006ed4:	bf00      	nop
 8006ed6:	e7fe      	b.n	8006ed6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ed8:	f001 f902 	bl	80080e0 <xTaskGetSchedulerState>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d102      	bne.n	8006ee8 <xQueueSemaphoreTake+0x60>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <xQueueSemaphoreTake+0x64>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <xQueueSemaphoreTake+0x66>
 8006eec:	2300      	movs	r3, #0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	61bb      	str	r3, [r7, #24]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f08:	f001 fbb4 	bl	8008674 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d024      	beq.n	8006f62 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	1e5a      	subs	r2, r3, #1
 8006f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f28:	f001 f9fc 	bl	8008324 <pvTaskIncrementMutexHeldCount>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00f      	beq.n	8006f5a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	3310      	adds	r3, #16
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 ff0e 	bl	8007d60 <xTaskRemoveFromEventList>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d007      	beq.n	8006f5a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f4a:	4b54      	ldr	r3, [pc, #336]	; (800709c <xQueueSemaphoreTake+0x214>)
 8006f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f5a:	f001 fbbb 	bl	80086d4 <vPortExitCritical>
				return pdPASS;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e097      	b.n	8007092 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d111      	bne.n	8006f8c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	617b      	str	r3, [r7, #20]
}
 8006f80:	bf00      	nop
 8006f82:	e7fe      	b.n	8006f82 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006f84:	f001 fba6 	bl	80086d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e082      	b.n	8007092 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f92:	f107 030c 	add.w	r3, r7, #12
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 ff44 	bl	8007e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fa0:	f001 fb98 	bl	80086d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fa4:	f000 fce4 	bl	8007970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fa8:	f001 fb64 	bl	8008674 <vPortEnterCritical>
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fb2:	b25b      	sxtb	r3, r3
 8006fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb8:	d103      	bne.n	8006fc2 <xQueueSemaphoreTake+0x13a>
 8006fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fc8:	b25b      	sxtb	r3, r3
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fce:	d103      	bne.n	8006fd8 <xQueueSemaphoreTake+0x150>
 8006fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fd8:	f001 fb7c 	bl	80086d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fdc:	463a      	mov	r2, r7
 8006fde:	f107 030c 	add.w	r3, r7, #12
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 ff33 	bl	8007e50 <xTaskCheckForTimeOut>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d132      	bne.n	8007056 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ff2:	f000 f8bf 	bl	8007174 <prvIsQueueEmpty>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d026      	beq.n	800704a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d109      	bne.n	8007018 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007004:	f001 fb36 	bl	8008674 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	4618      	mov	r0, r3
 800700e:	f001 f885 	bl	800811c <xTaskPriorityInherit>
 8007012:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007014:	f001 fb5e 	bl	80086d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	3324      	adds	r3, #36	; 0x24
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	4611      	mov	r1, r2
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fe79 	bl	8007d18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007028:	f000 f852 	bl	80070d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800702c:	f000 fcae 	bl	800798c <xTaskResumeAll>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	f47f af68 	bne.w	8006f08 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007038:	4b18      	ldr	r3, [pc, #96]	; (800709c <xQueueSemaphoreTake+0x214>)
 800703a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	e75e      	b.n	8006f08 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800704a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800704c:	f000 f840 	bl	80070d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007050:	f000 fc9c 	bl	800798c <xTaskResumeAll>
 8007054:	e758      	b.n	8006f08 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007056:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007058:	f000 f83a 	bl	80070d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800705c:	f000 fc96 	bl	800798c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007062:	f000 f887 	bl	8007174 <prvIsQueueEmpty>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	f43f af4d 	beq.w	8006f08 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00d      	beq.n	8007090 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007074:	f001 fafe 	bl	8008674 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800707a:	f000 f811 	bl	80070a0 <prvGetDisinheritPriorityAfterTimeout>
 800707e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007086:	4618      	mov	r0, r3
 8007088:	f001 f8be 	bl	8008208 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800708c:	f001 fb22 	bl	80086d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007090:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007092:	4618      	mov	r0, r3
 8007094:	3738      	adds	r7, #56	; 0x38
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	e000ed04 	.word	0xe000ed04

080070a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d006      	beq.n	80070be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f1c3 0308 	rsb	r3, r3, #8
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	e001      	b.n	80070c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070c2:	68fb      	ldr	r3, [r7, #12]
	}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070d8:	f001 facc 	bl	8008674 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070e4:	e011      	b.n	800710a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d012      	beq.n	8007114 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3324      	adds	r3, #36	; 0x24
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fe34 	bl	8007d60 <xTaskRemoveFromEventList>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070fe:	f000 ff09 	bl	8007f14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	3b01      	subs	r3, #1
 8007106:	b2db      	uxtb	r3, r3
 8007108:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800710a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800710e:	2b00      	cmp	r3, #0
 8007110:	dce9      	bgt.n	80070e6 <prvUnlockQueue+0x16>
 8007112:	e000      	b.n	8007116 <prvUnlockQueue+0x46>
					break;
 8007114:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	22ff      	movs	r2, #255	; 0xff
 800711a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800711e:	f001 fad9 	bl	80086d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007122:	f001 faa7 	bl	8008674 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800712c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800712e:	e011      	b.n	8007154 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d012      	beq.n	800715e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3310      	adds	r3, #16
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fe0f 	bl	8007d60 <xTaskRemoveFromEventList>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007148:	f000 fee4 	bl	8007f14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	3b01      	subs	r3, #1
 8007150:	b2db      	uxtb	r3, r3
 8007152:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007154:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007158:	2b00      	cmp	r3, #0
 800715a:	dce9      	bgt.n	8007130 <prvUnlockQueue+0x60>
 800715c:	e000      	b.n	8007160 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800715e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	22ff      	movs	r2, #255	; 0xff
 8007164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007168:	f001 fab4 	bl	80086d4 <vPortExitCritical>
}
 800716c:	bf00      	nop
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800717c:	f001 fa7a 	bl	8008674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	2b00      	cmp	r3, #0
 8007186:	d102      	bne.n	800718e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007188:	2301      	movs	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	e001      	b.n	8007192 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007192:	f001 fa9f 	bl	80086d4 <vPortExitCritical>

	return xReturn;
 8007196:	68fb      	ldr	r3, [r7, #12]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08e      	sub	sp, #56	; 0x38
 80071a4:	af04      	add	r7, sp, #16
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10a      	bne.n	80071ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	623b      	str	r3, [r7, #32]
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	61fb      	str	r3, [r7, #28]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071e6:	23b4      	movs	r3, #180	; 0xb4
 80071e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	2bb4      	cmp	r3, #180	; 0xb4
 80071ee:	d00a      	beq.n	8007206 <xTaskCreateStatic+0x66>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	61bb      	str	r3, [r7, #24]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007206:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01e      	beq.n	800724c <xTaskCreateStatic+0xac>
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01b      	beq.n	800724c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800721c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	2202      	movs	r2, #2
 8007222:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007226:	2300      	movs	r3, #0
 8007228:	9303      	str	r3, [sp, #12]
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	f107 0314 	add.w	r3, r7, #20
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f850 	bl	80072e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007246:	f000 f8eb 	bl	8007420 <prvAddNewTaskToReadyList>
 800724a:	e001      	b.n	8007250 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800724c:	2300      	movs	r3, #0
 800724e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007250:	697b      	ldr	r3, [r7, #20]
	}
 8007252:	4618      	mov	r0, r3
 8007254:	3728      	adds	r7, #40	; 0x28
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800725a:	b580      	push	{r7, lr}
 800725c:	b08c      	sub	sp, #48	; 0x30
 800725e:	af04      	add	r7, sp, #16
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	4613      	mov	r3, r2
 8007268:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800726a:	88fb      	ldrh	r3, [r7, #6]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4618      	mov	r0, r3
 8007270:	f001 fb22 	bl	80088b8 <pvPortMalloc>
 8007274:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00e      	beq.n	800729a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800727c:	20b4      	movs	r0, #180	; 0xb4
 800727e:	f001 fb1b 	bl	80088b8 <pvPortMalloc>
 8007282:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
 8007290:	e005      	b.n	800729e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007292:	6978      	ldr	r0, [r7, #20]
 8007294:	f001 fbdc 	bl	8008a50 <vPortFree>
 8007298:	e001      	b.n	800729e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800729a:	2300      	movs	r3, #0
 800729c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d017      	beq.n	80072d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072ac:	88fa      	ldrh	r2, [r7, #6]
 80072ae:	2300      	movs	r3, #0
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	9302      	str	r3, [sp, #8]
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	9301      	str	r3, [sp, #4]
 80072ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68b9      	ldr	r1, [r7, #8]
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f80e 	bl	80072e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072c8:	69f8      	ldr	r0, [r7, #28]
 80072ca:	f000 f8a9 	bl	8007420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072ce:	2301      	movs	r3, #1
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	e002      	b.n	80072da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072d4:	f04f 33ff 	mov.w	r3, #4294967295
 80072d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072da:	69bb      	ldr	r3, [r7, #24]
	}
 80072dc:	4618      	mov	r0, r3
 80072de:	3720      	adds	r7, #32
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072fc:	3b01      	subs	r3, #1
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f023 0307 	bic.w	r3, r3, #7
 800730a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	617b      	str	r3, [r7, #20]
}
 8007328:	bf00      	nop
 800732a:	e7fe      	b.n	800732a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01f      	beq.n	8007372 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
 8007336:	e012      	b.n	800735e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	7819      	ldrb	r1, [r3, #0]
 8007340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	4413      	add	r3, r2
 8007346:	3334      	adds	r3, #52	; 0x34
 8007348:	460a      	mov	r2, r1
 800734a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d006      	beq.n	8007366 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	3301      	adds	r3, #1
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	2b0f      	cmp	r3, #15
 8007362:	d9e9      	bls.n	8007338 <prvInitialiseNewTask+0x54>
 8007364:	e000      	b.n	8007368 <prvInitialiseNewTask+0x84>
			{
				break;
 8007366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007370:	e003      	b.n	800737a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	2b07      	cmp	r3, #7
 800737e:	d901      	bls.n	8007384 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007380:	2307      	movs	r3, #7
 8007382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800738e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	2200      	movs	r2, #0
 8007394:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	3304      	adds	r3, #4
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff fb92 	bl	8006ac4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	3318      	adds	r3, #24
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff fb8d 	bl	8006ac4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	f1c3 0208 	rsb	r2, r3, #8
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	334c      	adds	r3, #76	; 0x4c
 80073d4:	2260      	movs	r2, #96	; 0x60
 80073d6:	2100      	movs	r1, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 fd88 	bl	8008eee <memset>
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	4a0c      	ldr	r2, [pc, #48]	; (8007414 <prvInitialiseNewTask+0x130>)
 80073e2:	651a      	str	r2, [r3, #80]	; 0x50
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	4a0c      	ldr	r2, [pc, #48]	; (8007418 <prvInitialiseNewTask+0x134>)
 80073e8:	655a      	str	r2, [r3, #84]	; 0x54
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	4a0b      	ldr	r2, [pc, #44]	; (800741c <prvInitialiseNewTask+0x138>)
 80073ee:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	69b8      	ldr	r0, [r7, #24]
 80073f6:	f001 f80f 	bl	8008418 <pxPortInitialiseStack>
 80073fa:	4602      	mov	r2, r0
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800740a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800740c:	bf00      	nop
 800740e:	3720      	adds	r7, #32
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	0800bc8c 	.word	0x0800bc8c
 8007418:	0800bcac 	.word	0x0800bcac
 800741c:	0800bc6c 	.word	0x0800bc6c

08007420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007428:	f001 f924 	bl	8008674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800742c:	4b2a      	ldr	r3, [pc, #168]	; (80074d8 <prvAddNewTaskToReadyList+0xb8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3301      	adds	r3, #1
 8007432:	4a29      	ldr	r2, [pc, #164]	; (80074d8 <prvAddNewTaskToReadyList+0xb8>)
 8007434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007436:	4b29      	ldr	r3, [pc, #164]	; (80074dc <prvAddNewTaskToReadyList+0xbc>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d109      	bne.n	8007452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800743e:	4a27      	ldr	r2, [pc, #156]	; (80074dc <prvAddNewTaskToReadyList+0xbc>)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007444:	4b24      	ldr	r3, [pc, #144]	; (80074d8 <prvAddNewTaskToReadyList+0xb8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d110      	bne.n	800746e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800744c:	f000 fd86 	bl	8007f5c <prvInitialiseTaskLists>
 8007450:	e00d      	b.n	800746e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007452:	4b23      	ldr	r3, [pc, #140]	; (80074e0 <prvAddNewTaskToReadyList+0xc0>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d109      	bne.n	800746e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800745a:	4b20      	ldr	r3, [pc, #128]	; (80074dc <prvAddNewTaskToReadyList+0xbc>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	429a      	cmp	r2, r3
 8007466:	d802      	bhi.n	800746e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007468:	4a1c      	ldr	r2, [pc, #112]	; (80074dc <prvAddNewTaskToReadyList+0xbc>)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800746e:	4b1d      	ldr	r3, [pc, #116]	; (80074e4 <prvAddNewTaskToReadyList+0xc4>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3301      	adds	r3, #1
 8007474:	4a1b      	ldr	r2, [pc, #108]	; (80074e4 <prvAddNewTaskToReadyList+0xc4>)
 8007476:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	2201      	movs	r2, #1
 800747e:	409a      	lsls	r2, r3
 8007480:	4b19      	ldr	r3, [pc, #100]	; (80074e8 <prvAddNewTaskToReadyList+0xc8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4313      	orrs	r3, r2
 8007486:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <prvAddNewTaskToReadyList+0xc8>)
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4a15      	ldr	r2, [pc, #84]	; (80074ec <prvAddNewTaskToReadyList+0xcc>)
 8007498:	441a      	add	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3304      	adds	r3, #4
 800749e:	4619      	mov	r1, r3
 80074a0:	4610      	mov	r0, r2
 80074a2:	f7ff fb1c 	bl	8006ade <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074a6:	f001 f915 	bl	80086d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074aa:	4b0d      	ldr	r3, [pc, #52]	; (80074e0 <prvAddNewTaskToReadyList+0xc0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00e      	beq.n	80074d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074b2:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <prvAddNewTaskToReadyList+0xbc>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	429a      	cmp	r2, r3
 80074be:	d207      	bcs.n	80074d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <prvAddNewTaskToReadyList+0xd0>)
 80074c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074d0:	bf00      	nop
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20000930 	.word	0x20000930
 80074dc:	2000081c 	.word	0x2000081c
 80074e0:	2000093c 	.word	0x2000093c
 80074e4:	2000094c 	.word	0x2000094c
 80074e8:	20000938 	.word	0x20000938
 80074ec:	20000820 	.word	0x20000820
 80074f0:	e000ed04 	.word	0xe000ed04

080074f4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80074fc:	f001 f8ba 	bl	8008674 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d102      	bne.n	800750c <vTaskDelete+0x18>
 8007506:	4b39      	ldr	r3, [pc, #228]	; (80075ec <vTaskDelete+0xf8>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	e000      	b.n	800750e <vTaskDelete+0x1a>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3304      	adds	r3, #4
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff fb3f 	bl	8006b98 <uxListRemove>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d115      	bne.n	800754c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007524:	4932      	ldr	r1, [pc, #200]	; (80075f0 <vTaskDelete+0xfc>)
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10a      	bne.n	800754c <vTaskDelete+0x58>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	2201      	movs	r2, #1
 800753c:	fa02 f303 	lsl.w	r3, r2, r3
 8007540:	43da      	mvns	r2, r3
 8007542:	4b2c      	ldr	r3, [pc, #176]	; (80075f4 <vTaskDelete+0x100>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4013      	ands	r3, r2
 8007548:	4a2a      	ldr	r2, [pc, #168]	; (80075f4 <vTaskDelete+0x100>)
 800754a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	2b00      	cmp	r3, #0
 8007552:	d004      	beq.n	800755e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3318      	adds	r3, #24
 8007558:	4618      	mov	r0, r3
 800755a:	f7ff fb1d 	bl	8006b98 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800755e:	4b26      	ldr	r3, [pc, #152]	; (80075f8 <vTaskDelete+0x104>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3301      	adds	r3, #1
 8007564:	4a24      	ldr	r2, [pc, #144]	; (80075f8 <vTaskDelete+0x104>)
 8007566:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007568:	4b20      	ldr	r3, [pc, #128]	; (80075ec <vTaskDelete+0xf8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	429a      	cmp	r2, r3
 8007570:	d10b      	bne.n	800758a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3304      	adds	r3, #4
 8007576:	4619      	mov	r1, r3
 8007578:	4820      	ldr	r0, [pc, #128]	; (80075fc <vTaskDelete+0x108>)
 800757a:	f7ff fab0 	bl	8006ade <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800757e:	4b20      	ldr	r3, [pc, #128]	; (8007600 <vTaskDelete+0x10c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3301      	adds	r3, #1
 8007584:	4a1e      	ldr	r2, [pc, #120]	; (8007600 <vTaskDelete+0x10c>)
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	e009      	b.n	800759e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800758a:	4b1e      	ldr	r3, [pc, #120]	; (8007604 <vTaskDelete+0x110>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3b01      	subs	r3, #1
 8007590:	4a1c      	ldr	r2, [pc, #112]	; (8007604 <vTaskDelete+0x110>)
 8007592:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fd4f 	bl	8008038 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800759a:	f000 fd81 	bl	80080a0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800759e:	f001 f899 	bl	80086d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80075a2:	4b19      	ldr	r3, [pc, #100]	; (8007608 <vTaskDelete+0x114>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01b      	beq.n	80075e2 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80075aa:	4b10      	ldr	r3, [pc, #64]	; (80075ec <vTaskDelete+0xf8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d116      	bne.n	80075e2 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80075b4:	4b15      	ldr	r3, [pc, #84]	; (800760c <vTaskDelete+0x118>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <vTaskDelete+0xde>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	60bb      	str	r3, [r7, #8]
}
 80075ce:	bf00      	nop
 80075d0:	e7fe      	b.n	80075d0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80075d2:	4b0f      	ldr	r3, [pc, #60]	; (8007610 <vTaskDelete+0x11c>)
 80075d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	2000081c 	.word	0x2000081c
 80075f0:	20000820 	.word	0x20000820
 80075f4:	20000938 	.word	0x20000938
 80075f8:	2000094c 	.word	0x2000094c
 80075fc:	20000904 	.word	0x20000904
 8007600:	20000918 	.word	0x20000918
 8007604:	20000930 	.word	0x20000930
 8007608:	2000093c 	.word	0x2000093c
 800760c:	20000958 	.word	0x20000958
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800761e:	2300      	movs	r3, #0
 8007620:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <vTaskDelayUntil+0x2a>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	617b      	str	r3, [r7, #20]
}
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <vTaskDelayUntil+0x46>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	613b      	str	r3, [r7, #16]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800765a:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <vTaskDelayUntil+0xf0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <vTaskDelayUntil+0x64>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	60fb      	str	r3, [r7, #12]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007678:	f000 f97a 	bl	8007970 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800767c:	4b22      	ldr	r3, [pc, #136]	; (8007708 <vTaskDelayUntil+0xf4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	4413      	add	r3, r2
 800768a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6a3a      	ldr	r2, [r7, #32]
 8007692:	429a      	cmp	r2, r3
 8007694:	d20b      	bcs.n	80076ae <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	429a      	cmp	r2, r3
 800769e:	d211      	bcs.n	80076c4 <vTaskDelayUntil+0xb0>
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d90d      	bls.n	80076c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24
 80076ac:	e00a      	b.n	80076c4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d303      	bcc.n	80076c0 <vTaskDelayUntil+0xac>
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d901      	bls.n	80076c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80076c0:	2301      	movs	r3, #1
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d006      	beq.n	80076de <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2100      	movs	r1, #0
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fe37 	bl	800834c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80076de:	f000 f955 	bl	800798c <xTaskResumeAll>
 80076e2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d107      	bne.n	80076fa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80076ea:	4b08      	ldr	r3, [pc, #32]	; (800770c <vTaskDelayUntil+0xf8>)
 80076ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076fa:	bf00      	nop
 80076fc:	3728      	adds	r7, #40	; 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20000958 	.word	0x20000958
 8007708:	20000934 	.word	0x20000934
 800770c:	e000ed04 	.word	0xe000ed04

08007710 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d017      	beq.n	8007752 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007722:	4b13      	ldr	r3, [pc, #76]	; (8007770 <vTaskDelay+0x60>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <vTaskDelay+0x30>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	60bb      	str	r3, [r7, #8]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007740:	f000 f916 	bl	8007970 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007744:	2100      	movs	r1, #0
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fe00 	bl	800834c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800774c:	f000 f91e 	bl	800798c <xTaskResumeAll>
 8007750:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d107      	bne.n	8007768 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <vTaskDelay+0x64>)
 800775a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000958 	.word	0x20000958
 8007774:	e000ed04 	.word	0xe000ed04

08007778 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007780:	f000 ff78 	bl	8008674 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d102      	bne.n	8007790 <vTaskSuspend+0x18>
 800778a:	4b3c      	ldr	r3, [pc, #240]	; (800787c <vTaskSuspend+0x104>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	e000      	b.n	8007792 <vTaskSuspend+0x1a>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3304      	adds	r3, #4
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff f9fd 	bl	8006b98 <uxListRemove>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d115      	bne.n	80077d0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a8:	4935      	ldr	r1, [pc, #212]	; (8007880 <vTaskSuspend+0x108>)
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	440b      	add	r3, r1
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10a      	bne.n	80077d0 <vTaskSuspend+0x58>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	2201      	movs	r2, #1
 80077c0:	fa02 f303 	lsl.w	r3, r2, r3
 80077c4:	43da      	mvns	r2, r3
 80077c6:	4b2f      	ldr	r3, [pc, #188]	; (8007884 <vTaskSuspend+0x10c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4013      	ands	r3, r2
 80077cc:	4a2d      	ldr	r2, [pc, #180]	; (8007884 <vTaskSuspend+0x10c>)
 80077ce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d004      	beq.n	80077e2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3318      	adds	r3, #24
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff f9db 	bl	8006b98 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3304      	adds	r3, #4
 80077e6:	4619      	mov	r1, r3
 80077e8:	4827      	ldr	r0, [pc, #156]	; (8007888 <vTaskSuspend+0x110>)
 80077ea:	f7ff f978 	bl	8006ade <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d103      	bne.n	8007802 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007802:	f000 ff67 	bl	80086d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007806:	4b21      	ldr	r3, [pc, #132]	; (800788c <vTaskSuspend+0x114>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800780e:	f000 ff31 	bl	8008674 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007812:	f000 fc45 	bl	80080a0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007816:	f000 ff5d 	bl	80086d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800781a:	4b18      	ldr	r3, [pc, #96]	; (800787c <vTaskSuspend+0x104>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	429a      	cmp	r2, r3
 8007822:	d127      	bne.n	8007874 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007824:	4b19      	ldr	r3, [pc, #100]	; (800788c <vTaskSuspend+0x114>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d017      	beq.n	800785c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800782c:	4b18      	ldr	r3, [pc, #96]	; (8007890 <vTaskSuspend+0x118>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00a      	beq.n	800784a <vTaskSuspend+0xd2>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	60bb      	str	r3, [r7, #8]
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800784a:	4b12      	ldr	r3, [pc, #72]	; (8007894 <vTaskSuspend+0x11c>)
 800784c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800785a:	e00b      	b.n	8007874 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <vTaskSuspend+0x110>)
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <vTaskSuspend+0x120>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d103      	bne.n	8007870 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007868:	4b04      	ldr	r3, [pc, #16]	; (800787c <vTaskSuspend+0x104>)
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
	}
 800786e:	e001      	b.n	8007874 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007870:	f000 f9f0 	bl	8007c54 <vTaskSwitchContext>
	}
 8007874:	bf00      	nop
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	2000081c 	.word	0x2000081c
 8007880:	20000820 	.word	0x20000820
 8007884:	20000938 	.word	0x20000938
 8007888:	2000091c 	.word	0x2000091c
 800788c:	2000093c 	.word	0x2000093c
 8007890:	20000958 	.word	0x20000958
 8007894:	e000ed04 	.word	0xe000ed04
 8007898:	20000930 	.word	0x20000930

0800789c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08a      	sub	sp, #40	; 0x28
 80078a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078aa:	463a      	mov	r2, r7
 80078ac:	1d39      	adds	r1, r7, #4
 80078ae:	f107 0308 	add.w	r3, r7, #8
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7f9 ff62 	bl	800177c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	9202      	str	r2, [sp, #8]
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	2300      	movs	r3, #0
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	2300      	movs	r3, #0
 80078c8:	460a      	mov	r2, r1
 80078ca:	4921      	ldr	r1, [pc, #132]	; (8007950 <vTaskStartScheduler+0xb4>)
 80078cc:	4821      	ldr	r0, [pc, #132]	; (8007954 <vTaskStartScheduler+0xb8>)
 80078ce:	f7ff fc67 	bl	80071a0 <xTaskCreateStatic>
 80078d2:	4603      	mov	r3, r0
 80078d4:	4a20      	ldr	r2, [pc, #128]	; (8007958 <vTaskStartScheduler+0xbc>)
 80078d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078d8:	4b1f      	ldr	r3, [pc, #124]	; (8007958 <vTaskStartScheduler+0xbc>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078e0:	2301      	movs	r3, #1
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	e001      	b.n	80078ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d11b      	bne.n	8007928 <vTaskStartScheduler+0x8c>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	613b      	str	r3, [r7, #16]
}
 8007902:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007904:	4b15      	ldr	r3, [pc, #84]	; (800795c <vTaskStartScheduler+0xc0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	334c      	adds	r3, #76	; 0x4c
 800790a:	4a15      	ldr	r2, [pc, #84]	; (8007960 <vTaskStartScheduler+0xc4>)
 800790c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800790e:	4b15      	ldr	r3, [pc, #84]	; (8007964 <vTaskStartScheduler+0xc8>)
 8007910:	f04f 32ff 	mov.w	r2, #4294967295
 8007914:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007916:	4b14      	ldr	r3, [pc, #80]	; (8007968 <vTaskStartScheduler+0xcc>)
 8007918:	2201      	movs	r2, #1
 800791a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800791c:	4b13      	ldr	r3, [pc, #76]	; (800796c <vTaskStartScheduler+0xd0>)
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007922:	f000 fe05 	bl	8008530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007926:	e00e      	b.n	8007946 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792e:	d10a      	bne.n	8007946 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	60fb      	str	r3, [r7, #12]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <vTaskStartScheduler+0xa8>
}
 8007946:	bf00      	nop
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	0800bc44 	.word	0x0800bc44
 8007954:	08007f2d 	.word	0x08007f2d
 8007958:	20000954 	.word	0x20000954
 800795c:	2000081c 	.word	0x2000081c
 8007960:	20000014 	.word	0x20000014
 8007964:	20000950 	.word	0x20000950
 8007968:	2000093c 	.word	0x2000093c
 800796c:	20000934 	.word	0x20000934

08007970 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007974:	4b04      	ldr	r3, [pc, #16]	; (8007988 <vTaskSuspendAll+0x18>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	4a03      	ldr	r2, [pc, #12]	; (8007988 <vTaskSuspendAll+0x18>)
 800797c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800797e:	bf00      	nop
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	20000958 	.word	0x20000958

0800798c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007996:	2300      	movs	r3, #0
 8007998:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800799a:	4b41      	ldr	r3, [pc, #260]	; (8007aa0 <xTaskResumeAll+0x114>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	603b      	str	r3, [r7, #0]
}
 80079b4:	bf00      	nop
 80079b6:	e7fe      	b.n	80079b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079b8:	f000 fe5c 	bl	8008674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079bc:	4b38      	ldr	r3, [pc, #224]	; (8007aa0 <xTaskResumeAll+0x114>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	4a37      	ldr	r2, [pc, #220]	; (8007aa0 <xTaskResumeAll+0x114>)
 80079c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c6:	4b36      	ldr	r3, [pc, #216]	; (8007aa0 <xTaskResumeAll+0x114>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d161      	bne.n	8007a92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079ce:	4b35      	ldr	r3, [pc, #212]	; (8007aa4 <xTaskResumeAll+0x118>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d05d      	beq.n	8007a92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079d6:	e02e      	b.n	8007a36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d8:	4b33      	ldr	r3, [pc, #204]	; (8007aa8 <xTaskResumeAll+0x11c>)
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3318      	adds	r3, #24
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff f8d7 	bl	8006b98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff f8d2 	bl	8006b98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	2201      	movs	r2, #1
 80079fa:	409a      	lsls	r2, r3
 80079fc:	4b2b      	ldr	r3, [pc, #172]	; (8007aac <xTaskResumeAll+0x120>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	4a2a      	ldr	r2, [pc, #168]	; (8007aac <xTaskResumeAll+0x120>)
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4a27      	ldr	r2, [pc, #156]	; (8007ab0 <xTaskResumeAll+0x124>)
 8007a14:	441a      	add	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3304      	adds	r3, #4
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	f7ff f85e 	bl	8006ade <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a26:	4b23      	ldr	r3, [pc, #140]	; (8007ab4 <xTaskResumeAll+0x128>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d302      	bcc.n	8007a36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007a30:	4b21      	ldr	r3, [pc, #132]	; (8007ab8 <xTaskResumeAll+0x12c>)
 8007a32:	2201      	movs	r2, #1
 8007a34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a36:	4b1c      	ldr	r3, [pc, #112]	; (8007aa8 <xTaskResumeAll+0x11c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1cc      	bne.n	80079d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a44:	f000 fb2c 	bl	80080a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a48:	4b1c      	ldr	r3, [pc, #112]	; (8007abc <xTaskResumeAll+0x130>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d010      	beq.n	8007a76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a54:	f000 f846 	bl	8007ae4 <xTaskIncrementTick>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d002      	beq.n	8007a64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007a5e:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <xTaskResumeAll+0x12c>)
 8007a60:	2201      	movs	r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1f1      	bne.n	8007a54 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007a70:	4b12      	ldr	r3, [pc, #72]	; (8007abc <xTaskResumeAll+0x130>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a76:	4b10      	ldr	r3, [pc, #64]	; (8007ab8 <xTaskResumeAll+0x12c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a82:	4b0f      	ldr	r3, [pc, #60]	; (8007ac0 <xTaskResumeAll+0x134>)
 8007a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a92:	f000 fe1f 	bl	80086d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007a96:	68bb      	ldr	r3, [r7, #8]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20000958 	.word	0x20000958
 8007aa4:	20000930 	.word	0x20000930
 8007aa8:	200008f0 	.word	0x200008f0
 8007aac:	20000938 	.word	0x20000938
 8007ab0:	20000820 	.word	0x20000820
 8007ab4:	2000081c 	.word	0x2000081c
 8007ab8:	20000944 	.word	0x20000944
 8007abc:	20000940 	.word	0x20000940
 8007ac0:	e000ed04 	.word	0xe000ed04

08007ac4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007aca:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <xTaskGetTickCount+0x1c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ad0:	687b      	ldr	r3, [r7, #4]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	20000934 	.word	0x20000934

08007ae4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aee:	4b4e      	ldr	r3, [pc, #312]	; (8007c28 <xTaskIncrementTick+0x144>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f040 808e 	bne.w	8007c14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007af8:	4b4c      	ldr	r3, [pc, #304]	; (8007c2c <xTaskIncrementTick+0x148>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b00:	4a4a      	ldr	r2, [pc, #296]	; (8007c2c <xTaskIncrementTick+0x148>)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d120      	bne.n	8007b4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b0c:	4b48      	ldr	r3, [pc, #288]	; (8007c30 <xTaskIncrementTick+0x14c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <xTaskIncrementTick+0x48>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	603b      	str	r3, [r7, #0]
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <xTaskIncrementTick+0x46>
 8007b2c:	4b40      	ldr	r3, [pc, #256]	; (8007c30 <xTaskIncrementTick+0x14c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	4b40      	ldr	r3, [pc, #256]	; (8007c34 <xTaskIncrementTick+0x150>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a3e      	ldr	r2, [pc, #248]	; (8007c30 <xTaskIncrementTick+0x14c>)
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	4a3e      	ldr	r2, [pc, #248]	; (8007c34 <xTaskIncrementTick+0x150>)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	4b3d      	ldr	r3, [pc, #244]	; (8007c38 <xTaskIncrementTick+0x154>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3301      	adds	r3, #1
 8007b46:	4a3c      	ldr	r2, [pc, #240]	; (8007c38 <xTaskIncrementTick+0x154>)
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	f000 faa9 	bl	80080a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b4e:	4b3b      	ldr	r3, [pc, #236]	; (8007c3c <xTaskIncrementTick+0x158>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d348      	bcc.n	8007bea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b58:	4b35      	ldr	r3, [pc, #212]	; (8007c30 <xTaskIncrementTick+0x14c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d104      	bne.n	8007b6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b62:	4b36      	ldr	r3, [pc, #216]	; (8007c3c <xTaskIncrementTick+0x158>)
 8007b64:	f04f 32ff 	mov.w	r2, #4294967295
 8007b68:	601a      	str	r2, [r3, #0]
					break;
 8007b6a:	e03e      	b.n	8007bea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b6c:	4b30      	ldr	r3, [pc, #192]	; (8007c30 <xTaskIncrementTick+0x14c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d203      	bcs.n	8007b8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b84:	4a2d      	ldr	r2, [pc, #180]	; (8007c3c <xTaskIncrementTick+0x158>)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b8a:	e02e      	b.n	8007bea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff f801 	bl	8006b98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	3318      	adds	r3, #24
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe fff8 	bl	8006b98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	2201      	movs	r2, #1
 8007bae:	409a      	lsls	r2, r3
 8007bb0:	4b23      	ldr	r3, [pc, #140]	; (8007c40 <xTaskIncrementTick+0x15c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	4a22      	ldr	r2, [pc, #136]	; (8007c40 <xTaskIncrementTick+0x15c>)
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4a1f      	ldr	r2, [pc, #124]	; (8007c44 <xTaskIncrementTick+0x160>)
 8007bc8:	441a      	add	r2, r3
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f7fe ff84 	bl	8006ade <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bda:	4b1b      	ldr	r3, [pc, #108]	; (8007c48 <xTaskIncrementTick+0x164>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d3b9      	bcc.n	8007b58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007be8:	e7b6      	b.n	8007b58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bea:	4b17      	ldr	r3, [pc, #92]	; (8007c48 <xTaskIncrementTick+0x164>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf0:	4914      	ldr	r1, [pc, #80]	; (8007c44 <xTaskIncrementTick+0x160>)
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d901      	bls.n	8007c06 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007c02:	2301      	movs	r3, #1
 8007c04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c06:	4b11      	ldr	r3, [pc, #68]	; (8007c4c <xTaskIncrementTick+0x168>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	617b      	str	r3, [r7, #20]
 8007c12:	e004      	b.n	8007c1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c14:	4b0e      	ldr	r3, [pc, #56]	; (8007c50 <xTaskIncrementTick+0x16c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	4a0d      	ldr	r2, [pc, #52]	; (8007c50 <xTaskIncrementTick+0x16c>)
 8007c1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c1e:	697b      	ldr	r3, [r7, #20]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	20000958 	.word	0x20000958
 8007c2c:	20000934 	.word	0x20000934
 8007c30:	200008e8 	.word	0x200008e8
 8007c34:	200008ec 	.word	0x200008ec
 8007c38:	20000948 	.word	0x20000948
 8007c3c:	20000950 	.word	0x20000950
 8007c40:	20000938 	.word	0x20000938
 8007c44:	20000820 	.word	0x20000820
 8007c48:	2000081c 	.word	0x2000081c
 8007c4c:	20000944 	.word	0x20000944
 8007c50:	20000940 	.word	0x20000940

08007c54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c5a:	4b29      	ldr	r3, [pc, #164]	; (8007d00 <vTaskSwitchContext+0xac>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c62:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <vTaskSwitchContext+0xb0>)
 8007c64:	2201      	movs	r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c68:	e044      	b.n	8007cf4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007c6a:	4b26      	ldr	r3, [pc, #152]	; (8007d04 <vTaskSwitchContext+0xb0>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c70:	4b25      	ldr	r3, [pc, #148]	; (8007d08 <vTaskSwitchContext+0xb4>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	fab3 f383 	clz	r3, r3
 8007c7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	f1c3 031f 	rsb	r3, r3, #31
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	4921      	ldr	r1, [pc, #132]	; (8007d0c <vTaskSwitchContext+0xb8>)
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	440b      	add	r3, r1
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10a      	bne.n	8007cb0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	607b      	str	r3, [r7, #4]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <vTaskSwitchContext+0x5a>
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4a14      	ldr	r2, [pc, #80]	; (8007d0c <vTaskSwitchContext+0xb8>)
 8007cbc:	4413      	add	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	605a      	str	r2, [r3, #4]
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	3308      	adds	r3, #8
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d104      	bne.n	8007ce0 <vTaskSwitchContext+0x8c>
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	605a      	str	r2, [r3, #4]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	4a0a      	ldr	r2, [pc, #40]	; (8007d10 <vTaskSwitchContext+0xbc>)
 8007ce8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cea:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <vTaskSwitchContext+0xbc>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	334c      	adds	r3, #76	; 0x4c
 8007cf0:	4a08      	ldr	r2, [pc, #32]	; (8007d14 <vTaskSwitchContext+0xc0>)
 8007cf2:	6013      	str	r3, [r2, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	20000958 	.word	0x20000958
 8007d04:	20000944 	.word	0x20000944
 8007d08:	20000938 	.word	0x20000938
 8007d0c:	20000820 	.word	0x20000820
 8007d10:	2000081c 	.word	0x2000081c
 8007d14:	20000014 	.word	0x20000014

08007d18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10a      	bne.n	8007d3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	60fb      	str	r3, [r7, #12]
}
 8007d3a:	bf00      	nop
 8007d3c:	e7fe      	b.n	8007d3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d3e:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <vTaskPlaceOnEventList+0x44>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3318      	adds	r3, #24
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7fe feed 	bl	8006b26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	6838      	ldr	r0, [r7, #0]
 8007d50:	f000 fafc 	bl	800834c <prvAddCurrentTaskToDelayedList>
}
 8007d54:	bf00      	nop
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	2000081c 	.word	0x2000081c

08007d60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10a      	bne.n	8007d8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	60fb      	str	r3, [r7, #12]
}
 8007d88:	bf00      	nop
 8007d8a:	e7fe      	b.n	8007d8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	3318      	adds	r3, #24
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe ff01 	bl	8006b98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d96:	4b1d      	ldr	r3, [pc, #116]	; (8007e0c <xTaskRemoveFromEventList+0xac>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d11c      	bne.n	8007dd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	3304      	adds	r3, #4
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe fef8 	bl	8006b98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	2201      	movs	r2, #1
 8007dae:	409a      	lsls	r2, r3
 8007db0:	4b17      	ldr	r3, [pc, #92]	; (8007e10 <xTaskRemoveFromEventList+0xb0>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	4a16      	ldr	r2, [pc, #88]	; (8007e10 <xTaskRemoveFromEventList+0xb0>)
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4a13      	ldr	r2, [pc, #76]	; (8007e14 <xTaskRemoveFromEventList+0xb4>)
 8007dc8:	441a      	add	r2, r3
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	f7fe fe84 	bl	8006ade <vListInsertEnd>
 8007dd6:	e005      	b.n	8007de4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	3318      	adds	r3, #24
 8007ddc:	4619      	mov	r1, r3
 8007dde:	480e      	ldr	r0, [pc, #56]	; (8007e18 <xTaskRemoveFromEventList+0xb8>)
 8007de0:	f7fe fe7d 	bl	8006ade <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de8:	4b0c      	ldr	r3, [pc, #48]	; (8007e1c <xTaskRemoveFromEventList+0xbc>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d905      	bls.n	8007dfe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007df6:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <xTaskRemoveFromEventList+0xc0>)
 8007df8:	2201      	movs	r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	e001      	b.n	8007e02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e02:	697b      	ldr	r3, [r7, #20]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20000958 	.word	0x20000958
 8007e10:	20000938 	.word	0x20000938
 8007e14:	20000820 	.word	0x20000820
 8007e18:	200008f0 	.word	0x200008f0
 8007e1c:	2000081c 	.word	0x2000081c
 8007e20:	20000944 	.word	0x20000944

08007e24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e2c:	4b06      	ldr	r3, [pc, #24]	; (8007e48 <vTaskInternalSetTimeOutState+0x24>)
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <vTaskInternalSetTimeOutState+0x28>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	605a      	str	r2, [r3, #4]
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	20000948 	.word	0x20000948
 8007e4c:	20000934 	.word	0x20000934

08007e50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10a      	bne.n	8007e76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	613b      	str	r3, [r7, #16]
}
 8007e72:	bf00      	nop
 8007e74:	e7fe      	b.n	8007e74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	60fb      	str	r3, [r7, #12]
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e92:	f000 fbef 	bl	8008674 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e96:	4b1d      	ldr	r3, [pc, #116]	; (8007f0c <xTaskCheckForTimeOut+0xbc>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eae:	d102      	bne.n	8007eb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61fb      	str	r3, [r7, #28]
 8007eb4:	e023      	b.n	8007efe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	4b15      	ldr	r3, [pc, #84]	; (8007f10 <xTaskCheckForTimeOut+0xc0>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d007      	beq.n	8007ed2 <xTaskCheckForTimeOut+0x82>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d302      	bcc.n	8007ed2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	61fb      	str	r3, [r7, #28]
 8007ed0:	e015      	b.n	8007efe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d20b      	bcs.n	8007ef4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	1ad2      	subs	r2, r2, r3
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff ff9b 	bl	8007e24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61fb      	str	r3, [r7, #28]
 8007ef2:	e004      	b.n	8007efe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007efa:	2301      	movs	r3, #1
 8007efc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007efe:	f000 fbe9 	bl	80086d4 <vPortExitCritical>

	return xReturn;
 8007f02:	69fb      	ldr	r3, [r7, #28]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3720      	adds	r7, #32
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20000934 	.word	0x20000934
 8007f10:	20000948 	.word	0x20000948

08007f14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f18:	4b03      	ldr	r3, [pc, #12]	; (8007f28 <vTaskMissedYield+0x14>)
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]
}
 8007f1e:	bf00      	nop
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	20000944 	.word	0x20000944

08007f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f34:	f000 f852 	bl	8007fdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f38:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <prvIdleTask+0x28>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d9f9      	bls.n	8007f34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f40:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <prvIdleTask+0x2c>)
 8007f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f50:	e7f0      	b.n	8007f34 <prvIdleTask+0x8>
 8007f52:	bf00      	nop
 8007f54:	20000820 	.word	0x20000820
 8007f58:	e000ed04 	.word	0xe000ed04

08007f5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f62:	2300      	movs	r3, #0
 8007f64:	607b      	str	r3, [r7, #4]
 8007f66:	e00c      	b.n	8007f82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4a12      	ldr	r2, [pc, #72]	; (8007fbc <prvInitialiseTaskLists+0x60>)
 8007f74:	4413      	add	r3, r2
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe fd84 	bl	8006a84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	607b      	str	r3, [r7, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b07      	cmp	r3, #7
 8007f86:	d9ef      	bls.n	8007f68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f88:	480d      	ldr	r0, [pc, #52]	; (8007fc0 <prvInitialiseTaskLists+0x64>)
 8007f8a:	f7fe fd7b 	bl	8006a84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f8e:	480d      	ldr	r0, [pc, #52]	; (8007fc4 <prvInitialiseTaskLists+0x68>)
 8007f90:	f7fe fd78 	bl	8006a84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f94:	480c      	ldr	r0, [pc, #48]	; (8007fc8 <prvInitialiseTaskLists+0x6c>)
 8007f96:	f7fe fd75 	bl	8006a84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f9a:	480c      	ldr	r0, [pc, #48]	; (8007fcc <prvInitialiseTaskLists+0x70>)
 8007f9c:	f7fe fd72 	bl	8006a84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fa0:	480b      	ldr	r0, [pc, #44]	; (8007fd0 <prvInitialiseTaskLists+0x74>)
 8007fa2:	f7fe fd6f 	bl	8006a84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fa6:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <prvInitialiseTaskLists+0x78>)
 8007fa8:	4a05      	ldr	r2, [pc, #20]	; (8007fc0 <prvInitialiseTaskLists+0x64>)
 8007faa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <prvInitialiseTaskLists+0x7c>)
 8007fae:	4a05      	ldr	r2, [pc, #20]	; (8007fc4 <prvInitialiseTaskLists+0x68>)
 8007fb0:	601a      	str	r2, [r3, #0]
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000820 	.word	0x20000820
 8007fc0:	200008c0 	.word	0x200008c0
 8007fc4:	200008d4 	.word	0x200008d4
 8007fc8:	200008f0 	.word	0x200008f0
 8007fcc:	20000904 	.word	0x20000904
 8007fd0:	2000091c 	.word	0x2000091c
 8007fd4:	200008e8 	.word	0x200008e8
 8007fd8:	200008ec 	.word	0x200008ec

08007fdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fe2:	e019      	b.n	8008018 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fe4:	f000 fb46 	bl	8008674 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fe8:	4b10      	ldr	r3, [pc, #64]	; (800802c <prvCheckTasksWaitingTermination+0x50>)
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe fdcf 	bl	8006b98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <prvCheckTasksWaitingTermination+0x54>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	4a0b      	ldr	r2, [pc, #44]	; (8008030 <prvCheckTasksWaitingTermination+0x54>)
 8008002:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008004:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <prvCheckTasksWaitingTermination+0x58>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3b01      	subs	r3, #1
 800800a:	4a0a      	ldr	r2, [pc, #40]	; (8008034 <prvCheckTasksWaitingTermination+0x58>)
 800800c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800800e:	f000 fb61 	bl	80086d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f810 	bl	8008038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008018:	4b06      	ldr	r3, [pc, #24]	; (8008034 <prvCheckTasksWaitingTermination+0x58>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e1      	bne.n	8007fe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000904 	.word	0x20000904
 8008030:	20000930 	.word	0x20000930
 8008034:	20000918 	.word	0x20000918

08008038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	334c      	adds	r3, #76	; 0x4c
 8008044:	4618      	mov	r0, r3
 8008046:	f001 fc67 	bl	8009918 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008050:	2b00      	cmp	r3, #0
 8008052:	d108      	bne.n	8008066 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008058:	4618      	mov	r0, r3
 800805a:	f000 fcf9 	bl	8008a50 <vPortFree>
				vPortFree( pxTCB );
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fcf6 	bl	8008a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008064:	e018      	b.n	8008098 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800806c:	2b01      	cmp	r3, #1
 800806e:	d103      	bne.n	8008078 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fced 	bl	8008a50 <vPortFree>
	}
 8008076:	e00f      	b.n	8008098 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800807e:	2b02      	cmp	r3, #2
 8008080:	d00a      	beq.n	8008098 <prvDeleteTCB+0x60>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	60fb      	str	r3, [r7, #12]
}
 8008094:	bf00      	nop
 8008096:	e7fe      	b.n	8008096 <prvDeleteTCB+0x5e>
	}
 8008098:	bf00      	nop
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080a6:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <prvResetNextTaskUnblockTime+0x38>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d104      	bne.n	80080ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080b0:	4b0a      	ldr	r3, [pc, #40]	; (80080dc <prvResetNextTaskUnblockTime+0x3c>)
 80080b2:	f04f 32ff 	mov.w	r2, #4294967295
 80080b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080b8:	e008      	b.n	80080cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <prvResetNextTaskUnblockTime+0x38>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	4a04      	ldr	r2, [pc, #16]	; (80080dc <prvResetNextTaskUnblockTime+0x3c>)
 80080ca:	6013      	str	r3, [r2, #0]
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	200008e8 	.word	0x200008e8
 80080dc:	20000950 	.word	0x20000950

080080e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080e6:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <xTaskGetSchedulerState+0x34>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080ee:	2301      	movs	r3, #1
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	e008      	b.n	8008106 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f4:	4b08      	ldr	r3, [pc, #32]	; (8008118 <xTaskGetSchedulerState+0x38>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080fc:	2302      	movs	r3, #2
 80080fe:	607b      	str	r3, [r7, #4]
 8008100:	e001      	b.n	8008106 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008102:	2300      	movs	r3, #0
 8008104:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008106:	687b      	ldr	r3, [r7, #4]
	}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	2000093c 	.word	0x2000093c
 8008118:	20000958 	.word	0x20000958

0800811c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d05e      	beq.n	80081f0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008136:	4b31      	ldr	r3, [pc, #196]	; (80081fc <xTaskPriorityInherit+0xe0>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	429a      	cmp	r2, r3
 800813e:	d24e      	bcs.n	80081de <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	2b00      	cmp	r3, #0
 8008146:	db06      	blt.n	8008156 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008148:	4b2c      	ldr	r3, [pc, #176]	; (80081fc <xTaskPriorityInherit+0xe0>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	f1c3 0208 	rsb	r2, r3, #8
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6959      	ldr	r1, [r3, #20]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4a26      	ldr	r2, [pc, #152]	; (8008200 <xTaskPriorityInherit+0xe4>)
 8008168:	4413      	add	r3, r2
 800816a:	4299      	cmp	r1, r3
 800816c:	d12f      	bne.n	80081ce <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	3304      	adds	r3, #4
 8008172:	4618      	mov	r0, r3
 8008174:	f7fe fd10 	bl	8006b98 <uxListRemove>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10a      	bne.n	8008194 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	2201      	movs	r2, #1
 8008184:	fa02 f303 	lsl.w	r3, r2, r3
 8008188:	43da      	mvns	r2, r3
 800818a:	4b1e      	ldr	r3, [pc, #120]	; (8008204 <xTaskPriorityInherit+0xe8>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4013      	ands	r3, r2
 8008190:	4a1c      	ldr	r2, [pc, #112]	; (8008204 <xTaskPriorityInherit+0xe8>)
 8008192:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008194:	4b19      	ldr	r3, [pc, #100]	; (80081fc <xTaskPriorityInherit+0xe0>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	2201      	movs	r2, #1
 80081a4:	409a      	lsls	r2, r3
 80081a6:	4b17      	ldr	r3, [pc, #92]	; (8008204 <xTaskPriorityInherit+0xe8>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	4a15      	ldr	r2, [pc, #84]	; (8008204 <xTaskPriorityInherit+0xe8>)
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4a10      	ldr	r2, [pc, #64]	; (8008200 <xTaskPriorityInherit+0xe4>)
 80081be:	441a      	add	r2, r3
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f7fe fc89 	bl	8006ade <vListInsertEnd>
 80081cc:	e004      	b.n	80081d8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081ce:	4b0b      	ldr	r3, [pc, #44]	; (80081fc <xTaskPriorityInherit+0xe0>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081d8:	2301      	movs	r3, #1
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	e008      	b.n	80081f0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e2:	4b06      	ldr	r3, [pc, #24]	; (80081fc <xTaskPriorityInherit+0xe0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d201      	bcs.n	80081f0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081ec:	2301      	movs	r3, #1
 80081ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081f0:	68fb      	ldr	r3, [r7, #12]
	}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	2000081c 	.word	0x2000081c
 8008200:	20000820 	.word	0x20000820
 8008204:	20000938 	.word	0x20000938

08008208 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008216:	2301      	movs	r3, #1
 8008218:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d077      	beq.n	8008310 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10a      	bne.n	800823e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	60fb      	str	r3, [r7, #12]
}
 800823a:	bf00      	nop
 800823c:	e7fe      	b.n	800823c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	429a      	cmp	r2, r3
 8008246:	d902      	bls.n	800824e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	61fb      	str	r3, [r7, #28]
 800824c:	e002      	b.n	8008254 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008252:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	429a      	cmp	r2, r3
 800825c:	d058      	beq.n	8008310 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	429a      	cmp	r2, r3
 8008266:	d153      	bne.n	8008310 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008268:	4b2b      	ldr	r3, [pc, #172]	; (8008318 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	429a      	cmp	r2, r3
 8008270:	d10a      	bne.n	8008288 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	60bb      	str	r3, [r7, #8]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	69fa      	ldr	r2, [r7, #28]
 8008292:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	2b00      	cmp	r3, #0
 800829a:	db04      	blt.n	80082a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	f1c3 0208 	rsb	r2, r3, #8
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	6959      	ldr	r1, [r3, #20]
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4a19      	ldr	r2, [pc, #100]	; (800831c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80082b6:	4413      	add	r3, r2
 80082b8:	4299      	cmp	r1, r3
 80082ba:	d129      	bne.n	8008310 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	3304      	adds	r3, #4
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fe fc69 	bl	8006b98 <uxListRemove>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10a      	bne.n	80082e2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d0:	2201      	movs	r2, #1
 80082d2:	fa02 f303 	lsl.w	r3, r2, r3
 80082d6:	43da      	mvns	r2, r3
 80082d8:	4b11      	ldr	r3, [pc, #68]	; (8008320 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4013      	ands	r3, r2
 80082de:	4a10      	ldr	r2, [pc, #64]	; (8008320 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80082e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	2201      	movs	r2, #1
 80082e8:	409a      	lsls	r2, r3
 80082ea:	4b0d      	ldr	r3, [pc, #52]	; (8008320 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	4a0b      	ldr	r2, [pc, #44]	; (8008320 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80082f2:	6013      	str	r3, [r2, #0]
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4a06      	ldr	r2, [pc, #24]	; (800831c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008302:	441a      	add	r2, r3
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	3304      	adds	r3, #4
 8008308:	4619      	mov	r1, r3
 800830a:	4610      	mov	r0, r2
 800830c:	f7fe fbe7 	bl	8006ade <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008310:	bf00      	nop
 8008312:	3720      	adds	r7, #32
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	2000081c 	.word	0x2000081c
 800831c:	20000820 	.word	0x20000820
 8008320:	20000938 	.word	0x20000938

08008324 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008328:	4b07      	ldr	r3, [pc, #28]	; (8008348 <pvTaskIncrementMutexHeldCount+0x24>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d004      	beq.n	800833a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <pvTaskIncrementMutexHeldCount+0x24>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008336:	3201      	adds	r2, #1
 8008338:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800833a:	4b03      	ldr	r3, [pc, #12]	; (8008348 <pvTaskIncrementMutexHeldCount+0x24>)
 800833c:	681b      	ldr	r3, [r3, #0]
	}
 800833e:	4618      	mov	r0, r3
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	2000081c 	.word	0x2000081c

0800834c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008356:	4b29      	ldr	r3, [pc, #164]	; (80083fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800835c:	4b28      	ldr	r3, [pc, #160]	; (8008400 <prvAddCurrentTaskToDelayedList+0xb4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3304      	adds	r3, #4
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe fc18 	bl	8006b98 <uxListRemove>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10b      	bne.n	8008386 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800836e:	4b24      	ldr	r3, [pc, #144]	; (8008400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	2201      	movs	r2, #1
 8008376:	fa02 f303 	lsl.w	r3, r2, r3
 800837a:	43da      	mvns	r2, r3
 800837c:	4b21      	ldr	r3, [pc, #132]	; (8008404 <prvAddCurrentTaskToDelayedList+0xb8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4013      	ands	r3, r2
 8008382:	4a20      	ldr	r2, [pc, #128]	; (8008404 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008384:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838c:	d10a      	bne.n	80083a4 <prvAddCurrentTaskToDelayedList+0x58>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d007      	beq.n	80083a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008394:	4b1a      	ldr	r3, [pc, #104]	; (8008400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3304      	adds	r3, #4
 800839a:	4619      	mov	r1, r3
 800839c:	481a      	ldr	r0, [pc, #104]	; (8008408 <prvAddCurrentTaskToDelayedList+0xbc>)
 800839e:	f7fe fb9e 	bl	8006ade <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083a2:	e026      	b.n	80083f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4413      	add	r3, r2
 80083aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083ac:	4b14      	ldr	r3, [pc, #80]	; (8008400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d209      	bcs.n	80083d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083bc:	4b13      	ldr	r3, [pc, #76]	; (800840c <prvAddCurrentTaskToDelayedList+0xc0>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	4b0f      	ldr	r3, [pc, #60]	; (8008400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3304      	adds	r3, #4
 80083c6:	4619      	mov	r1, r3
 80083c8:	4610      	mov	r0, r2
 80083ca:	f7fe fbac 	bl	8006b26 <vListInsert>
}
 80083ce:	e010      	b.n	80083f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083d0:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <prvAddCurrentTaskToDelayedList+0xc4>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3304      	adds	r3, #4
 80083da:	4619      	mov	r1, r3
 80083dc:	4610      	mov	r0, r2
 80083de:	f7fe fba2 	bl	8006b26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083e2:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d202      	bcs.n	80083f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80083ec:	4a09      	ldr	r2, [pc, #36]	; (8008414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	6013      	str	r3, [r2, #0]
}
 80083f2:	bf00      	nop
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20000934 	.word	0x20000934
 8008400:	2000081c 	.word	0x2000081c
 8008404:	20000938 	.word	0x20000938
 8008408:	2000091c 	.word	0x2000091c
 800840c:	200008ec 	.word	0x200008ec
 8008410:	200008e8 	.word	0x200008e8
 8008414:	20000950 	.word	0x20000950

08008418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3b04      	subs	r3, #4
 8008428:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3b04      	subs	r3, #4
 8008436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f023 0201 	bic.w	r2, r3, #1
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3b04      	subs	r3, #4
 8008446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008448:	4a0c      	ldr	r2, [pc, #48]	; (800847c <pxPortInitialiseStack+0x64>)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3b14      	subs	r3, #20
 8008452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3b04      	subs	r3, #4
 800845e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f06f 0202 	mvn.w	r2, #2
 8008466:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3b20      	subs	r3, #32
 800846c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800846e:	68fb      	ldr	r3, [r7, #12]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	08008481 	.word	0x08008481

08008480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800848a:	4b12      	ldr	r3, [pc, #72]	; (80084d4 <prvTaskExitError+0x54>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008492:	d00a      	beq.n	80084aa <prvTaskExitError+0x2a>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	60fb      	str	r3, [r7, #12]
}
 80084a6:	bf00      	nop
 80084a8:	e7fe      	b.n	80084a8 <prvTaskExitError+0x28>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	60bb      	str	r3, [r7, #8]
}
 80084bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084be:	bf00      	nop
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0fc      	beq.n	80084c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	20000010 	.word	0x20000010
	...

080084e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084e0:	4b07      	ldr	r3, [pc, #28]	; (8008500 <pxCurrentTCBConst2>)
 80084e2:	6819      	ldr	r1, [r3, #0]
 80084e4:	6808      	ldr	r0, [r1, #0]
 80084e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ea:	f380 8809 	msr	PSP, r0
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f04f 0000 	mov.w	r0, #0
 80084f6:	f380 8811 	msr	BASEPRI, r0
 80084fa:	4770      	bx	lr
 80084fc:	f3af 8000 	nop.w

08008500 <pxCurrentTCBConst2>:
 8008500:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop

08008508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008508:	4808      	ldr	r0, [pc, #32]	; (800852c <prvPortStartFirstTask+0x24>)
 800850a:	6800      	ldr	r0, [r0, #0]
 800850c:	6800      	ldr	r0, [r0, #0]
 800850e:	f380 8808 	msr	MSP, r0
 8008512:	f04f 0000 	mov.w	r0, #0
 8008516:	f380 8814 	msr	CONTROL, r0
 800851a:	b662      	cpsie	i
 800851c:	b661      	cpsie	f
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	df00      	svc	0
 8008528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800852a:	bf00      	nop
 800852c:	e000ed08 	.word	0xe000ed08

08008530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008536:	4b46      	ldr	r3, [pc, #280]	; (8008650 <xPortStartScheduler+0x120>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a46      	ldr	r2, [pc, #280]	; (8008654 <xPortStartScheduler+0x124>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d10a      	bne.n	8008556 <xPortStartScheduler+0x26>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	613b      	str	r3, [r7, #16]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008556:	4b3e      	ldr	r3, [pc, #248]	; (8008650 <xPortStartScheduler+0x120>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a3f      	ldr	r2, [pc, #252]	; (8008658 <xPortStartScheduler+0x128>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d10a      	bne.n	8008576 <xPortStartScheduler+0x46>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	60fb      	str	r3, [r7, #12]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008576:	4b39      	ldr	r3, [pc, #228]	; (800865c <xPortStartScheduler+0x12c>)
 8008578:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	22ff      	movs	r2, #255	; 0xff
 8008586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	b2db      	uxtb	r3, r3
 8008594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008598:	b2da      	uxtb	r2, r3
 800859a:	4b31      	ldr	r3, [pc, #196]	; (8008660 <xPortStartScheduler+0x130>)
 800859c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800859e:	4b31      	ldr	r3, [pc, #196]	; (8008664 <xPortStartScheduler+0x134>)
 80085a0:	2207      	movs	r2, #7
 80085a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085a4:	e009      	b.n	80085ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80085a6:	4b2f      	ldr	r3, [pc, #188]	; (8008664 <xPortStartScheduler+0x134>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3b01      	subs	r3, #1
 80085ac:	4a2d      	ldr	r2, [pc, #180]	; (8008664 <xPortStartScheduler+0x134>)
 80085ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c2:	2b80      	cmp	r3, #128	; 0x80
 80085c4:	d0ef      	beq.n	80085a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085c6:	4b27      	ldr	r3, [pc, #156]	; (8008664 <xPortStartScheduler+0x134>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f1c3 0307 	rsb	r3, r3, #7
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d00a      	beq.n	80085e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	60bb      	str	r3, [r7, #8]
}
 80085e4:	bf00      	nop
 80085e6:	e7fe      	b.n	80085e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085e8:	4b1e      	ldr	r3, [pc, #120]	; (8008664 <xPortStartScheduler+0x134>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	021b      	lsls	r3, r3, #8
 80085ee:	4a1d      	ldr	r2, [pc, #116]	; (8008664 <xPortStartScheduler+0x134>)
 80085f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085f2:	4b1c      	ldr	r3, [pc, #112]	; (8008664 <xPortStartScheduler+0x134>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085fa:	4a1a      	ldr	r2, [pc, #104]	; (8008664 <xPortStartScheduler+0x134>)
 80085fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	b2da      	uxtb	r2, r3
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008606:	4b18      	ldr	r3, [pc, #96]	; (8008668 <xPortStartScheduler+0x138>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a17      	ldr	r2, [pc, #92]	; (8008668 <xPortStartScheduler+0x138>)
 800860c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008612:	4b15      	ldr	r3, [pc, #84]	; (8008668 <xPortStartScheduler+0x138>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a14      	ldr	r2, [pc, #80]	; (8008668 <xPortStartScheduler+0x138>)
 8008618:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800861c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800861e:	f000 f8dd 	bl	80087dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008622:	4b12      	ldr	r3, [pc, #72]	; (800866c <xPortStartScheduler+0x13c>)
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008628:	f000 f8fc 	bl	8008824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800862c:	4b10      	ldr	r3, [pc, #64]	; (8008670 <xPortStartScheduler+0x140>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a0f      	ldr	r2, [pc, #60]	; (8008670 <xPortStartScheduler+0x140>)
 8008632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008636:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008638:	f7ff ff66 	bl	8008508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800863c:	f7ff fb0a 	bl	8007c54 <vTaskSwitchContext>
	prvTaskExitError();
 8008640:	f7ff ff1e 	bl	8008480 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	e000ed00 	.word	0xe000ed00
 8008654:	410fc271 	.word	0x410fc271
 8008658:	410fc270 	.word	0x410fc270
 800865c:	e000e400 	.word	0xe000e400
 8008660:	2000095c 	.word	0x2000095c
 8008664:	20000960 	.word	0x20000960
 8008668:	e000ed20 	.word	0xe000ed20
 800866c:	20000010 	.word	0x20000010
 8008670:	e000ef34 	.word	0xe000ef34

08008674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	607b      	str	r3, [r7, #4]
}
 800868c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800868e:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <vPortEnterCritical+0x58>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3301      	adds	r3, #1
 8008694:	4a0d      	ldr	r2, [pc, #52]	; (80086cc <vPortEnterCritical+0x58>)
 8008696:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008698:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <vPortEnterCritical+0x58>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d10f      	bne.n	80086c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086a0:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <vPortEnterCritical+0x5c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	603b      	str	r3, [r7, #0]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <vPortEnterCritical+0x4a>
	}
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	20000010 	.word	0x20000010
 80086d0:	e000ed04 	.word	0xe000ed04

080086d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086da:	4b12      	ldr	r3, [pc, #72]	; (8008724 <vPortExitCritical+0x50>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10a      	bne.n	80086f8 <vPortExitCritical+0x24>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	607b      	str	r3, [r7, #4]
}
 80086f4:	bf00      	nop
 80086f6:	e7fe      	b.n	80086f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80086f8:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <vPortExitCritical+0x50>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	4a09      	ldr	r2, [pc, #36]	; (8008724 <vPortExitCritical+0x50>)
 8008700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008702:	4b08      	ldr	r3, [pc, #32]	; (8008724 <vPortExitCritical+0x50>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d105      	bne.n	8008716 <vPortExitCritical+0x42>
 800870a:	2300      	movs	r3, #0
 800870c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	f383 8811 	msr	BASEPRI, r3
}
 8008714:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20000010 	.word	0x20000010
	...

08008730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008730:	f3ef 8009 	mrs	r0, PSP
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	4b15      	ldr	r3, [pc, #84]	; (8008790 <pxCurrentTCBConst>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	f01e 0f10 	tst.w	lr, #16
 8008740:	bf08      	it	eq
 8008742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874a:	6010      	str	r0, [r2, #0]
 800874c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008754:	f380 8811 	msr	BASEPRI, r0
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f7ff fa78 	bl	8007c54 <vTaskSwitchContext>
 8008764:	f04f 0000 	mov.w	r0, #0
 8008768:	f380 8811 	msr	BASEPRI, r0
 800876c:	bc09      	pop	{r0, r3}
 800876e:	6819      	ldr	r1, [r3, #0]
 8008770:	6808      	ldr	r0, [r1, #0]
 8008772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008776:	f01e 0f10 	tst.w	lr, #16
 800877a:	bf08      	it	eq
 800877c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008780:	f380 8809 	msr	PSP, r0
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	f3af 8000 	nop.w

08008790 <pxCurrentTCBConst>:
 8008790:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop

08008798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	607b      	str	r3, [r7, #4]
}
 80087b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087b2:	f7ff f997 	bl	8007ae4 <xTaskIncrementTick>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <xPortSysTickHandler+0x40>)
 80087be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	2300      	movs	r3, #0
 80087c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f383 8811 	msr	BASEPRI, r3
}
 80087ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087e0:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <vPortSetupTimerInterrupt+0x34>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087e6:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <vPortSetupTimerInterrupt+0x38>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087ec:	4b0a      	ldr	r3, [pc, #40]	; (8008818 <vPortSetupTimerInterrupt+0x3c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a0a      	ldr	r2, [pc, #40]	; (800881c <vPortSetupTimerInterrupt+0x40>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	099b      	lsrs	r3, r3, #6
 80087f8:	4a09      	ldr	r2, [pc, #36]	; (8008820 <vPortSetupTimerInterrupt+0x44>)
 80087fa:	3b01      	subs	r3, #1
 80087fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087fe:	4b04      	ldr	r3, [pc, #16]	; (8008810 <vPortSetupTimerInterrupt+0x34>)
 8008800:	2207      	movs	r2, #7
 8008802:	601a      	str	r2, [r3, #0]
}
 8008804:	bf00      	nop
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	e000e010 	.word	0xe000e010
 8008814:	e000e018 	.word	0xe000e018
 8008818:	20000004 	.word	0x20000004
 800881c:	10624dd3 	.word	0x10624dd3
 8008820:	e000e014 	.word	0xe000e014

08008824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008834 <vPortEnableVFP+0x10>
 8008828:	6801      	ldr	r1, [r0, #0]
 800882a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800882e:	6001      	str	r1, [r0, #0]
 8008830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008832:	bf00      	nop
 8008834:	e000ed88 	.word	0xe000ed88

08008838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800883e:	f3ef 8305 	mrs	r3, IPSR
 8008842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b0f      	cmp	r3, #15
 8008848:	d914      	bls.n	8008874 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800884a:	4a17      	ldr	r2, [pc, #92]	; (80088a8 <vPortValidateInterruptPriority+0x70>)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008854:	4b15      	ldr	r3, [pc, #84]	; (80088ac <vPortValidateInterruptPriority+0x74>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	7afa      	ldrb	r2, [r7, #11]
 800885a:	429a      	cmp	r2, r3
 800885c:	d20a      	bcs.n	8008874 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	607b      	str	r3, [r7, #4]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008874:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <vPortValidateInterruptPriority+0x78>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800887c:	4b0d      	ldr	r3, [pc, #52]	; (80088b4 <vPortValidateInterruptPriority+0x7c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	429a      	cmp	r2, r3
 8008882:	d90a      	bls.n	800889a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	603b      	str	r3, [r7, #0]
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <vPortValidateInterruptPriority+0x60>
	}
 800889a:	bf00      	nop
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	e000e3f0 	.word	0xe000e3f0
 80088ac:	2000095c 	.word	0x2000095c
 80088b0:	e000ed0c 	.word	0xe000ed0c
 80088b4:	20000960 	.word	0x20000960

080088b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08a      	sub	sp, #40	; 0x28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088c0:	2300      	movs	r3, #0
 80088c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088c4:	f7ff f854 	bl	8007970 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088c8:	4b5b      	ldr	r3, [pc, #364]	; (8008a38 <pvPortMalloc+0x180>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088d0:	f000 f920 	bl	8008b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088d4:	4b59      	ldr	r3, [pc, #356]	; (8008a3c <pvPortMalloc+0x184>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4013      	ands	r3, r2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f040 8093 	bne.w	8008a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01d      	beq.n	8008924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80088e8:	2208      	movs	r2, #8
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4413      	add	r3, r2
 80088ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f003 0307 	and.w	r3, r3, #7
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d014      	beq.n	8008924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f023 0307 	bic.w	r3, r3, #7
 8008900:	3308      	adds	r3, #8
 8008902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00a      	beq.n	8008924 <pvPortMalloc+0x6c>
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	617b      	str	r3, [r7, #20]
}
 8008920:	bf00      	nop
 8008922:	e7fe      	b.n	8008922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d06e      	beq.n	8008a08 <pvPortMalloc+0x150>
 800892a:	4b45      	ldr	r3, [pc, #276]	; (8008a40 <pvPortMalloc+0x188>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	d869      	bhi.n	8008a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008934:	4b43      	ldr	r3, [pc, #268]	; (8008a44 <pvPortMalloc+0x18c>)
 8008936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008938:	4b42      	ldr	r3, [pc, #264]	; (8008a44 <pvPortMalloc+0x18c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800893e:	e004      	b.n	800894a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	429a      	cmp	r2, r3
 8008952:	d903      	bls.n	800895c <pvPortMalloc+0xa4>
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f1      	bne.n	8008940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800895c:	4b36      	ldr	r3, [pc, #216]	; (8008a38 <pvPortMalloc+0x180>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008962:	429a      	cmp	r2, r3
 8008964:	d050      	beq.n	8008a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2208      	movs	r2, #8
 800896c:	4413      	add	r3, r2
 800896e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	1ad2      	subs	r2, r2, r3
 8008980:	2308      	movs	r3, #8
 8008982:	005b      	lsls	r3, r3, #1
 8008984:	429a      	cmp	r2, r3
 8008986:	d91f      	bls.n	80089c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4413      	add	r3, r2
 800898e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <pvPortMalloc+0xf8>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	613b      	str	r3, [r7, #16]
}
 80089ac:	bf00      	nop
 80089ae:	e7fe      	b.n	80089ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	1ad2      	subs	r2, r2, r3
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089c2:	69b8      	ldr	r0, [r7, #24]
 80089c4:	f000 f908 	bl	8008bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089c8:	4b1d      	ldr	r3, [pc, #116]	; (8008a40 <pvPortMalloc+0x188>)
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	4a1b      	ldr	r2, [pc, #108]	; (8008a40 <pvPortMalloc+0x188>)
 80089d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089d6:	4b1a      	ldr	r3, [pc, #104]	; (8008a40 <pvPortMalloc+0x188>)
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	4b1b      	ldr	r3, [pc, #108]	; (8008a48 <pvPortMalloc+0x190>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d203      	bcs.n	80089ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089e2:	4b17      	ldr	r3, [pc, #92]	; (8008a40 <pvPortMalloc+0x188>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a18      	ldr	r2, [pc, #96]	; (8008a48 <pvPortMalloc+0x190>)
 80089e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <pvPortMalloc+0x184>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	431a      	orrs	r2, r3
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80089fe:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <pvPortMalloc+0x194>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3301      	adds	r3, #1
 8008a04:	4a11      	ldr	r2, [pc, #68]	; (8008a4c <pvPortMalloc+0x194>)
 8008a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a08:	f7fe ffc0 	bl	800798c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	f003 0307 	and.w	r3, r3, #7
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00a      	beq.n	8008a2c <pvPortMalloc+0x174>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	60fb      	str	r3, [r7, #12]
}
 8008a28:	bf00      	nop
 8008a2a:	e7fe      	b.n	8008a2a <pvPortMalloc+0x172>
	return pvReturn;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3728      	adds	r7, #40	; 0x28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	2000456c 	.word	0x2000456c
 8008a3c:	20004580 	.word	0x20004580
 8008a40:	20004570 	.word	0x20004570
 8008a44:	20004564 	.word	0x20004564
 8008a48:	20004574 	.word	0x20004574
 8008a4c:	20004578 	.word	0x20004578

08008a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d04d      	beq.n	8008afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a62:	2308      	movs	r3, #8
 8008a64:	425b      	negs	r3, r3
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	4413      	add	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <vPortFree+0xb8>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4013      	ands	r3, r2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10a      	bne.n	8008a94 <vPortFree+0x44>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	60fb      	str	r3, [r7, #12]
}
 8008a90:	bf00      	nop
 8008a92:	e7fe      	b.n	8008a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <vPortFree+0x62>
	__asm volatile
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	60bb      	str	r3, [r7, #8]
}
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	4b14      	ldr	r3, [pc, #80]	; (8008b08 <vPortFree+0xb8>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4013      	ands	r3, r2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d01e      	beq.n	8008afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d11a      	bne.n	8008afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <vPortFree+0xb8>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	401a      	ands	r2, r3
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ad8:	f7fe ff4a 	bl	8007970 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <vPortFree+0xbc>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	4a09      	ldr	r2, [pc, #36]	; (8008b0c <vPortFree+0xbc>)
 8008ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008aea:	6938      	ldr	r0, [r7, #16]
 8008aec:	f000 f874 	bl	8008bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008af0:	4b07      	ldr	r3, [pc, #28]	; (8008b10 <vPortFree+0xc0>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3301      	adds	r3, #1
 8008af6:	4a06      	ldr	r2, [pc, #24]	; (8008b10 <vPortFree+0xc0>)
 8008af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008afa:	f7fe ff47 	bl	800798c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008afe:	bf00      	nop
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20004580 	.word	0x20004580
 8008b0c:	20004570 	.word	0x20004570
 8008b10:	2000457c 	.word	0x2000457c

08008b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b20:	4b27      	ldr	r3, [pc, #156]	; (8008bc0 <prvHeapInit+0xac>)
 8008b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f003 0307 	and.w	r3, r3, #7
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00c      	beq.n	8008b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3307      	adds	r3, #7
 8008b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0307 	bic.w	r3, r3, #7
 8008b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	4a1f      	ldr	r2, [pc, #124]	; (8008bc0 <prvHeapInit+0xac>)
 8008b44:	4413      	add	r3, r2
 8008b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b4c:	4a1d      	ldr	r2, [pc, #116]	; (8008bc4 <prvHeapInit+0xb0>)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b52:	4b1c      	ldr	r3, [pc, #112]	; (8008bc4 <prvHeapInit+0xb0>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b60:	2208      	movs	r2, #8
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	1a9b      	subs	r3, r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0307 	bic.w	r3, r3, #7
 8008b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4a15      	ldr	r2, [pc, #84]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b76:	4b14      	ldr	r3, [pc, #80]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b7e:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	1ad2      	subs	r2, r2, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b94:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	4a0a      	ldr	r2, [pc, #40]	; (8008bcc <prvHeapInit+0xb8>)
 8008ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	4a09      	ldr	r2, [pc, #36]	; (8008bd0 <prvHeapInit+0xbc>)
 8008baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <prvHeapInit+0xc0>)
 8008bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bb2:	601a      	str	r2, [r3, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	20000964 	.word	0x20000964
 8008bc4:	20004564 	.word	0x20004564
 8008bc8:	2000456c 	.word	0x2000456c
 8008bcc:	20004574 	.word	0x20004574
 8008bd0:	20004570 	.word	0x20004570
 8008bd4:	20004580 	.word	0x20004580

08008bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008be0:	4b28      	ldr	r3, [pc, #160]	; (8008c84 <prvInsertBlockIntoFreeList+0xac>)
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e002      	b.n	8008bec <prvInsertBlockIntoFreeList+0x14>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d8f7      	bhi.n	8008be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	4413      	add	r3, r2
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d108      	bne.n	8008c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	441a      	add	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	441a      	add	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d118      	bne.n	8008c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	4b15      	ldr	r3, [pc, #84]	; (8008c88 <prvInsertBlockIntoFreeList+0xb0>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d00d      	beq.n	8008c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	441a      	add	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	e008      	b.n	8008c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c56:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <prvInsertBlockIntoFreeList+0xb0>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	e003      	b.n	8008c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d002      	beq.n	8008c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c76:	bf00      	nop
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20004564 	.word	0x20004564
 8008c88:	2000456c 	.word	0x2000456c

08008c8c <__errno>:
 8008c8c:	4b01      	ldr	r3, [pc, #4]	; (8008c94 <__errno+0x8>)
 8008c8e:	6818      	ldr	r0, [r3, #0]
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	20000014 	.word	0x20000014

08008c98 <std>:
 8008c98:	2300      	movs	r3, #0
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ca6:	6083      	str	r3, [r0, #8]
 8008ca8:	8181      	strh	r1, [r0, #12]
 8008caa:	6643      	str	r3, [r0, #100]	; 0x64
 8008cac:	81c2      	strh	r2, [r0, #14]
 8008cae:	6183      	str	r3, [r0, #24]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	2208      	movs	r2, #8
 8008cb4:	305c      	adds	r0, #92	; 0x5c
 8008cb6:	f000 f91a 	bl	8008eee <memset>
 8008cba:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <std+0x38>)
 8008cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8008cbe:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <std+0x3c>)
 8008cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cc2:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <std+0x40>)
 8008cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cc6:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <std+0x44>)
 8008cc8:	6224      	str	r4, [r4, #32]
 8008cca:	6323      	str	r3, [r4, #48]	; 0x30
 8008ccc:	bd10      	pop	{r4, pc}
 8008cce:	bf00      	nop
 8008cd0:	08009a31 	.word	0x08009a31
 8008cd4:	08009a53 	.word	0x08009a53
 8008cd8:	08009a8b 	.word	0x08009a8b
 8008cdc:	08009aaf 	.word	0x08009aaf

08008ce0 <_cleanup_r>:
 8008ce0:	4901      	ldr	r1, [pc, #4]	; (8008ce8 <_cleanup_r+0x8>)
 8008ce2:	f000 b8af 	b.w	8008e44 <_fwalk_reent>
 8008ce6:	bf00      	nop
 8008ce8:	0800a901 	.word	0x0800a901

08008cec <__sfmoreglue>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	2268      	movs	r2, #104	; 0x68
 8008cf0:	1e4d      	subs	r5, r1, #1
 8008cf2:	4355      	muls	r5, r2
 8008cf4:	460e      	mov	r6, r1
 8008cf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cfa:	f000 f921 	bl	8008f40 <_malloc_r>
 8008cfe:	4604      	mov	r4, r0
 8008d00:	b140      	cbz	r0, 8008d14 <__sfmoreglue+0x28>
 8008d02:	2100      	movs	r1, #0
 8008d04:	e9c0 1600 	strd	r1, r6, [r0]
 8008d08:	300c      	adds	r0, #12
 8008d0a:	60a0      	str	r0, [r4, #8]
 8008d0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d10:	f000 f8ed 	bl	8008eee <memset>
 8008d14:	4620      	mov	r0, r4
 8008d16:	bd70      	pop	{r4, r5, r6, pc}

08008d18 <__sfp_lock_acquire>:
 8008d18:	4801      	ldr	r0, [pc, #4]	; (8008d20 <__sfp_lock_acquire+0x8>)
 8008d1a:	f000 b8d8 	b.w	8008ece <__retarget_lock_acquire_recursive>
 8008d1e:	bf00      	nop
 8008d20:	20004585 	.word	0x20004585

08008d24 <__sfp_lock_release>:
 8008d24:	4801      	ldr	r0, [pc, #4]	; (8008d2c <__sfp_lock_release+0x8>)
 8008d26:	f000 b8d3 	b.w	8008ed0 <__retarget_lock_release_recursive>
 8008d2a:	bf00      	nop
 8008d2c:	20004585 	.word	0x20004585

08008d30 <__sinit_lock_acquire>:
 8008d30:	4801      	ldr	r0, [pc, #4]	; (8008d38 <__sinit_lock_acquire+0x8>)
 8008d32:	f000 b8cc 	b.w	8008ece <__retarget_lock_acquire_recursive>
 8008d36:	bf00      	nop
 8008d38:	20004586 	.word	0x20004586

08008d3c <__sinit_lock_release>:
 8008d3c:	4801      	ldr	r0, [pc, #4]	; (8008d44 <__sinit_lock_release+0x8>)
 8008d3e:	f000 b8c7 	b.w	8008ed0 <__retarget_lock_release_recursive>
 8008d42:	bf00      	nop
 8008d44:	20004586 	.word	0x20004586

08008d48 <__sinit>:
 8008d48:	b510      	push	{r4, lr}
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	f7ff fff0 	bl	8008d30 <__sinit_lock_acquire>
 8008d50:	69a3      	ldr	r3, [r4, #24]
 8008d52:	b11b      	cbz	r3, 8008d5c <__sinit+0x14>
 8008d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d58:	f7ff bff0 	b.w	8008d3c <__sinit_lock_release>
 8008d5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d60:	6523      	str	r3, [r4, #80]	; 0x50
 8008d62:	4b13      	ldr	r3, [pc, #76]	; (8008db0 <__sinit+0x68>)
 8008d64:	4a13      	ldr	r2, [pc, #76]	; (8008db4 <__sinit+0x6c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d6a:	42a3      	cmp	r3, r4
 8008d6c:	bf04      	itt	eq
 8008d6e:	2301      	moveq	r3, #1
 8008d70:	61a3      	streq	r3, [r4, #24]
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 f820 	bl	8008db8 <__sfp>
 8008d78:	6060      	str	r0, [r4, #4]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 f81c 	bl	8008db8 <__sfp>
 8008d80:	60a0      	str	r0, [r4, #8]
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 f818 	bl	8008db8 <__sfp>
 8008d88:	2200      	movs	r2, #0
 8008d8a:	60e0      	str	r0, [r4, #12]
 8008d8c:	2104      	movs	r1, #4
 8008d8e:	6860      	ldr	r0, [r4, #4]
 8008d90:	f7ff ff82 	bl	8008c98 <std>
 8008d94:	68a0      	ldr	r0, [r4, #8]
 8008d96:	2201      	movs	r2, #1
 8008d98:	2109      	movs	r1, #9
 8008d9a:	f7ff ff7d 	bl	8008c98 <std>
 8008d9e:	68e0      	ldr	r0, [r4, #12]
 8008da0:	2202      	movs	r2, #2
 8008da2:	2112      	movs	r1, #18
 8008da4:	f7ff ff78 	bl	8008c98 <std>
 8008da8:	2301      	movs	r3, #1
 8008daa:	61a3      	str	r3, [r4, #24]
 8008dac:	e7d2      	b.n	8008d54 <__sinit+0xc>
 8008dae:	bf00      	nop
 8008db0:	0800bccc 	.word	0x0800bccc
 8008db4:	08008ce1 	.word	0x08008ce1

08008db8 <__sfp>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	4607      	mov	r7, r0
 8008dbc:	f7ff ffac 	bl	8008d18 <__sfp_lock_acquire>
 8008dc0:	4b1e      	ldr	r3, [pc, #120]	; (8008e3c <__sfp+0x84>)
 8008dc2:	681e      	ldr	r6, [r3, #0]
 8008dc4:	69b3      	ldr	r3, [r6, #24]
 8008dc6:	b913      	cbnz	r3, 8008dce <__sfp+0x16>
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f7ff ffbd 	bl	8008d48 <__sinit>
 8008dce:	3648      	adds	r6, #72	; 0x48
 8008dd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	d503      	bpl.n	8008de0 <__sfp+0x28>
 8008dd8:	6833      	ldr	r3, [r6, #0]
 8008dda:	b30b      	cbz	r3, 8008e20 <__sfp+0x68>
 8008ddc:	6836      	ldr	r6, [r6, #0]
 8008dde:	e7f7      	b.n	8008dd0 <__sfp+0x18>
 8008de0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008de4:	b9d5      	cbnz	r5, 8008e1c <__sfp+0x64>
 8008de6:	4b16      	ldr	r3, [pc, #88]	; (8008e40 <__sfp+0x88>)
 8008de8:	60e3      	str	r3, [r4, #12]
 8008dea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008dee:	6665      	str	r5, [r4, #100]	; 0x64
 8008df0:	f000 f86c 	bl	8008ecc <__retarget_lock_init_recursive>
 8008df4:	f7ff ff96 	bl	8008d24 <__sfp_lock_release>
 8008df8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008dfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e00:	6025      	str	r5, [r4, #0]
 8008e02:	61a5      	str	r5, [r4, #24]
 8008e04:	2208      	movs	r2, #8
 8008e06:	4629      	mov	r1, r5
 8008e08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e0c:	f000 f86f 	bl	8008eee <memset>
 8008e10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e18:	4620      	mov	r0, r4
 8008e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e1c:	3468      	adds	r4, #104	; 0x68
 8008e1e:	e7d9      	b.n	8008dd4 <__sfp+0x1c>
 8008e20:	2104      	movs	r1, #4
 8008e22:	4638      	mov	r0, r7
 8008e24:	f7ff ff62 	bl	8008cec <__sfmoreglue>
 8008e28:	4604      	mov	r4, r0
 8008e2a:	6030      	str	r0, [r6, #0]
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d1d5      	bne.n	8008ddc <__sfp+0x24>
 8008e30:	f7ff ff78 	bl	8008d24 <__sfp_lock_release>
 8008e34:	230c      	movs	r3, #12
 8008e36:	603b      	str	r3, [r7, #0]
 8008e38:	e7ee      	b.n	8008e18 <__sfp+0x60>
 8008e3a:	bf00      	nop
 8008e3c:	0800bccc 	.word	0x0800bccc
 8008e40:	ffff0001 	.word	0xffff0001

08008e44 <_fwalk_reent>:
 8008e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e48:	4606      	mov	r6, r0
 8008e4a:	4688      	mov	r8, r1
 8008e4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e50:	2700      	movs	r7, #0
 8008e52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e56:	f1b9 0901 	subs.w	r9, r9, #1
 8008e5a:	d505      	bpl.n	8008e68 <_fwalk_reent+0x24>
 8008e5c:	6824      	ldr	r4, [r4, #0]
 8008e5e:	2c00      	cmp	r4, #0
 8008e60:	d1f7      	bne.n	8008e52 <_fwalk_reent+0xe>
 8008e62:	4638      	mov	r0, r7
 8008e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e68:	89ab      	ldrh	r3, [r5, #12]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d907      	bls.n	8008e7e <_fwalk_reent+0x3a>
 8008e6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e72:	3301      	adds	r3, #1
 8008e74:	d003      	beq.n	8008e7e <_fwalk_reent+0x3a>
 8008e76:	4629      	mov	r1, r5
 8008e78:	4630      	mov	r0, r6
 8008e7a:	47c0      	blx	r8
 8008e7c:	4307      	orrs	r7, r0
 8008e7e:	3568      	adds	r5, #104	; 0x68
 8008e80:	e7e9      	b.n	8008e56 <_fwalk_reent+0x12>
	...

08008e84 <__libc_init_array>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	4d0d      	ldr	r5, [pc, #52]	; (8008ebc <__libc_init_array+0x38>)
 8008e88:	4c0d      	ldr	r4, [pc, #52]	; (8008ec0 <__libc_init_array+0x3c>)
 8008e8a:	1b64      	subs	r4, r4, r5
 8008e8c:	10a4      	asrs	r4, r4, #2
 8008e8e:	2600      	movs	r6, #0
 8008e90:	42a6      	cmp	r6, r4
 8008e92:	d109      	bne.n	8008ea8 <__libc_init_array+0x24>
 8008e94:	4d0b      	ldr	r5, [pc, #44]	; (8008ec4 <__libc_init_array+0x40>)
 8008e96:	4c0c      	ldr	r4, [pc, #48]	; (8008ec8 <__libc_init_array+0x44>)
 8008e98:	f002 fe7a 	bl	800bb90 <_init>
 8008e9c:	1b64      	subs	r4, r4, r5
 8008e9e:	10a4      	asrs	r4, r4, #2
 8008ea0:	2600      	movs	r6, #0
 8008ea2:	42a6      	cmp	r6, r4
 8008ea4:	d105      	bne.n	8008eb2 <__libc_init_array+0x2e>
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}
 8008ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eac:	4798      	blx	r3
 8008eae:	3601      	adds	r6, #1
 8008eb0:	e7ee      	b.n	8008e90 <__libc_init_array+0xc>
 8008eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb6:	4798      	blx	r3
 8008eb8:	3601      	adds	r6, #1
 8008eba:	e7f2      	b.n	8008ea2 <__libc_init_array+0x1e>
 8008ebc:	0800c054 	.word	0x0800c054
 8008ec0:	0800c054 	.word	0x0800c054
 8008ec4:	0800c054 	.word	0x0800c054
 8008ec8:	0800c058 	.word	0x0800c058

08008ecc <__retarget_lock_init_recursive>:
 8008ecc:	4770      	bx	lr

08008ece <__retarget_lock_acquire_recursive>:
 8008ece:	4770      	bx	lr

08008ed0 <__retarget_lock_release_recursive>:
 8008ed0:	4770      	bx	lr

08008ed2 <memcpy>:
 8008ed2:	440a      	add	r2, r1
 8008ed4:	4291      	cmp	r1, r2
 8008ed6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008eda:	d100      	bne.n	8008ede <memcpy+0xc>
 8008edc:	4770      	bx	lr
 8008ede:	b510      	push	{r4, lr}
 8008ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ee8:	4291      	cmp	r1, r2
 8008eea:	d1f9      	bne.n	8008ee0 <memcpy+0xe>
 8008eec:	bd10      	pop	{r4, pc}

08008eee <memset>:
 8008eee:	4402      	add	r2, r0
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d100      	bne.n	8008ef8 <memset+0xa>
 8008ef6:	4770      	bx	lr
 8008ef8:	f803 1b01 	strb.w	r1, [r3], #1
 8008efc:	e7f9      	b.n	8008ef2 <memset+0x4>
	...

08008f00 <sbrk_aligned>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	4e0e      	ldr	r6, [pc, #56]	; (8008f3c <sbrk_aligned+0x3c>)
 8008f04:	460c      	mov	r4, r1
 8008f06:	6831      	ldr	r1, [r6, #0]
 8008f08:	4605      	mov	r5, r0
 8008f0a:	b911      	cbnz	r1, 8008f12 <sbrk_aligned+0x12>
 8008f0c:	f000 fd60 	bl	80099d0 <_sbrk_r>
 8008f10:	6030      	str	r0, [r6, #0]
 8008f12:	4621      	mov	r1, r4
 8008f14:	4628      	mov	r0, r5
 8008f16:	f000 fd5b 	bl	80099d0 <_sbrk_r>
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	d00a      	beq.n	8008f34 <sbrk_aligned+0x34>
 8008f1e:	1cc4      	adds	r4, r0, #3
 8008f20:	f024 0403 	bic.w	r4, r4, #3
 8008f24:	42a0      	cmp	r0, r4
 8008f26:	d007      	beq.n	8008f38 <sbrk_aligned+0x38>
 8008f28:	1a21      	subs	r1, r4, r0
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f000 fd50 	bl	80099d0 <_sbrk_r>
 8008f30:	3001      	adds	r0, #1
 8008f32:	d101      	bne.n	8008f38 <sbrk_aligned+0x38>
 8008f34:	f04f 34ff 	mov.w	r4, #4294967295
 8008f38:	4620      	mov	r0, r4
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	2000458c 	.word	0x2000458c

08008f40 <_malloc_r>:
 8008f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f44:	1ccd      	adds	r5, r1, #3
 8008f46:	f025 0503 	bic.w	r5, r5, #3
 8008f4a:	3508      	adds	r5, #8
 8008f4c:	2d0c      	cmp	r5, #12
 8008f4e:	bf38      	it	cc
 8008f50:	250c      	movcc	r5, #12
 8008f52:	2d00      	cmp	r5, #0
 8008f54:	4607      	mov	r7, r0
 8008f56:	db01      	blt.n	8008f5c <_malloc_r+0x1c>
 8008f58:	42a9      	cmp	r1, r5
 8008f5a:	d905      	bls.n	8008f68 <_malloc_r+0x28>
 8008f5c:	230c      	movs	r3, #12
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	2600      	movs	r6, #0
 8008f62:	4630      	mov	r0, r6
 8008f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f68:	4e2e      	ldr	r6, [pc, #184]	; (8009024 <_malloc_r+0xe4>)
 8008f6a:	f001 fd35 	bl	800a9d8 <__malloc_lock>
 8008f6e:	6833      	ldr	r3, [r6, #0]
 8008f70:	461c      	mov	r4, r3
 8008f72:	bb34      	cbnz	r4, 8008fc2 <_malloc_r+0x82>
 8008f74:	4629      	mov	r1, r5
 8008f76:	4638      	mov	r0, r7
 8008f78:	f7ff ffc2 	bl	8008f00 <sbrk_aligned>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	4604      	mov	r4, r0
 8008f80:	d14d      	bne.n	800901e <_malloc_r+0xde>
 8008f82:	6834      	ldr	r4, [r6, #0]
 8008f84:	4626      	mov	r6, r4
 8008f86:	2e00      	cmp	r6, #0
 8008f88:	d140      	bne.n	800900c <_malloc_r+0xcc>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4638      	mov	r0, r7
 8008f90:	eb04 0803 	add.w	r8, r4, r3
 8008f94:	f000 fd1c 	bl	80099d0 <_sbrk_r>
 8008f98:	4580      	cmp	r8, r0
 8008f9a:	d13a      	bne.n	8009012 <_malloc_r+0xd2>
 8008f9c:	6821      	ldr	r1, [r4, #0]
 8008f9e:	3503      	adds	r5, #3
 8008fa0:	1a6d      	subs	r5, r5, r1
 8008fa2:	f025 0503 	bic.w	r5, r5, #3
 8008fa6:	3508      	adds	r5, #8
 8008fa8:	2d0c      	cmp	r5, #12
 8008faa:	bf38      	it	cc
 8008fac:	250c      	movcc	r5, #12
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	f7ff ffa5 	bl	8008f00 <sbrk_aligned>
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	d02b      	beq.n	8009012 <_malloc_r+0xd2>
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	442b      	add	r3, r5
 8008fbe:	6023      	str	r3, [r4, #0]
 8008fc0:	e00e      	b.n	8008fe0 <_malloc_r+0xa0>
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	1b52      	subs	r2, r2, r5
 8008fc6:	d41e      	bmi.n	8009006 <_malloc_r+0xc6>
 8008fc8:	2a0b      	cmp	r2, #11
 8008fca:	d916      	bls.n	8008ffa <_malloc_r+0xba>
 8008fcc:	1961      	adds	r1, r4, r5
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	6025      	str	r5, [r4, #0]
 8008fd2:	bf18      	it	ne
 8008fd4:	6059      	strne	r1, [r3, #4]
 8008fd6:	6863      	ldr	r3, [r4, #4]
 8008fd8:	bf08      	it	eq
 8008fda:	6031      	streq	r1, [r6, #0]
 8008fdc:	5162      	str	r2, [r4, r5]
 8008fde:	604b      	str	r3, [r1, #4]
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	f104 060b 	add.w	r6, r4, #11
 8008fe6:	f001 fcfd 	bl	800a9e4 <__malloc_unlock>
 8008fea:	f026 0607 	bic.w	r6, r6, #7
 8008fee:	1d23      	adds	r3, r4, #4
 8008ff0:	1af2      	subs	r2, r6, r3
 8008ff2:	d0b6      	beq.n	8008f62 <_malloc_r+0x22>
 8008ff4:	1b9b      	subs	r3, r3, r6
 8008ff6:	50a3      	str	r3, [r4, r2]
 8008ff8:	e7b3      	b.n	8008f62 <_malloc_r+0x22>
 8008ffa:	6862      	ldr	r2, [r4, #4]
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	bf0c      	ite	eq
 8009000:	6032      	streq	r2, [r6, #0]
 8009002:	605a      	strne	r2, [r3, #4]
 8009004:	e7ec      	b.n	8008fe0 <_malloc_r+0xa0>
 8009006:	4623      	mov	r3, r4
 8009008:	6864      	ldr	r4, [r4, #4]
 800900a:	e7b2      	b.n	8008f72 <_malloc_r+0x32>
 800900c:	4634      	mov	r4, r6
 800900e:	6876      	ldr	r6, [r6, #4]
 8009010:	e7b9      	b.n	8008f86 <_malloc_r+0x46>
 8009012:	230c      	movs	r3, #12
 8009014:	603b      	str	r3, [r7, #0]
 8009016:	4638      	mov	r0, r7
 8009018:	f001 fce4 	bl	800a9e4 <__malloc_unlock>
 800901c:	e7a1      	b.n	8008f62 <_malloc_r+0x22>
 800901e:	6025      	str	r5, [r4, #0]
 8009020:	e7de      	b.n	8008fe0 <_malloc_r+0xa0>
 8009022:	bf00      	nop
 8009024:	20004588 	.word	0x20004588

08009028 <__cvt>:
 8009028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800902c:	ec55 4b10 	vmov	r4, r5, d0
 8009030:	2d00      	cmp	r5, #0
 8009032:	460e      	mov	r6, r1
 8009034:	4619      	mov	r1, r3
 8009036:	462b      	mov	r3, r5
 8009038:	bfbb      	ittet	lt
 800903a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800903e:	461d      	movlt	r5, r3
 8009040:	2300      	movge	r3, #0
 8009042:	232d      	movlt	r3, #45	; 0x2d
 8009044:	700b      	strb	r3, [r1, #0]
 8009046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009048:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800904c:	4691      	mov	r9, r2
 800904e:	f023 0820 	bic.w	r8, r3, #32
 8009052:	bfbc      	itt	lt
 8009054:	4622      	movlt	r2, r4
 8009056:	4614      	movlt	r4, r2
 8009058:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800905c:	d005      	beq.n	800906a <__cvt+0x42>
 800905e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009062:	d100      	bne.n	8009066 <__cvt+0x3e>
 8009064:	3601      	adds	r6, #1
 8009066:	2102      	movs	r1, #2
 8009068:	e000      	b.n	800906c <__cvt+0x44>
 800906a:	2103      	movs	r1, #3
 800906c:	ab03      	add	r3, sp, #12
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	ab02      	add	r3, sp, #8
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	ec45 4b10 	vmov	d0, r4, r5
 8009078:	4653      	mov	r3, sl
 800907a:	4632      	mov	r2, r6
 800907c:	f000 fdcc 	bl	8009c18 <_dtoa_r>
 8009080:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009084:	4607      	mov	r7, r0
 8009086:	d102      	bne.n	800908e <__cvt+0x66>
 8009088:	f019 0f01 	tst.w	r9, #1
 800908c:	d022      	beq.n	80090d4 <__cvt+0xac>
 800908e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009092:	eb07 0906 	add.w	r9, r7, r6
 8009096:	d110      	bne.n	80090ba <__cvt+0x92>
 8009098:	783b      	ldrb	r3, [r7, #0]
 800909a:	2b30      	cmp	r3, #48	; 0x30
 800909c:	d10a      	bne.n	80090b4 <__cvt+0x8c>
 800909e:	2200      	movs	r2, #0
 80090a0:	2300      	movs	r3, #0
 80090a2:	4620      	mov	r0, r4
 80090a4:	4629      	mov	r1, r5
 80090a6:	f7f7 fd2f 	bl	8000b08 <__aeabi_dcmpeq>
 80090aa:	b918      	cbnz	r0, 80090b4 <__cvt+0x8c>
 80090ac:	f1c6 0601 	rsb	r6, r6, #1
 80090b0:	f8ca 6000 	str.w	r6, [sl]
 80090b4:	f8da 3000 	ldr.w	r3, [sl]
 80090b8:	4499      	add	r9, r3
 80090ba:	2200      	movs	r2, #0
 80090bc:	2300      	movs	r3, #0
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	f7f7 fd21 	bl	8000b08 <__aeabi_dcmpeq>
 80090c6:	b108      	cbz	r0, 80090cc <__cvt+0xa4>
 80090c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80090cc:	2230      	movs	r2, #48	; 0x30
 80090ce:	9b03      	ldr	r3, [sp, #12]
 80090d0:	454b      	cmp	r3, r9
 80090d2:	d307      	bcc.n	80090e4 <__cvt+0xbc>
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090d8:	1bdb      	subs	r3, r3, r7
 80090da:	4638      	mov	r0, r7
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	b004      	add	sp, #16
 80090e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e4:	1c59      	adds	r1, r3, #1
 80090e6:	9103      	str	r1, [sp, #12]
 80090e8:	701a      	strb	r2, [r3, #0]
 80090ea:	e7f0      	b.n	80090ce <__cvt+0xa6>

080090ec <__exponent>:
 80090ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ee:	4603      	mov	r3, r0
 80090f0:	2900      	cmp	r1, #0
 80090f2:	bfb8      	it	lt
 80090f4:	4249      	neglt	r1, r1
 80090f6:	f803 2b02 	strb.w	r2, [r3], #2
 80090fa:	bfb4      	ite	lt
 80090fc:	222d      	movlt	r2, #45	; 0x2d
 80090fe:	222b      	movge	r2, #43	; 0x2b
 8009100:	2909      	cmp	r1, #9
 8009102:	7042      	strb	r2, [r0, #1]
 8009104:	dd2a      	ble.n	800915c <__exponent+0x70>
 8009106:	f10d 0407 	add.w	r4, sp, #7
 800910a:	46a4      	mov	ip, r4
 800910c:	270a      	movs	r7, #10
 800910e:	46a6      	mov	lr, r4
 8009110:	460a      	mov	r2, r1
 8009112:	fb91 f6f7 	sdiv	r6, r1, r7
 8009116:	fb07 1516 	mls	r5, r7, r6, r1
 800911a:	3530      	adds	r5, #48	; 0x30
 800911c:	2a63      	cmp	r2, #99	; 0x63
 800911e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009122:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009126:	4631      	mov	r1, r6
 8009128:	dcf1      	bgt.n	800910e <__exponent+0x22>
 800912a:	3130      	adds	r1, #48	; 0x30
 800912c:	f1ae 0502 	sub.w	r5, lr, #2
 8009130:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009134:	1c44      	adds	r4, r0, #1
 8009136:	4629      	mov	r1, r5
 8009138:	4561      	cmp	r1, ip
 800913a:	d30a      	bcc.n	8009152 <__exponent+0x66>
 800913c:	f10d 0209 	add.w	r2, sp, #9
 8009140:	eba2 020e 	sub.w	r2, r2, lr
 8009144:	4565      	cmp	r5, ip
 8009146:	bf88      	it	hi
 8009148:	2200      	movhi	r2, #0
 800914a:	4413      	add	r3, r2
 800914c:	1a18      	subs	r0, r3, r0
 800914e:	b003      	add	sp, #12
 8009150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009156:	f804 2f01 	strb.w	r2, [r4, #1]!
 800915a:	e7ed      	b.n	8009138 <__exponent+0x4c>
 800915c:	2330      	movs	r3, #48	; 0x30
 800915e:	3130      	adds	r1, #48	; 0x30
 8009160:	7083      	strb	r3, [r0, #2]
 8009162:	70c1      	strb	r1, [r0, #3]
 8009164:	1d03      	adds	r3, r0, #4
 8009166:	e7f1      	b.n	800914c <__exponent+0x60>

08009168 <_printf_float>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	ed2d 8b02 	vpush	{d8}
 8009170:	b08d      	sub	sp, #52	; 0x34
 8009172:	460c      	mov	r4, r1
 8009174:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009178:	4616      	mov	r6, r2
 800917a:	461f      	mov	r7, r3
 800917c:	4605      	mov	r5, r0
 800917e:	f001 fbfb 	bl	800a978 <_localeconv_r>
 8009182:	f8d0 a000 	ldr.w	sl, [r0]
 8009186:	4650      	mov	r0, sl
 8009188:	f7f7 f842 	bl	8000210 <strlen>
 800918c:	2300      	movs	r3, #0
 800918e:	930a      	str	r3, [sp, #40]	; 0x28
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	f8d8 3000 	ldr.w	r3, [r8]
 8009198:	f894 b018 	ldrb.w	fp, [r4, #24]
 800919c:	3307      	adds	r3, #7
 800919e:	f023 0307 	bic.w	r3, r3, #7
 80091a2:	f103 0208 	add.w	r2, r3, #8
 80091a6:	f8c8 2000 	str.w	r2, [r8]
 80091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80091b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80091b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091ba:	9307      	str	r3, [sp, #28]
 80091bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80091c0:	ee08 0a10 	vmov	s16, r0
 80091c4:	4b9f      	ldr	r3, [pc, #636]	; (8009444 <_printf_float+0x2dc>)
 80091c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091ca:	f04f 32ff 	mov.w	r2, #4294967295
 80091ce:	f7f7 fccd 	bl	8000b6c <__aeabi_dcmpun>
 80091d2:	bb88      	cbnz	r0, 8009238 <_printf_float+0xd0>
 80091d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091d8:	4b9a      	ldr	r3, [pc, #616]	; (8009444 <_printf_float+0x2dc>)
 80091da:	f04f 32ff 	mov.w	r2, #4294967295
 80091de:	f7f7 fca7 	bl	8000b30 <__aeabi_dcmple>
 80091e2:	bb48      	cbnz	r0, 8009238 <_printf_float+0xd0>
 80091e4:	2200      	movs	r2, #0
 80091e6:	2300      	movs	r3, #0
 80091e8:	4640      	mov	r0, r8
 80091ea:	4649      	mov	r1, r9
 80091ec:	f7f7 fc96 	bl	8000b1c <__aeabi_dcmplt>
 80091f0:	b110      	cbz	r0, 80091f8 <_printf_float+0x90>
 80091f2:	232d      	movs	r3, #45	; 0x2d
 80091f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091f8:	4b93      	ldr	r3, [pc, #588]	; (8009448 <_printf_float+0x2e0>)
 80091fa:	4894      	ldr	r0, [pc, #592]	; (800944c <_printf_float+0x2e4>)
 80091fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009200:	bf94      	ite	ls
 8009202:	4698      	movls	r8, r3
 8009204:	4680      	movhi	r8, r0
 8009206:	2303      	movs	r3, #3
 8009208:	6123      	str	r3, [r4, #16]
 800920a:	9b05      	ldr	r3, [sp, #20]
 800920c:	f023 0204 	bic.w	r2, r3, #4
 8009210:	6022      	str	r2, [r4, #0]
 8009212:	f04f 0900 	mov.w	r9, #0
 8009216:	9700      	str	r7, [sp, #0]
 8009218:	4633      	mov	r3, r6
 800921a:	aa0b      	add	r2, sp, #44	; 0x2c
 800921c:	4621      	mov	r1, r4
 800921e:	4628      	mov	r0, r5
 8009220:	f000 f9d8 	bl	80095d4 <_printf_common>
 8009224:	3001      	adds	r0, #1
 8009226:	f040 8090 	bne.w	800934a <_printf_float+0x1e2>
 800922a:	f04f 30ff 	mov.w	r0, #4294967295
 800922e:	b00d      	add	sp, #52	; 0x34
 8009230:	ecbd 8b02 	vpop	{d8}
 8009234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009238:	4642      	mov	r2, r8
 800923a:	464b      	mov	r3, r9
 800923c:	4640      	mov	r0, r8
 800923e:	4649      	mov	r1, r9
 8009240:	f7f7 fc94 	bl	8000b6c <__aeabi_dcmpun>
 8009244:	b140      	cbz	r0, 8009258 <_printf_float+0xf0>
 8009246:	464b      	mov	r3, r9
 8009248:	2b00      	cmp	r3, #0
 800924a:	bfbc      	itt	lt
 800924c:	232d      	movlt	r3, #45	; 0x2d
 800924e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009252:	487f      	ldr	r0, [pc, #508]	; (8009450 <_printf_float+0x2e8>)
 8009254:	4b7f      	ldr	r3, [pc, #508]	; (8009454 <_printf_float+0x2ec>)
 8009256:	e7d1      	b.n	80091fc <_printf_float+0x94>
 8009258:	6863      	ldr	r3, [r4, #4]
 800925a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800925e:	9206      	str	r2, [sp, #24]
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	d13f      	bne.n	80092e4 <_printf_float+0x17c>
 8009264:	2306      	movs	r3, #6
 8009266:	6063      	str	r3, [r4, #4]
 8009268:	9b05      	ldr	r3, [sp, #20]
 800926a:	6861      	ldr	r1, [r4, #4]
 800926c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009270:	2300      	movs	r3, #0
 8009272:	9303      	str	r3, [sp, #12]
 8009274:	ab0a      	add	r3, sp, #40	; 0x28
 8009276:	e9cd b301 	strd	fp, r3, [sp, #4]
 800927a:	ab09      	add	r3, sp, #36	; 0x24
 800927c:	ec49 8b10 	vmov	d0, r8, r9
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	6022      	str	r2, [r4, #0]
 8009284:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009288:	4628      	mov	r0, r5
 800928a:	f7ff fecd 	bl	8009028 <__cvt>
 800928e:	9b06      	ldr	r3, [sp, #24]
 8009290:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009292:	2b47      	cmp	r3, #71	; 0x47
 8009294:	4680      	mov	r8, r0
 8009296:	d108      	bne.n	80092aa <_printf_float+0x142>
 8009298:	1cc8      	adds	r0, r1, #3
 800929a:	db02      	blt.n	80092a2 <_printf_float+0x13a>
 800929c:	6863      	ldr	r3, [r4, #4]
 800929e:	4299      	cmp	r1, r3
 80092a0:	dd41      	ble.n	8009326 <_printf_float+0x1be>
 80092a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80092a6:	fa5f fb8b 	uxtb.w	fp, fp
 80092aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092ae:	d820      	bhi.n	80092f2 <_printf_float+0x18a>
 80092b0:	3901      	subs	r1, #1
 80092b2:	465a      	mov	r2, fp
 80092b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80092b8:	9109      	str	r1, [sp, #36]	; 0x24
 80092ba:	f7ff ff17 	bl	80090ec <__exponent>
 80092be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092c0:	1813      	adds	r3, r2, r0
 80092c2:	2a01      	cmp	r2, #1
 80092c4:	4681      	mov	r9, r0
 80092c6:	6123      	str	r3, [r4, #16]
 80092c8:	dc02      	bgt.n	80092d0 <_printf_float+0x168>
 80092ca:	6822      	ldr	r2, [r4, #0]
 80092cc:	07d2      	lsls	r2, r2, #31
 80092ce:	d501      	bpl.n	80092d4 <_printf_float+0x16c>
 80092d0:	3301      	adds	r3, #1
 80092d2:	6123      	str	r3, [r4, #16]
 80092d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d09c      	beq.n	8009216 <_printf_float+0xae>
 80092dc:	232d      	movs	r3, #45	; 0x2d
 80092de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092e2:	e798      	b.n	8009216 <_printf_float+0xae>
 80092e4:	9a06      	ldr	r2, [sp, #24]
 80092e6:	2a47      	cmp	r2, #71	; 0x47
 80092e8:	d1be      	bne.n	8009268 <_printf_float+0x100>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1bc      	bne.n	8009268 <_printf_float+0x100>
 80092ee:	2301      	movs	r3, #1
 80092f0:	e7b9      	b.n	8009266 <_printf_float+0xfe>
 80092f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80092f6:	d118      	bne.n	800932a <_printf_float+0x1c2>
 80092f8:	2900      	cmp	r1, #0
 80092fa:	6863      	ldr	r3, [r4, #4]
 80092fc:	dd0b      	ble.n	8009316 <_printf_float+0x1ae>
 80092fe:	6121      	str	r1, [r4, #16]
 8009300:	b913      	cbnz	r3, 8009308 <_printf_float+0x1a0>
 8009302:	6822      	ldr	r2, [r4, #0]
 8009304:	07d0      	lsls	r0, r2, #31
 8009306:	d502      	bpl.n	800930e <_printf_float+0x1a6>
 8009308:	3301      	adds	r3, #1
 800930a:	440b      	add	r3, r1
 800930c:	6123      	str	r3, [r4, #16]
 800930e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009310:	f04f 0900 	mov.w	r9, #0
 8009314:	e7de      	b.n	80092d4 <_printf_float+0x16c>
 8009316:	b913      	cbnz	r3, 800931e <_printf_float+0x1b6>
 8009318:	6822      	ldr	r2, [r4, #0]
 800931a:	07d2      	lsls	r2, r2, #31
 800931c:	d501      	bpl.n	8009322 <_printf_float+0x1ba>
 800931e:	3302      	adds	r3, #2
 8009320:	e7f4      	b.n	800930c <_printf_float+0x1a4>
 8009322:	2301      	movs	r3, #1
 8009324:	e7f2      	b.n	800930c <_printf_float+0x1a4>
 8009326:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800932a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800932c:	4299      	cmp	r1, r3
 800932e:	db05      	blt.n	800933c <_printf_float+0x1d4>
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	6121      	str	r1, [r4, #16]
 8009334:	07d8      	lsls	r0, r3, #31
 8009336:	d5ea      	bpl.n	800930e <_printf_float+0x1a6>
 8009338:	1c4b      	adds	r3, r1, #1
 800933a:	e7e7      	b.n	800930c <_printf_float+0x1a4>
 800933c:	2900      	cmp	r1, #0
 800933e:	bfd4      	ite	le
 8009340:	f1c1 0202 	rsble	r2, r1, #2
 8009344:	2201      	movgt	r2, #1
 8009346:	4413      	add	r3, r2
 8009348:	e7e0      	b.n	800930c <_printf_float+0x1a4>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	055a      	lsls	r2, r3, #21
 800934e:	d407      	bmi.n	8009360 <_printf_float+0x1f8>
 8009350:	6923      	ldr	r3, [r4, #16]
 8009352:	4642      	mov	r2, r8
 8009354:	4631      	mov	r1, r6
 8009356:	4628      	mov	r0, r5
 8009358:	47b8      	blx	r7
 800935a:	3001      	adds	r0, #1
 800935c:	d12c      	bne.n	80093b8 <_printf_float+0x250>
 800935e:	e764      	b.n	800922a <_printf_float+0xc2>
 8009360:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009364:	f240 80e0 	bls.w	8009528 <_printf_float+0x3c0>
 8009368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800936c:	2200      	movs	r2, #0
 800936e:	2300      	movs	r3, #0
 8009370:	f7f7 fbca 	bl	8000b08 <__aeabi_dcmpeq>
 8009374:	2800      	cmp	r0, #0
 8009376:	d034      	beq.n	80093e2 <_printf_float+0x27a>
 8009378:	4a37      	ldr	r2, [pc, #220]	; (8009458 <_printf_float+0x2f0>)
 800937a:	2301      	movs	r3, #1
 800937c:	4631      	mov	r1, r6
 800937e:	4628      	mov	r0, r5
 8009380:	47b8      	blx	r7
 8009382:	3001      	adds	r0, #1
 8009384:	f43f af51 	beq.w	800922a <_printf_float+0xc2>
 8009388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800938c:	429a      	cmp	r2, r3
 800938e:	db02      	blt.n	8009396 <_printf_float+0x22e>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	07d8      	lsls	r0, r3, #31
 8009394:	d510      	bpl.n	80093b8 <_printf_float+0x250>
 8009396:	ee18 3a10 	vmov	r3, s16
 800939a:	4652      	mov	r2, sl
 800939c:	4631      	mov	r1, r6
 800939e:	4628      	mov	r0, r5
 80093a0:	47b8      	blx	r7
 80093a2:	3001      	adds	r0, #1
 80093a4:	f43f af41 	beq.w	800922a <_printf_float+0xc2>
 80093a8:	f04f 0800 	mov.w	r8, #0
 80093ac:	f104 091a 	add.w	r9, r4, #26
 80093b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b2:	3b01      	subs	r3, #1
 80093b4:	4543      	cmp	r3, r8
 80093b6:	dc09      	bgt.n	80093cc <_printf_float+0x264>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	079b      	lsls	r3, r3, #30
 80093bc:	f100 8105 	bmi.w	80095ca <_printf_float+0x462>
 80093c0:	68e0      	ldr	r0, [r4, #12]
 80093c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c4:	4298      	cmp	r0, r3
 80093c6:	bfb8      	it	lt
 80093c8:	4618      	movlt	r0, r3
 80093ca:	e730      	b.n	800922e <_printf_float+0xc6>
 80093cc:	2301      	movs	r3, #1
 80093ce:	464a      	mov	r2, r9
 80093d0:	4631      	mov	r1, r6
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b8      	blx	r7
 80093d6:	3001      	adds	r0, #1
 80093d8:	f43f af27 	beq.w	800922a <_printf_float+0xc2>
 80093dc:	f108 0801 	add.w	r8, r8, #1
 80093e0:	e7e6      	b.n	80093b0 <_printf_float+0x248>
 80093e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dc39      	bgt.n	800945c <_printf_float+0x2f4>
 80093e8:	4a1b      	ldr	r2, [pc, #108]	; (8009458 <_printf_float+0x2f0>)
 80093ea:	2301      	movs	r3, #1
 80093ec:	4631      	mov	r1, r6
 80093ee:	4628      	mov	r0, r5
 80093f0:	47b8      	blx	r7
 80093f2:	3001      	adds	r0, #1
 80093f4:	f43f af19 	beq.w	800922a <_printf_float+0xc2>
 80093f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093fc:	4313      	orrs	r3, r2
 80093fe:	d102      	bne.n	8009406 <_printf_float+0x29e>
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	07d9      	lsls	r1, r3, #31
 8009404:	d5d8      	bpl.n	80093b8 <_printf_float+0x250>
 8009406:	ee18 3a10 	vmov	r3, s16
 800940a:	4652      	mov	r2, sl
 800940c:	4631      	mov	r1, r6
 800940e:	4628      	mov	r0, r5
 8009410:	47b8      	blx	r7
 8009412:	3001      	adds	r0, #1
 8009414:	f43f af09 	beq.w	800922a <_printf_float+0xc2>
 8009418:	f04f 0900 	mov.w	r9, #0
 800941c:	f104 0a1a 	add.w	sl, r4, #26
 8009420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009422:	425b      	negs	r3, r3
 8009424:	454b      	cmp	r3, r9
 8009426:	dc01      	bgt.n	800942c <_printf_float+0x2c4>
 8009428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800942a:	e792      	b.n	8009352 <_printf_float+0x1ea>
 800942c:	2301      	movs	r3, #1
 800942e:	4652      	mov	r2, sl
 8009430:	4631      	mov	r1, r6
 8009432:	4628      	mov	r0, r5
 8009434:	47b8      	blx	r7
 8009436:	3001      	adds	r0, #1
 8009438:	f43f aef7 	beq.w	800922a <_printf_float+0xc2>
 800943c:	f109 0901 	add.w	r9, r9, #1
 8009440:	e7ee      	b.n	8009420 <_printf_float+0x2b8>
 8009442:	bf00      	nop
 8009444:	7fefffff 	.word	0x7fefffff
 8009448:	0800bcd0 	.word	0x0800bcd0
 800944c:	0800bcd4 	.word	0x0800bcd4
 8009450:	0800bcdc 	.word	0x0800bcdc
 8009454:	0800bcd8 	.word	0x0800bcd8
 8009458:	0800bce0 	.word	0x0800bce0
 800945c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800945e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009460:	429a      	cmp	r2, r3
 8009462:	bfa8      	it	ge
 8009464:	461a      	movge	r2, r3
 8009466:	2a00      	cmp	r2, #0
 8009468:	4691      	mov	r9, r2
 800946a:	dc37      	bgt.n	80094dc <_printf_float+0x374>
 800946c:	f04f 0b00 	mov.w	fp, #0
 8009470:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009474:	f104 021a 	add.w	r2, r4, #26
 8009478:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800947a:	9305      	str	r3, [sp, #20]
 800947c:	eba3 0309 	sub.w	r3, r3, r9
 8009480:	455b      	cmp	r3, fp
 8009482:	dc33      	bgt.n	80094ec <_printf_float+0x384>
 8009484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009488:	429a      	cmp	r2, r3
 800948a:	db3b      	blt.n	8009504 <_printf_float+0x39c>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	07da      	lsls	r2, r3, #31
 8009490:	d438      	bmi.n	8009504 <_printf_float+0x39c>
 8009492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009494:	9a05      	ldr	r2, [sp, #20]
 8009496:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009498:	1a9a      	subs	r2, r3, r2
 800949a:	eba3 0901 	sub.w	r9, r3, r1
 800949e:	4591      	cmp	r9, r2
 80094a0:	bfa8      	it	ge
 80094a2:	4691      	movge	r9, r2
 80094a4:	f1b9 0f00 	cmp.w	r9, #0
 80094a8:	dc35      	bgt.n	8009516 <_printf_float+0x3ae>
 80094aa:	f04f 0800 	mov.w	r8, #0
 80094ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094b2:	f104 0a1a 	add.w	sl, r4, #26
 80094b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094ba:	1a9b      	subs	r3, r3, r2
 80094bc:	eba3 0309 	sub.w	r3, r3, r9
 80094c0:	4543      	cmp	r3, r8
 80094c2:	f77f af79 	ble.w	80093b8 <_printf_float+0x250>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4652      	mov	r2, sl
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	f43f aeaa 	beq.w	800922a <_printf_float+0xc2>
 80094d6:	f108 0801 	add.w	r8, r8, #1
 80094da:	e7ec      	b.n	80094b6 <_printf_float+0x34e>
 80094dc:	4613      	mov	r3, r2
 80094de:	4631      	mov	r1, r6
 80094e0:	4642      	mov	r2, r8
 80094e2:	4628      	mov	r0, r5
 80094e4:	47b8      	blx	r7
 80094e6:	3001      	adds	r0, #1
 80094e8:	d1c0      	bne.n	800946c <_printf_float+0x304>
 80094ea:	e69e      	b.n	800922a <_printf_float+0xc2>
 80094ec:	2301      	movs	r3, #1
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	9205      	str	r2, [sp, #20]
 80094f4:	47b8      	blx	r7
 80094f6:	3001      	adds	r0, #1
 80094f8:	f43f ae97 	beq.w	800922a <_printf_float+0xc2>
 80094fc:	9a05      	ldr	r2, [sp, #20]
 80094fe:	f10b 0b01 	add.w	fp, fp, #1
 8009502:	e7b9      	b.n	8009478 <_printf_float+0x310>
 8009504:	ee18 3a10 	vmov	r3, s16
 8009508:	4652      	mov	r2, sl
 800950a:	4631      	mov	r1, r6
 800950c:	4628      	mov	r0, r5
 800950e:	47b8      	blx	r7
 8009510:	3001      	adds	r0, #1
 8009512:	d1be      	bne.n	8009492 <_printf_float+0x32a>
 8009514:	e689      	b.n	800922a <_printf_float+0xc2>
 8009516:	9a05      	ldr	r2, [sp, #20]
 8009518:	464b      	mov	r3, r9
 800951a:	4442      	add	r2, r8
 800951c:	4631      	mov	r1, r6
 800951e:	4628      	mov	r0, r5
 8009520:	47b8      	blx	r7
 8009522:	3001      	adds	r0, #1
 8009524:	d1c1      	bne.n	80094aa <_printf_float+0x342>
 8009526:	e680      	b.n	800922a <_printf_float+0xc2>
 8009528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800952a:	2a01      	cmp	r2, #1
 800952c:	dc01      	bgt.n	8009532 <_printf_float+0x3ca>
 800952e:	07db      	lsls	r3, r3, #31
 8009530:	d538      	bpl.n	80095a4 <_printf_float+0x43c>
 8009532:	2301      	movs	r3, #1
 8009534:	4642      	mov	r2, r8
 8009536:	4631      	mov	r1, r6
 8009538:	4628      	mov	r0, r5
 800953a:	47b8      	blx	r7
 800953c:	3001      	adds	r0, #1
 800953e:	f43f ae74 	beq.w	800922a <_printf_float+0xc2>
 8009542:	ee18 3a10 	vmov	r3, s16
 8009546:	4652      	mov	r2, sl
 8009548:	4631      	mov	r1, r6
 800954a:	4628      	mov	r0, r5
 800954c:	47b8      	blx	r7
 800954e:	3001      	adds	r0, #1
 8009550:	f43f ae6b 	beq.w	800922a <_printf_float+0xc2>
 8009554:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009558:	2200      	movs	r2, #0
 800955a:	2300      	movs	r3, #0
 800955c:	f7f7 fad4 	bl	8000b08 <__aeabi_dcmpeq>
 8009560:	b9d8      	cbnz	r0, 800959a <_printf_float+0x432>
 8009562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009564:	f108 0201 	add.w	r2, r8, #1
 8009568:	3b01      	subs	r3, #1
 800956a:	4631      	mov	r1, r6
 800956c:	4628      	mov	r0, r5
 800956e:	47b8      	blx	r7
 8009570:	3001      	adds	r0, #1
 8009572:	d10e      	bne.n	8009592 <_printf_float+0x42a>
 8009574:	e659      	b.n	800922a <_printf_float+0xc2>
 8009576:	2301      	movs	r3, #1
 8009578:	4652      	mov	r2, sl
 800957a:	4631      	mov	r1, r6
 800957c:	4628      	mov	r0, r5
 800957e:	47b8      	blx	r7
 8009580:	3001      	adds	r0, #1
 8009582:	f43f ae52 	beq.w	800922a <_printf_float+0xc2>
 8009586:	f108 0801 	add.w	r8, r8, #1
 800958a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800958c:	3b01      	subs	r3, #1
 800958e:	4543      	cmp	r3, r8
 8009590:	dcf1      	bgt.n	8009576 <_printf_float+0x40e>
 8009592:	464b      	mov	r3, r9
 8009594:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009598:	e6dc      	b.n	8009354 <_printf_float+0x1ec>
 800959a:	f04f 0800 	mov.w	r8, #0
 800959e:	f104 0a1a 	add.w	sl, r4, #26
 80095a2:	e7f2      	b.n	800958a <_printf_float+0x422>
 80095a4:	2301      	movs	r3, #1
 80095a6:	4642      	mov	r2, r8
 80095a8:	e7df      	b.n	800956a <_printf_float+0x402>
 80095aa:	2301      	movs	r3, #1
 80095ac:	464a      	mov	r2, r9
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	f43f ae38 	beq.w	800922a <_printf_float+0xc2>
 80095ba:	f108 0801 	add.w	r8, r8, #1
 80095be:	68e3      	ldr	r3, [r4, #12]
 80095c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095c2:	1a5b      	subs	r3, r3, r1
 80095c4:	4543      	cmp	r3, r8
 80095c6:	dcf0      	bgt.n	80095aa <_printf_float+0x442>
 80095c8:	e6fa      	b.n	80093c0 <_printf_float+0x258>
 80095ca:	f04f 0800 	mov.w	r8, #0
 80095ce:	f104 0919 	add.w	r9, r4, #25
 80095d2:	e7f4      	b.n	80095be <_printf_float+0x456>

080095d4 <_printf_common>:
 80095d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	4616      	mov	r6, r2
 80095da:	4699      	mov	r9, r3
 80095dc:	688a      	ldr	r2, [r1, #8]
 80095de:	690b      	ldr	r3, [r1, #16]
 80095e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095e4:	4293      	cmp	r3, r2
 80095e6:	bfb8      	it	lt
 80095e8:	4613      	movlt	r3, r2
 80095ea:	6033      	str	r3, [r6, #0]
 80095ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095f0:	4607      	mov	r7, r0
 80095f2:	460c      	mov	r4, r1
 80095f4:	b10a      	cbz	r2, 80095fa <_printf_common+0x26>
 80095f6:	3301      	adds	r3, #1
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	0699      	lsls	r1, r3, #26
 80095fe:	bf42      	ittt	mi
 8009600:	6833      	ldrmi	r3, [r6, #0]
 8009602:	3302      	addmi	r3, #2
 8009604:	6033      	strmi	r3, [r6, #0]
 8009606:	6825      	ldr	r5, [r4, #0]
 8009608:	f015 0506 	ands.w	r5, r5, #6
 800960c:	d106      	bne.n	800961c <_printf_common+0x48>
 800960e:	f104 0a19 	add.w	sl, r4, #25
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	6832      	ldr	r2, [r6, #0]
 8009616:	1a9b      	subs	r3, r3, r2
 8009618:	42ab      	cmp	r3, r5
 800961a:	dc26      	bgt.n	800966a <_printf_common+0x96>
 800961c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009620:	1e13      	subs	r3, r2, #0
 8009622:	6822      	ldr	r2, [r4, #0]
 8009624:	bf18      	it	ne
 8009626:	2301      	movne	r3, #1
 8009628:	0692      	lsls	r2, r2, #26
 800962a:	d42b      	bmi.n	8009684 <_printf_common+0xb0>
 800962c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009630:	4649      	mov	r1, r9
 8009632:	4638      	mov	r0, r7
 8009634:	47c0      	blx	r8
 8009636:	3001      	adds	r0, #1
 8009638:	d01e      	beq.n	8009678 <_printf_common+0xa4>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	68e5      	ldr	r5, [r4, #12]
 800963e:	6832      	ldr	r2, [r6, #0]
 8009640:	f003 0306 	and.w	r3, r3, #6
 8009644:	2b04      	cmp	r3, #4
 8009646:	bf08      	it	eq
 8009648:	1aad      	subeq	r5, r5, r2
 800964a:	68a3      	ldr	r3, [r4, #8]
 800964c:	6922      	ldr	r2, [r4, #16]
 800964e:	bf0c      	ite	eq
 8009650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009654:	2500      	movne	r5, #0
 8009656:	4293      	cmp	r3, r2
 8009658:	bfc4      	itt	gt
 800965a:	1a9b      	subgt	r3, r3, r2
 800965c:	18ed      	addgt	r5, r5, r3
 800965e:	2600      	movs	r6, #0
 8009660:	341a      	adds	r4, #26
 8009662:	42b5      	cmp	r5, r6
 8009664:	d11a      	bne.n	800969c <_printf_common+0xc8>
 8009666:	2000      	movs	r0, #0
 8009668:	e008      	b.n	800967c <_printf_common+0xa8>
 800966a:	2301      	movs	r3, #1
 800966c:	4652      	mov	r2, sl
 800966e:	4649      	mov	r1, r9
 8009670:	4638      	mov	r0, r7
 8009672:	47c0      	blx	r8
 8009674:	3001      	adds	r0, #1
 8009676:	d103      	bne.n	8009680 <_printf_common+0xac>
 8009678:	f04f 30ff 	mov.w	r0, #4294967295
 800967c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009680:	3501      	adds	r5, #1
 8009682:	e7c6      	b.n	8009612 <_printf_common+0x3e>
 8009684:	18e1      	adds	r1, r4, r3
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	2030      	movs	r0, #48	; 0x30
 800968a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800968e:	4422      	add	r2, r4
 8009690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009698:	3302      	adds	r3, #2
 800969a:	e7c7      	b.n	800962c <_printf_common+0x58>
 800969c:	2301      	movs	r3, #1
 800969e:	4622      	mov	r2, r4
 80096a0:	4649      	mov	r1, r9
 80096a2:	4638      	mov	r0, r7
 80096a4:	47c0      	blx	r8
 80096a6:	3001      	adds	r0, #1
 80096a8:	d0e6      	beq.n	8009678 <_printf_common+0xa4>
 80096aa:	3601      	adds	r6, #1
 80096ac:	e7d9      	b.n	8009662 <_printf_common+0x8e>
	...

080096b0 <_printf_i>:
 80096b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096b4:	7e0f      	ldrb	r7, [r1, #24]
 80096b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096b8:	2f78      	cmp	r7, #120	; 0x78
 80096ba:	4691      	mov	r9, r2
 80096bc:	4680      	mov	r8, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	469a      	mov	sl, r3
 80096c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096c6:	d807      	bhi.n	80096d8 <_printf_i+0x28>
 80096c8:	2f62      	cmp	r7, #98	; 0x62
 80096ca:	d80a      	bhi.n	80096e2 <_printf_i+0x32>
 80096cc:	2f00      	cmp	r7, #0
 80096ce:	f000 80d8 	beq.w	8009882 <_printf_i+0x1d2>
 80096d2:	2f58      	cmp	r7, #88	; 0x58
 80096d4:	f000 80a3 	beq.w	800981e <_printf_i+0x16e>
 80096d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096e0:	e03a      	b.n	8009758 <_printf_i+0xa8>
 80096e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096e6:	2b15      	cmp	r3, #21
 80096e8:	d8f6      	bhi.n	80096d8 <_printf_i+0x28>
 80096ea:	a101      	add	r1, pc, #4	; (adr r1, 80096f0 <_printf_i+0x40>)
 80096ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096f0:	08009749 	.word	0x08009749
 80096f4:	0800975d 	.word	0x0800975d
 80096f8:	080096d9 	.word	0x080096d9
 80096fc:	080096d9 	.word	0x080096d9
 8009700:	080096d9 	.word	0x080096d9
 8009704:	080096d9 	.word	0x080096d9
 8009708:	0800975d 	.word	0x0800975d
 800970c:	080096d9 	.word	0x080096d9
 8009710:	080096d9 	.word	0x080096d9
 8009714:	080096d9 	.word	0x080096d9
 8009718:	080096d9 	.word	0x080096d9
 800971c:	08009869 	.word	0x08009869
 8009720:	0800978d 	.word	0x0800978d
 8009724:	0800984b 	.word	0x0800984b
 8009728:	080096d9 	.word	0x080096d9
 800972c:	080096d9 	.word	0x080096d9
 8009730:	0800988b 	.word	0x0800988b
 8009734:	080096d9 	.word	0x080096d9
 8009738:	0800978d 	.word	0x0800978d
 800973c:	080096d9 	.word	0x080096d9
 8009740:	080096d9 	.word	0x080096d9
 8009744:	08009853 	.word	0x08009853
 8009748:	682b      	ldr	r3, [r5, #0]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	602a      	str	r2, [r5, #0]
 8009750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009758:	2301      	movs	r3, #1
 800975a:	e0a3      	b.n	80098a4 <_printf_i+0x1f4>
 800975c:	6820      	ldr	r0, [r4, #0]
 800975e:	6829      	ldr	r1, [r5, #0]
 8009760:	0606      	lsls	r6, r0, #24
 8009762:	f101 0304 	add.w	r3, r1, #4
 8009766:	d50a      	bpl.n	800977e <_printf_i+0xce>
 8009768:	680e      	ldr	r6, [r1, #0]
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	2e00      	cmp	r6, #0
 800976e:	da03      	bge.n	8009778 <_printf_i+0xc8>
 8009770:	232d      	movs	r3, #45	; 0x2d
 8009772:	4276      	negs	r6, r6
 8009774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009778:	485e      	ldr	r0, [pc, #376]	; (80098f4 <_printf_i+0x244>)
 800977a:	230a      	movs	r3, #10
 800977c:	e019      	b.n	80097b2 <_printf_i+0x102>
 800977e:	680e      	ldr	r6, [r1, #0]
 8009780:	602b      	str	r3, [r5, #0]
 8009782:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009786:	bf18      	it	ne
 8009788:	b236      	sxthne	r6, r6
 800978a:	e7ef      	b.n	800976c <_printf_i+0xbc>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	6820      	ldr	r0, [r4, #0]
 8009790:	1d19      	adds	r1, r3, #4
 8009792:	6029      	str	r1, [r5, #0]
 8009794:	0601      	lsls	r1, r0, #24
 8009796:	d501      	bpl.n	800979c <_printf_i+0xec>
 8009798:	681e      	ldr	r6, [r3, #0]
 800979a:	e002      	b.n	80097a2 <_printf_i+0xf2>
 800979c:	0646      	lsls	r6, r0, #25
 800979e:	d5fb      	bpl.n	8009798 <_printf_i+0xe8>
 80097a0:	881e      	ldrh	r6, [r3, #0]
 80097a2:	4854      	ldr	r0, [pc, #336]	; (80098f4 <_printf_i+0x244>)
 80097a4:	2f6f      	cmp	r7, #111	; 0x6f
 80097a6:	bf0c      	ite	eq
 80097a8:	2308      	moveq	r3, #8
 80097aa:	230a      	movne	r3, #10
 80097ac:	2100      	movs	r1, #0
 80097ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097b2:	6865      	ldr	r5, [r4, #4]
 80097b4:	60a5      	str	r5, [r4, #8]
 80097b6:	2d00      	cmp	r5, #0
 80097b8:	bfa2      	ittt	ge
 80097ba:	6821      	ldrge	r1, [r4, #0]
 80097bc:	f021 0104 	bicge.w	r1, r1, #4
 80097c0:	6021      	strge	r1, [r4, #0]
 80097c2:	b90e      	cbnz	r6, 80097c8 <_printf_i+0x118>
 80097c4:	2d00      	cmp	r5, #0
 80097c6:	d04d      	beq.n	8009864 <_printf_i+0x1b4>
 80097c8:	4615      	mov	r5, r2
 80097ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80097ce:	fb03 6711 	mls	r7, r3, r1, r6
 80097d2:	5dc7      	ldrb	r7, [r0, r7]
 80097d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097d8:	4637      	mov	r7, r6
 80097da:	42bb      	cmp	r3, r7
 80097dc:	460e      	mov	r6, r1
 80097de:	d9f4      	bls.n	80097ca <_printf_i+0x11a>
 80097e0:	2b08      	cmp	r3, #8
 80097e2:	d10b      	bne.n	80097fc <_printf_i+0x14c>
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	07de      	lsls	r6, r3, #31
 80097e8:	d508      	bpl.n	80097fc <_printf_i+0x14c>
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	6861      	ldr	r1, [r4, #4]
 80097ee:	4299      	cmp	r1, r3
 80097f0:	bfde      	ittt	le
 80097f2:	2330      	movle	r3, #48	; 0x30
 80097f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097fc:	1b52      	subs	r2, r2, r5
 80097fe:	6122      	str	r2, [r4, #16]
 8009800:	f8cd a000 	str.w	sl, [sp]
 8009804:	464b      	mov	r3, r9
 8009806:	aa03      	add	r2, sp, #12
 8009808:	4621      	mov	r1, r4
 800980a:	4640      	mov	r0, r8
 800980c:	f7ff fee2 	bl	80095d4 <_printf_common>
 8009810:	3001      	adds	r0, #1
 8009812:	d14c      	bne.n	80098ae <_printf_i+0x1fe>
 8009814:	f04f 30ff 	mov.w	r0, #4294967295
 8009818:	b004      	add	sp, #16
 800981a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981e:	4835      	ldr	r0, [pc, #212]	; (80098f4 <_printf_i+0x244>)
 8009820:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009824:	6829      	ldr	r1, [r5, #0]
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	f851 6b04 	ldr.w	r6, [r1], #4
 800982c:	6029      	str	r1, [r5, #0]
 800982e:	061d      	lsls	r5, r3, #24
 8009830:	d514      	bpl.n	800985c <_printf_i+0x1ac>
 8009832:	07df      	lsls	r7, r3, #31
 8009834:	bf44      	itt	mi
 8009836:	f043 0320 	orrmi.w	r3, r3, #32
 800983a:	6023      	strmi	r3, [r4, #0]
 800983c:	b91e      	cbnz	r6, 8009846 <_printf_i+0x196>
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	f023 0320 	bic.w	r3, r3, #32
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	2310      	movs	r3, #16
 8009848:	e7b0      	b.n	80097ac <_printf_i+0xfc>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	f043 0320 	orr.w	r3, r3, #32
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	2378      	movs	r3, #120	; 0x78
 8009854:	4828      	ldr	r0, [pc, #160]	; (80098f8 <_printf_i+0x248>)
 8009856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800985a:	e7e3      	b.n	8009824 <_printf_i+0x174>
 800985c:	0659      	lsls	r1, r3, #25
 800985e:	bf48      	it	mi
 8009860:	b2b6      	uxthmi	r6, r6
 8009862:	e7e6      	b.n	8009832 <_printf_i+0x182>
 8009864:	4615      	mov	r5, r2
 8009866:	e7bb      	b.n	80097e0 <_printf_i+0x130>
 8009868:	682b      	ldr	r3, [r5, #0]
 800986a:	6826      	ldr	r6, [r4, #0]
 800986c:	6961      	ldr	r1, [r4, #20]
 800986e:	1d18      	adds	r0, r3, #4
 8009870:	6028      	str	r0, [r5, #0]
 8009872:	0635      	lsls	r5, r6, #24
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	d501      	bpl.n	800987c <_printf_i+0x1cc>
 8009878:	6019      	str	r1, [r3, #0]
 800987a:	e002      	b.n	8009882 <_printf_i+0x1d2>
 800987c:	0670      	lsls	r0, r6, #25
 800987e:	d5fb      	bpl.n	8009878 <_printf_i+0x1c8>
 8009880:	8019      	strh	r1, [r3, #0]
 8009882:	2300      	movs	r3, #0
 8009884:	6123      	str	r3, [r4, #16]
 8009886:	4615      	mov	r5, r2
 8009888:	e7ba      	b.n	8009800 <_printf_i+0x150>
 800988a:	682b      	ldr	r3, [r5, #0]
 800988c:	1d1a      	adds	r2, r3, #4
 800988e:	602a      	str	r2, [r5, #0]
 8009890:	681d      	ldr	r5, [r3, #0]
 8009892:	6862      	ldr	r2, [r4, #4]
 8009894:	2100      	movs	r1, #0
 8009896:	4628      	mov	r0, r5
 8009898:	f7f6 fcc2 	bl	8000220 <memchr>
 800989c:	b108      	cbz	r0, 80098a2 <_printf_i+0x1f2>
 800989e:	1b40      	subs	r0, r0, r5
 80098a0:	6060      	str	r0, [r4, #4]
 80098a2:	6863      	ldr	r3, [r4, #4]
 80098a4:	6123      	str	r3, [r4, #16]
 80098a6:	2300      	movs	r3, #0
 80098a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ac:	e7a8      	b.n	8009800 <_printf_i+0x150>
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	462a      	mov	r2, r5
 80098b2:	4649      	mov	r1, r9
 80098b4:	4640      	mov	r0, r8
 80098b6:	47d0      	blx	sl
 80098b8:	3001      	adds	r0, #1
 80098ba:	d0ab      	beq.n	8009814 <_printf_i+0x164>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	079b      	lsls	r3, r3, #30
 80098c0:	d413      	bmi.n	80098ea <_printf_i+0x23a>
 80098c2:	68e0      	ldr	r0, [r4, #12]
 80098c4:	9b03      	ldr	r3, [sp, #12]
 80098c6:	4298      	cmp	r0, r3
 80098c8:	bfb8      	it	lt
 80098ca:	4618      	movlt	r0, r3
 80098cc:	e7a4      	b.n	8009818 <_printf_i+0x168>
 80098ce:	2301      	movs	r3, #1
 80098d0:	4632      	mov	r2, r6
 80098d2:	4649      	mov	r1, r9
 80098d4:	4640      	mov	r0, r8
 80098d6:	47d0      	blx	sl
 80098d8:	3001      	adds	r0, #1
 80098da:	d09b      	beq.n	8009814 <_printf_i+0x164>
 80098dc:	3501      	adds	r5, #1
 80098de:	68e3      	ldr	r3, [r4, #12]
 80098e0:	9903      	ldr	r1, [sp, #12]
 80098e2:	1a5b      	subs	r3, r3, r1
 80098e4:	42ab      	cmp	r3, r5
 80098e6:	dcf2      	bgt.n	80098ce <_printf_i+0x21e>
 80098e8:	e7eb      	b.n	80098c2 <_printf_i+0x212>
 80098ea:	2500      	movs	r5, #0
 80098ec:	f104 0619 	add.w	r6, r4, #25
 80098f0:	e7f5      	b.n	80098de <_printf_i+0x22e>
 80098f2:	bf00      	nop
 80098f4:	0800bce2 	.word	0x0800bce2
 80098f8:	0800bcf3 	.word	0x0800bcf3

080098fc <cleanup_glue>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	460c      	mov	r4, r1
 8009900:	6809      	ldr	r1, [r1, #0]
 8009902:	4605      	mov	r5, r0
 8009904:	b109      	cbz	r1, 800990a <cleanup_glue+0xe>
 8009906:	f7ff fff9 	bl	80098fc <cleanup_glue>
 800990a:	4621      	mov	r1, r4
 800990c:	4628      	mov	r0, r5
 800990e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009912:	f001 bc07 	b.w	800b124 <_free_r>
	...

08009918 <_reclaim_reent>:
 8009918:	4b2c      	ldr	r3, [pc, #176]	; (80099cc <_reclaim_reent+0xb4>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4283      	cmp	r3, r0
 800991e:	b570      	push	{r4, r5, r6, lr}
 8009920:	4604      	mov	r4, r0
 8009922:	d051      	beq.n	80099c8 <_reclaim_reent+0xb0>
 8009924:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009926:	b143      	cbz	r3, 800993a <_reclaim_reent+0x22>
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d14a      	bne.n	80099c4 <_reclaim_reent+0xac>
 800992e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009930:	6819      	ldr	r1, [r3, #0]
 8009932:	b111      	cbz	r1, 800993a <_reclaim_reent+0x22>
 8009934:	4620      	mov	r0, r4
 8009936:	f001 fbf5 	bl	800b124 <_free_r>
 800993a:	6961      	ldr	r1, [r4, #20]
 800993c:	b111      	cbz	r1, 8009944 <_reclaim_reent+0x2c>
 800993e:	4620      	mov	r0, r4
 8009940:	f001 fbf0 	bl	800b124 <_free_r>
 8009944:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009946:	b111      	cbz	r1, 800994e <_reclaim_reent+0x36>
 8009948:	4620      	mov	r0, r4
 800994a:	f001 fbeb 	bl	800b124 <_free_r>
 800994e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009950:	b111      	cbz	r1, 8009958 <_reclaim_reent+0x40>
 8009952:	4620      	mov	r0, r4
 8009954:	f001 fbe6 	bl	800b124 <_free_r>
 8009958:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800995a:	b111      	cbz	r1, 8009962 <_reclaim_reent+0x4a>
 800995c:	4620      	mov	r0, r4
 800995e:	f001 fbe1 	bl	800b124 <_free_r>
 8009962:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009964:	b111      	cbz	r1, 800996c <_reclaim_reent+0x54>
 8009966:	4620      	mov	r0, r4
 8009968:	f001 fbdc 	bl	800b124 <_free_r>
 800996c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800996e:	b111      	cbz	r1, 8009976 <_reclaim_reent+0x5e>
 8009970:	4620      	mov	r0, r4
 8009972:	f001 fbd7 	bl	800b124 <_free_r>
 8009976:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009978:	b111      	cbz	r1, 8009980 <_reclaim_reent+0x68>
 800997a:	4620      	mov	r0, r4
 800997c:	f001 fbd2 	bl	800b124 <_free_r>
 8009980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009982:	b111      	cbz	r1, 800998a <_reclaim_reent+0x72>
 8009984:	4620      	mov	r0, r4
 8009986:	f001 fbcd 	bl	800b124 <_free_r>
 800998a:	69a3      	ldr	r3, [r4, #24]
 800998c:	b1e3      	cbz	r3, 80099c8 <_reclaim_reent+0xb0>
 800998e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009990:	4620      	mov	r0, r4
 8009992:	4798      	blx	r3
 8009994:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009996:	b1b9      	cbz	r1, 80099c8 <_reclaim_reent+0xb0>
 8009998:	4620      	mov	r0, r4
 800999a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800999e:	f7ff bfad 	b.w	80098fc <cleanup_glue>
 80099a2:	5949      	ldr	r1, [r1, r5]
 80099a4:	b941      	cbnz	r1, 80099b8 <_reclaim_reent+0xa0>
 80099a6:	3504      	adds	r5, #4
 80099a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099aa:	2d80      	cmp	r5, #128	; 0x80
 80099ac:	68d9      	ldr	r1, [r3, #12]
 80099ae:	d1f8      	bne.n	80099a2 <_reclaim_reent+0x8a>
 80099b0:	4620      	mov	r0, r4
 80099b2:	f001 fbb7 	bl	800b124 <_free_r>
 80099b6:	e7ba      	b.n	800992e <_reclaim_reent+0x16>
 80099b8:	680e      	ldr	r6, [r1, #0]
 80099ba:	4620      	mov	r0, r4
 80099bc:	f001 fbb2 	bl	800b124 <_free_r>
 80099c0:	4631      	mov	r1, r6
 80099c2:	e7ef      	b.n	80099a4 <_reclaim_reent+0x8c>
 80099c4:	2500      	movs	r5, #0
 80099c6:	e7ef      	b.n	80099a8 <_reclaim_reent+0x90>
 80099c8:	bd70      	pop	{r4, r5, r6, pc}
 80099ca:	bf00      	nop
 80099cc:	20000014 	.word	0x20000014

080099d0 <_sbrk_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4d06      	ldr	r5, [pc, #24]	; (80099ec <_sbrk_r+0x1c>)
 80099d4:	2300      	movs	r3, #0
 80099d6:	4604      	mov	r4, r0
 80099d8:	4608      	mov	r0, r1
 80099da:	602b      	str	r3, [r5, #0]
 80099dc:	f7f8 ff6a 	bl	80028b4 <_sbrk>
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	d102      	bne.n	80099ea <_sbrk_r+0x1a>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	b103      	cbz	r3, 80099ea <_sbrk_r+0x1a>
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	bd38      	pop	{r3, r4, r5, pc}
 80099ec:	20004590 	.word	0x20004590

080099f0 <siprintf>:
 80099f0:	b40e      	push	{r1, r2, r3}
 80099f2:	b500      	push	{lr}
 80099f4:	b09c      	sub	sp, #112	; 0x70
 80099f6:	ab1d      	add	r3, sp, #116	; 0x74
 80099f8:	9002      	str	r0, [sp, #8]
 80099fa:	9006      	str	r0, [sp, #24]
 80099fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a00:	4809      	ldr	r0, [pc, #36]	; (8009a28 <siprintf+0x38>)
 8009a02:	9107      	str	r1, [sp, #28]
 8009a04:	9104      	str	r1, [sp, #16]
 8009a06:	4909      	ldr	r1, [pc, #36]	; (8009a2c <siprintf+0x3c>)
 8009a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a0c:	9105      	str	r1, [sp, #20]
 8009a0e:	6800      	ldr	r0, [r0, #0]
 8009a10:	9301      	str	r3, [sp, #4]
 8009a12:	a902      	add	r1, sp, #8
 8009a14:	f001 fc2e 	bl	800b274 <_svfiprintf_r>
 8009a18:	9b02      	ldr	r3, [sp, #8]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	701a      	strb	r2, [r3, #0]
 8009a1e:	b01c      	add	sp, #112	; 0x70
 8009a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a24:	b003      	add	sp, #12
 8009a26:	4770      	bx	lr
 8009a28:	20000014 	.word	0x20000014
 8009a2c:	ffff0208 	.word	0xffff0208

08009a30 <__sread>:
 8009a30:	b510      	push	{r4, lr}
 8009a32:	460c      	mov	r4, r1
 8009a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a38:	f001 fe76 	bl	800b728 <_read_r>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	bfab      	itete	ge
 8009a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a42:	89a3      	ldrhlt	r3, [r4, #12]
 8009a44:	181b      	addge	r3, r3, r0
 8009a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a4a:	bfac      	ite	ge
 8009a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a4e:	81a3      	strhlt	r3, [r4, #12]
 8009a50:	bd10      	pop	{r4, pc}

08009a52 <__swrite>:
 8009a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a56:	461f      	mov	r7, r3
 8009a58:	898b      	ldrh	r3, [r1, #12]
 8009a5a:	05db      	lsls	r3, r3, #23
 8009a5c:	4605      	mov	r5, r0
 8009a5e:	460c      	mov	r4, r1
 8009a60:	4616      	mov	r6, r2
 8009a62:	d505      	bpl.n	8009a70 <__swrite+0x1e>
 8009a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a68:	2302      	movs	r3, #2
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f000 ff88 	bl	800a980 <_lseek_r>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	4632      	mov	r2, r6
 8009a7e:	463b      	mov	r3, r7
 8009a80:	4628      	mov	r0, r5
 8009a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a86:	f000 b817 	b.w	8009ab8 <_write_r>

08009a8a <__sseek>:
 8009a8a:	b510      	push	{r4, lr}
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a92:	f000 ff75 	bl	800a980 <_lseek_r>
 8009a96:	1c43      	adds	r3, r0, #1
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	bf15      	itete	ne
 8009a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009aa6:	81a3      	strheq	r3, [r4, #12]
 8009aa8:	bf18      	it	ne
 8009aaa:	81a3      	strhne	r3, [r4, #12]
 8009aac:	bd10      	pop	{r4, pc}

08009aae <__sclose>:
 8009aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab2:	f000 b813 	b.w	8009adc <_close_r>
	...

08009ab8 <_write_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4d07      	ldr	r5, [pc, #28]	; (8009ad8 <_write_r+0x20>)
 8009abc:	4604      	mov	r4, r0
 8009abe:	4608      	mov	r0, r1
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	602a      	str	r2, [r5, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f7f8 fea3 	bl	8002812 <_write>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_write_r+0x1e>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_write_r+0x1e>
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	20004590 	.word	0x20004590

08009adc <_close_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4d06      	ldr	r5, [pc, #24]	; (8009af8 <_close_r+0x1c>)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	4608      	mov	r0, r1
 8009ae6:	602b      	str	r3, [r5, #0]
 8009ae8:	f7f8 feaf 	bl	800284a <_close>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d102      	bne.n	8009af6 <_close_r+0x1a>
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	b103      	cbz	r3, 8009af6 <_close_r+0x1a>
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	20004590 	.word	0x20004590

08009afc <quorem>:
 8009afc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b00:	6903      	ldr	r3, [r0, #16]
 8009b02:	690c      	ldr	r4, [r1, #16]
 8009b04:	42a3      	cmp	r3, r4
 8009b06:	4607      	mov	r7, r0
 8009b08:	f2c0 8081 	blt.w	8009c0e <quorem+0x112>
 8009b0c:	3c01      	subs	r4, #1
 8009b0e:	f101 0814 	add.w	r8, r1, #20
 8009b12:	f100 0514 	add.w	r5, r0, #20
 8009b16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b1a:	9301      	str	r3, [sp, #4]
 8009b1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b24:	3301      	adds	r3, #1
 8009b26:	429a      	cmp	r2, r3
 8009b28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b30:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b34:	d331      	bcc.n	8009b9a <quorem+0x9e>
 8009b36:	f04f 0e00 	mov.w	lr, #0
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	46ac      	mov	ip, r5
 8009b3e:	46f2      	mov	sl, lr
 8009b40:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b44:	b293      	uxth	r3, r2
 8009b46:	fb06 e303 	mla	r3, r6, r3, lr
 8009b4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	ebaa 0303 	sub.w	r3, sl, r3
 8009b54:	f8dc a000 	ldr.w	sl, [ip]
 8009b58:	0c12      	lsrs	r2, r2, #16
 8009b5a:	fa13 f38a 	uxtah	r3, r3, sl
 8009b5e:	fb06 e202 	mla	r2, r6, r2, lr
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	9b00      	ldr	r3, [sp, #0]
 8009b66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b6a:	b292      	uxth	r2, r2
 8009b6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009b70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b74:	f8bd 3000 	ldrh.w	r3, [sp]
 8009b78:	4581      	cmp	r9, r0
 8009b7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b7e:	f84c 3b04 	str.w	r3, [ip], #4
 8009b82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b86:	d2db      	bcs.n	8009b40 <quorem+0x44>
 8009b88:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b8c:	b92b      	cbnz	r3, 8009b9a <quorem+0x9e>
 8009b8e:	9b01      	ldr	r3, [sp, #4]
 8009b90:	3b04      	subs	r3, #4
 8009b92:	429d      	cmp	r5, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	d32e      	bcc.n	8009bf6 <quorem+0xfa>
 8009b98:	613c      	str	r4, [r7, #16]
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	f001 f9aa 	bl	800aef4 <__mcmp>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	db24      	blt.n	8009bee <quorem+0xf2>
 8009ba4:	3601      	adds	r6, #1
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f04f 0c00 	mov.w	ip, #0
 8009bac:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bb0:	f8d0 e000 	ldr.w	lr, [r0]
 8009bb4:	b293      	uxth	r3, r2
 8009bb6:	ebac 0303 	sub.w	r3, ip, r3
 8009bba:	0c12      	lsrs	r2, r2, #16
 8009bbc:	fa13 f38e 	uxtah	r3, r3, lr
 8009bc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009bc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bce:	45c1      	cmp	r9, r8
 8009bd0:	f840 3b04 	str.w	r3, [r0], #4
 8009bd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009bd8:	d2e8      	bcs.n	8009bac <quorem+0xb0>
 8009bda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009be2:	b922      	cbnz	r2, 8009bee <quorem+0xf2>
 8009be4:	3b04      	subs	r3, #4
 8009be6:	429d      	cmp	r5, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	d30a      	bcc.n	8009c02 <quorem+0x106>
 8009bec:	613c      	str	r4, [r7, #16]
 8009bee:	4630      	mov	r0, r6
 8009bf0:	b003      	add	sp, #12
 8009bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf6:	6812      	ldr	r2, [r2, #0]
 8009bf8:	3b04      	subs	r3, #4
 8009bfa:	2a00      	cmp	r2, #0
 8009bfc:	d1cc      	bne.n	8009b98 <quorem+0x9c>
 8009bfe:	3c01      	subs	r4, #1
 8009c00:	e7c7      	b.n	8009b92 <quorem+0x96>
 8009c02:	6812      	ldr	r2, [r2, #0]
 8009c04:	3b04      	subs	r3, #4
 8009c06:	2a00      	cmp	r2, #0
 8009c08:	d1f0      	bne.n	8009bec <quorem+0xf0>
 8009c0a:	3c01      	subs	r4, #1
 8009c0c:	e7eb      	b.n	8009be6 <quorem+0xea>
 8009c0e:	2000      	movs	r0, #0
 8009c10:	e7ee      	b.n	8009bf0 <quorem+0xf4>
 8009c12:	0000      	movs	r0, r0
 8009c14:	0000      	movs	r0, r0
	...

08009c18 <_dtoa_r>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	ed2d 8b04 	vpush	{d8-d9}
 8009c20:	ec57 6b10 	vmov	r6, r7, d0
 8009c24:	b093      	sub	sp, #76	; 0x4c
 8009c26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c2c:	9106      	str	r1, [sp, #24]
 8009c2e:	ee10 aa10 	vmov	sl, s0
 8009c32:	4604      	mov	r4, r0
 8009c34:	9209      	str	r2, [sp, #36]	; 0x24
 8009c36:	930c      	str	r3, [sp, #48]	; 0x30
 8009c38:	46bb      	mov	fp, r7
 8009c3a:	b975      	cbnz	r5, 8009c5a <_dtoa_r+0x42>
 8009c3c:	2010      	movs	r0, #16
 8009c3e:	f000 feb1 	bl	800a9a4 <malloc>
 8009c42:	4602      	mov	r2, r0
 8009c44:	6260      	str	r0, [r4, #36]	; 0x24
 8009c46:	b920      	cbnz	r0, 8009c52 <_dtoa_r+0x3a>
 8009c48:	4ba7      	ldr	r3, [pc, #668]	; (8009ee8 <_dtoa_r+0x2d0>)
 8009c4a:	21ea      	movs	r1, #234	; 0xea
 8009c4c:	48a7      	ldr	r0, [pc, #668]	; (8009eec <_dtoa_r+0x2d4>)
 8009c4e:	f001 fe4b 	bl	800b8e8 <__assert_func>
 8009c52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c56:	6005      	str	r5, [r0, #0]
 8009c58:	60c5      	str	r5, [r0, #12]
 8009c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c5c:	6819      	ldr	r1, [r3, #0]
 8009c5e:	b151      	cbz	r1, 8009c76 <_dtoa_r+0x5e>
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	604a      	str	r2, [r1, #4]
 8009c64:	2301      	movs	r3, #1
 8009c66:	4093      	lsls	r3, r2
 8009c68:	608b      	str	r3, [r1, #8]
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 ff00 	bl	800aa70 <_Bfree>
 8009c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c72:	2200      	movs	r2, #0
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	1e3b      	subs	r3, r7, #0
 8009c78:	bfaa      	itet	ge
 8009c7a:	2300      	movge	r3, #0
 8009c7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009c80:	f8c8 3000 	strge.w	r3, [r8]
 8009c84:	4b9a      	ldr	r3, [pc, #616]	; (8009ef0 <_dtoa_r+0x2d8>)
 8009c86:	bfbc      	itt	lt
 8009c88:	2201      	movlt	r2, #1
 8009c8a:	f8c8 2000 	strlt.w	r2, [r8]
 8009c8e:	ea33 030b 	bics.w	r3, r3, fp
 8009c92:	d11b      	bne.n	8009ccc <_dtoa_r+0xb4>
 8009c94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c96:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ca0:	4333      	orrs	r3, r6
 8009ca2:	f000 8592 	beq.w	800a7ca <_dtoa_r+0xbb2>
 8009ca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ca8:	b963      	cbnz	r3, 8009cc4 <_dtoa_r+0xac>
 8009caa:	4b92      	ldr	r3, [pc, #584]	; (8009ef4 <_dtoa_r+0x2dc>)
 8009cac:	e022      	b.n	8009cf4 <_dtoa_r+0xdc>
 8009cae:	4b92      	ldr	r3, [pc, #584]	; (8009ef8 <_dtoa_r+0x2e0>)
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	9801      	ldr	r0, [sp, #4]
 8009cba:	b013      	add	sp, #76	; 0x4c
 8009cbc:	ecbd 8b04 	vpop	{d8-d9}
 8009cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc4:	4b8b      	ldr	r3, [pc, #556]	; (8009ef4 <_dtoa_r+0x2dc>)
 8009cc6:	9301      	str	r3, [sp, #4]
 8009cc8:	3303      	adds	r3, #3
 8009cca:	e7f3      	b.n	8009cb4 <_dtoa_r+0x9c>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2300      	movs	r3, #0
 8009cd0:	4650      	mov	r0, sl
 8009cd2:	4659      	mov	r1, fp
 8009cd4:	f7f6 ff18 	bl	8000b08 <__aeabi_dcmpeq>
 8009cd8:	ec4b ab19 	vmov	d9, sl, fp
 8009cdc:	4680      	mov	r8, r0
 8009cde:	b158      	cbz	r0, 8009cf8 <_dtoa_r+0xe0>
 8009ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 856b 	beq.w	800a7c4 <_dtoa_r+0xbac>
 8009cee:	4883      	ldr	r0, [pc, #524]	; (8009efc <_dtoa_r+0x2e4>)
 8009cf0:	6018      	str	r0, [r3, #0]
 8009cf2:	1e43      	subs	r3, r0, #1
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	e7df      	b.n	8009cb8 <_dtoa_r+0xa0>
 8009cf8:	ec4b ab10 	vmov	d0, sl, fp
 8009cfc:	aa10      	add	r2, sp, #64	; 0x40
 8009cfe:	a911      	add	r1, sp, #68	; 0x44
 8009d00:	4620      	mov	r0, r4
 8009d02:	f001 f99d 	bl	800b040 <__d2b>
 8009d06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009d0a:	ee08 0a10 	vmov	s16, r0
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	f000 8084 	beq.w	8009e1c <_dtoa_r+0x204>
 8009d14:	ee19 3a90 	vmov	r3, s19
 8009d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d20:	4656      	mov	r6, sl
 8009d22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009d2e:	4b74      	ldr	r3, [pc, #464]	; (8009f00 <_dtoa_r+0x2e8>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	4630      	mov	r0, r6
 8009d34:	4639      	mov	r1, r7
 8009d36:	f7f6 fac7 	bl	80002c8 <__aeabi_dsub>
 8009d3a:	a365      	add	r3, pc, #404	; (adr r3, 8009ed0 <_dtoa_r+0x2b8>)
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	f7f6 fc7a 	bl	8000638 <__aeabi_dmul>
 8009d44:	a364      	add	r3, pc, #400	; (adr r3, 8009ed8 <_dtoa_r+0x2c0>)
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	f7f6 fabf 	bl	80002cc <__adddf3>
 8009d4e:	4606      	mov	r6, r0
 8009d50:	4628      	mov	r0, r5
 8009d52:	460f      	mov	r7, r1
 8009d54:	f7f6 fc06 	bl	8000564 <__aeabi_i2d>
 8009d58:	a361      	add	r3, pc, #388	; (adr r3, 8009ee0 <_dtoa_r+0x2c8>)
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f7f6 fc6b 	bl	8000638 <__aeabi_dmul>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	4630      	mov	r0, r6
 8009d68:	4639      	mov	r1, r7
 8009d6a:	f7f6 faaf 	bl	80002cc <__adddf3>
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460f      	mov	r7, r1
 8009d72:	f7f6 ff11 	bl	8000b98 <__aeabi_d2iz>
 8009d76:	2200      	movs	r2, #0
 8009d78:	9000      	str	r0, [sp, #0]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 fecc 	bl	8000b1c <__aeabi_dcmplt>
 8009d84:	b150      	cbz	r0, 8009d9c <_dtoa_r+0x184>
 8009d86:	9800      	ldr	r0, [sp, #0]
 8009d88:	f7f6 fbec 	bl	8000564 <__aeabi_i2d>
 8009d8c:	4632      	mov	r2, r6
 8009d8e:	463b      	mov	r3, r7
 8009d90:	f7f6 feba 	bl	8000b08 <__aeabi_dcmpeq>
 8009d94:	b910      	cbnz	r0, 8009d9c <_dtoa_r+0x184>
 8009d96:	9b00      	ldr	r3, [sp, #0]
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	9b00      	ldr	r3, [sp, #0]
 8009d9e:	2b16      	cmp	r3, #22
 8009da0:	d85a      	bhi.n	8009e58 <_dtoa_r+0x240>
 8009da2:	9a00      	ldr	r2, [sp, #0]
 8009da4:	4b57      	ldr	r3, [pc, #348]	; (8009f04 <_dtoa_r+0x2ec>)
 8009da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	ec51 0b19 	vmov	r0, r1, d9
 8009db2:	f7f6 feb3 	bl	8000b1c <__aeabi_dcmplt>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d050      	beq.n	8009e5c <_dtoa_r+0x244>
 8009dba:	9b00      	ldr	r3, [sp, #0]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009dc6:	1b5d      	subs	r5, r3, r5
 8009dc8:	1e6b      	subs	r3, r5, #1
 8009dca:	9305      	str	r3, [sp, #20]
 8009dcc:	bf45      	ittet	mi
 8009dce:	f1c5 0301 	rsbmi	r3, r5, #1
 8009dd2:	9304      	strmi	r3, [sp, #16]
 8009dd4:	2300      	movpl	r3, #0
 8009dd6:	2300      	movmi	r3, #0
 8009dd8:	bf4c      	ite	mi
 8009dda:	9305      	strmi	r3, [sp, #20]
 8009ddc:	9304      	strpl	r3, [sp, #16]
 8009dde:	9b00      	ldr	r3, [sp, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	db3d      	blt.n	8009e60 <_dtoa_r+0x248>
 8009de4:	9b05      	ldr	r3, [sp, #20]
 8009de6:	9a00      	ldr	r2, [sp, #0]
 8009de8:	920a      	str	r2, [sp, #40]	; 0x28
 8009dea:	4413      	add	r3, r2
 8009dec:	9305      	str	r3, [sp, #20]
 8009dee:	2300      	movs	r3, #0
 8009df0:	9307      	str	r3, [sp, #28]
 8009df2:	9b06      	ldr	r3, [sp, #24]
 8009df4:	2b09      	cmp	r3, #9
 8009df6:	f200 8089 	bhi.w	8009f0c <_dtoa_r+0x2f4>
 8009dfa:	2b05      	cmp	r3, #5
 8009dfc:	bfc4      	itt	gt
 8009dfe:	3b04      	subgt	r3, #4
 8009e00:	9306      	strgt	r3, [sp, #24]
 8009e02:	9b06      	ldr	r3, [sp, #24]
 8009e04:	f1a3 0302 	sub.w	r3, r3, #2
 8009e08:	bfcc      	ite	gt
 8009e0a:	2500      	movgt	r5, #0
 8009e0c:	2501      	movle	r5, #1
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	f200 8087 	bhi.w	8009f22 <_dtoa_r+0x30a>
 8009e14:	e8df f003 	tbb	[pc, r3]
 8009e18:	59383a2d 	.word	0x59383a2d
 8009e1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009e20:	441d      	add	r5, r3
 8009e22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e26:	2b20      	cmp	r3, #32
 8009e28:	bfc1      	itttt	gt
 8009e2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e32:	fa0b f303 	lslgt.w	r3, fp, r3
 8009e36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e3a:	bfda      	itte	le
 8009e3c:	f1c3 0320 	rsble	r3, r3, #32
 8009e40:	fa06 f003 	lslle.w	r0, r6, r3
 8009e44:	4318      	orrgt	r0, r3
 8009e46:	f7f6 fb7d 	bl	8000544 <__aeabi_ui2d>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009e52:	3d01      	subs	r5, #1
 8009e54:	930e      	str	r3, [sp, #56]	; 0x38
 8009e56:	e76a      	b.n	8009d2e <_dtoa_r+0x116>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e7b2      	b.n	8009dc2 <_dtoa_r+0x1aa>
 8009e5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e5e:	e7b1      	b.n	8009dc4 <_dtoa_r+0x1ac>
 8009e60:	9b04      	ldr	r3, [sp, #16]
 8009e62:	9a00      	ldr	r2, [sp, #0]
 8009e64:	1a9b      	subs	r3, r3, r2
 8009e66:	9304      	str	r3, [sp, #16]
 8009e68:	4253      	negs	r3, r2
 8009e6a:	9307      	str	r3, [sp, #28]
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e70:	e7bf      	b.n	8009df2 <_dtoa_r+0x1da>
 8009e72:	2300      	movs	r3, #0
 8009e74:	9308      	str	r3, [sp, #32]
 8009e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dc55      	bgt.n	8009f28 <_dtoa_r+0x310>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e82:	461a      	mov	r2, r3
 8009e84:	9209      	str	r2, [sp, #36]	; 0x24
 8009e86:	e00c      	b.n	8009ea2 <_dtoa_r+0x28a>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e7f3      	b.n	8009e74 <_dtoa_r+0x25c>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e90:	9308      	str	r3, [sp, #32]
 8009e92:	9b00      	ldr	r3, [sp, #0]
 8009e94:	4413      	add	r3, r2
 8009e96:	9302      	str	r3, [sp, #8]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	9303      	str	r3, [sp, #12]
 8009e9e:	bfb8      	it	lt
 8009ea0:	2301      	movlt	r3, #1
 8009ea2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	6042      	str	r2, [r0, #4]
 8009ea8:	2204      	movs	r2, #4
 8009eaa:	f102 0614 	add.w	r6, r2, #20
 8009eae:	429e      	cmp	r6, r3
 8009eb0:	6841      	ldr	r1, [r0, #4]
 8009eb2:	d93d      	bls.n	8009f30 <_dtoa_r+0x318>
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f000 fd9b 	bl	800a9f0 <_Balloc>
 8009eba:	9001      	str	r0, [sp, #4]
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d13b      	bne.n	8009f38 <_dtoa_r+0x320>
 8009ec0:	4b11      	ldr	r3, [pc, #68]	; (8009f08 <_dtoa_r+0x2f0>)
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ec8:	e6c0      	b.n	8009c4c <_dtoa_r+0x34>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e7df      	b.n	8009e8e <_dtoa_r+0x276>
 8009ece:	bf00      	nop
 8009ed0:	636f4361 	.word	0x636f4361
 8009ed4:	3fd287a7 	.word	0x3fd287a7
 8009ed8:	8b60c8b3 	.word	0x8b60c8b3
 8009edc:	3fc68a28 	.word	0x3fc68a28
 8009ee0:	509f79fb 	.word	0x509f79fb
 8009ee4:	3fd34413 	.word	0x3fd34413
 8009ee8:	0800be12 	.word	0x0800be12
 8009eec:	0800be29 	.word	0x0800be29
 8009ef0:	7ff00000 	.word	0x7ff00000
 8009ef4:	0800be0e 	.word	0x0800be0e
 8009ef8:	0800be05 	.word	0x0800be05
 8009efc:	0800bce1 	.word	0x0800bce1
 8009f00:	3ff80000 	.word	0x3ff80000
 8009f04:	0800bf28 	.word	0x0800bf28
 8009f08:	0800be84 	.word	0x0800be84
 8009f0c:	2501      	movs	r5, #1
 8009f0e:	2300      	movs	r3, #0
 8009f10:	9306      	str	r3, [sp, #24]
 8009f12:	9508      	str	r5, [sp, #32]
 8009f14:	f04f 33ff 	mov.w	r3, #4294967295
 8009f18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	2312      	movs	r3, #18
 8009f20:	e7b0      	b.n	8009e84 <_dtoa_r+0x26c>
 8009f22:	2301      	movs	r3, #1
 8009f24:	9308      	str	r3, [sp, #32]
 8009f26:	e7f5      	b.n	8009f14 <_dtoa_r+0x2fc>
 8009f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f2e:	e7b8      	b.n	8009ea2 <_dtoa_r+0x28a>
 8009f30:	3101      	adds	r1, #1
 8009f32:	6041      	str	r1, [r0, #4]
 8009f34:	0052      	lsls	r2, r2, #1
 8009f36:	e7b8      	b.n	8009eaa <_dtoa_r+0x292>
 8009f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f3a:	9a01      	ldr	r2, [sp, #4]
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	9b03      	ldr	r3, [sp, #12]
 8009f40:	2b0e      	cmp	r3, #14
 8009f42:	f200 809d 	bhi.w	800a080 <_dtoa_r+0x468>
 8009f46:	2d00      	cmp	r5, #0
 8009f48:	f000 809a 	beq.w	800a080 <_dtoa_r+0x468>
 8009f4c:	9b00      	ldr	r3, [sp, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	dd32      	ble.n	8009fb8 <_dtoa_r+0x3a0>
 8009f52:	4ab7      	ldr	r2, [pc, #732]	; (800a230 <_dtoa_r+0x618>)
 8009f54:	f003 030f 	and.w	r3, r3, #15
 8009f58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f60:	9b00      	ldr	r3, [sp, #0]
 8009f62:	05d8      	lsls	r0, r3, #23
 8009f64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009f68:	d516      	bpl.n	8009f98 <_dtoa_r+0x380>
 8009f6a:	4bb2      	ldr	r3, [pc, #712]	; (800a234 <_dtoa_r+0x61c>)
 8009f6c:	ec51 0b19 	vmov	r0, r1, d9
 8009f70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f74:	f7f6 fc8a 	bl	800088c <__aeabi_ddiv>
 8009f78:	f007 070f 	and.w	r7, r7, #15
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	468b      	mov	fp, r1
 8009f80:	2503      	movs	r5, #3
 8009f82:	4eac      	ldr	r6, [pc, #688]	; (800a234 <_dtoa_r+0x61c>)
 8009f84:	b957      	cbnz	r7, 8009f9c <_dtoa_r+0x384>
 8009f86:	4642      	mov	r2, r8
 8009f88:	464b      	mov	r3, r9
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	f7f6 fc7d 	bl	800088c <__aeabi_ddiv>
 8009f92:	4682      	mov	sl, r0
 8009f94:	468b      	mov	fp, r1
 8009f96:	e028      	b.n	8009fea <_dtoa_r+0x3d2>
 8009f98:	2502      	movs	r5, #2
 8009f9a:	e7f2      	b.n	8009f82 <_dtoa_r+0x36a>
 8009f9c:	07f9      	lsls	r1, r7, #31
 8009f9e:	d508      	bpl.n	8009fb2 <_dtoa_r+0x39a>
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fa8:	f7f6 fb46 	bl	8000638 <__aeabi_dmul>
 8009fac:	3501      	adds	r5, #1
 8009fae:	4680      	mov	r8, r0
 8009fb0:	4689      	mov	r9, r1
 8009fb2:	107f      	asrs	r7, r7, #1
 8009fb4:	3608      	adds	r6, #8
 8009fb6:	e7e5      	b.n	8009f84 <_dtoa_r+0x36c>
 8009fb8:	f000 809b 	beq.w	800a0f2 <_dtoa_r+0x4da>
 8009fbc:	9b00      	ldr	r3, [sp, #0]
 8009fbe:	4f9d      	ldr	r7, [pc, #628]	; (800a234 <_dtoa_r+0x61c>)
 8009fc0:	425e      	negs	r6, r3
 8009fc2:	4b9b      	ldr	r3, [pc, #620]	; (800a230 <_dtoa_r+0x618>)
 8009fc4:	f006 020f 	and.w	r2, r6, #15
 8009fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	ec51 0b19 	vmov	r0, r1, d9
 8009fd4:	f7f6 fb30 	bl	8000638 <__aeabi_dmul>
 8009fd8:	1136      	asrs	r6, r6, #4
 8009fda:	4682      	mov	sl, r0
 8009fdc:	468b      	mov	fp, r1
 8009fde:	2300      	movs	r3, #0
 8009fe0:	2502      	movs	r5, #2
 8009fe2:	2e00      	cmp	r6, #0
 8009fe4:	d17a      	bne.n	800a0dc <_dtoa_r+0x4c4>
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1d3      	bne.n	8009f92 <_dtoa_r+0x37a>
 8009fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 8082 	beq.w	800a0f6 <_dtoa_r+0x4de>
 8009ff2:	4b91      	ldr	r3, [pc, #580]	; (800a238 <_dtoa_r+0x620>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4650      	mov	r0, sl
 8009ff8:	4659      	mov	r1, fp
 8009ffa:	f7f6 fd8f 	bl	8000b1c <__aeabi_dcmplt>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d079      	beq.n	800a0f6 <_dtoa_r+0x4de>
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d076      	beq.n	800a0f6 <_dtoa_r+0x4de>
 800a008:	9b02      	ldr	r3, [sp, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	dd36      	ble.n	800a07c <_dtoa_r+0x464>
 800a00e:	9b00      	ldr	r3, [sp, #0]
 800a010:	4650      	mov	r0, sl
 800a012:	4659      	mov	r1, fp
 800a014:	1e5f      	subs	r7, r3, #1
 800a016:	2200      	movs	r2, #0
 800a018:	4b88      	ldr	r3, [pc, #544]	; (800a23c <_dtoa_r+0x624>)
 800a01a:	f7f6 fb0d 	bl	8000638 <__aeabi_dmul>
 800a01e:	9e02      	ldr	r6, [sp, #8]
 800a020:	4682      	mov	sl, r0
 800a022:	468b      	mov	fp, r1
 800a024:	3501      	adds	r5, #1
 800a026:	4628      	mov	r0, r5
 800a028:	f7f6 fa9c 	bl	8000564 <__aeabi_i2d>
 800a02c:	4652      	mov	r2, sl
 800a02e:	465b      	mov	r3, fp
 800a030:	f7f6 fb02 	bl	8000638 <__aeabi_dmul>
 800a034:	4b82      	ldr	r3, [pc, #520]	; (800a240 <_dtoa_r+0x628>)
 800a036:	2200      	movs	r2, #0
 800a038:	f7f6 f948 	bl	80002cc <__adddf3>
 800a03c:	46d0      	mov	r8, sl
 800a03e:	46d9      	mov	r9, fp
 800a040:	4682      	mov	sl, r0
 800a042:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a046:	2e00      	cmp	r6, #0
 800a048:	d158      	bne.n	800a0fc <_dtoa_r+0x4e4>
 800a04a:	4b7e      	ldr	r3, [pc, #504]	; (800a244 <_dtoa_r+0x62c>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	4640      	mov	r0, r8
 800a050:	4649      	mov	r1, r9
 800a052:	f7f6 f939 	bl	80002c8 <__aeabi_dsub>
 800a056:	4652      	mov	r2, sl
 800a058:	465b      	mov	r3, fp
 800a05a:	4680      	mov	r8, r0
 800a05c:	4689      	mov	r9, r1
 800a05e:	f7f6 fd7b 	bl	8000b58 <__aeabi_dcmpgt>
 800a062:	2800      	cmp	r0, #0
 800a064:	f040 8295 	bne.w	800a592 <_dtoa_r+0x97a>
 800a068:	4652      	mov	r2, sl
 800a06a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a06e:	4640      	mov	r0, r8
 800a070:	4649      	mov	r1, r9
 800a072:	f7f6 fd53 	bl	8000b1c <__aeabi_dcmplt>
 800a076:	2800      	cmp	r0, #0
 800a078:	f040 8289 	bne.w	800a58e <_dtoa_r+0x976>
 800a07c:	ec5b ab19 	vmov	sl, fp, d9
 800a080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a082:	2b00      	cmp	r3, #0
 800a084:	f2c0 8148 	blt.w	800a318 <_dtoa_r+0x700>
 800a088:	9a00      	ldr	r2, [sp, #0]
 800a08a:	2a0e      	cmp	r2, #14
 800a08c:	f300 8144 	bgt.w	800a318 <_dtoa_r+0x700>
 800a090:	4b67      	ldr	r3, [pc, #412]	; (800a230 <_dtoa_r+0x618>)
 800a092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a096:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f280 80d5 	bge.w	800a24c <_dtoa_r+0x634>
 800a0a2:	9b03      	ldr	r3, [sp, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f300 80d1 	bgt.w	800a24c <_dtoa_r+0x634>
 800a0aa:	f040 826f 	bne.w	800a58c <_dtoa_r+0x974>
 800a0ae:	4b65      	ldr	r3, [pc, #404]	; (800a244 <_dtoa_r+0x62c>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4640      	mov	r0, r8
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	f7f6 fabf 	bl	8000638 <__aeabi_dmul>
 800a0ba:	4652      	mov	r2, sl
 800a0bc:	465b      	mov	r3, fp
 800a0be:	f7f6 fd41 	bl	8000b44 <__aeabi_dcmpge>
 800a0c2:	9e03      	ldr	r6, [sp, #12]
 800a0c4:	4637      	mov	r7, r6
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f040 8245 	bne.w	800a556 <_dtoa_r+0x93e>
 800a0cc:	9d01      	ldr	r5, [sp, #4]
 800a0ce:	2331      	movs	r3, #49	; 0x31
 800a0d0:	f805 3b01 	strb.w	r3, [r5], #1
 800a0d4:	9b00      	ldr	r3, [sp, #0]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	e240      	b.n	800a55e <_dtoa_r+0x946>
 800a0dc:	07f2      	lsls	r2, r6, #31
 800a0de:	d505      	bpl.n	800a0ec <_dtoa_r+0x4d4>
 800a0e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0e4:	f7f6 faa8 	bl	8000638 <__aeabi_dmul>
 800a0e8:	3501      	adds	r5, #1
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	1076      	asrs	r6, r6, #1
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	e777      	b.n	8009fe2 <_dtoa_r+0x3ca>
 800a0f2:	2502      	movs	r5, #2
 800a0f4:	e779      	b.n	8009fea <_dtoa_r+0x3d2>
 800a0f6:	9f00      	ldr	r7, [sp, #0]
 800a0f8:	9e03      	ldr	r6, [sp, #12]
 800a0fa:	e794      	b.n	800a026 <_dtoa_r+0x40e>
 800a0fc:	9901      	ldr	r1, [sp, #4]
 800a0fe:	4b4c      	ldr	r3, [pc, #304]	; (800a230 <_dtoa_r+0x618>)
 800a100:	4431      	add	r1, r6
 800a102:	910d      	str	r1, [sp, #52]	; 0x34
 800a104:	9908      	ldr	r1, [sp, #32]
 800a106:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a10a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a10e:	2900      	cmp	r1, #0
 800a110:	d043      	beq.n	800a19a <_dtoa_r+0x582>
 800a112:	494d      	ldr	r1, [pc, #308]	; (800a248 <_dtoa_r+0x630>)
 800a114:	2000      	movs	r0, #0
 800a116:	f7f6 fbb9 	bl	800088c <__aeabi_ddiv>
 800a11a:	4652      	mov	r2, sl
 800a11c:	465b      	mov	r3, fp
 800a11e:	f7f6 f8d3 	bl	80002c8 <__aeabi_dsub>
 800a122:	9d01      	ldr	r5, [sp, #4]
 800a124:	4682      	mov	sl, r0
 800a126:	468b      	mov	fp, r1
 800a128:	4649      	mov	r1, r9
 800a12a:	4640      	mov	r0, r8
 800a12c:	f7f6 fd34 	bl	8000b98 <__aeabi_d2iz>
 800a130:	4606      	mov	r6, r0
 800a132:	f7f6 fa17 	bl	8000564 <__aeabi_i2d>
 800a136:	4602      	mov	r2, r0
 800a138:	460b      	mov	r3, r1
 800a13a:	4640      	mov	r0, r8
 800a13c:	4649      	mov	r1, r9
 800a13e:	f7f6 f8c3 	bl	80002c8 <__aeabi_dsub>
 800a142:	3630      	adds	r6, #48	; 0x30
 800a144:	f805 6b01 	strb.w	r6, [r5], #1
 800a148:	4652      	mov	r2, sl
 800a14a:	465b      	mov	r3, fp
 800a14c:	4680      	mov	r8, r0
 800a14e:	4689      	mov	r9, r1
 800a150:	f7f6 fce4 	bl	8000b1c <__aeabi_dcmplt>
 800a154:	2800      	cmp	r0, #0
 800a156:	d163      	bne.n	800a220 <_dtoa_r+0x608>
 800a158:	4642      	mov	r2, r8
 800a15a:	464b      	mov	r3, r9
 800a15c:	4936      	ldr	r1, [pc, #216]	; (800a238 <_dtoa_r+0x620>)
 800a15e:	2000      	movs	r0, #0
 800a160:	f7f6 f8b2 	bl	80002c8 <__aeabi_dsub>
 800a164:	4652      	mov	r2, sl
 800a166:	465b      	mov	r3, fp
 800a168:	f7f6 fcd8 	bl	8000b1c <__aeabi_dcmplt>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	f040 80b5 	bne.w	800a2dc <_dtoa_r+0x6c4>
 800a172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a174:	429d      	cmp	r5, r3
 800a176:	d081      	beq.n	800a07c <_dtoa_r+0x464>
 800a178:	4b30      	ldr	r3, [pc, #192]	; (800a23c <_dtoa_r+0x624>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	4650      	mov	r0, sl
 800a17e:	4659      	mov	r1, fp
 800a180:	f7f6 fa5a 	bl	8000638 <__aeabi_dmul>
 800a184:	4b2d      	ldr	r3, [pc, #180]	; (800a23c <_dtoa_r+0x624>)
 800a186:	4682      	mov	sl, r0
 800a188:	468b      	mov	fp, r1
 800a18a:	4640      	mov	r0, r8
 800a18c:	4649      	mov	r1, r9
 800a18e:	2200      	movs	r2, #0
 800a190:	f7f6 fa52 	bl	8000638 <__aeabi_dmul>
 800a194:	4680      	mov	r8, r0
 800a196:	4689      	mov	r9, r1
 800a198:	e7c6      	b.n	800a128 <_dtoa_r+0x510>
 800a19a:	4650      	mov	r0, sl
 800a19c:	4659      	mov	r1, fp
 800a19e:	f7f6 fa4b 	bl	8000638 <__aeabi_dmul>
 800a1a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1a4:	9d01      	ldr	r5, [sp, #4]
 800a1a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1a8:	4682      	mov	sl, r0
 800a1aa:	468b      	mov	fp, r1
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	f7f6 fcf2 	bl	8000b98 <__aeabi_d2iz>
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	f7f6 f9d5 	bl	8000564 <__aeabi_i2d>
 800a1ba:	3630      	adds	r6, #48	; 0x30
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	f7f6 f880 	bl	80002c8 <__aeabi_dsub>
 800a1c8:	f805 6b01 	strb.w	r6, [r5], #1
 800a1cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ce:	429d      	cmp	r5, r3
 800a1d0:	4680      	mov	r8, r0
 800a1d2:	4689      	mov	r9, r1
 800a1d4:	f04f 0200 	mov.w	r2, #0
 800a1d8:	d124      	bne.n	800a224 <_dtoa_r+0x60c>
 800a1da:	4b1b      	ldr	r3, [pc, #108]	; (800a248 <_dtoa_r+0x630>)
 800a1dc:	4650      	mov	r0, sl
 800a1de:	4659      	mov	r1, fp
 800a1e0:	f7f6 f874 	bl	80002cc <__adddf3>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4640      	mov	r0, r8
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	f7f6 fcb4 	bl	8000b58 <__aeabi_dcmpgt>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d173      	bne.n	800a2dc <_dtoa_r+0x6c4>
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	465b      	mov	r3, fp
 800a1f8:	4913      	ldr	r1, [pc, #76]	; (800a248 <_dtoa_r+0x630>)
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	f7f6 f864 	bl	80002c8 <__aeabi_dsub>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4640      	mov	r0, r8
 800a206:	4649      	mov	r1, r9
 800a208:	f7f6 fc88 	bl	8000b1c <__aeabi_dcmplt>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f43f af35 	beq.w	800a07c <_dtoa_r+0x464>
 800a212:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a214:	1e6b      	subs	r3, r5, #1
 800a216:	930f      	str	r3, [sp, #60]	; 0x3c
 800a218:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a21c:	2b30      	cmp	r3, #48	; 0x30
 800a21e:	d0f8      	beq.n	800a212 <_dtoa_r+0x5fa>
 800a220:	9700      	str	r7, [sp, #0]
 800a222:	e049      	b.n	800a2b8 <_dtoa_r+0x6a0>
 800a224:	4b05      	ldr	r3, [pc, #20]	; (800a23c <_dtoa_r+0x624>)
 800a226:	f7f6 fa07 	bl	8000638 <__aeabi_dmul>
 800a22a:	4680      	mov	r8, r0
 800a22c:	4689      	mov	r9, r1
 800a22e:	e7bd      	b.n	800a1ac <_dtoa_r+0x594>
 800a230:	0800bf28 	.word	0x0800bf28
 800a234:	0800bf00 	.word	0x0800bf00
 800a238:	3ff00000 	.word	0x3ff00000
 800a23c:	40240000 	.word	0x40240000
 800a240:	401c0000 	.word	0x401c0000
 800a244:	40140000 	.word	0x40140000
 800a248:	3fe00000 	.word	0x3fe00000
 800a24c:	9d01      	ldr	r5, [sp, #4]
 800a24e:	4656      	mov	r6, sl
 800a250:	465f      	mov	r7, fp
 800a252:	4642      	mov	r2, r8
 800a254:	464b      	mov	r3, r9
 800a256:	4630      	mov	r0, r6
 800a258:	4639      	mov	r1, r7
 800a25a:	f7f6 fb17 	bl	800088c <__aeabi_ddiv>
 800a25e:	f7f6 fc9b 	bl	8000b98 <__aeabi_d2iz>
 800a262:	4682      	mov	sl, r0
 800a264:	f7f6 f97e 	bl	8000564 <__aeabi_i2d>
 800a268:	4642      	mov	r2, r8
 800a26a:	464b      	mov	r3, r9
 800a26c:	f7f6 f9e4 	bl	8000638 <__aeabi_dmul>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4630      	mov	r0, r6
 800a276:	4639      	mov	r1, r7
 800a278:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a27c:	f7f6 f824 	bl	80002c8 <__aeabi_dsub>
 800a280:	f805 6b01 	strb.w	r6, [r5], #1
 800a284:	9e01      	ldr	r6, [sp, #4]
 800a286:	9f03      	ldr	r7, [sp, #12]
 800a288:	1bae      	subs	r6, r5, r6
 800a28a:	42b7      	cmp	r7, r6
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	d135      	bne.n	800a2fe <_dtoa_r+0x6e6>
 800a292:	f7f6 f81b 	bl	80002cc <__adddf3>
 800a296:	4642      	mov	r2, r8
 800a298:	464b      	mov	r3, r9
 800a29a:	4606      	mov	r6, r0
 800a29c:	460f      	mov	r7, r1
 800a29e:	f7f6 fc5b 	bl	8000b58 <__aeabi_dcmpgt>
 800a2a2:	b9d0      	cbnz	r0, 800a2da <_dtoa_r+0x6c2>
 800a2a4:	4642      	mov	r2, r8
 800a2a6:	464b      	mov	r3, r9
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	f7f6 fc2c 	bl	8000b08 <__aeabi_dcmpeq>
 800a2b0:	b110      	cbz	r0, 800a2b8 <_dtoa_r+0x6a0>
 800a2b2:	f01a 0f01 	tst.w	sl, #1
 800a2b6:	d110      	bne.n	800a2da <_dtoa_r+0x6c2>
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	ee18 1a10 	vmov	r1, s16
 800a2be:	f000 fbd7 	bl	800aa70 <_Bfree>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9800      	ldr	r0, [sp, #0]
 800a2c6:	702b      	strb	r3, [r5, #0]
 800a2c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	6018      	str	r0, [r3, #0]
 800a2ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f43f acf1 	beq.w	8009cb8 <_dtoa_r+0xa0>
 800a2d6:	601d      	str	r5, [r3, #0]
 800a2d8:	e4ee      	b.n	8009cb8 <_dtoa_r+0xa0>
 800a2da:	9f00      	ldr	r7, [sp, #0]
 800a2dc:	462b      	mov	r3, r5
 800a2de:	461d      	mov	r5, r3
 800a2e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2e4:	2a39      	cmp	r2, #57	; 0x39
 800a2e6:	d106      	bne.n	800a2f6 <_dtoa_r+0x6de>
 800a2e8:	9a01      	ldr	r2, [sp, #4]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d1f7      	bne.n	800a2de <_dtoa_r+0x6c6>
 800a2ee:	9901      	ldr	r1, [sp, #4]
 800a2f0:	2230      	movs	r2, #48	; 0x30
 800a2f2:	3701      	adds	r7, #1
 800a2f4:	700a      	strb	r2, [r1, #0]
 800a2f6:	781a      	ldrb	r2, [r3, #0]
 800a2f8:	3201      	adds	r2, #1
 800a2fa:	701a      	strb	r2, [r3, #0]
 800a2fc:	e790      	b.n	800a220 <_dtoa_r+0x608>
 800a2fe:	4ba6      	ldr	r3, [pc, #664]	; (800a598 <_dtoa_r+0x980>)
 800a300:	2200      	movs	r2, #0
 800a302:	f7f6 f999 	bl	8000638 <__aeabi_dmul>
 800a306:	2200      	movs	r2, #0
 800a308:	2300      	movs	r3, #0
 800a30a:	4606      	mov	r6, r0
 800a30c:	460f      	mov	r7, r1
 800a30e:	f7f6 fbfb 	bl	8000b08 <__aeabi_dcmpeq>
 800a312:	2800      	cmp	r0, #0
 800a314:	d09d      	beq.n	800a252 <_dtoa_r+0x63a>
 800a316:	e7cf      	b.n	800a2b8 <_dtoa_r+0x6a0>
 800a318:	9a08      	ldr	r2, [sp, #32]
 800a31a:	2a00      	cmp	r2, #0
 800a31c:	f000 80d7 	beq.w	800a4ce <_dtoa_r+0x8b6>
 800a320:	9a06      	ldr	r2, [sp, #24]
 800a322:	2a01      	cmp	r2, #1
 800a324:	f300 80ba 	bgt.w	800a49c <_dtoa_r+0x884>
 800a328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	f000 80b2 	beq.w	800a494 <_dtoa_r+0x87c>
 800a330:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a334:	9e07      	ldr	r6, [sp, #28]
 800a336:	9d04      	ldr	r5, [sp, #16]
 800a338:	9a04      	ldr	r2, [sp, #16]
 800a33a:	441a      	add	r2, r3
 800a33c:	9204      	str	r2, [sp, #16]
 800a33e:	9a05      	ldr	r2, [sp, #20]
 800a340:	2101      	movs	r1, #1
 800a342:	441a      	add	r2, r3
 800a344:	4620      	mov	r0, r4
 800a346:	9205      	str	r2, [sp, #20]
 800a348:	f000 fc4a 	bl	800abe0 <__i2b>
 800a34c:	4607      	mov	r7, r0
 800a34e:	2d00      	cmp	r5, #0
 800a350:	dd0c      	ble.n	800a36c <_dtoa_r+0x754>
 800a352:	9b05      	ldr	r3, [sp, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	dd09      	ble.n	800a36c <_dtoa_r+0x754>
 800a358:	42ab      	cmp	r3, r5
 800a35a:	9a04      	ldr	r2, [sp, #16]
 800a35c:	bfa8      	it	ge
 800a35e:	462b      	movge	r3, r5
 800a360:	1ad2      	subs	r2, r2, r3
 800a362:	9204      	str	r2, [sp, #16]
 800a364:	9a05      	ldr	r2, [sp, #20]
 800a366:	1aed      	subs	r5, r5, r3
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	9305      	str	r3, [sp, #20]
 800a36c:	9b07      	ldr	r3, [sp, #28]
 800a36e:	b31b      	cbz	r3, 800a3b8 <_dtoa_r+0x7a0>
 800a370:	9b08      	ldr	r3, [sp, #32]
 800a372:	2b00      	cmp	r3, #0
 800a374:	f000 80af 	beq.w	800a4d6 <_dtoa_r+0x8be>
 800a378:	2e00      	cmp	r6, #0
 800a37a:	dd13      	ble.n	800a3a4 <_dtoa_r+0x78c>
 800a37c:	4639      	mov	r1, r7
 800a37e:	4632      	mov	r2, r6
 800a380:	4620      	mov	r0, r4
 800a382:	f000 fced 	bl	800ad60 <__pow5mult>
 800a386:	ee18 2a10 	vmov	r2, s16
 800a38a:	4601      	mov	r1, r0
 800a38c:	4607      	mov	r7, r0
 800a38e:	4620      	mov	r0, r4
 800a390:	f000 fc3c 	bl	800ac0c <__multiply>
 800a394:	ee18 1a10 	vmov	r1, s16
 800a398:	4680      	mov	r8, r0
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 fb68 	bl	800aa70 <_Bfree>
 800a3a0:	ee08 8a10 	vmov	s16, r8
 800a3a4:	9b07      	ldr	r3, [sp, #28]
 800a3a6:	1b9a      	subs	r2, r3, r6
 800a3a8:	d006      	beq.n	800a3b8 <_dtoa_r+0x7a0>
 800a3aa:	ee18 1a10 	vmov	r1, s16
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 fcd6 	bl	800ad60 <__pow5mult>
 800a3b4:	ee08 0a10 	vmov	s16, r0
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f000 fc10 	bl	800abe0 <__i2b>
 800a3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	f340 8088 	ble.w	800a4da <_dtoa_r+0x8c2>
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	4601      	mov	r1, r0
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 fcc6 	bl	800ad60 <__pow5mult>
 800a3d4:	9b06      	ldr	r3, [sp, #24]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	4606      	mov	r6, r0
 800a3da:	f340 8081 	ble.w	800a4e0 <_dtoa_r+0x8c8>
 800a3de:	f04f 0800 	mov.w	r8, #0
 800a3e2:	6933      	ldr	r3, [r6, #16]
 800a3e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a3e8:	6918      	ldr	r0, [r3, #16]
 800a3ea:	f000 fba9 	bl	800ab40 <__hi0bits>
 800a3ee:	f1c0 0020 	rsb	r0, r0, #32
 800a3f2:	9b05      	ldr	r3, [sp, #20]
 800a3f4:	4418      	add	r0, r3
 800a3f6:	f010 001f 	ands.w	r0, r0, #31
 800a3fa:	f000 8092 	beq.w	800a522 <_dtoa_r+0x90a>
 800a3fe:	f1c0 0320 	rsb	r3, r0, #32
 800a402:	2b04      	cmp	r3, #4
 800a404:	f340 808a 	ble.w	800a51c <_dtoa_r+0x904>
 800a408:	f1c0 001c 	rsb	r0, r0, #28
 800a40c:	9b04      	ldr	r3, [sp, #16]
 800a40e:	4403      	add	r3, r0
 800a410:	9304      	str	r3, [sp, #16]
 800a412:	9b05      	ldr	r3, [sp, #20]
 800a414:	4403      	add	r3, r0
 800a416:	4405      	add	r5, r0
 800a418:	9305      	str	r3, [sp, #20]
 800a41a:	9b04      	ldr	r3, [sp, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	dd07      	ble.n	800a430 <_dtoa_r+0x818>
 800a420:	ee18 1a10 	vmov	r1, s16
 800a424:	461a      	mov	r2, r3
 800a426:	4620      	mov	r0, r4
 800a428:	f000 fcf4 	bl	800ae14 <__lshift>
 800a42c:	ee08 0a10 	vmov	s16, r0
 800a430:	9b05      	ldr	r3, [sp, #20]
 800a432:	2b00      	cmp	r3, #0
 800a434:	dd05      	ble.n	800a442 <_dtoa_r+0x82a>
 800a436:	4631      	mov	r1, r6
 800a438:	461a      	mov	r2, r3
 800a43a:	4620      	mov	r0, r4
 800a43c:	f000 fcea 	bl	800ae14 <__lshift>
 800a440:	4606      	mov	r6, r0
 800a442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a444:	2b00      	cmp	r3, #0
 800a446:	d06e      	beq.n	800a526 <_dtoa_r+0x90e>
 800a448:	ee18 0a10 	vmov	r0, s16
 800a44c:	4631      	mov	r1, r6
 800a44e:	f000 fd51 	bl	800aef4 <__mcmp>
 800a452:	2800      	cmp	r0, #0
 800a454:	da67      	bge.n	800a526 <_dtoa_r+0x90e>
 800a456:	9b00      	ldr	r3, [sp, #0]
 800a458:	3b01      	subs	r3, #1
 800a45a:	ee18 1a10 	vmov	r1, s16
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	220a      	movs	r2, #10
 800a462:	2300      	movs	r3, #0
 800a464:	4620      	mov	r0, r4
 800a466:	f000 fb25 	bl	800aab4 <__multadd>
 800a46a:	9b08      	ldr	r3, [sp, #32]
 800a46c:	ee08 0a10 	vmov	s16, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	f000 81b1 	beq.w	800a7d8 <_dtoa_r+0xbc0>
 800a476:	2300      	movs	r3, #0
 800a478:	4639      	mov	r1, r7
 800a47a:	220a      	movs	r2, #10
 800a47c:	4620      	mov	r0, r4
 800a47e:	f000 fb19 	bl	800aab4 <__multadd>
 800a482:	9b02      	ldr	r3, [sp, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	4607      	mov	r7, r0
 800a488:	f300 808e 	bgt.w	800a5a8 <_dtoa_r+0x990>
 800a48c:	9b06      	ldr	r3, [sp, #24]
 800a48e:	2b02      	cmp	r3, #2
 800a490:	dc51      	bgt.n	800a536 <_dtoa_r+0x91e>
 800a492:	e089      	b.n	800a5a8 <_dtoa_r+0x990>
 800a494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a49a:	e74b      	b.n	800a334 <_dtoa_r+0x71c>
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	1e5e      	subs	r6, r3, #1
 800a4a0:	9b07      	ldr	r3, [sp, #28]
 800a4a2:	42b3      	cmp	r3, r6
 800a4a4:	bfbf      	itttt	lt
 800a4a6:	9b07      	ldrlt	r3, [sp, #28]
 800a4a8:	9607      	strlt	r6, [sp, #28]
 800a4aa:	1af2      	sublt	r2, r6, r3
 800a4ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a4ae:	bfb6      	itet	lt
 800a4b0:	189b      	addlt	r3, r3, r2
 800a4b2:	1b9e      	subge	r6, r3, r6
 800a4b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	bfb8      	it	lt
 800a4ba:	2600      	movlt	r6, #0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	bfb7      	itett	lt
 800a4c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a4c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a4c8:	1a9d      	sublt	r5, r3, r2
 800a4ca:	2300      	movlt	r3, #0
 800a4cc:	e734      	b.n	800a338 <_dtoa_r+0x720>
 800a4ce:	9e07      	ldr	r6, [sp, #28]
 800a4d0:	9d04      	ldr	r5, [sp, #16]
 800a4d2:	9f08      	ldr	r7, [sp, #32]
 800a4d4:	e73b      	b.n	800a34e <_dtoa_r+0x736>
 800a4d6:	9a07      	ldr	r2, [sp, #28]
 800a4d8:	e767      	b.n	800a3aa <_dtoa_r+0x792>
 800a4da:	9b06      	ldr	r3, [sp, #24]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	dc18      	bgt.n	800a512 <_dtoa_r+0x8fa>
 800a4e0:	f1ba 0f00 	cmp.w	sl, #0
 800a4e4:	d115      	bne.n	800a512 <_dtoa_r+0x8fa>
 800a4e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4ea:	b993      	cbnz	r3, 800a512 <_dtoa_r+0x8fa>
 800a4ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4f0:	0d1b      	lsrs	r3, r3, #20
 800a4f2:	051b      	lsls	r3, r3, #20
 800a4f4:	b183      	cbz	r3, 800a518 <_dtoa_r+0x900>
 800a4f6:	9b04      	ldr	r3, [sp, #16]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	9b05      	ldr	r3, [sp, #20]
 800a4fe:	3301      	adds	r3, #1
 800a500:	9305      	str	r3, [sp, #20]
 800a502:	f04f 0801 	mov.w	r8, #1
 800a506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f47f af6a 	bne.w	800a3e2 <_dtoa_r+0x7ca>
 800a50e:	2001      	movs	r0, #1
 800a510:	e76f      	b.n	800a3f2 <_dtoa_r+0x7da>
 800a512:	f04f 0800 	mov.w	r8, #0
 800a516:	e7f6      	b.n	800a506 <_dtoa_r+0x8ee>
 800a518:	4698      	mov	r8, r3
 800a51a:	e7f4      	b.n	800a506 <_dtoa_r+0x8ee>
 800a51c:	f43f af7d 	beq.w	800a41a <_dtoa_r+0x802>
 800a520:	4618      	mov	r0, r3
 800a522:	301c      	adds	r0, #28
 800a524:	e772      	b.n	800a40c <_dtoa_r+0x7f4>
 800a526:	9b03      	ldr	r3, [sp, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	dc37      	bgt.n	800a59c <_dtoa_r+0x984>
 800a52c:	9b06      	ldr	r3, [sp, #24]
 800a52e:	2b02      	cmp	r3, #2
 800a530:	dd34      	ble.n	800a59c <_dtoa_r+0x984>
 800a532:	9b03      	ldr	r3, [sp, #12]
 800a534:	9302      	str	r3, [sp, #8]
 800a536:	9b02      	ldr	r3, [sp, #8]
 800a538:	b96b      	cbnz	r3, 800a556 <_dtoa_r+0x93e>
 800a53a:	4631      	mov	r1, r6
 800a53c:	2205      	movs	r2, #5
 800a53e:	4620      	mov	r0, r4
 800a540:	f000 fab8 	bl	800aab4 <__multadd>
 800a544:	4601      	mov	r1, r0
 800a546:	4606      	mov	r6, r0
 800a548:	ee18 0a10 	vmov	r0, s16
 800a54c:	f000 fcd2 	bl	800aef4 <__mcmp>
 800a550:	2800      	cmp	r0, #0
 800a552:	f73f adbb 	bgt.w	800a0cc <_dtoa_r+0x4b4>
 800a556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a558:	9d01      	ldr	r5, [sp, #4]
 800a55a:	43db      	mvns	r3, r3
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	f04f 0800 	mov.w	r8, #0
 800a562:	4631      	mov	r1, r6
 800a564:	4620      	mov	r0, r4
 800a566:	f000 fa83 	bl	800aa70 <_Bfree>
 800a56a:	2f00      	cmp	r7, #0
 800a56c:	f43f aea4 	beq.w	800a2b8 <_dtoa_r+0x6a0>
 800a570:	f1b8 0f00 	cmp.w	r8, #0
 800a574:	d005      	beq.n	800a582 <_dtoa_r+0x96a>
 800a576:	45b8      	cmp	r8, r7
 800a578:	d003      	beq.n	800a582 <_dtoa_r+0x96a>
 800a57a:	4641      	mov	r1, r8
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 fa77 	bl	800aa70 <_Bfree>
 800a582:	4639      	mov	r1, r7
 800a584:	4620      	mov	r0, r4
 800a586:	f000 fa73 	bl	800aa70 <_Bfree>
 800a58a:	e695      	b.n	800a2b8 <_dtoa_r+0x6a0>
 800a58c:	2600      	movs	r6, #0
 800a58e:	4637      	mov	r7, r6
 800a590:	e7e1      	b.n	800a556 <_dtoa_r+0x93e>
 800a592:	9700      	str	r7, [sp, #0]
 800a594:	4637      	mov	r7, r6
 800a596:	e599      	b.n	800a0cc <_dtoa_r+0x4b4>
 800a598:	40240000 	.word	0x40240000
 800a59c:	9b08      	ldr	r3, [sp, #32]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 80ca 	beq.w	800a738 <_dtoa_r+0xb20>
 800a5a4:	9b03      	ldr	r3, [sp, #12]
 800a5a6:	9302      	str	r3, [sp, #8]
 800a5a8:	2d00      	cmp	r5, #0
 800a5aa:	dd05      	ble.n	800a5b8 <_dtoa_r+0x9a0>
 800a5ac:	4639      	mov	r1, r7
 800a5ae:	462a      	mov	r2, r5
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f000 fc2f 	bl	800ae14 <__lshift>
 800a5b6:	4607      	mov	r7, r0
 800a5b8:	f1b8 0f00 	cmp.w	r8, #0
 800a5bc:	d05b      	beq.n	800a676 <_dtoa_r+0xa5e>
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 fa15 	bl	800a9f0 <_Balloc>
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	b928      	cbnz	r0, 800a5d6 <_dtoa_r+0x9be>
 800a5ca:	4b87      	ldr	r3, [pc, #540]	; (800a7e8 <_dtoa_r+0xbd0>)
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a5d2:	f7ff bb3b 	b.w	8009c4c <_dtoa_r+0x34>
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	3202      	adds	r2, #2
 800a5da:	0092      	lsls	r2, r2, #2
 800a5dc:	f107 010c 	add.w	r1, r7, #12
 800a5e0:	300c      	adds	r0, #12
 800a5e2:	f7fe fc76 	bl	8008ed2 <memcpy>
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f000 fc12 	bl	800ae14 <__lshift>
 800a5f0:	9b01      	ldr	r3, [sp, #4]
 800a5f2:	f103 0901 	add.w	r9, r3, #1
 800a5f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	9305      	str	r3, [sp, #20]
 800a5fe:	f00a 0301 	and.w	r3, sl, #1
 800a602:	46b8      	mov	r8, r7
 800a604:	9304      	str	r3, [sp, #16]
 800a606:	4607      	mov	r7, r0
 800a608:	4631      	mov	r1, r6
 800a60a:	ee18 0a10 	vmov	r0, s16
 800a60e:	f7ff fa75 	bl	8009afc <quorem>
 800a612:	4641      	mov	r1, r8
 800a614:	9002      	str	r0, [sp, #8]
 800a616:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a61a:	ee18 0a10 	vmov	r0, s16
 800a61e:	f000 fc69 	bl	800aef4 <__mcmp>
 800a622:	463a      	mov	r2, r7
 800a624:	9003      	str	r0, [sp, #12]
 800a626:	4631      	mov	r1, r6
 800a628:	4620      	mov	r0, r4
 800a62a:	f000 fc7f 	bl	800af2c <__mdiff>
 800a62e:	68c2      	ldr	r2, [r0, #12]
 800a630:	f109 3bff 	add.w	fp, r9, #4294967295
 800a634:	4605      	mov	r5, r0
 800a636:	bb02      	cbnz	r2, 800a67a <_dtoa_r+0xa62>
 800a638:	4601      	mov	r1, r0
 800a63a:	ee18 0a10 	vmov	r0, s16
 800a63e:	f000 fc59 	bl	800aef4 <__mcmp>
 800a642:	4602      	mov	r2, r0
 800a644:	4629      	mov	r1, r5
 800a646:	4620      	mov	r0, r4
 800a648:	9207      	str	r2, [sp, #28]
 800a64a:	f000 fa11 	bl	800aa70 <_Bfree>
 800a64e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a652:	ea43 0102 	orr.w	r1, r3, r2
 800a656:	9b04      	ldr	r3, [sp, #16]
 800a658:	430b      	orrs	r3, r1
 800a65a:	464d      	mov	r5, r9
 800a65c:	d10f      	bne.n	800a67e <_dtoa_r+0xa66>
 800a65e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a662:	d02a      	beq.n	800a6ba <_dtoa_r+0xaa2>
 800a664:	9b03      	ldr	r3, [sp, #12]
 800a666:	2b00      	cmp	r3, #0
 800a668:	dd02      	ble.n	800a670 <_dtoa_r+0xa58>
 800a66a:	9b02      	ldr	r3, [sp, #8]
 800a66c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a670:	f88b a000 	strb.w	sl, [fp]
 800a674:	e775      	b.n	800a562 <_dtoa_r+0x94a>
 800a676:	4638      	mov	r0, r7
 800a678:	e7ba      	b.n	800a5f0 <_dtoa_r+0x9d8>
 800a67a:	2201      	movs	r2, #1
 800a67c:	e7e2      	b.n	800a644 <_dtoa_r+0xa2c>
 800a67e:	9b03      	ldr	r3, [sp, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	db04      	blt.n	800a68e <_dtoa_r+0xa76>
 800a684:	9906      	ldr	r1, [sp, #24]
 800a686:	430b      	orrs	r3, r1
 800a688:	9904      	ldr	r1, [sp, #16]
 800a68a:	430b      	orrs	r3, r1
 800a68c:	d122      	bne.n	800a6d4 <_dtoa_r+0xabc>
 800a68e:	2a00      	cmp	r2, #0
 800a690:	ddee      	ble.n	800a670 <_dtoa_r+0xa58>
 800a692:	ee18 1a10 	vmov	r1, s16
 800a696:	2201      	movs	r2, #1
 800a698:	4620      	mov	r0, r4
 800a69a:	f000 fbbb 	bl	800ae14 <__lshift>
 800a69e:	4631      	mov	r1, r6
 800a6a0:	ee08 0a10 	vmov	s16, r0
 800a6a4:	f000 fc26 	bl	800aef4 <__mcmp>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	dc03      	bgt.n	800a6b4 <_dtoa_r+0xa9c>
 800a6ac:	d1e0      	bne.n	800a670 <_dtoa_r+0xa58>
 800a6ae:	f01a 0f01 	tst.w	sl, #1
 800a6b2:	d0dd      	beq.n	800a670 <_dtoa_r+0xa58>
 800a6b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6b8:	d1d7      	bne.n	800a66a <_dtoa_r+0xa52>
 800a6ba:	2339      	movs	r3, #57	; 0x39
 800a6bc:	f88b 3000 	strb.w	r3, [fp]
 800a6c0:	462b      	mov	r3, r5
 800a6c2:	461d      	mov	r5, r3
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a6ca:	2a39      	cmp	r2, #57	; 0x39
 800a6cc:	d071      	beq.n	800a7b2 <_dtoa_r+0xb9a>
 800a6ce:	3201      	adds	r2, #1
 800a6d0:	701a      	strb	r2, [r3, #0]
 800a6d2:	e746      	b.n	800a562 <_dtoa_r+0x94a>
 800a6d4:	2a00      	cmp	r2, #0
 800a6d6:	dd07      	ble.n	800a6e8 <_dtoa_r+0xad0>
 800a6d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6dc:	d0ed      	beq.n	800a6ba <_dtoa_r+0xaa2>
 800a6de:	f10a 0301 	add.w	r3, sl, #1
 800a6e2:	f88b 3000 	strb.w	r3, [fp]
 800a6e6:	e73c      	b.n	800a562 <_dtoa_r+0x94a>
 800a6e8:	9b05      	ldr	r3, [sp, #20]
 800a6ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a6ee:	4599      	cmp	r9, r3
 800a6f0:	d047      	beq.n	800a782 <_dtoa_r+0xb6a>
 800a6f2:	ee18 1a10 	vmov	r1, s16
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	220a      	movs	r2, #10
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 f9da 	bl	800aab4 <__multadd>
 800a700:	45b8      	cmp	r8, r7
 800a702:	ee08 0a10 	vmov	s16, r0
 800a706:	f04f 0300 	mov.w	r3, #0
 800a70a:	f04f 020a 	mov.w	r2, #10
 800a70e:	4641      	mov	r1, r8
 800a710:	4620      	mov	r0, r4
 800a712:	d106      	bne.n	800a722 <_dtoa_r+0xb0a>
 800a714:	f000 f9ce 	bl	800aab4 <__multadd>
 800a718:	4680      	mov	r8, r0
 800a71a:	4607      	mov	r7, r0
 800a71c:	f109 0901 	add.w	r9, r9, #1
 800a720:	e772      	b.n	800a608 <_dtoa_r+0x9f0>
 800a722:	f000 f9c7 	bl	800aab4 <__multadd>
 800a726:	4639      	mov	r1, r7
 800a728:	4680      	mov	r8, r0
 800a72a:	2300      	movs	r3, #0
 800a72c:	220a      	movs	r2, #10
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 f9c0 	bl	800aab4 <__multadd>
 800a734:	4607      	mov	r7, r0
 800a736:	e7f1      	b.n	800a71c <_dtoa_r+0xb04>
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	9302      	str	r3, [sp, #8]
 800a73c:	9d01      	ldr	r5, [sp, #4]
 800a73e:	ee18 0a10 	vmov	r0, s16
 800a742:	4631      	mov	r1, r6
 800a744:	f7ff f9da 	bl	8009afc <quorem>
 800a748:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a74c:	9b01      	ldr	r3, [sp, #4]
 800a74e:	f805 ab01 	strb.w	sl, [r5], #1
 800a752:	1aea      	subs	r2, r5, r3
 800a754:	9b02      	ldr	r3, [sp, #8]
 800a756:	4293      	cmp	r3, r2
 800a758:	dd09      	ble.n	800a76e <_dtoa_r+0xb56>
 800a75a:	ee18 1a10 	vmov	r1, s16
 800a75e:	2300      	movs	r3, #0
 800a760:	220a      	movs	r2, #10
 800a762:	4620      	mov	r0, r4
 800a764:	f000 f9a6 	bl	800aab4 <__multadd>
 800a768:	ee08 0a10 	vmov	s16, r0
 800a76c:	e7e7      	b.n	800a73e <_dtoa_r+0xb26>
 800a76e:	9b02      	ldr	r3, [sp, #8]
 800a770:	2b00      	cmp	r3, #0
 800a772:	bfc8      	it	gt
 800a774:	461d      	movgt	r5, r3
 800a776:	9b01      	ldr	r3, [sp, #4]
 800a778:	bfd8      	it	le
 800a77a:	2501      	movle	r5, #1
 800a77c:	441d      	add	r5, r3
 800a77e:	f04f 0800 	mov.w	r8, #0
 800a782:	ee18 1a10 	vmov	r1, s16
 800a786:	2201      	movs	r2, #1
 800a788:	4620      	mov	r0, r4
 800a78a:	f000 fb43 	bl	800ae14 <__lshift>
 800a78e:	4631      	mov	r1, r6
 800a790:	ee08 0a10 	vmov	s16, r0
 800a794:	f000 fbae 	bl	800aef4 <__mcmp>
 800a798:	2800      	cmp	r0, #0
 800a79a:	dc91      	bgt.n	800a6c0 <_dtoa_r+0xaa8>
 800a79c:	d102      	bne.n	800a7a4 <_dtoa_r+0xb8c>
 800a79e:	f01a 0f01 	tst.w	sl, #1
 800a7a2:	d18d      	bne.n	800a6c0 <_dtoa_r+0xaa8>
 800a7a4:	462b      	mov	r3, r5
 800a7a6:	461d      	mov	r5, r3
 800a7a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7ac:	2a30      	cmp	r2, #48	; 0x30
 800a7ae:	d0fa      	beq.n	800a7a6 <_dtoa_r+0xb8e>
 800a7b0:	e6d7      	b.n	800a562 <_dtoa_r+0x94a>
 800a7b2:	9a01      	ldr	r2, [sp, #4]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d184      	bne.n	800a6c2 <_dtoa_r+0xaaa>
 800a7b8:	9b00      	ldr	r3, [sp, #0]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	2331      	movs	r3, #49	; 0x31
 800a7c0:	7013      	strb	r3, [r2, #0]
 800a7c2:	e6ce      	b.n	800a562 <_dtoa_r+0x94a>
 800a7c4:	4b09      	ldr	r3, [pc, #36]	; (800a7ec <_dtoa_r+0xbd4>)
 800a7c6:	f7ff ba95 	b.w	8009cf4 <_dtoa_r+0xdc>
 800a7ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f47f aa6e 	bne.w	8009cae <_dtoa_r+0x96>
 800a7d2:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <_dtoa_r+0xbd8>)
 800a7d4:	f7ff ba8e 	b.w	8009cf4 <_dtoa_r+0xdc>
 800a7d8:	9b02      	ldr	r3, [sp, #8]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dcae      	bgt.n	800a73c <_dtoa_r+0xb24>
 800a7de:	9b06      	ldr	r3, [sp, #24]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	f73f aea8 	bgt.w	800a536 <_dtoa_r+0x91e>
 800a7e6:	e7a9      	b.n	800a73c <_dtoa_r+0xb24>
 800a7e8:	0800be84 	.word	0x0800be84
 800a7ec:	0800bce0 	.word	0x0800bce0
 800a7f0:	0800be05 	.word	0x0800be05

0800a7f4 <__sflush_r>:
 800a7f4:	898a      	ldrh	r2, [r1, #12]
 800a7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	0710      	lsls	r0, r2, #28
 800a7fe:	460c      	mov	r4, r1
 800a800:	d458      	bmi.n	800a8b4 <__sflush_r+0xc0>
 800a802:	684b      	ldr	r3, [r1, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	dc05      	bgt.n	800a814 <__sflush_r+0x20>
 800a808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	dc02      	bgt.n	800a814 <__sflush_r+0x20>
 800a80e:	2000      	movs	r0, #0
 800a810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a816:	2e00      	cmp	r6, #0
 800a818:	d0f9      	beq.n	800a80e <__sflush_r+0x1a>
 800a81a:	2300      	movs	r3, #0
 800a81c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a820:	682f      	ldr	r7, [r5, #0]
 800a822:	602b      	str	r3, [r5, #0]
 800a824:	d032      	beq.n	800a88c <__sflush_r+0x98>
 800a826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	075a      	lsls	r2, r3, #29
 800a82c:	d505      	bpl.n	800a83a <__sflush_r+0x46>
 800a82e:	6863      	ldr	r3, [r4, #4]
 800a830:	1ac0      	subs	r0, r0, r3
 800a832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a834:	b10b      	cbz	r3, 800a83a <__sflush_r+0x46>
 800a836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a838:	1ac0      	subs	r0, r0, r3
 800a83a:	2300      	movs	r3, #0
 800a83c:	4602      	mov	r2, r0
 800a83e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a840:	6a21      	ldr	r1, [r4, #32]
 800a842:	4628      	mov	r0, r5
 800a844:	47b0      	blx	r6
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	d106      	bne.n	800a85a <__sflush_r+0x66>
 800a84c:	6829      	ldr	r1, [r5, #0]
 800a84e:	291d      	cmp	r1, #29
 800a850:	d82c      	bhi.n	800a8ac <__sflush_r+0xb8>
 800a852:	4a2a      	ldr	r2, [pc, #168]	; (800a8fc <__sflush_r+0x108>)
 800a854:	40ca      	lsrs	r2, r1
 800a856:	07d6      	lsls	r6, r2, #31
 800a858:	d528      	bpl.n	800a8ac <__sflush_r+0xb8>
 800a85a:	2200      	movs	r2, #0
 800a85c:	6062      	str	r2, [r4, #4]
 800a85e:	04d9      	lsls	r1, r3, #19
 800a860:	6922      	ldr	r2, [r4, #16]
 800a862:	6022      	str	r2, [r4, #0]
 800a864:	d504      	bpl.n	800a870 <__sflush_r+0x7c>
 800a866:	1c42      	adds	r2, r0, #1
 800a868:	d101      	bne.n	800a86e <__sflush_r+0x7a>
 800a86a:	682b      	ldr	r3, [r5, #0]
 800a86c:	b903      	cbnz	r3, 800a870 <__sflush_r+0x7c>
 800a86e:	6560      	str	r0, [r4, #84]	; 0x54
 800a870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a872:	602f      	str	r7, [r5, #0]
 800a874:	2900      	cmp	r1, #0
 800a876:	d0ca      	beq.n	800a80e <__sflush_r+0x1a>
 800a878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a87c:	4299      	cmp	r1, r3
 800a87e:	d002      	beq.n	800a886 <__sflush_r+0x92>
 800a880:	4628      	mov	r0, r5
 800a882:	f000 fc4f 	bl	800b124 <_free_r>
 800a886:	2000      	movs	r0, #0
 800a888:	6360      	str	r0, [r4, #52]	; 0x34
 800a88a:	e7c1      	b.n	800a810 <__sflush_r+0x1c>
 800a88c:	6a21      	ldr	r1, [r4, #32]
 800a88e:	2301      	movs	r3, #1
 800a890:	4628      	mov	r0, r5
 800a892:	47b0      	blx	r6
 800a894:	1c41      	adds	r1, r0, #1
 800a896:	d1c7      	bne.n	800a828 <__sflush_r+0x34>
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d0c4      	beq.n	800a828 <__sflush_r+0x34>
 800a89e:	2b1d      	cmp	r3, #29
 800a8a0:	d001      	beq.n	800a8a6 <__sflush_r+0xb2>
 800a8a2:	2b16      	cmp	r3, #22
 800a8a4:	d101      	bne.n	800a8aa <__sflush_r+0xb6>
 800a8a6:	602f      	str	r7, [r5, #0]
 800a8a8:	e7b1      	b.n	800a80e <__sflush_r+0x1a>
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b0:	81a3      	strh	r3, [r4, #12]
 800a8b2:	e7ad      	b.n	800a810 <__sflush_r+0x1c>
 800a8b4:	690f      	ldr	r7, [r1, #16]
 800a8b6:	2f00      	cmp	r7, #0
 800a8b8:	d0a9      	beq.n	800a80e <__sflush_r+0x1a>
 800a8ba:	0793      	lsls	r3, r2, #30
 800a8bc:	680e      	ldr	r6, [r1, #0]
 800a8be:	bf08      	it	eq
 800a8c0:	694b      	ldreq	r3, [r1, #20]
 800a8c2:	600f      	str	r7, [r1, #0]
 800a8c4:	bf18      	it	ne
 800a8c6:	2300      	movne	r3, #0
 800a8c8:	eba6 0807 	sub.w	r8, r6, r7
 800a8cc:	608b      	str	r3, [r1, #8]
 800a8ce:	f1b8 0f00 	cmp.w	r8, #0
 800a8d2:	dd9c      	ble.n	800a80e <__sflush_r+0x1a>
 800a8d4:	6a21      	ldr	r1, [r4, #32]
 800a8d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8d8:	4643      	mov	r3, r8
 800a8da:	463a      	mov	r2, r7
 800a8dc:	4628      	mov	r0, r5
 800a8de:	47b0      	blx	r6
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	dc06      	bgt.n	800a8f2 <__sflush_r+0xfe>
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ea:	81a3      	strh	r3, [r4, #12]
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f0:	e78e      	b.n	800a810 <__sflush_r+0x1c>
 800a8f2:	4407      	add	r7, r0
 800a8f4:	eba8 0800 	sub.w	r8, r8, r0
 800a8f8:	e7e9      	b.n	800a8ce <__sflush_r+0xda>
 800a8fa:	bf00      	nop
 800a8fc:	20400001 	.word	0x20400001

0800a900 <_fflush_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	690b      	ldr	r3, [r1, #16]
 800a904:	4605      	mov	r5, r0
 800a906:	460c      	mov	r4, r1
 800a908:	b913      	cbnz	r3, 800a910 <_fflush_r+0x10>
 800a90a:	2500      	movs	r5, #0
 800a90c:	4628      	mov	r0, r5
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	b118      	cbz	r0, 800a91a <_fflush_r+0x1a>
 800a912:	6983      	ldr	r3, [r0, #24]
 800a914:	b90b      	cbnz	r3, 800a91a <_fflush_r+0x1a>
 800a916:	f7fe fa17 	bl	8008d48 <__sinit>
 800a91a:	4b14      	ldr	r3, [pc, #80]	; (800a96c <_fflush_r+0x6c>)
 800a91c:	429c      	cmp	r4, r3
 800a91e:	d11b      	bne.n	800a958 <_fflush_r+0x58>
 800a920:	686c      	ldr	r4, [r5, #4]
 800a922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d0ef      	beq.n	800a90a <_fflush_r+0xa>
 800a92a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a92c:	07d0      	lsls	r0, r2, #31
 800a92e:	d404      	bmi.n	800a93a <_fflush_r+0x3a>
 800a930:	0599      	lsls	r1, r3, #22
 800a932:	d402      	bmi.n	800a93a <_fflush_r+0x3a>
 800a934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a936:	f7fe faca 	bl	8008ece <__retarget_lock_acquire_recursive>
 800a93a:	4628      	mov	r0, r5
 800a93c:	4621      	mov	r1, r4
 800a93e:	f7ff ff59 	bl	800a7f4 <__sflush_r>
 800a942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a944:	07da      	lsls	r2, r3, #31
 800a946:	4605      	mov	r5, r0
 800a948:	d4e0      	bmi.n	800a90c <_fflush_r+0xc>
 800a94a:	89a3      	ldrh	r3, [r4, #12]
 800a94c:	059b      	lsls	r3, r3, #22
 800a94e:	d4dd      	bmi.n	800a90c <_fflush_r+0xc>
 800a950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a952:	f7fe fabd 	bl	8008ed0 <__retarget_lock_release_recursive>
 800a956:	e7d9      	b.n	800a90c <_fflush_r+0xc>
 800a958:	4b05      	ldr	r3, [pc, #20]	; (800a970 <_fflush_r+0x70>)
 800a95a:	429c      	cmp	r4, r3
 800a95c:	d101      	bne.n	800a962 <_fflush_r+0x62>
 800a95e:	68ac      	ldr	r4, [r5, #8]
 800a960:	e7df      	b.n	800a922 <_fflush_r+0x22>
 800a962:	4b04      	ldr	r3, [pc, #16]	; (800a974 <_fflush_r+0x74>)
 800a964:	429c      	cmp	r4, r3
 800a966:	bf08      	it	eq
 800a968:	68ec      	ldreq	r4, [r5, #12]
 800a96a:	e7da      	b.n	800a922 <_fflush_r+0x22>
 800a96c:	0800bc8c 	.word	0x0800bc8c
 800a970:	0800bcac 	.word	0x0800bcac
 800a974:	0800bc6c 	.word	0x0800bc6c

0800a978 <_localeconv_r>:
 800a978:	4800      	ldr	r0, [pc, #0]	; (800a97c <_localeconv_r+0x4>)
 800a97a:	4770      	bx	lr
 800a97c:	20000168 	.word	0x20000168

0800a980 <_lseek_r>:
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	4d07      	ldr	r5, [pc, #28]	; (800a9a0 <_lseek_r+0x20>)
 800a984:	4604      	mov	r4, r0
 800a986:	4608      	mov	r0, r1
 800a988:	4611      	mov	r1, r2
 800a98a:	2200      	movs	r2, #0
 800a98c:	602a      	str	r2, [r5, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	f7f7 ff82 	bl	8002898 <_lseek>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	d102      	bne.n	800a99e <_lseek_r+0x1e>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	b103      	cbz	r3, 800a99e <_lseek_r+0x1e>
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	20004590 	.word	0x20004590

0800a9a4 <malloc>:
 800a9a4:	4b02      	ldr	r3, [pc, #8]	; (800a9b0 <malloc+0xc>)
 800a9a6:	4601      	mov	r1, r0
 800a9a8:	6818      	ldr	r0, [r3, #0]
 800a9aa:	f7fe bac9 	b.w	8008f40 <_malloc_r>
 800a9ae:	bf00      	nop
 800a9b0:	20000014 	.word	0x20000014

0800a9b4 <__ascii_mbtowc>:
 800a9b4:	b082      	sub	sp, #8
 800a9b6:	b901      	cbnz	r1, 800a9ba <__ascii_mbtowc+0x6>
 800a9b8:	a901      	add	r1, sp, #4
 800a9ba:	b142      	cbz	r2, 800a9ce <__ascii_mbtowc+0x1a>
 800a9bc:	b14b      	cbz	r3, 800a9d2 <__ascii_mbtowc+0x1e>
 800a9be:	7813      	ldrb	r3, [r2, #0]
 800a9c0:	600b      	str	r3, [r1, #0]
 800a9c2:	7812      	ldrb	r2, [r2, #0]
 800a9c4:	1e10      	subs	r0, r2, #0
 800a9c6:	bf18      	it	ne
 800a9c8:	2001      	movne	r0, #1
 800a9ca:	b002      	add	sp, #8
 800a9cc:	4770      	bx	lr
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	e7fb      	b.n	800a9ca <__ascii_mbtowc+0x16>
 800a9d2:	f06f 0001 	mvn.w	r0, #1
 800a9d6:	e7f8      	b.n	800a9ca <__ascii_mbtowc+0x16>

0800a9d8 <__malloc_lock>:
 800a9d8:	4801      	ldr	r0, [pc, #4]	; (800a9e0 <__malloc_lock+0x8>)
 800a9da:	f7fe ba78 	b.w	8008ece <__retarget_lock_acquire_recursive>
 800a9de:	bf00      	nop
 800a9e0:	20004584 	.word	0x20004584

0800a9e4 <__malloc_unlock>:
 800a9e4:	4801      	ldr	r0, [pc, #4]	; (800a9ec <__malloc_unlock+0x8>)
 800a9e6:	f7fe ba73 	b.w	8008ed0 <__retarget_lock_release_recursive>
 800a9ea:	bf00      	nop
 800a9ec:	20004584 	.word	0x20004584

0800a9f0 <_Balloc>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	b976      	cbnz	r6, 800aa18 <_Balloc+0x28>
 800a9fa:	2010      	movs	r0, #16
 800a9fc:	f7ff ffd2 	bl	800a9a4 <malloc>
 800aa00:	4602      	mov	r2, r0
 800aa02:	6260      	str	r0, [r4, #36]	; 0x24
 800aa04:	b920      	cbnz	r0, 800aa10 <_Balloc+0x20>
 800aa06:	4b18      	ldr	r3, [pc, #96]	; (800aa68 <_Balloc+0x78>)
 800aa08:	4818      	ldr	r0, [pc, #96]	; (800aa6c <_Balloc+0x7c>)
 800aa0a:	2166      	movs	r1, #102	; 0x66
 800aa0c:	f000 ff6c 	bl	800b8e8 <__assert_func>
 800aa10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa14:	6006      	str	r6, [r0, #0]
 800aa16:	60c6      	str	r6, [r0, #12]
 800aa18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa1a:	68f3      	ldr	r3, [r6, #12]
 800aa1c:	b183      	cbz	r3, 800aa40 <_Balloc+0x50>
 800aa1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa26:	b9b8      	cbnz	r0, 800aa58 <_Balloc+0x68>
 800aa28:	2101      	movs	r1, #1
 800aa2a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa2e:	1d72      	adds	r2, r6, #5
 800aa30:	0092      	lsls	r2, r2, #2
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 fb60 	bl	800b0f8 <_calloc_r>
 800aa38:	b160      	cbz	r0, 800aa54 <_Balloc+0x64>
 800aa3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa3e:	e00e      	b.n	800aa5e <_Balloc+0x6e>
 800aa40:	2221      	movs	r2, #33	; 0x21
 800aa42:	2104      	movs	r1, #4
 800aa44:	4620      	mov	r0, r4
 800aa46:	f000 fb57 	bl	800b0f8 <_calloc_r>
 800aa4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa4c:	60f0      	str	r0, [r6, #12]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1e4      	bne.n	800aa1e <_Balloc+0x2e>
 800aa54:	2000      	movs	r0, #0
 800aa56:	bd70      	pop	{r4, r5, r6, pc}
 800aa58:	6802      	ldr	r2, [r0, #0]
 800aa5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa64:	e7f7      	b.n	800aa56 <_Balloc+0x66>
 800aa66:	bf00      	nop
 800aa68:	0800be12 	.word	0x0800be12
 800aa6c:	0800be9f 	.word	0x0800be9f

0800aa70 <_Bfree>:
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa74:	4605      	mov	r5, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	b976      	cbnz	r6, 800aa98 <_Bfree+0x28>
 800aa7a:	2010      	movs	r0, #16
 800aa7c:	f7ff ff92 	bl	800a9a4 <malloc>
 800aa80:	4602      	mov	r2, r0
 800aa82:	6268      	str	r0, [r5, #36]	; 0x24
 800aa84:	b920      	cbnz	r0, 800aa90 <_Bfree+0x20>
 800aa86:	4b09      	ldr	r3, [pc, #36]	; (800aaac <_Bfree+0x3c>)
 800aa88:	4809      	ldr	r0, [pc, #36]	; (800aab0 <_Bfree+0x40>)
 800aa8a:	218a      	movs	r1, #138	; 0x8a
 800aa8c:	f000 ff2c 	bl	800b8e8 <__assert_func>
 800aa90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa94:	6006      	str	r6, [r0, #0]
 800aa96:	60c6      	str	r6, [r0, #12]
 800aa98:	b13c      	cbz	r4, 800aaaa <_Bfree+0x3a>
 800aa9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa9c:	6862      	ldr	r2, [r4, #4]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaa4:	6021      	str	r1, [r4, #0]
 800aaa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aaaa:	bd70      	pop	{r4, r5, r6, pc}
 800aaac:	0800be12 	.word	0x0800be12
 800aab0:	0800be9f 	.word	0x0800be9f

0800aab4 <__multadd>:
 800aab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab8:	690d      	ldr	r5, [r1, #16]
 800aaba:	4607      	mov	r7, r0
 800aabc:	460c      	mov	r4, r1
 800aabe:	461e      	mov	r6, r3
 800aac0:	f101 0c14 	add.w	ip, r1, #20
 800aac4:	2000      	movs	r0, #0
 800aac6:	f8dc 3000 	ldr.w	r3, [ip]
 800aaca:	b299      	uxth	r1, r3
 800aacc:	fb02 6101 	mla	r1, r2, r1, r6
 800aad0:	0c1e      	lsrs	r6, r3, #16
 800aad2:	0c0b      	lsrs	r3, r1, #16
 800aad4:	fb02 3306 	mla	r3, r2, r6, r3
 800aad8:	b289      	uxth	r1, r1
 800aada:	3001      	adds	r0, #1
 800aadc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aae0:	4285      	cmp	r5, r0
 800aae2:	f84c 1b04 	str.w	r1, [ip], #4
 800aae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aaea:	dcec      	bgt.n	800aac6 <__multadd+0x12>
 800aaec:	b30e      	cbz	r6, 800ab32 <__multadd+0x7e>
 800aaee:	68a3      	ldr	r3, [r4, #8]
 800aaf0:	42ab      	cmp	r3, r5
 800aaf2:	dc19      	bgt.n	800ab28 <__multadd+0x74>
 800aaf4:	6861      	ldr	r1, [r4, #4]
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	3101      	adds	r1, #1
 800aafa:	f7ff ff79 	bl	800a9f0 <_Balloc>
 800aafe:	4680      	mov	r8, r0
 800ab00:	b928      	cbnz	r0, 800ab0e <__multadd+0x5a>
 800ab02:	4602      	mov	r2, r0
 800ab04:	4b0c      	ldr	r3, [pc, #48]	; (800ab38 <__multadd+0x84>)
 800ab06:	480d      	ldr	r0, [pc, #52]	; (800ab3c <__multadd+0x88>)
 800ab08:	21b5      	movs	r1, #181	; 0xb5
 800ab0a:	f000 feed 	bl	800b8e8 <__assert_func>
 800ab0e:	6922      	ldr	r2, [r4, #16]
 800ab10:	3202      	adds	r2, #2
 800ab12:	f104 010c 	add.w	r1, r4, #12
 800ab16:	0092      	lsls	r2, r2, #2
 800ab18:	300c      	adds	r0, #12
 800ab1a:	f7fe f9da 	bl	8008ed2 <memcpy>
 800ab1e:	4621      	mov	r1, r4
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7ff ffa5 	bl	800aa70 <_Bfree>
 800ab26:	4644      	mov	r4, r8
 800ab28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab2c:	3501      	adds	r5, #1
 800ab2e:	615e      	str	r6, [r3, #20]
 800ab30:	6125      	str	r5, [r4, #16]
 800ab32:	4620      	mov	r0, r4
 800ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab38:	0800be84 	.word	0x0800be84
 800ab3c:	0800be9f 	.word	0x0800be9f

0800ab40 <__hi0bits>:
 800ab40:	0c03      	lsrs	r3, r0, #16
 800ab42:	041b      	lsls	r3, r3, #16
 800ab44:	b9d3      	cbnz	r3, 800ab7c <__hi0bits+0x3c>
 800ab46:	0400      	lsls	r0, r0, #16
 800ab48:	2310      	movs	r3, #16
 800ab4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab4e:	bf04      	itt	eq
 800ab50:	0200      	lsleq	r0, r0, #8
 800ab52:	3308      	addeq	r3, #8
 800ab54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab58:	bf04      	itt	eq
 800ab5a:	0100      	lsleq	r0, r0, #4
 800ab5c:	3304      	addeq	r3, #4
 800ab5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab62:	bf04      	itt	eq
 800ab64:	0080      	lsleq	r0, r0, #2
 800ab66:	3302      	addeq	r3, #2
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	db05      	blt.n	800ab78 <__hi0bits+0x38>
 800ab6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab70:	f103 0301 	add.w	r3, r3, #1
 800ab74:	bf08      	it	eq
 800ab76:	2320      	moveq	r3, #32
 800ab78:	4618      	mov	r0, r3
 800ab7a:	4770      	bx	lr
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	e7e4      	b.n	800ab4a <__hi0bits+0xa>

0800ab80 <__lo0bits>:
 800ab80:	6803      	ldr	r3, [r0, #0]
 800ab82:	f013 0207 	ands.w	r2, r3, #7
 800ab86:	4601      	mov	r1, r0
 800ab88:	d00b      	beq.n	800aba2 <__lo0bits+0x22>
 800ab8a:	07da      	lsls	r2, r3, #31
 800ab8c:	d423      	bmi.n	800abd6 <__lo0bits+0x56>
 800ab8e:	0798      	lsls	r0, r3, #30
 800ab90:	bf49      	itett	mi
 800ab92:	085b      	lsrmi	r3, r3, #1
 800ab94:	089b      	lsrpl	r3, r3, #2
 800ab96:	2001      	movmi	r0, #1
 800ab98:	600b      	strmi	r3, [r1, #0]
 800ab9a:	bf5c      	itt	pl
 800ab9c:	600b      	strpl	r3, [r1, #0]
 800ab9e:	2002      	movpl	r0, #2
 800aba0:	4770      	bx	lr
 800aba2:	b298      	uxth	r0, r3
 800aba4:	b9a8      	cbnz	r0, 800abd2 <__lo0bits+0x52>
 800aba6:	0c1b      	lsrs	r3, r3, #16
 800aba8:	2010      	movs	r0, #16
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	b90a      	cbnz	r2, 800abb2 <__lo0bits+0x32>
 800abae:	3008      	adds	r0, #8
 800abb0:	0a1b      	lsrs	r3, r3, #8
 800abb2:	071a      	lsls	r2, r3, #28
 800abb4:	bf04      	itt	eq
 800abb6:	091b      	lsreq	r3, r3, #4
 800abb8:	3004      	addeq	r0, #4
 800abba:	079a      	lsls	r2, r3, #30
 800abbc:	bf04      	itt	eq
 800abbe:	089b      	lsreq	r3, r3, #2
 800abc0:	3002      	addeq	r0, #2
 800abc2:	07da      	lsls	r2, r3, #31
 800abc4:	d403      	bmi.n	800abce <__lo0bits+0x4e>
 800abc6:	085b      	lsrs	r3, r3, #1
 800abc8:	f100 0001 	add.w	r0, r0, #1
 800abcc:	d005      	beq.n	800abda <__lo0bits+0x5a>
 800abce:	600b      	str	r3, [r1, #0]
 800abd0:	4770      	bx	lr
 800abd2:	4610      	mov	r0, r2
 800abd4:	e7e9      	b.n	800abaa <__lo0bits+0x2a>
 800abd6:	2000      	movs	r0, #0
 800abd8:	4770      	bx	lr
 800abda:	2020      	movs	r0, #32
 800abdc:	4770      	bx	lr
	...

0800abe0 <__i2b>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	460c      	mov	r4, r1
 800abe4:	2101      	movs	r1, #1
 800abe6:	f7ff ff03 	bl	800a9f0 <_Balloc>
 800abea:	4602      	mov	r2, r0
 800abec:	b928      	cbnz	r0, 800abfa <__i2b+0x1a>
 800abee:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <__i2b+0x24>)
 800abf0:	4805      	ldr	r0, [pc, #20]	; (800ac08 <__i2b+0x28>)
 800abf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800abf6:	f000 fe77 	bl	800b8e8 <__assert_func>
 800abfa:	2301      	movs	r3, #1
 800abfc:	6144      	str	r4, [r0, #20]
 800abfe:	6103      	str	r3, [r0, #16]
 800ac00:	bd10      	pop	{r4, pc}
 800ac02:	bf00      	nop
 800ac04:	0800be84 	.word	0x0800be84
 800ac08:	0800be9f 	.word	0x0800be9f

0800ac0c <__multiply>:
 800ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	4691      	mov	r9, r2
 800ac12:	690a      	ldr	r2, [r1, #16]
 800ac14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	bfb8      	it	lt
 800ac1c:	460b      	movlt	r3, r1
 800ac1e:	460c      	mov	r4, r1
 800ac20:	bfbc      	itt	lt
 800ac22:	464c      	movlt	r4, r9
 800ac24:	4699      	movlt	r9, r3
 800ac26:	6927      	ldr	r7, [r4, #16]
 800ac28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac2c:	68a3      	ldr	r3, [r4, #8]
 800ac2e:	6861      	ldr	r1, [r4, #4]
 800ac30:	eb07 060a 	add.w	r6, r7, sl
 800ac34:	42b3      	cmp	r3, r6
 800ac36:	b085      	sub	sp, #20
 800ac38:	bfb8      	it	lt
 800ac3a:	3101      	addlt	r1, #1
 800ac3c:	f7ff fed8 	bl	800a9f0 <_Balloc>
 800ac40:	b930      	cbnz	r0, 800ac50 <__multiply+0x44>
 800ac42:	4602      	mov	r2, r0
 800ac44:	4b44      	ldr	r3, [pc, #272]	; (800ad58 <__multiply+0x14c>)
 800ac46:	4845      	ldr	r0, [pc, #276]	; (800ad5c <__multiply+0x150>)
 800ac48:	f240 115d 	movw	r1, #349	; 0x15d
 800ac4c:	f000 fe4c 	bl	800b8e8 <__assert_func>
 800ac50:	f100 0514 	add.w	r5, r0, #20
 800ac54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac58:	462b      	mov	r3, r5
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	4543      	cmp	r3, r8
 800ac5e:	d321      	bcc.n	800aca4 <__multiply+0x98>
 800ac60:	f104 0314 	add.w	r3, r4, #20
 800ac64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac68:	f109 0314 	add.w	r3, r9, #20
 800ac6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac70:	9202      	str	r2, [sp, #8]
 800ac72:	1b3a      	subs	r2, r7, r4
 800ac74:	3a15      	subs	r2, #21
 800ac76:	f022 0203 	bic.w	r2, r2, #3
 800ac7a:	3204      	adds	r2, #4
 800ac7c:	f104 0115 	add.w	r1, r4, #21
 800ac80:	428f      	cmp	r7, r1
 800ac82:	bf38      	it	cc
 800ac84:	2204      	movcc	r2, #4
 800ac86:	9201      	str	r2, [sp, #4]
 800ac88:	9a02      	ldr	r2, [sp, #8]
 800ac8a:	9303      	str	r3, [sp, #12]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d80c      	bhi.n	800acaa <__multiply+0x9e>
 800ac90:	2e00      	cmp	r6, #0
 800ac92:	dd03      	ble.n	800ac9c <__multiply+0x90>
 800ac94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d05a      	beq.n	800ad52 <__multiply+0x146>
 800ac9c:	6106      	str	r6, [r0, #16]
 800ac9e:	b005      	add	sp, #20
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca4:	f843 2b04 	str.w	r2, [r3], #4
 800aca8:	e7d8      	b.n	800ac5c <__multiply+0x50>
 800acaa:	f8b3 a000 	ldrh.w	sl, [r3]
 800acae:	f1ba 0f00 	cmp.w	sl, #0
 800acb2:	d024      	beq.n	800acfe <__multiply+0xf2>
 800acb4:	f104 0e14 	add.w	lr, r4, #20
 800acb8:	46a9      	mov	r9, r5
 800acba:	f04f 0c00 	mov.w	ip, #0
 800acbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800acc2:	f8d9 1000 	ldr.w	r1, [r9]
 800acc6:	fa1f fb82 	uxth.w	fp, r2
 800acca:	b289      	uxth	r1, r1
 800accc:	fb0a 110b 	mla	r1, sl, fp, r1
 800acd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800acd4:	f8d9 2000 	ldr.w	r2, [r9]
 800acd8:	4461      	add	r1, ip
 800acda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acde:	fb0a c20b 	mla	r2, sl, fp, ip
 800ace2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ace6:	b289      	uxth	r1, r1
 800ace8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800acec:	4577      	cmp	r7, lr
 800acee:	f849 1b04 	str.w	r1, [r9], #4
 800acf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acf6:	d8e2      	bhi.n	800acbe <__multiply+0xb2>
 800acf8:	9a01      	ldr	r2, [sp, #4]
 800acfa:	f845 c002 	str.w	ip, [r5, r2]
 800acfe:	9a03      	ldr	r2, [sp, #12]
 800ad00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad04:	3304      	adds	r3, #4
 800ad06:	f1b9 0f00 	cmp.w	r9, #0
 800ad0a:	d020      	beq.n	800ad4e <__multiply+0x142>
 800ad0c:	6829      	ldr	r1, [r5, #0]
 800ad0e:	f104 0c14 	add.w	ip, r4, #20
 800ad12:	46ae      	mov	lr, r5
 800ad14:	f04f 0a00 	mov.w	sl, #0
 800ad18:	f8bc b000 	ldrh.w	fp, [ip]
 800ad1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad20:	fb09 220b 	mla	r2, r9, fp, r2
 800ad24:	4492      	add	sl, r2
 800ad26:	b289      	uxth	r1, r1
 800ad28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad2c:	f84e 1b04 	str.w	r1, [lr], #4
 800ad30:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad34:	f8be 1000 	ldrh.w	r1, [lr]
 800ad38:	0c12      	lsrs	r2, r2, #16
 800ad3a:	fb09 1102 	mla	r1, r9, r2, r1
 800ad3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ad42:	4567      	cmp	r7, ip
 800ad44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad48:	d8e6      	bhi.n	800ad18 <__multiply+0x10c>
 800ad4a:	9a01      	ldr	r2, [sp, #4]
 800ad4c:	50a9      	str	r1, [r5, r2]
 800ad4e:	3504      	adds	r5, #4
 800ad50:	e79a      	b.n	800ac88 <__multiply+0x7c>
 800ad52:	3e01      	subs	r6, #1
 800ad54:	e79c      	b.n	800ac90 <__multiply+0x84>
 800ad56:	bf00      	nop
 800ad58:	0800be84 	.word	0x0800be84
 800ad5c:	0800be9f 	.word	0x0800be9f

0800ad60 <__pow5mult>:
 800ad60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad64:	4615      	mov	r5, r2
 800ad66:	f012 0203 	ands.w	r2, r2, #3
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	460f      	mov	r7, r1
 800ad6e:	d007      	beq.n	800ad80 <__pow5mult+0x20>
 800ad70:	4c25      	ldr	r4, [pc, #148]	; (800ae08 <__pow5mult+0xa8>)
 800ad72:	3a01      	subs	r2, #1
 800ad74:	2300      	movs	r3, #0
 800ad76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad7a:	f7ff fe9b 	bl	800aab4 <__multadd>
 800ad7e:	4607      	mov	r7, r0
 800ad80:	10ad      	asrs	r5, r5, #2
 800ad82:	d03d      	beq.n	800ae00 <__pow5mult+0xa0>
 800ad84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad86:	b97c      	cbnz	r4, 800ada8 <__pow5mult+0x48>
 800ad88:	2010      	movs	r0, #16
 800ad8a:	f7ff fe0b 	bl	800a9a4 <malloc>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	6270      	str	r0, [r6, #36]	; 0x24
 800ad92:	b928      	cbnz	r0, 800ada0 <__pow5mult+0x40>
 800ad94:	4b1d      	ldr	r3, [pc, #116]	; (800ae0c <__pow5mult+0xac>)
 800ad96:	481e      	ldr	r0, [pc, #120]	; (800ae10 <__pow5mult+0xb0>)
 800ad98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ad9c:	f000 fda4 	bl	800b8e8 <__assert_func>
 800ada0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ada4:	6004      	str	r4, [r0, #0]
 800ada6:	60c4      	str	r4, [r0, #12]
 800ada8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800adac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adb0:	b94c      	cbnz	r4, 800adc6 <__pow5mult+0x66>
 800adb2:	f240 2171 	movw	r1, #625	; 0x271
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7ff ff12 	bl	800abe0 <__i2b>
 800adbc:	2300      	movs	r3, #0
 800adbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800adc2:	4604      	mov	r4, r0
 800adc4:	6003      	str	r3, [r0, #0]
 800adc6:	f04f 0900 	mov.w	r9, #0
 800adca:	07eb      	lsls	r3, r5, #31
 800adcc:	d50a      	bpl.n	800ade4 <__pow5mult+0x84>
 800adce:	4639      	mov	r1, r7
 800add0:	4622      	mov	r2, r4
 800add2:	4630      	mov	r0, r6
 800add4:	f7ff ff1a 	bl	800ac0c <__multiply>
 800add8:	4639      	mov	r1, r7
 800adda:	4680      	mov	r8, r0
 800addc:	4630      	mov	r0, r6
 800adde:	f7ff fe47 	bl	800aa70 <_Bfree>
 800ade2:	4647      	mov	r7, r8
 800ade4:	106d      	asrs	r5, r5, #1
 800ade6:	d00b      	beq.n	800ae00 <__pow5mult+0xa0>
 800ade8:	6820      	ldr	r0, [r4, #0]
 800adea:	b938      	cbnz	r0, 800adfc <__pow5mult+0x9c>
 800adec:	4622      	mov	r2, r4
 800adee:	4621      	mov	r1, r4
 800adf0:	4630      	mov	r0, r6
 800adf2:	f7ff ff0b 	bl	800ac0c <__multiply>
 800adf6:	6020      	str	r0, [r4, #0]
 800adf8:	f8c0 9000 	str.w	r9, [r0]
 800adfc:	4604      	mov	r4, r0
 800adfe:	e7e4      	b.n	800adca <__pow5mult+0x6a>
 800ae00:	4638      	mov	r0, r7
 800ae02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae06:	bf00      	nop
 800ae08:	0800bff0 	.word	0x0800bff0
 800ae0c:	0800be12 	.word	0x0800be12
 800ae10:	0800be9f 	.word	0x0800be9f

0800ae14 <__lshift>:
 800ae14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae18:	460c      	mov	r4, r1
 800ae1a:	6849      	ldr	r1, [r1, #4]
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae22:	68a3      	ldr	r3, [r4, #8]
 800ae24:	4607      	mov	r7, r0
 800ae26:	4691      	mov	r9, r2
 800ae28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae2c:	f108 0601 	add.w	r6, r8, #1
 800ae30:	42b3      	cmp	r3, r6
 800ae32:	db0b      	blt.n	800ae4c <__lshift+0x38>
 800ae34:	4638      	mov	r0, r7
 800ae36:	f7ff fddb 	bl	800a9f0 <_Balloc>
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	b948      	cbnz	r0, 800ae52 <__lshift+0x3e>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	4b2a      	ldr	r3, [pc, #168]	; (800aeec <__lshift+0xd8>)
 800ae42:	482b      	ldr	r0, [pc, #172]	; (800aef0 <__lshift+0xdc>)
 800ae44:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae48:	f000 fd4e 	bl	800b8e8 <__assert_func>
 800ae4c:	3101      	adds	r1, #1
 800ae4e:	005b      	lsls	r3, r3, #1
 800ae50:	e7ee      	b.n	800ae30 <__lshift+0x1c>
 800ae52:	2300      	movs	r3, #0
 800ae54:	f100 0114 	add.w	r1, r0, #20
 800ae58:	f100 0210 	add.w	r2, r0, #16
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	4553      	cmp	r3, sl
 800ae60:	db37      	blt.n	800aed2 <__lshift+0xbe>
 800ae62:	6920      	ldr	r0, [r4, #16]
 800ae64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae68:	f104 0314 	add.w	r3, r4, #20
 800ae6c:	f019 091f 	ands.w	r9, r9, #31
 800ae70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae78:	d02f      	beq.n	800aeda <__lshift+0xc6>
 800ae7a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae7e:	468a      	mov	sl, r1
 800ae80:	f04f 0c00 	mov.w	ip, #0
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	fa02 f209 	lsl.w	r2, r2, r9
 800ae8a:	ea42 020c 	orr.w	r2, r2, ip
 800ae8e:	f84a 2b04 	str.w	r2, [sl], #4
 800ae92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae96:	4298      	cmp	r0, r3
 800ae98:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ae9c:	d8f2      	bhi.n	800ae84 <__lshift+0x70>
 800ae9e:	1b03      	subs	r3, r0, r4
 800aea0:	3b15      	subs	r3, #21
 800aea2:	f023 0303 	bic.w	r3, r3, #3
 800aea6:	3304      	adds	r3, #4
 800aea8:	f104 0215 	add.w	r2, r4, #21
 800aeac:	4290      	cmp	r0, r2
 800aeae:	bf38      	it	cc
 800aeb0:	2304      	movcc	r3, #4
 800aeb2:	f841 c003 	str.w	ip, [r1, r3]
 800aeb6:	f1bc 0f00 	cmp.w	ip, #0
 800aeba:	d001      	beq.n	800aec0 <__lshift+0xac>
 800aebc:	f108 0602 	add.w	r6, r8, #2
 800aec0:	3e01      	subs	r6, #1
 800aec2:	4638      	mov	r0, r7
 800aec4:	612e      	str	r6, [r5, #16]
 800aec6:	4621      	mov	r1, r4
 800aec8:	f7ff fdd2 	bl	800aa70 <_Bfree>
 800aecc:	4628      	mov	r0, r5
 800aece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed2:	f842 0f04 	str.w	r0, [r2, #4]!
 800aed6:	3301      	adds	r3, #1
 800aed8:	e7c1      	b.n	800ae5e <__lshift+0x4a>
 800aeda:	3904      	subs	r1, #4
 800aedc:	f853 2b04 	ldr.w	r2, [r3], #4
 800aee0:	f841 2f04 	str.w	r2, [r1, #4]!
 800aee4:	4298      	cmp	r0, r3
 800aee6:	d8f9      	bhi.n	800aedc <__lshift+0xc8>
 800aee8:	e7ea      	b.n	800aec0 <__lshift+0xac>
 800aeea:	bf00      	nop
 800aeec:	0800be84 	.word	0x0800be84
 800aef0:	0800be9f 	.word	0x0800be9f

0800aef4 <__mcmp>:
 800aef4:	b530      	push	{r4, r5, lr}
 800aef6:	6902      	ldr	r2, [r0, #16]
 800aef8:	690c      	ldr	r4, [r1, #16]
 800aefa:	1b12      	subs	r2, r2, r4
 800aefc:	d10e      	bne.n	800af1c <__mcmp+0x28>
 800aefe:	f100 0314 	add.w	r3, r0, #20
 800af02:	3114      	adds	r1, #20
 800af04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af14:	42a5      	cmp	r5, r4
 800af16:	d003      	beq.n	800af20 <__mcmp+0x2c>
 800af18:	d305      	bcc.n	800af26 <__mcmp+0x32>
 800af1a:	2201      	movs	r2, #1
 800af1c:	4610      	mov	r0, r2
 800af1e:	bd30      	pop	{r4, r5, pc}
 800af20:	4283      	cmp	r3, r0
 800af22:	d3f3      	bcc.n	800af0c <__mcmp+0x18>
 800af24:	e7fa      	b.n	800af1c <__mcmp+0x28>
 800af26:	f04f 32ff 	mov.w	r2, #4294967295
 800af2a:	e7f7      	b.n	800af1c <__mcmp+0x28>

0800af2c <__mdiff>:
 800af2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af30:	460c      	mov	r4, r1
 800af32:	4606      	mov	r6, r0
 800af34:	4611      	mov	r1, r2
 800af36:	4620      	mov	r0, r4
 800af38:	4690      	mov	r8, r2
 800af3a:	f7ff ffdb 	bl	800aef4 <__mcmp>
 800af3e:	1e05      	subs	r5, r0, #0
 800af40:	d110      	bne.n	800af64 <__mdiff+0x38>
 800af42:	4629      	mov	r1, r5
 800af44:	4630      	mov	r0, r6
 800af46:	f7ff fd53 	bl	800a9f0 <_Balloc>
 800af4a:	b930      	cbnz	r0, 800af5a <__mdiff+0x2e>
 800af4c:	4b3a      	ldr	r3, [pc, #232]	; (800b038 <__mdiff+0x10c>)
 800af4e:	4602      	mov	r2, r0
 800af50:	f240 2132 	movw	r1, #562	; 0x232
 800af54:	4839      	ldr	r0, [pc, #228]	; (800b03c <__mdiff+0x110>)
 800af56:	f000 fcc7 	bl	800b8e8 <__assert_func>
 800af5a:	2301      	movs	r3, #1
 800af5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af64:	bfa4      	itt	ge
 800af66:	4643      	movge	r3, r8
 800af68:	46a0      	movge	r8, r4
 800af6a:	4630      	mov	r0, r6
 800af6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af70:	bfa6      	itte	ge
 800af72:	461c      	movge	r4, r3
 800af74:	2500      	movge	r5, #0
 800af76:	2501      	movlt	r5, #1
 800af78:	f7ff fd3a 	bl	800a9f0 <_Balloc>
 800af7c:	b920      	cbnz	r0, 800af88 <__mdiff+0x5c>
 800af7e:	4b2e      	ldr	r3, [pc, #184]	; (800b038 <__mdiff+0x10c>)
 800af80:	4602      	mov	r2, r0
 800af82:	f44f 7110 	mov.w	r1, #576	; 0x240
 800af86:	e7e5      	b.n	800af54 <__mdiff+0x28>
 800af88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af8c:	6926      	ldr	r6, [r4, #16]
 800af8e:	60c5      	str	r5, [r0, #12]
 800af90:	f104 0914 	add.w	r9, r4, #20
 800af94:	f108 0514 	add.w	r5, r8, #20
 800af98:	f100 0e14 	add.w	lr, r0, #20
 800af9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800afa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800afa4:	f108 0210 	add.w	r2, r8, #16
 800afa8:	46f2      	mov	sl, lr
 800afaa:	2100      	movs	r1, #0
 800afac:	f859 3b04 	ldr.w	r3, [r9], #4
 800afb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800afb4:	fa1f f883 	uxth.w	r8, r3
 800afb8:	fa11 f18b 	uxtah	r1, r1, fp
 800afbc:	0c1b      	lsrs	r3, r3, #16
 800afbe:	eba1 0808 	sub.w	r8, r1, r8
 800afc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800afc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800afca:	fa1f f888 	uxth.w	r8, r8
 800afce:	1419      	asrs	r1, r3, #16
 800afd0:	454e      	cmp	r6, r9
 800afd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800afd6:	f84a 3b04 	str.w	r3, [sl], #4
 800afda:	d8e7      	bhi.n	800afac <__mdiff+0x80>
 800afdc:	1b33      	subs	r3, r6, r4
 800afde:	3b15      	subs	r3, #21
 800afe0:	f023 0303 	bic.w	r3, r3, #3
 800afe4:	3304      	adds	r3, #4
 800afe6:	3415      	adds	r4, #21
 800afe8:	42a6      	cmp	r6, r4
 800afea:	bf38      	it	cc
 800afec:	2304      	movcc	r3, #4
 800afee:	441d      	add	r5, r3
 800aff0:	4473      	add	r3, lr
 800aff2:	469e      	mov	lr, r3
 800aff4:	462e      	mov	r6, r5
 800aff6:	4566      	cmp	r6, ip
 800aff8:	d30e      	bcc.n	800b018 <__mdiff+0xec>
 800affa:	f10c 0203 	add.w	r2, ip, #3
 800affe:	1b52      	subs	r2, r2, r5
 800b000:	f022 0203 	bic.w	r2, r2, #3
 800b004:	3d03      	subs	r5, #3
 800b006:	45ac      	cmp	ip, r5
 800b008:	bf38      	it	cc
 800b00a:	2200      	movcc	r2, #0
 800b00c:	441a      	add	r2, r3
 800b00e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b012:	b17b      	cbz	r3, 800b034 <__mdiff+0x108>
 800b014:	6107      	str	r7, [r0, #16]
 800b016:	e7a3      	b.n	800af60 <__mdiff+0x34>
 800b018:	f856 8b04 	ldr.w	r8, [r6], #4
 800b01c:	fa11 f288 	uxtah	r2, r1, r8
 800b020:	1414      	asrs	r4, r2, #16
 800b022:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b026:	b292      	uxth	r2, r2
 800b028:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b02c:	f84e 2b04 	str.w	r2, [lr], #4
 800b030:	1421      	asrs	r1, r4, #16
 800b032:	e7e0      	b.n	800aff6 <__mdiff+0xca>
 800b034:	3f01      	subs	r7, #1
 800b036:	e7ea      	b.n	800b00e <__mdiff+0xe2>
 800b038:	0800be84 	.word	0x0800be84
 800b03c:	0800be9f 	.word	0x0800be9f

0800b040 <__d2b>:
 800b040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b044:	4689      	mov	r9, r1
 800b046:	2101      	movs	r1, #1
 800b048:	ec57 6b10 	vmov	r6, r7, d0
 800b04c:	4690      	mov	r8, r2
 800b04e:	f7ff fccf 	bl	800a9f0 <_Balloc>
 800b052:	4604      	mov	r4, r0
 800b054:	b930      	cbnz	r0, 800b064 <__d2b+0x24>
 800b056:	4602      	mov	r2, r0
 800b058:	4b25      	ldr	r3, [pc, #148]	; (800b0f0 <__d2b+0xb0>)
 800b05a:	4826      	ldr	r0, [pc, #152]	; (800b0f4 <__d2b+0xb4>)
 800b05c:	f240 310a 	movw	r1, #778	; 0x30a
 800b060:	f000 fc42 	bl	800b8e8 <__assert_func>
 800b064:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b068:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b06c:	bb35      	cbnz	r5, 800b0bc <__d2b+0x7c>
 800b06e:	2e00      	cmp	r6, #0
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	d028      	beq.n	800b0c6 <__d2b+0x86>
 800b074:	4668      	mov	r0, sp
 800b076:	9600      	str	r6, [sp, #0]
 800b078:	f7ff fd82 	bl	800ab80 <__lo0bits>
 800b07c:	9900      	ldr	r1, [sp, #0]
 800b07e:	b300      	cbz	r0, 800b0c2 <__d2b+0x82>
 800b080:	9a01      	ldr	r2, [sp, #4]
 800b082:	f1c0 0320 	rsb	r3, r0, #32
 800b086:	fa02 f303 	lsl.w	r3, r2, r3
 800b08a:	430b      	orrs	r3, r1
 800b08c:	40c2      	lsrs	r2, r0
 800b08e:	6163      	str	r3, [r4, #20]
 800b090:	9201      	str	r2, [sp, #4]
 800b092:	9b01      	ldr	r3, [sp, #4]
 800b094:	61a3      	str	r3, [r4, #24]
 800b096:	2b00      	cmp	r3, #0
 800b098:	bf14      	ite	ne
 800b09a:	2202      	movne	r2, #2
 800b09c:	2201      	moveq	r2, #1
 800b09e:	6122      	str	r2, [r4, #16]
 800b0a0:	b1d5      	cbz	r5, 800b0d8 <__d2b+0x98>
 800b0a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0a6:	4405      	add	r5, r0
 800b0a8:	f8c9 5000 	str.w	r5, [r9]
 800b0ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0b0:	f8c8 0000 	str.w	r0, [r8]
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	b003      	add	sp, #12
 800b0b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0c0:	e7d5      	b.n	800b06e <__d2b+0x2e>
 800b0c2:	6161      	str	r1, [r4, #20]
 800b0c4:	e7e5      	b.n	800b092 <__d2b+0x52>
 800b0c6:	a801      	add	r0, sp, #4
 800b0c8:	f7ff fd5a 	bl	800ab80 <__lo0bits>
 800b0cc:	9b01      	ldr	r3, [sp, #4]
 800b0ce:	6163      	str	r3, [r4, #20]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	6122      	str	r2, [r4, #16]
 800b0d4:	3020      	adds	r0, #32
 800b0d6:	e7e3      	b.n	800b0a0 <__d2b+0x60>
 800b0d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0e0:	f8c9 0000 	str.w	r0, [r9]
 800b0e4:	6918      	ldr	r0, [r3, #16]
 800b0e6:	f7ff fd2b 	bl	800ab40 <__hi0bits>
 800b0ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0ee:	e7df      	b.n	800b0b0 <__d2b+0x70>
 800b0f0:	0800be84 	.word	0x0800be84
 800b0f4:	0800be9f 	.word	0x0800be9f

0800b0f8 <_calloc_r>:
 800b0f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0fa:	fba1 2402 	umull	r2, r4, r1, r2
 800b0fe:	b94c      	cbnz	r4, 800b114 <_calloc_r+0x1c>
 800b100:	4611      	mov	r1, r2
 800b102:	9201      	str	r2, [sp, #4]
 800b104:	f7fd ff1c 	bl	8008f40 <_malloc_r>
 800b108:	9a01      	ldr	r2, [sp, #4]
 800b10a:	4605      	mov	r5, r0
 800b10c:	b930      	cbnz	r0, 800b11c <_calloc_r+0x24>
 800b10e:	4628      	mov	r0, r5
 800b110:	b003      	add	sp, #12
 800b112:	bd30      	pop	{r4, r5, pc}
 800b114:	220c      	movs	r2, #12
 800b116:	6002      	str	r2, [r0, #0]
 800b118:	2500      	movs	r5, #0
 800b11a:	e7f8      	b.n	800b10e <_calloc_r+0x16>
 800b11c:	4621      	mov	r1, r4
 800b11e:	f7fd fee6 	bl	8008eee <memset>
 800b122:	e7f4      	b.n	800b10e <_calloc_r+0x16>

0800b124 <_free_r>:
 800b124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b126:	2900      	cmp	r1, #0
 800b128:	d044      	beq.n	800b1b4 <_free_r+0x90>
 800b12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b12e:	9001      	str	r0, [sp, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	f1a1 0404 	sub.w	r4, r1, #4
 800b136:	bfb8      	it	lt
 800b138:	18e4      	addlt	r4, r4, r3
 800b13a:	f7ff fc4d 	bl	800a9d8 <__malloc_lock>
 800b13e:	4a1e      	ldr	r2, [pc, #120]	; (800b1b8 <_free_r+0x94>)
 800b140:	9801      	ldr	r0, [sp, #4]
 800b142:	6813      	ldr	r3, [r2, #0]
 800b144:	b933      	cbnz	r3, 800b154 <_free_r+0x30>
 800b146:	6063      	str	r3, [r4, #4]
 800b148:	6014      	str	r4, [r2, #0]
 800b14a:	b003      	add	sp, #12
 800b14c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b150:	f7ff bc48 	b.w	800a9e4 <__malloc_unlock>
 800b154:	42a3      	cmp	r3, r4
 800b156:	d908      	bls.n	800b16a <_free_r+0x46>
 800b158:	6825      	ldr	r5, [r4, #0]
 800b15a:	1961      	adds	r1, r4, r5
 800b15c:	428b      	cmp	r3, r1
 800b15e:	bf01      	itttt	eq
 800b160:	6819      	ldreq	r1, [r3, #0]
 800b162:	685b      	ldreq	r3, [r3, #4]
 800b164:	1949      	addeq	r1, r1, r5
 800b166:	6021      	streq	r1, [r4, #0]
 800b168:	e7ed      	b.n	800b146 <_free_r+0x22>
 800b16a:	461a      	mov	r2, r3
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	b10b      	cbz	r3, 800b174 <_free_r+0x50>
 800b170:	42a3      	cmp	r3, r4
 800b172:	d9fa      	bls.n	800b16a <_free_r+0x46>
 800b174:	6811      	ldr	r1, [r2, #0]
 800b176:	1855      	adds	r5, r2, r1
 800b178:	42a5      	cmp	r5, r4
 800b17a:	d10b      	bne.n	800b194 <_free_r+0x70>
 800b17c:	6824      	ldr	r4, [r4, #0]
 800b17e:	4421      	add	r1, r4
 800b180:	1854      	adds	r4, r2, r1
 800b182:	42a3      	cmp	r3, r4
 800b184:	6011      	str	r1, [r2, #0]
 800b186:	d1e0      	bne.n	800b14a <_free_r+0x26>
 800b188:	681c      	ldr	r4, [r3, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	6053      	str	r3, [r2, #4]
 800b18e:	4421      	add	r1, r4
 800b190:	6011      	str	r1, [r2, #0]
 800b192:	e7da      	b.n	800b14a <_free_r+0x26>
 800b194:	d902      	bls.n	800b19c <_free_r+0x78>
 800b196:	230c      	movs	r3, #12
 800b198:	6003      	str	r3, [r0, #0]
 800b19a:	e7d6      	b.n	800b14a <_free_r+0x26>
 800b19c:	6825      	ldr	r5, [r4, #0]
 800b19e:	1961      	adds	r1, r4, r5
 800b1a0:	428b      	cmp	r3, r1
 800b1a2:	bf04      	itt	eq
 800b1a4:	6819      	ldreq	r1, [r3, #0]
 800b1a6:	685b      	ldreq	r3, [r3, #4]
 800b1a8:	6063      	str	r3, [r4, #4]
 800b1aa:	bf04      	itt	eq
 800b1ac:	1949      	addeq	r1, r1, r5
 800b1ae:	6021      	streq	r1, [r4, #0]
 800b1b0:	6054      	str	r4, [r2, #4]
 800b1b2:	e7ca      	b.n	800b14a <_free_r+0x26>
 800b1b4:	b003      	add	sp, #12
 800b1b6:	bd30      	pop	{r4, r5, pc}
 800b1b8:	20004588 	.word	0x20004588

0800b1bc <__ssputs_r>:
 800b1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c0:	688e      	ldr	r6, [r1, #8]
 800b1c2:	429e      	cmp	r6, r3
 800b1c4:	4682      	mov	sl, r0
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	4690      	mov	r8, r2
 800b1ca:	461f      	mov	r7, r3
 800b1cc:	d838      	bhi.n	800b240 <__ssputs_r+0x84>
 800b1ce:	898a      	ldrh	r2, [r1, #12]
 800b1d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1d4:	d032      	beq.n	800b23c <__ssputs_r+0x80>
 800b1d6:	6825      	ldr	r5, [r4, #0]
 800b1d8:	6909      	ldr	r1, [r1, #16]
 800b1da:	eba5 0901 	sub.w	r9, r5, r1
 800b1de:	6965      	ldr	r5, [r4, #20]
 800b1e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	444b      	add	r3, r9
 800b1ec:	106d      	asrs	r5, r5, #1
 800b1ee:	429d      	cmp	r5, r3
 800b1f0:	bf38      	it	cc
 800b1f2:	461d      	movcc	r5, r3
 800b1f4:	0553      	lsls	r3, r2, #21
 800b1f6:	d531      	bpl.n	800b25c <__ssputs_r+0xa0>
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	f7fd fea1 	bl	8008f40 <_malloc_r>
 800b1fe:	4606      	mov	r6, r0
 800b200:	b950      	cbnz	r0, 800b218 <__ssputs_r+0x5c>
 800b202:	230c      	movs	r3, #12
 800b204:	f8ca 3000 	str.w	r3, [sl]
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	f04f 30ff 	mov.w	r0, #4294967295
 800b214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b218:	6921      	ldr	r1, [r4, #16]
 800b21a:	464a      	mov	r2, r9
 800b21c:	f7fd fe59 	bl	8008ed2 <memcpy>
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b22a:	81a3      	strh	r3, [r4, #12]
 800b22c:	6126      	str	r6, [r4, #16]
 800b22e:	6165      	str	r5, [r4, #20]
 800b230:	444e      	add	r6, r9
 800b232:	eba5 0509 	sub.w	r5, r5, r9
 800b236:	6026      	str	r6, [r4, #0]
 800b238:	60a5      	str	r5, [r4, #8]
 800b23a:	463e      	mov	r6, r7
 800b23c:	42be      	cmp	r6, r7
 800b23e:	d900      	bls.n	800b242 <__ssputs_r+0x86>
 800b240:	463e      	mov	r6, r7
 800b242:	6820      	ldr	r0, [r4, #0]
 800b244:	4632      	mov	r2, r6
 800b246:	4641      	mov	r1, r8
 800b248:	f000 fbe4 	bl	800ba14 <memmove>
 800b24c:	68a3      	ldr	r3, [r4, #8]
 800b24e:	1b9b      	subs	r3, r3, r6
 800b250:	60a3      	str	r3, [r4, #8]
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	4433      	add	r3, r6
 800b256:	6023      	str	r3, [r4, #0]
 800b258:	2000      	movs	r0, #0
 800b25a:	e7db      	b.n	800b214 <__ssputs_r+0x58>
 800b25c:	462a      	mov	r2, r5
 800b25e:	f000 fbf3 	bl	800ba48 <_realloc_r>
 800b262:	4606      	mov	r6, r0
 800b264:	2800      	cmp	r0, #0
 800b266:	d1e1      	bne.n	800b22c <__ssputs_r+0x70>
 800b268:	6921      	ldr	r1, [r4, #16]
 800b26a:	4650      	mov	r0, sl
 800b26c:	f7ff ff5a 	bl	800b124 <_free_r>
 800b270:	e7c7      	b.n	800b202 <__ssputs_r+0x46>
	...

0800b274 <_svfiprintf_r>:
 800b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b278:	4698      	mov	r8, r3
 800b27a:	898b      	ldrh	r3, [r1, #12]
 800b27c:	061b      	lsls	r3, r3, #24
 800b27e:	b09d      	sub	sp, #116	; 0x74
 800b280:	4607      	mov	r7, r0
 800b282:	460d      	mov	r5, r1
 800b284:	4614      	mov	r4, r2
 800b286:	d50e      	bpl.n	800b2a6 <_svfiprintf_r+0x32>
 800b288:	690b      	ldr	r3, [r1, #16]
 800b28a:	b963      	cbnz	r3, 800b2a6 <_svfiprintf_r+0x32>
 800b28c:	2140      	movs	r1, #64	; 0x40
 800b28e:	f7fd fe57 	bl	8008f40 <_malloc_r>
 800b292:	6028      	str	r0, [r5, #0]
 800b294:	6128      	str	r0, [r5, #16]
 800b296:	b920      	cbnz	r0, 800b2a2 <_svfiprintf_r+0x2e>
 800b298:	230c      	movs	r3, #12
 800b29a:	603b      	str	r3, [r7, #0]
 800b29c:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a0:	e0d1      	b.n	800b446 <_svfiprintf_r+0x1d2>
 800b2a2:	2340      	movs	r3, #64	; 0x40
 800b2a4:	616b      	str	r3, [r5, #20]
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2aa:	2320      	movs	r3, #32
 800b2ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2b4:	2330      	movs	r3, #48	; 0x30
 800b2b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b460 <_svfiprintf_r+0x1ec>
 800b2ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2be:	f04f 0901 	mov.w	r9, #1
 800b2c2:	4623      	mov	r3, r4
 800b2c4:	469a      	mov	sl, r3
 800b2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ca:	b10a      	cbz	r2, 800b2d0 <_svfiprintf_r+0x5c>
 800b2cc:	2a25      	cmp	r2, #37	; 0x25
 800b2ce:	d1f9      	bne.n	800b2c4 <_svfiprintf_r+0x50>
 800b2d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b2d4:	d00b      	beq.n	800b2ee <_svfiprintf_r+0x7a>
 800b2d6:	465b      	mov	r3, fp
 800b2d8:	4622      	mov	r2, r4
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4638      	mov	r0, r7
 800b2de:	f7ff ff6d 	bl	800b1bc <__ssputs_r>
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	f000 80aa 	beq.w	800b43c <_svfiprintf_r+0x1c8>
 800b2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ea:	445a      	add	r2, fp
 800b2ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f000 80a2 	beq.w	800b43c <_svfiprintf_r+0x1c8>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b2fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b302:	f10a 0a01 	add.w	sl, sl, #1
 800b306:	9304      	str	r3, [sp, #16]
 800b308:	9307      	str	r3, [sp, #28]
 800b30a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b30e:	931a      	str	r3, [sp, #104]	; 0x68
 800b310:	4654      	mov	r4, sl
 800b312:	2205      	movs	r2, #5
 800b314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b318:	4851      	ldr	r0, [pc, #324]	; (800b460 <_svfiprintf_r+0x1ec>)
 800b31a:	f7f4 ff81 	bl	8000220 <memchr>
 800b31e:	9a04      	ldr	r2, [sp, #16]
 800b320:	b9d8      	cbnz	r0, 800b35a <_svfiprintf_r+0xe6>
 800b322:	06d0      	lsls	r0, r2, #27
 800b324:	bf44      	itt	mi
 800b326:	2320      	movmi	r3, #32
 800b328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b32c:	0711      	lsls	r1, r2, #28
 800b32e:	bf44      	itt	mi
 800b330:	232b      	movmi	r3, #43	; 0x2b
 800b332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b336:	f89a 3000 	ldrb.w	r3, [sl]
 800b33a:	2b2a      	cmp	r3, #42	; 0x2a
 800b33c:	d015      	beq.n	800b36a <_svfiprintf_r+0xf6>
 800b33e:	9a07      	ldr	r2, [sp, #28]
 800b340:	4654      	mov	r4, sl
 800b342:	2000      	movs	r0, #0
 800b344:	f04f 0c0a 	mov.w	ip, #10
 800b348:	4621      	mov	r1, r4
 800b34a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b34e:	3b30      	subs	r3, #48	; 0x30
 800b350:	2b09      	cmp	r3, #9
 800b352:	d94e      	bls.n	800b3f2 <_svfiprintf_r+0x17e>
 800b354:	b1b0      	cbz	r0, 800b384 <_svfiprintf_r+0x110>
 800b356:	9207      	str	r2, [sp, #28]
 800b358:	e014      	b.n	800b384 <_svfiprintf_r+0x110>
 800b35a:	eba0 0308 	sub.w	r3, r0, r8
 800b35e:	fa09 f303 	lsl.w	r3, r9, r3
 800b362:	4313      	orrs	r3, r2
 800b364:	9304      	str	r3, [sp, #16]
 800b366:	46a2      	mov	sl, r4
 800b368:	e7d2      	b.n	800b310 <_svfiprintf_r+0x9c>
 800b36a:	9b03      	ldr	r3, [sp, #12]
 800b36c:	1d19      	adds	r1, r3, #4
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	9103      	str	r1, [sp, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	bfbb      	ittet	lt
 800b376:	425b      	neglt	r3, r3
 800b378:	f042 0202 	orrlt.w	r2, r2, #2
 800b37c:	9307      	strge	r3, [sp, #28]
 800b37e:	9307      	strlt	r3, [sp, #28]
 800b380:	bfb8      	it	lt
 800b382:	9204      	strlt	r2, [sp, #16]
 800b384:	7823      	ldrb	r3, [r4, #0]
 800b386:	2b2e      	cmp	r3, #46	; 0x2e
 800b388:	d10c      	bne.n	800b3a4 <_svfiprintf_r+0x130>
 800b38a:	7863      	ldrb	r3, [r4, #1]
 800b38c:	2b2a      	cmp	r3, #42	; 0x2a
 800b38e:	d135      	bne.n	800b3fc <_svfiprintf_r+0x188>
 800b390:	9b03      	ldr	r3, [sp, #12]
 800b392:	1d1a      	adds	r2, r3, #4
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	9203      	str	r2, [sp, #12]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	bfb8      	it	lt
 800b39c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3a0:	3402      	adds	r4, #2
 800b3a2:	9305      	str	r3, [sp, #20]
 800b3a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b470 <_svfiprintf_r+0x1fc>
 800b3a8:	7821      	ldrb	r1, [r4, #0]
 800b3aa:	2203      	movs	r2, #3
 800b3ac:	4650      	mov	r0, sl
 800b3ae:	f7f4 ff37 	bl	8000220 <memchr>
 800b3b2:	b140      	cbz	r0, 800b3c6 <_svfiprintf_r+0x152>
 800b3b4:	2340      	movs	r3, #64	; 0x40
 800b3b6:	eba0 000a 	sub.w	r0, r0, sl
 800b3ba:	fa03 f000 	lsl.w	r0, r3, r0
 800b3be:	9b04      	ldr	r3, [sp, #16]
 800b3c0:	4303      	orrs	r3, r0
 800b3c2:	3401      	adds	r4, #1
 800b3c4:	9304      	str	r3, [sp, #16]
 800b3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ca:	4826      	ldr	r0, [pc, #152]	; (800b464 <_svfiprintf_r+0x1f0>)
 800b3cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3d0:	2206      	movs	r2, #6
 800b3d2:	f7f4 ff25 	bl	8000220 <memchr>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d038      	beq.n	800b44c <_svfiprintf_r+0x1d8>
 800b3da:	4b23      	ldr	r3, [pc, #140]	; (800b468 <_svfiprintf_r+0x1f4>)
 800b3dc:	bb1b      	cbnz	r3, 800b426 <_svfiprintf_r+0x1b2>
 800b3de:	9b03      	ldr	r3, [sp, #12]
 800b3e0:	3307      	adds	r3, #7
 800b3e2:	f023 0307 	bic.w	r3, r3, #7
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	9303      	str	r3, [sp, #12]
 800b3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ec:	4433      	add	r3, r6
 800b3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f0:	e767      	b.n	800b2c2 <_svfiprintf_r+0x4e>
 800b3f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	2001      	movs	r0, #1
 800b3fa:	e7a5      	b.n	800b348 <_svfiprintf_r+0xd4>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	3401      	adds	r4, #1
 800b400:	9305      	str	r3, [sp, #20]
 800b402:	4619      	mov	r1, r3
 800b404:	f04f 0c0a 	mov.w	ip, #10
 800b408:	4620      	mov	r0, r4
 800b40a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b40e:	3a30      	subs	r2, #48	; 0x30
 800b410:	2a09      	cmp	r2, #9
 800b412:	d903      	bls.n	800b41c <_svfiprintf_r+0x1a8>
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0c5      	beq.n	800b3a4 <_svfiprintf_r+0x130>
 800b418:	9105      	str	r1, [sp, #20]
 800b41a:	e7c3      	b.n	800b3a4 <_svfiprintf_r+0x130>
 800b41c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b420:	4604      	mov	r4, r0
 800b422:	2301      	movs	r3, #1
 800b424:	e7f0      	b.n	800b408 <_svfiprintf_r+0x194>
 800b426:	ab03      	add	r3, sp, #12
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	462a      	mov	r2, r5
 800b42c:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <_svfiprintf_r+0x1f8>)
 800b42e:	a904      	add	r1, sp, #16
 800b430:	4638      	mov	r0, r7
 800b432:	f7fd fe99 	bl	8009168 <_printf_float>
 800b436:	1c42      	adds	r2, r0, #1
 800b438:	4606      	mov	r6, r0
 800b43a:	d1d6      	bne.n	800b3ea <_svfiprintf_r+0x176>
 800b43c:	89ab      	ldrh	r3, [r5, #12]
 800b43e:	065b      	lsls	r3, r3, #25
 800b440:	f53f af2c 	bmi.w	800b29c <_svfiprintf_r+0x28>
 800b444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b446:	b01d      	add	sp, #116	; 0x74
 800b448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44c:	ab03      	add	r3, sp, #12
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	462a      	mov	r2, r5
 800b452:	4b06      	ldr	r3, [pc, #24]	; (800b46c <_svfiprintf_r+0x1f8>)
 800b454:	a904      	add	r1, sp, #16
 800b456:	4638      	mov	r0, r7
 800b458:	f7fe f92a 	bl	80096b0 <_printf_i>
 800b45c:	e7eb      	b.n	800b436 <_svfiprintf_r+0x1c2>
 800b45e:	bf00      	nop
 800b460:	0800bffc 	.word	0x0800bffc
 800b464:	0800c006 	.word	0x0800c006
 800b468:	08009169 	.word	0x08009169
 800b46c:	0800b1bd 	.word	0x0800b1bd
 800b470:	0800c002 	.word	0x0800c002

0800b474 <__sfputc_r>:
 800b474:	6893      	ldr	r3, [r2, #8]
 800b476:	3b01      	subs	r3, #1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	b410      	push	{r4}
 800b47c:	6093      	str	r3, [r2, #8]
 800b47e:	da08      	bge.n	800b492 <__sfputc_r+0x1e>
 800b480:	6994      	ldr	r4, [r2, #24]
 800b482:	42a3      	cmp	r3, r4
 800b484:	db01      	blt.n	800b48a <__sfputc_r+0x16>
 800b486:	290a      	cmp	r1, #10
 800b488:	d103      	bne.n	800b492 <__sfputc_r+0x1e>
 800b48a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b48e:	f000 b95d 	b.w	800b74c <__swbuf_r>
 800b492:	6813      	ldr	r3, [r2, #0]
 800b494:	1c58      	adds	r0, r3, #1
 800b496:	6010      	str	r0, [r2, #0]
 800b498:	7019      	strb	r1, [r3, #0]
 800b49a:	4608      	mov	r0, r1
 800b49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <__sfputs_r>:
 800b4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a4:	4606      	mov	r6, r0
 800b4a6:	460f      	mov	r7, r1
 800b4a8:	4614      	mov	r4, r2
 800b4aa:	18d5      	adds	r5, r2, r3
 800b4ac:	42ac      	cmp	r4, r5
 800b4ae:	d101      	bne.n	800b4b4 <__sfputs_r+0x12>
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	e007      	b.n	800b4c4 <__sfputs_r+0x22>
 800b4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b8:	463a      	mov	r2, r7
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7ff ffda 	bl	800b474 <__sfputc_r>
 800b4c0:	1c43      	adds	r3, r0, #1
 800b4c2:	d1f3      	bne.n	800b4ac <__sfputs_r+0xa>
 800b4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4c8 <_vfiprintf_r>:
 800b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4cc:	460d      	mov	r5, r1
 800b4ce:	b09d      	sub	sp, #116	; 0x74
 800b4d0:	4614      	mov	r4, r2
 800b4d2:	4698      	mov	r8, r3
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	b118      	cbz	r0, 800b4e0 <_vfiprintf_r+0x18>
 800b4d8:	6983      	ldr	r3, [r0, #24]
 800b4da:	b90b      	cbnz	r3, 800b4e0 <_vfiprintf_r+0x18>
 800b4dc:	f7fd fc34 	bl	8008d48 <__sinit>
 800b4e0:	4b89      	ldr	r3, [pc, #548]	; (800b708 <_vfiprintf_r+0x240>)
 800b4e2:	429d      	cmp	r5, r3
 800b4e4:	d11b      	bne.n	800b51e <_vfiprintf_r+0x56>
 800b4e6:	6875      	ldr	r5, [r6, #4]
 800b4e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4ea:	07d9      	lsls	r1, r3, #31
 800b4ec:	d405      	bmi.n	800b4fa <_vfiprintf_r+0x32>
 800b4ee:	89ab      	ldrh	r3, [r5, #12]
 800b4f0:	059a      	lsls	r2, r3, #22
 800b4f2:	d402      	bmi.n	800b4fa <_vfiprintf_r+0x32>
 800b4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4f6:	f7fd fcea 	bl	8008ece <__retarget_lock_acquire_recursive>
 800b4fa:	89ab      	ldrh	r3, [r5, #12]
 800b4fc:	071b      	lsls	r3, r3, #28
 800b4fe:	d501      	bpl.n	800b504 <_vfiprintf_r+0x3c>
 800b500:	692b      	ldr	r3, [r5, #16]
 800b502:	b9eb      	cbnz	r3, 800b540 <_vfiprintf_r+0x78>
 800b504:	4629      	mov	r1, r5
 800b506:	4630      	mov	r0, r6
 800b508:	f000 f980 	bl	800b80c <__swsetup_r>
 800b50c:	b1c0      	cbz	r0, 800b540 <_vfiprintf_r+0x78>
 800b50e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b510:	07dc      	lsls	r4, r3, #31
 800b512:	d50e      	bpl.n	800b532 <_vfiprintf_r+0x6a>
 800b514:	f04f 30ff 	mov.w	r0, #4294967295
 800b518:	b01d      	add	sp, #116	; 0x74
 800b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51e:	4b7b      	ldr	r3, [pc, #492]	; (800b70c <_vfiprintf_r+0x244>)
 800b520:	429d      	cmp	r5, r3
 800b522:	d101      	bne.n	800b528 <_vfiprintf_r+0x60>
 800b524:	68b5      	ldr	r5, [r6, #8]
 800b526:	e7df      	b.n	800b4e8 <_vfiprintf_r+0x20>
 800b528:	4b79      	ldr	r3, [pc, #484]	; (800b710 <_vfiprintf_r+0x248>)
 800b52a:	429d      	cmp	r5, r3
 800b52c:	bf08      	it	eq
 800b52e:	68f5      	ldreq	r5, [r6, #12]
 800b530:	e7da      	b.n	800b4e8 <_vfiprintf_r+0x20>
 800b532:	89ab      	ldrh	r3, [r5, #12]
 800b534:	0598      	lsls	r0, r3, #22
 800b536:	d4ed      	bmi.n	800b514 <_vfiprintf_r+0x4c>
 800b538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b53a:	f7fd fcc9 	bl	8008ed0 <__retarget_lock_release_recursive>
 800b53e:	e7e9      	b.n	800b514 <_vfiprintf_r+0x4c>
 800b540:	2300      	movs	r3, #0
 800b542:	9309      	str	r3, [sp, #36]	; 0x24
 800b544:	2320      	movs	r3, #32
 800b546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b54a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b54e:	2330      	movs	r3, #48	; 0x30
 800b550:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b714 <_vfiprintf_r+0x24c>
 800b554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b558:	f04f 0901 	mov.w	r9, #1
 800b55c:	4623      	mov	r3, r4
 800b55e:	469a      	mov	sl, r3
 800b560:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b564:	b10a      	cbz	r2, 800b56a <_vfiprintf_r+0xa2>
 800b566:	2a25      	cmp	r2, #37	; 0x25
 800b568:	d1f9      	bne.n	800b55e <_vfiprintf_r+0x96>
 800b56a:	ebba 0b04 	subs.w	fp, sl, r4
 800b56e:	d00b      	beq.n	800b588 <_vfiprintf_r+0xc0>
 800b570:	465b      	mov	r3, fp
 800b572:	4622      	mov	r2, r4
 800b574:	4629      	mov	r1, r5
 800b576:	4630      	mov	r0, r6
 800b578:	f7ff ff93 	bl	800b4a2 <__sfputs_r>
 800b57c:	3001      	adds	r0, #1
 800b57e:	f000 80aa 	beq.w	800b6d6 <_vfiprintf_r+0x20e>
 800b582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b584:	445a      	add	r2, fp
 800b586:	9209      	str	r2, [sp, #36]	; 0x24
 800b588:	f89a 3000 	ldrb.w	r3, [sl]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 80a2 	beq.w	800b6d6 <_vfiprintf_r+0x20e>
 800b592:	2300      	movs	r3, #0
 800b594:	f04f 32ff 	mov.w	r2, #4294967295
 800b598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b59c:	f10a 0a01 	add.w	sl, sl, #1
 800b5a0:	9304      	str	r3, [sp, #16]
 800b5a2:	9307      	str	r3, [sp, #28]
 800b5a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5a8:	931a      	str	r3, [sp, #104]	; 0x68
 800b5aa:	4654      	mov	r4, sl
 800b5ac:	2205      	movs	r2, #5
 800b5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b2:	4858      	ldr	r0, [pc, #352]	; (800b714 <_vfiprintf_r+0x24c>)
 800b5b4:	f7f4 fe34 	bl	8000220 <memchr>
 800b5b8:	9a04      	ldr	r2, [sp, #16]
 800b5ba:	b9d8      	cbnz	r0, 800b5f4 <_vfiprintf_r+0x12c>
 800b5bc:	06d1      	lsls	r1, r2, #27
 800b5be:	bf44      	itt	mi
 800b5c0:	2320      	movmi	r3, #32
 800b5c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5c6:	0713      	lsls	r3, r2, #28
 800b5c8:	bf44      	itt	mi
 800b5ca:	232b      	movmi	r3, #43	; 0x2b
 800b5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d6:	d015      	beq.n	800b604 <_vfiprintf_r+0x13c>
 800b5d8:	9a07      	ldr	r2, [sp, #28]
 800b5da:	4654      	mov	r4, sl
 800b5dc:	2000      	movs	r0, #0
 800b5de:	f04f 0c0a 	mov.w	ip, #10
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5e8:	3b30      	subs	r3, #48	; 0x30
 800b5ea:	2b09      	cmp	r3, #9
 800b5ec:	d94e      	bls.n	800b68c <_vfiprintf_r+0x1c4>
 800b5ee:	b1b0      	cbz	r0, 800b61e <_vfiprintf_r+0x156>
 800b5f0:	9207      	str	r2, [sp, #28]
 800b5f2:	e014      	b.n	800b61e <_vfiprintf_r+0x156>
 800b5f4:	eba0 0308 	sub.w	r3, r0, r8
 800b5f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	9304      	str	r3, [sp, #16]
 800b600:	46a2      	mov	sl, r4
 800b602:	e7d2      	b.n	800b5aa <_vfiprintf_r+0xe2>
 800b604:	9b03      	ldr	r3, [sp, #12]
 800b606:	1d19      	adds	r1, r3, #4
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	9103      	str	r1, [sp, #12]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	bfbb      	ittet	lt
 800b610:	425b      	neglt	r3, r3
 800b612:	f042 0202 	orrlt.w	r2, r2, #2
 800b616:	9307      	strge	r3, [sp, #28]
 800b618:	9307      	strlt	r3, [sp, #28]
 800b61a:	bfb8      	it	lt
 800b61c:	9204      	strlt	r2, [sp, #16]
 800b61e:	7823      	ldrb	r3, [r4, #0]
 800b620:	2b2e      	cmp	r3, #46	; 0x2e
 800b622:	d10c      	bne.n	800b63e <_vfiprintf_r+0x176>
 800b624:	7863      	ldrb	r3, [r4, #1]
 800b626:	2b2a      	cmp	r3, #42	; 0x2a
 800b628:	d135      	bne.n	800b696 <_vfiprintf_r+0x1ce>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	1d1a      	adds	r2, r3, #4
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	9203      	str	r2, [sp, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	bfb8      	it	lt
 800b636:	f04f 33ff 	movlt.w	r3, #4294967295
 800b63a:	3402      	adds	r4, #2
 800b63c:	9305      	str	r3, [sp, #20]
 800b63e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b724 <_vfiprintf_r+0x25c>
 800b642:	7821      	ldrb	r1, [r4, #0]
 800b644:	2203      	movs	r2, #3
 800b646:	4650      	mov	r0, sl
 800b648:	f7f4 fdea 	bl	8000220 <memchr>
 800b64c:	b140      	cbz	r0, 800b660 <_vfiprintf_r+0x198>
 800b64e:	2340      	movs	r3, #64	; 0x40
 800b650:	eba0 000a 	sub.w	r0, r0, sl
 800b654:	fa03 f000 	lsl.w	r0, r3, r0
 800b658:	9b04      	ldr	r3, [sp, #16]
 800b65a:	4303      	orrs	r3, r0
 800b65c:	3401      	adds	r4, #1
 800b65e:	9304      	str	r3, [sp, #16]
 800b660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b664:	482c      	ldr	r0, [pc, #176]	; (800b718 <_vfiprintf_r+0x250>)
 800b666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b66a:	2206      	movs	r2, #6
 800b66c:	f7f4 fdd8 	bl	8000220 <memchr>
 800b670:	2800      	cmp	r0, #0
 800b672:	d03f      	beq.n	800b6f4 <_vfiprintf_r+0x22c>
 800b674:	4b29      	ldr	r3, [pc, #164]	; (800b71c <_vfiprintf_r+0x254>)
 800b676:	bb1b      	cbnz	r3, 800b6c0 <_vfiprintf_r+0x1f8>
 800b678:	9b03      	ldr	r3, [sp, #12]
 800b67a:	3307      	adds	r3, #7
 800b67c:	f023 0307 	bic.w	r3, r3, #7
 800b680:	3308      	adds	r3, #8
 800b682:	9303      	str	r3, [sp, #12]
 800b684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b686:	443b      	add	r3, r7
 800b688:	9309      	str	r3, [sp, #36]	; 0x24
 800b68a:	e767      	b.n	800b55c <_vfiprintf_r+0x94>
 800b68c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b690:	460c      	mov	r4, r1
 800b692:	2001      	movs	r0, #1
 800b694:	e7a5      	b.n	800b5e2 <_vfiprintf_r+0x11a>
 800b696:	2300      	movs	r3, #0
 800b698:	3401      	adds	r4, #1
 800b69a:	9305      	str	r3, [sp, #20]
 800b69c:	4619      	mov	r1, r3
 800b69e:	f04f 0c0a 	mov.w	ip, #10
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6a8:	3a30      	subs	r2, #48	; 0x30
 800b6aa:	2a09      	cmp	r2, #9
 800b6ac:	d903      	bls.n	800b6b6 <_vfiprintf_r+0x1ee>
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d0c5      	beq.n	800b63e <_vfiprintf_r+0x176>
 800b6b2:	9105      	str	r1, [sp, #20]
 800b6b4:	e7c3      	b.n	800b63e <_vfiprintf_r+0x176>
 800b6b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e7f0      	b.n	800b6a2 <_vfiprintf_r+0x1da>
 800b6c0:	ab03      	add	r3, sp, #12
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	462a      	mov	r2, r5
 800b6c6:	4b16      	ldr	r3, [pc, #88]	; (800b720 <_vfiprintf_r+0x258>)
 800b6c8:	a904      	add	r1, sp, #16
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	f7fd fd4c 	bl	8009168 <_printf_float>
 800b6d0:	4607      	mov	r7, r0
 800b6d2:	1c78      	adds	r0, r7, #1
 800b6d4:	d1d6      	bne.n	800b684 <_vfiprintf_r+0x1bc>
 800b6d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6d8:	07d9      	lsls	r1, r3, #31
 800b6da:	d405      	bmi.n	800b6e8 <_vfiprintf_r+0x220>
 800b6dc:	89ab      	ldrh	r3, [r5, #12]
 800b6de:	059a      	lsls	r2, r3, #22
 800b6e0:	d402      	bmi.n	800b6e8 <_vfiprintf_r+0x220>
 800b6e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6e4:	f7fd fbf4 	bl	8008ed0 <__retarget_lock_release_recursive>
 800b6e8:	89ab      	ldrh	r3, [r5, #12]
 800b6ea:	065b      	lsls	r3, r3, #25
 800b6ec:	f53f af12 	bmi.w	800b514 <_vfiprintf_r+0x4c>
 800b6f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6f2:	e711      	b.n	800b518 <_vfiprintf_r+0x50>
 800b6f4:	ab03      	add	r3, sp, #12
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	462a      	mov	r2, r5
 800b6fa:	4b09      	ldr	r3, [pc, #36]	; (800b720 <_vfiprintf_r+0x258>)
 800b6fc:	a904      	add	r1, sp, #16
 800b6fe:	4630      	mov	r0, r6
 800b700:	f7fd ffd6 	bl	80096b0 <_printf_i>
 800b704:	e7e4      	b.n	800b6d0 <_vfiprintf_r+0x208>
 800b706:	bf00      	nop
 800b708:	0800bc8c 	.word	0x0800bc8c
 800b70c:	0800bcac 	.word	0x0800bcac
 800b710:	0800bc6c 	.word	0x0800bc6c
 800b714:	0800bffc 	.word	0x0800bffc
 800b718:	0800c006 	.word	0x0800c006
 800b71c:	08009169 	.word	0x08009169
 800b720:	0800b4a3 	.word	0x0800b4a3
 800b724:	0800c002 	.word	0x0800c002

0800b728 <_read_r>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	4d07      	ldr	r5, [pc, #28]	; (800b748 <_read_r+0x20>)
 800b72c:	4604      	mov	r4, r0
 800b72e:	4608      	mov	r0, r1
 800b730:	4611      	mov	r1, r2
 800b732:	2200      	movs	r2, #0
 800b734:	602a      	str	r2, [r5, #0]
 800b736:	461a      	mov	r2, r3
 800b738:	f7f7 f84e 	bl	80027d8 <_read>
 800b73c:	1c43      	adds	r3, r0, #1
 800b73e:	d102      	bne.n	800b746 <_read_r+0x1e>
 800b740:	682b      	ldr	r3, [r5, #0]
 800b742:	b103      	cbz	r3, 800b746 <_read_r+0x1e>
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	bd38      	pop	{r3, r4, r5, pc}
 800b748:	20004590 	.word	0x20004590

0800b74c <__swbuf_r>:
 800b74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74e:	460e      	mov	r6, r1
 800b750:	4614      	mov	r4, r2
 800b752:	4605      	mov	r5, r0
 800b754:	b118      	cbz	r0, 800b75e <__swbuf_r+0x12>
 800b756:	6983      	ldr	r3, [r0, #24]
 800b758:	b90b      	cbnz	r3, 800b75e <__swbuf_r+0x12>
 800b75a:	f7fd faf5 	bl	8008d48 <__sinit>
 800b75e:	4b21      	ldr	r3, [pc, #132]	; (800b7e4 <__swbuf_r+0x98>)
 800b760:	429c      	cmp	r4, r3
 800b762:	d12b      	bne.n	800b7bc <__swbuf_r+0x70>
 800b764:	686c      	ldr	r4, [r5, #4]
 800b766:	69a3      	ldr	r3, [r4, #24]
 800b768:	60a3      	str	r3, [r4, #8]
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	071a      	lsls	r2, r3, #28
 800b76e:	d52f      	bpl.n	800b7d0 <__swbuf_r+0x84>
 800b770:	6923      	ldr	r3, [r4, #16]
 800b772:	b36b      	cbz	r3, 800b7d0 <__swbuf_r+0x84>
 800b774:	6923      	ldr	r3, [r4, #16]
 800b776:	6820      	ldr	r0, [r4, #0]
 800b778:	1ac0      	subs	r0, r0, r3
 800b77a:	6963      	ldr	r3, [r4, #20]
 800b77c:	b2f6      	uxtb	r6, r6
 800b77e:	4283      	cmp	r3, r0
 800b780:	4637      	mov	r7, r6
 800b782:	dc04      	bgt.n	800b78e <__swbuf_r+0x42>
 800b784:	4621      	mov	r1, r4
 800b786:	4628      	mov	r0, r5
 800b788:	f7ff f8ba 	bl	800a900 <_fflush_r>
 800b78c:	bb30      	cbnz	r0, 800b7dc <__swbuf_r+0x90>
 800b78e:	68a3      	ldr	r3, [r4, #8]
 800b790:	3b01      	subs	r3, #1
 800b792:	60a3      	str	r3, [r4, #8]
 800b794:	6823      	ldr	r3, [r4, #0]
 800b796:	1c5a      	adds	r2, r3, #1
 800b798:	6022      	str	r2, [r4, #0]
 800b79a:	701e      	strb	r6, [r3, #0]
 800b79c:	6963      	ldr	r3, [r4, #20]
 800b79e:	3001      	adds	r0, #1
 800b7a0:	4283      	cmp	r3, r0
 800b7a2:	d004      	beq.n	800b7ae <__swbuf_r+0x62>
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	07db      	lsls	r3, r3, #31
 800b7a8:	d506      	bpl.n	800b7b8 <__swbuf_r+0x6c>
 800b7aa:	2e0a      	cmp	r6, #10
 800b7ac:	d104      	bne.n	800b7b8 <__swbuf_r+0x6c>
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	f7ff f8a5 	bl	800a900 <_fflush_r>
 800b7b6:	b988      	cbnz	r0, 800b7dc <__swbuf_r+0x90>
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7bc:	4b0a      	ldr	r3, [pc, #40]	; (800b7e8 <__swbuf_r+0x9c>)
 800b7be:	429c      	cmp	r4, r3
 800b7c0:	d101      	bne.n	800b7c6 <__swbuf_r+0x7a>
 800b7c2:	68ac      	ldr	r4, [r5, #8]
 800b7c4:	e7cf      	b.n	800b766 <__swbuf_r+0x1a>
 800b7c6:	4b09      	ldr	r3, [pc, #36]	; (800b7ec <__swbuf_r+0xa0>)
 800b7c8:	429c      	cmp	r4, r3
 800b7ca:	bf08      	it	eq
 800b7cc:	68ec      	ldreq	r4, [r5, #12]
 800b7ce:	e7ca      	b.n	800b766 <__swbuf_r+0x1a>
 800b7d0:	4621      	mov	r1, r4
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	f000 f81a 	bl	800b80c <__swsetup_r>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d0cb      	beq.n	800b774 <__swbuf_r+0x28>
 800b7dc:	f04f 37ff 	mov.w	r7, #4294967295
 800b7e0:	e7ea      	b.n	800b7b8 <__swbuf_r+0x6c>
 800b7e2:	bf00      	nop
 800b7e4:	0800bc8c 	.word	0x0800bc8c
 800b7e8:	0800bcac 	.word	0x0800bcac
 800b7ec:	0800bc6c 	.word	0x0800bc6c

0800b7f0 <__ascii_wctomb>:
 800b7f0:	b149      	cbz	r1, 800b806 <__ascii_wctomb+0x16>
 800b7f2:	2aff      	cmp	r2, #255	; 0xff
 800b7f4:	bf85      	ittet	hi
 800b7f6:	238a      	movhi	r3, #138	; 0x8a
 800b7f8:	6003      	strhi	r3, [r0, #0]
 800b7fa:	700a      	strbls	r2, [r1, #0]
 800b7fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800b800:	bf98      	it	ls
 800b802:	2001      	movls	r0, #1
 800b804:	4770      	bx	lr
 800b806:	4608      	mov	r0, r1
 800b808:	4770      	bx	lr
	...

0800b80c <__swsetup_r>:
 800b80c:	4b32      	ldr	r3, [pc, #200]	; (800b8d8 <__swsetup_r+0xcc>)
 800b80e:	b570      	push	{r4, r5, r6, lr}
 800b810:	681d      	ldr	r5, [r3, #0]
 800b812:	4606      	mov	r6, r0
 800b814:	460c      	mov	r4, r1
 800b816:	b125      	cbz	r5, 800b822 <__swsetup_r+0x16>
 800b818:	69ab      	ldr	r3, [r5, #24]
 800b81a:	b913      	cbnz	r3, 800b822 <__swsetup_r+0x16>
 800b81c:	4628      	mov	r0, r5
 800b81e:	f7fd fa93 	bl	8008d48 <__sinit>
 800b822:	4b2e      	ldr	r3, [pc, #184]	; (800b8dc <__swsetup_r+0xd0>)
 800b824:	429c      	cmp	r4, r3
 800b826:	d10f      	bne.n	800b848 <__swsetup_r+0x3c>
 800b828:	686c      	ldr	r4, [r5, #4]
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b830:	0719      	lsls	r1, r3, #28
 800b832:	d42c      	bmi.n	800b88e <__swsetup_r+0x82>
 800b834:	06dd      	lsls	r5, r3, #27
 800b836:	d411      	bmi.n	800b85c <__swsetup_r+0x50>
 800b838:	2309      	movs	r3, #9
 800b83a:	6033      	str	r3, [r6, #0]
 800b83c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b840:	81a3      	strh	r3, [r4, #12]
 800b842:	f04f 30ff 	mov.w	r0, #4294967295
 800b846:	e03e      	b.n	800b8c6 <__swsetup_r+0xba>
 800b848:	4b25      	ldr	r3, [pc, #148]	; (800b8e0 <__swsetup_r+0xd4>)
 800b84a:	429c      	cmp	r4, r3
 800b84c:	d101      	bne.n	800b852 <__swsetup_r+0x46>
 800b84e:	68ac      	ldr	r4, [r5, #8]
 800b850:	e7eb      	b.n	800b82a <__swsetup_r+0x1e>
 800b852:	4b24      	ldr	r3, [pc, #144]	; (800b8e4 <__swsetup_r+0xd8>)
 800b854:	429c      	cmp	r4, r3
 800b856:	bf08      	it	eq
 800b858:	68ec      	ldreq	r4, [r5, #12]
 800b85a:	e7e6      	b.n	800b82a <__swsetup_r+0x1e>
 800b85c:	0758      	lsls	r0, r3, #29
 800b85e:	d512      	bpl.n	800b886 <__swsetup_r+0x7a>
 800b860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b862:	b141      	cbz	r1, 800b876 <__swsetup_r+0x6a>
 800b864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b868:	4299      	cmp	r1, r3
 800b86a:	d002      	beq.n	800b872 <__swsetup_r+0x66>
 800b86c:	4630      	mov	r0, r6
 800b86e:	f7ff fc59 	bl	800b124 <_free_r>
 800b872:	2300      	movs	r3, #0
 800b874:	6363      	str	r3, [r4, #52]	; 0x34
 800b876:	89a3      	ldrh	r3, [r4, #12]
 800b878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b87c:	81a3      	strh	r3, [r4, #12]
 800b87e:	2300      	movs	r3, #0
 800b880:	6063      	str	r3, [r4, #4]
 800b882:	6923      	ldr	r3, [r4, #16]
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	89a3      	ldrh	r3, [r4, #12]
 800b888:	f043 0308 	orr.w	r3, r3, #8
 800b88c:	81a3      	strh	r3, [r4, #12]
 800b88e:	6923      	ldr	r3, [r4, #16]
 800b890:	b94b      	cbnz	r3, 800b8a6 <__swsetup_r+0x9a>
 800b892:	89a3      	ldrh	r3, [r4, #12]
 800b894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b89c:	d003      	beq.n	800b8a6 <__swsetup_r+0x9a>
 800b89e:	4621      	mov	r1, r4
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f000 f877 	bl	800b994 <__smakebuf_r>
 800b8a6:	89a0      	ldrh	r0, [r4, #12]
 800b8a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8ac:	f010 0301 	ands.w	r3, r0, #1
 800b8b0:	d00a      	beq.n	800b8c8 <__swsetup_r+0xbc>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60a3      	str	r3, [r4, #8]
 800b8b6:	6963      	ldr	r3, [r4, #20]
 800b8b8:	425b      	negs	r3, r3
 800b8ba:	61a3      	str	r3, [r4, #24]
 800b8bc:	6923      	ldr	r3, [r4, #16]
 800b8be:	b943      	cbnz	r3, 800b8d2 <__swsetup_r+0xc6>
 800b8c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8c4:	d1ba      	bne.n	800b83c <__swsetup_r+0x30>
 800b8c6:	bd70      	pop	{r4, r5, r6, pc}
 800b8c8:	0781      	lsls	r1, r0, #30
 800b8ca:	bf58      	it	pl
 800b8cc:	6963      	ldrpl	r3, [r4, #20]
 800b8ce:	60a3      	str	r3, [r4, #8]
 800b8d0:	e7f4      	b.n	800b8bc <__swsetup_r+0xb0>
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	e7f7      	b.n	800b8c6 <__swsetup_r+0xba>
 800b8d6:	bf00      	nop
 800b8d8:	20000014 	.word	0x20000014
 800b8dc:	0800bc8c 	.word	0x0800bc8c
 800b8e0:	0800bcac 	.word	0x0800bcac
 800b8e4:	0800bc6c 	.word	0x0800bc6c

0800b8e8 <__assert_func>:
 800b8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8ea:	4614      	mov	r4, r2
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	4b09      	ldr	r3, [pc, #36]	; (800b914 <__assert_func+0x2c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	68d8      	ldr	r0, [r3, #12]
 800b8f6:	b14c      	cbz	r4, 800b90c <__assert_func+0x24>
 800b8f8:	4b07      	ldr	r3, [pc, #28]	; (800b918 <__assert_func+0x30>)
 800b8fa:	9100      	str	r1, [sp, #0]
 800b8fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b900:	4906      	ldr	r1, [pc, #24]	; (800b91c <__assert_func+0x34>)
 800b902:	462b      	mov	r3, r5
 800b904:	f000 f80e 	bl	800b924 <fiprintf>
 800b908:	f000 f8cd 	bl	800baa6 <abort>
 800b90c:	4b04      	ldr	r3, [pc, #16]	; (800b920 <__assert_func+0x38>)
 800b90e:	461c      	mov	r4, r3
 800b910:	e7f3      	b.n	800b8fa <__assert_func+0x12>
 800b912:	bf00      	nop
 800b914:	20000014 	.word	0x20000014
 800b918:	0800c00d 	.word	0x0800c00d
 800b91c:	0800c01a 	.word	0x0800c01a
 800b920:	0800c048 	.word	0x0800c048

0800b924 <fiprintf>:
 800b924:	b40e      	push	{r1, r2, r3}
 800b926:	b503      	push	{r0, r1, lr}
 800b928:	4601      	mov	r1, r0
 800b92a:	ab03      	add	r3, sp, #12
 800b92c:	4805      	ldr	r0, [pc, #20]	; (800b944 <fiprintf+0x20>)
 800b92e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b932:	6800      	ldr	r0, [r0, #0]
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	f7ff fdc7 	bl	800b4c8 <_vfiprintf_r>
 800b93a:	b002      	add	sp, #8
 800b93c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b940:	b003      	add	sp, #12
 800b942:	4770      	bx	lr
 800b944:	20000014 	.word	0x20000014

0800b948 <__swhatbuf_r>:
 800b948:	b570      	push	{r4, r5, r6, lr}
 800b94a:	460e      	mov	r6, r1
 800b94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b950:	2900      	cmp	r1, #0
 800b952:	b096      	sub	sp, #88	; 0x58
 800b954:	4614      	mov	r4, r2
 800b956:	461d      	mov	r5, r3
 800b958:	da08      	bge.n	800b96c <__swhatbuf_r+0x24>
 800b95a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	602a      	str	r2, [r5, #0]
 800b962:	061a      	lsls	r2, r3, #24
 800b964:	d410      	bmi.n	800b988 <__swhatbuf_r+0x40>
 800b966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b96a:	e00e      	b.n	800b98a <__swhatbuf_r+0x42>
 800b96c:	466a      	mov	r2, sp
 800b96e:	f000 f8a1 	bl	800bab4 <_fstat_r>
 800b972:	2800      	cmp	r0, #0
 800b974:	dbf1      	blt.n	800b95a <__swhatbuf_r+0x12>
 800b976:	9a01      	ldr	r2, [sp, #4]
 800b978:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b97c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b980:	425a      	negs	r2, r3
 800b982:	415a      	adcs	r2, r3
 800b984:	602a      	str	r2, [r5, #0]
 800b986:	e7ee      	b.n	800b966 <__swhatbuf_r+0x1e>
 800b988:	2340      	movs	r3, #64	; 0x40
 800b98a:	2000      	movs	r0, #0
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	b016      	add	sp, #88	; 0x58
 800b990:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b994 <__smakebuf_r>:
 800b994:	898b      	ldrh	r3, [r1, #12]
 800b996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b998:	079d      	lsls	r5, r3, #30
 800b99a:	4606      	mov	r6, r0
 800b99c:	460c      	mov	r4, r1
 800b99e:	d507      	bpl.n	800b9b0 <__smakebuf_r+0x1c>
 800b9a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	6123      	str	r3, [r4, #16]
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	6163      	str	r3, [r4, #20]
 800b9ac:	b002      	add	sp, #8
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}
 800b9b0:	ab01      	add	r3, sp, #4
 800b9b2:	466a      	mov	r2, sp
 800b9b4:	f7ff ffc8 	bl	800b948 <__swhatbuf_r>
 800b9b8:	9900      	ldr	r1, [sp, #0]
 800b9ba:	4605      	mov	r5, r0
 800b9bc:	4630      	mov	r0, r6
 800b9be:	f7fd fabf 	bl	8008f40 <_malloc_r>
 800b9c2:	b948      	cbnz	r0, 800b9d8 <__smakebuf_r+0x44>
 800b9c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c8:	059a      	lsls	r2, r3, #22
 800b9ca:	d4ef      	bmi.n	800b9ac <__smakebuf_r+0x18>
 800b9cc:	f023 0303 	bic.w	r3, r3, #3
 800b9d0:	f043 0302 	orr.w	r3, r3, #2
 800b9d4:	81a3      	strh	r3, [r4, #12]
 800b9d6:	e7e3      	b.n	800b9a0 <__smakebuf_r+0xc>
 800b9d8:	4b0d      	ldr	r3, [pc, #52]	; (800ba10 <__smakebuf_r+0x7c>)
 800b9da:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	6020      	str	r0, [r4, #0]
 800b9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9e4:	81a3      	strh	r3, [r4, #12]
 800b9e6:	9b00      	ldr	r3, [sp, #0]
 800b9e8:	6163      	str	r3, [r4, #20]
 800b9ea:	9b01      	ldr	r3, [sp, #4]
 800b9ec:	6120      	str	r0, [r4, #16]
 800b9ee:	b15b      	cbz	r3, 800ba08 <__smakebuf_r+0x74>
 800b9f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f000 f86f 	bl	800bad8 <_isatty_r>
 800b9fa:	b128      	cbz	r0, 800ba08 <__smakebuf_r+0x74>
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	f023 0303 	bic.w	r3, r3, #3
 800ba02:	f043 0301 	orr.w	r3, r3, #1
 800ba06:	81a3      	strh	r3, [r4, #12]
 800ba08:	89a0      	ldrh	r0, [r4, #12]
 800ba0a:	4305      	orrs	r5, r0
 800ba0c:	81a5      	strh	r5, [r4, #12]
 800ba0e:	e7cd      	b.n	800b9ac <__smakebuf_r+0x18>
 800ba10:	08008ce1 	.word	0x08008ce1

0800ba14 <memmove>:
 800ba14:	4288      	cmp	r0, r1
 800ba16:	b510      	push	{r4, lr}
 800ba18:	eb01 0402 	add.w	r4, r1, r2
 800ba1c:	d902      	bls.n	800ba24 <memmove+0x10>
 800ba1e:	4284      	cmp	r4, r0
 800ba20:	4623      	mov	r3, r4
 800ba22:	d807      	bhi.n	800ba34 <memmove+0x20>
 800ba24:	1e43      	subs	r3, r0, #1
 800ba26:	42a1      	cmp	r1, r4
 800ba28:	d008      	beq.n	800ba3c <memmove+0x28>
 800ba2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba32:	e7f8      	b.n	800ba26 <memmove+0x12>
 800ba34:	4402      	add	r2, r0
 800ba36:	4601      	mov	r1, r0
 800ba38:	428a      	cmp	r2, r1
 800ba3a:	d100      	bne.n	800ba3e <memmove+0x2a>
 800ba3c:	bd10      	pop	{r4, pc}
 800ba3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba46:	e7f7      	b.n	800ba38 <memmove+0x24>

0800ba48 <_realloc_r>:
 800ba48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4c:	4680      	mov	r8, r0
 800ba4e:	4614      	mov	r4, r2
 800ba50:	460e      	mov	r6, r1
 800ba52:	b921      	cbnz	r1, 800ba5e <_realloc_r+0x16>
 800ba54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba58:	4611      	mov	r1, r2
 800ba5a:	f7fd ba71 	b.w	8008f40 <_malloc_r>
 800ba5e:	b92a      	cbnz	r2, 800ba6c <_realloc_r+0x24>
 800ba60:	f7ff fb60 	bl	800b124 <_free_r>
 800ba64:	4625      	mov	r5, r4
 800ba66:	4628      	mov	r0, r5
 800ba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba6c:	f000 f844 	bl	800baf8 <_malloc_usable_size_r>
 800ba70:	4284      	cmp	r4, r0
 800ba72:	4607      	mov	r7, r0
 800ba74:	d802      	bhi.n	800ba7c <_realloc_r+0x34>
 800ba76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba7a:	d812      	bhi.n	800baa2 <_realloc_r+0x5a>
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	4640      	mov	r0, r8
 800ba80:	f7fd fa5e 	bl	8008f40 <_malloc_r>
 800ba84:	4605      	mov	r5, r0
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d0ed      	beq.n	800ba66 <_realloc_r+0x1e>
 800ba8a:	42bc      	cmp	r4, r7
 800ba8c:	4622      	mov	r2, r4
 800ba8e:	4631      	mov	r1, r6
 800ba90:	bf28      	it	cs
 800ba92:	463a      	movcs	r2, r7
 800ba94:	f7fd fa1d 	bl	8008ed2 <memcpy>
 800ba98:	4631      	mov	r1, r6
 800ba9a:	4640      	mov	r0, r8
 800ba9c:	f7ff fb42 	bl	800b124 <_free_r>
 800baa0:	e7e1      	b.n	800ba66 <_realloc_r+0x1e>
 800baa2:	4635      	mov	r5, r6
 800baa4:	e7df      	b.n	800ba66 <_realloc_r+0x1e>

0800baa6 <abort>:
 800baa6:	b508      	push	{r3, lr}
 800baa8:	2006      	movs	r0, #6
 800baaa:	f000 f855 	bl	800bb58 <raise>
 800baae:	2001      	movs	r0, #1
 800bab0:	f7f6 fe88 	bl	80027c4 <_exit>

0800bab4 <_fstat_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4d07      	ldr	r5, [pc, #28]	; (800bad4 <_fstat_r+0x20>)
 800bab8:	2300      	movs	r3, #0
 800baba:	4604      	mov	r4, r0
 800babc:	4608      	mov	r0, r1
 800babe:	4611      	mov	r1, r2
 800bac0:	602b      	str	r3, [r5, #0]
 800bac2:	f7f6 fece 	bl	8002862 <_fstat>
 800bac6:	1c43      	adds	r3, r0, #1
 800bac8:	d102      	bne.n	800bad0 <_fstat_r+0x1c>
 800baca:	682b      	ldr	r3, [r5, #0]
 800bacc:	b103      	cbz	r3, 800bad0 <_fstat_r+0x1c>
 800bace:	6023      	str	r3, [r4, #0]
 800bad0:	bd38      	pop	{r3, r4, r5, pc}
 800bad2:	bf00      	nop
 800bad4:	20004590 	.word	0x20004590

0800bad8 <_isatty_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4d06      	ldr	r5, [pc, #24]	; (800baf4 <_isatty_r+0x1c>)
 800badc:	2300      	movs	r3, #0
 800bade:	4604      	mov	r4, r0
 800bae0:	4608      	mov	r0, r1
 800bae2:	602b      	str	r3, [r5, #0]
 800bae4:	f7f6 fecd 	bl	8002882 <_isatty>
 800bae8:	1c43      	adds	r3, r0, #1
 800baea:	d102      	bne.n	800baf2 <_isatty_r+0x1a>
 800baec:	682b      	ldr	r3, [r5, #0]
 800baee:	b103      	cbz	r3, 800baf2 <_isatty_r+0x1a>
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	bd38      	pop	{r3, r4, r5, pc}
 800baf4:	20004590 	.word	0x20004590

0800baf8 <_malloc_usable_size_r>:
 800baf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bafc:	1f18      	subs	r0, r3, #4
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	bfbc      	itt	lt
 800bb02:	580b      	ldrlt	r3, [r1, r0]
 800bb04:	18c0      	addlt	r0, r0, r3
 800bb06:	4770      	bx	lr

0800bb08 <_raise_r>:
 800bb08:	291f      	cmp	r1, #31
 800bb0a:	b538      	push	{r3, r4, r5, lr}
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	460d      	mov	r5, r1
 800bb10:	d904      	bls.n	800bb1c <_raise_r+0x14>
 800bb12:	2316      	movs	r3, #22
 800bb14:	6003      	str	r3, [r0, #0]
 800bb16:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb1e:	b112      	cbz	r2, 800bb26 <_raise_r+0x1e>
 800bb20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb24:	b94b      	cbnz	r3, 800bb3a <_raise_r+0x32>
 800bb26:	4620      	mov	r0, r4
 800bb28:	f000 f830 	bl	800bb8c <_getpid_r>
 800bb2c:	462a      	mov	r2, r5
 800bb2e:	4601      	mov	r1, r0
 800bb30:	4620      	mov	r0, r4
 800bb32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb36:	f000 b817 	b.w	800bb68 <_kill_r>
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d00a      	beq.n	800bb54 <_raise_r+0x4c>
 800bb3e:	1c59      	adds	r1, r3, #1
 800bb40:	d103      	bne.n	800bb4a <_raise_r+0x42>
 800bb42:	2316      	movs	r3, #22
 800bb44:	6003      	str	r3, [r0, #0]
 800bb46:	2001      	movs	r0, #1
 800bb48:	e7e7      	b.n	800bb1a <_raise_r+0x12>
 800bb4a:	2400      	movs	r4, #0
 800bb4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb50:	4628      	mov	r0, r5
 800bb52:	4798      	blx	r3
 800bb54:	2000      	movs	r0, #0
 800bb56:	e7e0      	b.n	800bb1a <_raise_r+0x12>

0800bb58 <raise>:
 800bb58:	4b02      	ldr	r3, [pc, #8]	; (800bb64 <raise+0xc>)
 800bb5a:	4601      	mov	r1, r0
 800bb5c:	6818      	ldr	r0, [r3, #0]
 800bb5e:	f7ff bfd3 	b.w	800bb08 <_raise_r>
 800bb62:	bf00      	nop
 800bb64:	20000014 	.word	0x20000014

0800bb68 <_kill_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4d07      	ldr	r5, [pc, #28]	; (800bb88 <_kill_r+0x20>)
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4604      	mov	r4, r0
 800bb70:	4608      	mov	r0, r1
 800bb72:	4611      	mov	r1, r2
 800bb74:	602b      	str	r3, [r5, #0]
 800bb76:	f7f6 fe15 	bl	80027a4 <_kill>
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	d102      	bne.n	800bb84 <_kill_r+0x1c>
 800bb7e:	682b      	ldr	r3, [r5, #0]
 800bb80:	b103      	cbz	r3, 800bb84 <_kill_r+0x1c>
 800bb82:	6023      	str	r3, [r4, #0]
 800bb84:	bd38      	pop	{r3, r4, r5, pc}
 800bb86:	bf00      	nop
 800bb88:	20004590 	.word	0x20004590

0800bb8c <_getpid_r>:
 800bb8c:	f7f6 be02 	b.w	8002794 <_getpid>

0800bb90 <_init>:
 800bb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb92:	bf00      	nop
 800bb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb96:	bc08      	pop	{r3}
 800bb98:	469e      	mov	lr, r3
 800bb9a:	4770      	bx	lr

0800bb9c <_fini>:
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9e:	bf00      	nop
 800bba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bba2:	bc08      	pop	{r3}
 800bba4:	469e      	mov	lr, r3
 800bba6:	4770      	bx	lr
