
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800e3b8  0800e3b8  0001e3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e94c  0800e94c  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800e94c  0800e94c  0001e94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e954  0800e954  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e954  0800e954  0001e954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e958  0800e958  0001e958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800e95c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004518  20000218  0800eb74  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004730  0800eb74  00024730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192a3  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb0  00000000  00000000  000394eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003d0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003e448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025947  00000000  00000000  0003f658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001955c  00000000  00000000  00064f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db7b2  00000000  00000000  0007e4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159cad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064c4  00000000  00000000  00159d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e39c 	.word	0x0800e39c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800e39c 	.word	0x0800e39c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <HAL_CAR_CTRL_voidForward>:
#include "CAR_CTRL_interface.h"


/* Move RC Car To The Forward Direction */
void HAL_CAR_CTRL_voidForward(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	2104      	movs	r1, #4
 8001060:	480a      	ldr	r0, [pc, #40]	; (800108c <HAL_CAR_CTRL_voidForward+0x34>)
 8001062:	f003 f85d 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2108      	movs	r1, #8
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <HAL_CAR_CTRL_voidForward+0x34>)
 800106c:	f003 f858 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_CAR_CTRL_voidForward+0x34>)
 8001078:	f003 f852 	bl	8004120 <HAL_GPIO_WritePin>

	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <HAL_CAR_CTRL_voidForward+0x34>)
 8001084:	f003 f84c 	bl	8004120 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020800 	.word	0x40020800

08001090 <HAL_CAR_CTRL_voidBackward>:


/* Move RC Car To The Backward Direction */
void HAL_CAR_CTRL_voidBackward(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2104      	movs	r1, #4
 8001098:	480a      	ldr	r0, [pc, #40]	; (80010c4 <HAL_CAR_CTRL_voidBackward+0x34>)
 800109a:	f003 f841 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2108      	movs	r1, #8
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <HAL_CAR_CTRL_voidBackward+0x34>)
 80010a4:	f003 f83c 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <HAL_CAR_CTRL_voidBackward+0x34>)
 80010b0:	f003 f836 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ba:	4802      	ldr	r0, [pc, #8]	; (80010c4 <HAL_CAR_CTRL_voidBackward+0x34>)
 80010bc:	f003 f830 	bl	8004120 <HAL_GPIO_WritePin>

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40020800 	.word	0x40020800

080010c8 <HAL_CAR_CTRL_voidRight>:


/* Move RC Car To The Right Direction */
void HAL_CAR_CTRL_voidRight(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2104      	movs	r1, #4
 80010d0:	480a      	ldr	r0, [pc, #40]	; (80010fc <HAL_CAR_CTRL_voidRight+0x34>)
 80010d2:	f003 f825 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2108      	movs	r1, #8
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <HAL_CAR_CTRL_voidRight+0x34>)
 80010dc:	f003 f820 	bl	8004120 <HAL_GPIO_WritePin>
//	MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_CAR_CTRL_voidRight+0x34>)
 80010e8:	f003 f81a 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	4802      	ldr	r0, [pc, #8]	; (80010fc <HAL_CAR_CTRL_voidRight+0x34>)
 80010f4:	f003 f814 	bl	8004120 <HAL_GPIO_WritePin>

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40020800 	.word	0x40020800

08001100 <HAL_CAR_CTRL_voidLeft>:


/* Move RC Car To The Left Direction */
void HAL_CAR_CTRL_voidLeft(void)
{	
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	2104      	movs	r1, #4
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <HAL_CAR_CTRL_voidLeft+0x34>)
 800110a:	f003 f809 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2108      	movs	r1, #8
 8001112:	4808      	ldr	r0, [pc, #32]	; (8001134 <HAL_CAR_CTRL_voidLeft+0x34>)
 8001114:	f003 f804 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_HIGH);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_CAR_CTRL_voidLeft+0x34>)
 8001120:	f002 fffe 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	4802      	ldr	r0, [pc, #8]	; (8001134 <HAL_CAR_CTRL_voidLeft+0x34>)
 800112c:	f002 fff8 	bl	8004120 <HAL_GPIO_WritePin>


}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40020800 	.word	0x40020800

08001138 <HAL_CAR_CTRL_voidStop>:


/* Stop RC Car In The Current Position */
void HAL_CAR_CTRL_voidStop(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	/* Activate Pins To Be High | Low To Match The Direction */
	//MCAL_GPIO_u8SetPinValue(IN_1_GPIO_PORT, IN_1_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2104      	movs	r1, #4
 8001140:	480a      	ldr	r0, [pc, #40]	; (800116c <HAL_CAR_CTRL_voidStop+0x34>)
 8001142:	f002 ffed 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_2_GPIO_PORT, IN_2_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2108      	movs	r1, #8
 800114a:	4808      	ldr	r0, [pc, #32]	; (800116c <HAL_CAR_CTRL_voidStop+0x34>)
 800114c:	f002 ffe8 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_3_GPIO_PORT, IN_3_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <HAL_CAR_CTRL_voidStop+0x34>)
 8001158:	f002 ffe2 	bl	8004120 <HAL_GPIO_WritePin>
	//MCAL_GPIO_u8SetPinValue(IN_4_GPIO_PORT, IN_4_GPIO_PIN, GPIO_PIN_LOW);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001162:	4802      	ldr	r0, [pc, #8]	; (800116c <HAL_CAR_CTRL_voidStop+0x34>)
 8001164:	f002 ffdc 	bl	8004120 <HAL_GPIO_WritePin>

	
	
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40020800 	.word	0x40020800

08001170 <CLCD_voidSendCommand>:
#include "delay.h"


//SEND COMMAND TO LCD//
static void CLCD_voidSendCommand(LCD_Data Copy_u8Command)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	7138      	strb	r0, [r7, #4]
	//ACTIVATE SENDING COMMAND(RS)//
	 HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_RS_PIN , GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117e:	4822      	ldr	r0, [pc, #136]	; (8001208 <CLCD_voidSendCommand+0x98>)
 8001180:	f002 ffce 	bl	8004120 <HAL_GPIO_WritePin>

	//ACTIVATE WRITING(RW)//
	 HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_RW_PIN , GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118a:	481f      	ldr	r0, [pc, #124]	; (8001208 <CLCD_voidSendCommand+0x98>)
 800118c:	f002 ffc8 	bl	8004120 <HAL_GPIO_WritePin>

	//SEND COMMAND//
	 HAL_GPIO_WritePin(CLCD_D4_PORT , CLCD_D4_PIN , (u8)Copy_u8Command.Pin.D4);
 8001190:	793b      	ldrb	r3, [r7, #4]
 8001192:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800119e:	481b      	ldr	r0, [pc, #108]	; (800120c <CLCD_voidSendCommand+0x9c>)
 80011a0:	f002 ffbe 	bl	8004120 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLCD_D5_PORT , CLCD_D5_PIN , (u8)Copy_u8Command.Pin.D5);
 80011a4:	793b      	ldrb	r3, [r7, #4]
 80011a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b2:	4816      	ldr	r0, [pc, #88]	; (800120c <CLCD_voidSendCommand+0x9c>)
 80011b4:	f002 ffb4 	bl	8004120 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLCD_D6_PORT , CLCD_D6_PIN , (u8)Copy_u8Command.Pin.D6);
 80011b8:	793b      	ldrb	r3, [r7, #4]
 80011ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	2140      	movs	r1, #64	; 0x40
 80011c4:	4812      	ldr	r0, [pc, #72]	; (8001210 <CLCD_voidSendCommand+0xa0>)
 80011c6:	f002 ffab 	bl	8004120 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLCD_D7_PORT , CLCD_D7_PIN , (u8)Copy_u8Command.Pin.D7);
 80011ca:	793b      	ldrb	r3, [r7, #4]
 80011cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	2180      	movs	r1, #128	; 0x80
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <CLCD_voidSendCommand+0xa0>)
 80011d8:	f002 ffa2 	bl	8004120 <HAL_GPIO_WritePin>
	//MGPIO_u8SetPortValue(CLCD_DATA_PORT , Copy_u8Command);

	//ENABLE PULSE WITH 2 MS DELAY//
	 HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_E_PIN , GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <CLCD_voidSendCommand+0x98>)
 80011e4:	f002 ff9c 	bl	8004120 <HAL_GPIO_WritePin>

	DELAY_MS(2);
 80011e8:	2002      	movs	r0, #2
 80011ea:	f007 fafd 	bl	80087e8 <vTaskDelay>
	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_E_PIN , GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <CLCD_voidSendCommand+0x98>)
 80011f6:	f002 ff93 	bl	8004120 <HAL_GPIO_WritePin>

	DELAY_MS(5);
 80011fa:	2005      	movs	r0, #5
 80011fc:	f007 faf4 	bl	80087e8 <vTaskDelay>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40020400 	.word	0x40020400
 800120c:	40020000 	.word	0x40020000
 8001210:	40020800 	.word	0x40020800

08001214 <CLCD_voidSendData>:


//SEND DATA TO LCD//
static void CLCD_voidSendData(LCD_Data Copy_u8Data)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	7138      	strb	r0, [r7, #4]

	//ACTIVATE SENDING COMMAND(RS)//
	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_RS_PIN , GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001222:	4822      	ldr	r0, [pc, #136]	; (80012ac <CLCD_voidSendData+0x98>)
 8001224:	f002 ff7c 	bl	8004120 <HAL_GPIO_WritePin>

	//ACTIVATE WRITING(RW)//
	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_RW_PIN , GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122e:	481f      	ldr	r0, [pc, #124]	; (80012ac <CLCD_voidSendData+0x98>)
 8001230:	f002 ff76 	bl	8004120 <HAL_GPIO_WritePin>

	//SEND COMMAND//
	HAL_GPIO_WritePin(CLCD_D4_PORT , CLCD_D4_PIN , (u8)Copy_u8Data.Pin.D4);
 8001234:	793b      	ldrb	r3, [r7, #4]
 8001236:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001242:	481b      	ldr	r0, [pc, #108]	; (80012b0 <CLCD_voidSendData+0x9c>)
 8001244:	f002 ff6c 	bl	8004120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLCD_D5_PORT , CLCD_D5_PIN , (u8)Copy_u8Data.Pin.D5);
 8001248:	793b      	ldrb	r3, [r7, #4]
 800124a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001256:	4816      	ldr	r0, [pc, #88]	; (80012b0 <CLCD_voidSendData+0x9c>)
 8001258:	f002 ff62 	bl	8004120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLCD_D6_PORT , CLCD_D6_PIN , (u8)Copy_u8Data.Pin.D6);
 800125c:	793b      	ldrb	r3, [r7, #4]
 800125e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	2140      	movs	r1, #64	; 0x40
 8001268:	4812      	ldr	r0, [pc, #72]	; (80012b4 <CLCD_voidSendData+0xa0>)
 800126a:	f002 ff59 	bl	8004120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLCD_D7_PORT , CLCD_D7_PIN , (u8)Copy_u8Data.Pin.D7);
 800126e:	793b      	ldrb	r3, [r7, #4]
 8001270:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	480e      	ldr	r0, [pc, #56]	; (80012b4 <CLCD_voidSendData+0xa0>)
 800127c:	f002 ff50 	bl	8004120 <HAL_GPIO_WritePin>
	//MGPIO_u8SetPortValue(CLCD_DATA_PORT , Copy_u8Data);

	//ENABLE PULSE WITH 2 MS DELAY//
	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_E_PIN , GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001286:	4809      	ldr	r0, [pc, #36]	; (80012ac <CLCD_voidSendData+0x98>)
 8001288:	f002 ff4a 	bl	8004120 <HAL_GPIO_WritePin>

	DELAY_MS(2);
 800128c:	2002      	movs	r0, #2
 800128e:	f007 faab 	bl	80087e8 <vTaskDelay>

	HAL_GPIO_WritePin(CLCD_CTRL_PORT , CLCD_E_PIN , GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <CLCD_voidSendData+0x98>)
 800129a:	f002 ff41 	bl	8004120 <HAL_GPIO_WritePin>

	DELAY_MS(5);
 800129e:	2005      	movs	r0, #5
 80012a0:	f007 faa2 	bl	80087e8 <vTaskDelay>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020800 	.word	0x40020800

080012b8 <CLCD_voidInit>:


//INTIALIZATION OF LCD//
void CLCD_voidInit(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	LCD_Data DataPins;

	//WAIT FOR MORE THAN 40 MS //
	DELAY_MS(40);
 80012be:	2028      	movs	r0, #40	; 0x28
 80012c0:	f007 fa92 	bl	80087e8 <vTaskDelay>


	//FUNCTION SET : 1 LINE , 5*8 FONT SIZE//
	//CLCD_voidSendCommand(0b00110000);
	DataPins.Pins = 0b0010;
 80012c4:	793b      	ldrb	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	f362 0303 	bfi	r3, r2, #0, #4
 80012cc:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 80012ce:	7938      	ldrb	r0, [r7, #4]
 80012d0:	f7ff ff4e 	bl	8001170 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(DataPins);
 80012d4:	7938      	ldrb	r0, [r7, #4]
 80012d6:	f7ff ff4b 	bl	8001170 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(DataPins);
 80012da:	7938      	ldrb	r0, [r7, #4]
 80012dc:	f7ff ff48 	bl	8001170 <CLCD_voidSendCommand>

	//DISPLAY ON/OFF CONTROL : DISPLAY ENABLED , CURSOR NOT ENABLED , BLINK CURSOR NOT ENABLED//
	//CLCD_voidSendCommand(0b00001100);
	DataPins.Pins = 0b0000;
 80012e0:	793b      	ldrb	r3, [r7, #4]
 80012e2:	f36f 0303 	bfc	r3, #0, #4
 80012e6:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 80012e8:	7938      	ldrb	r0, [r7, #4]
 80012ea:	f7ff ff41 	bl	8001170 <CLCD_voidSendCommand>

	DataPins.Pins = 0b1100;
 80012ee:	793b      	ldrb	r3, [r7, #4]
 80012f0:	220c      	movs	r2, #12
 80012f2:	f362 0303 	bfi	r3, r2, #0, #4
 80012f6:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 80012f8:	7938      	ldrb	r0, [r7, #4]
 80012fa:	f7ff ff39 	bl	8001170 <CLCD_voidSendCommand>

	//DISPLAY CLEAR//
	//CLCD_voidSendCommand(0b00000001);
	CLCD_voidDisplayClear();
 80012fe:	f000 f817 	bl	8001330 <CLCD_voidDisplayClear>

	//ACTIVATE WRITING ON 2 LINES//
	DataPins.Pins = 0b0010;
 8001302:	793b      	ldrb	r3, [r7, #4]
 8001304:	2202      	movs	r2, #2
 8001306:	f362 0303 	bfi	r3, r2, #0, #4
 800130a:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 800130c:	7938      	ldrb	r0, [r7, #4]
 800130e:	f7ff ff2f 	bl	8001170 <CLCD_voidSendCommand>

	DataPins.Pins = 0b1000;
 8001312:	793b      	ldrb	r3, [r7, #4]
 8001314:	2208      	movs	r2, #8
 8001316:	f362 0303 	bfi	r3, r2, #0, #4
 800131a:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 800131c:	7938      	ldrb	r0, [r7, #4]
 800131e:	f7ff ff27 	bl	8001170 <CLCD_voidSendCommand>
	//CLCD_voidSendCommand(0X38);

	DELAY_MS(5);
 8001322:	2005      	movs	r0, #5
 8001324:	f007 fa60 	bl	80087e8 <vTaskDelay>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <CLCD_voidDisplayClear>:


void CLCD_voidDisplayClear(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	LCD_Data DataPins;

	//DISPLAY CLEAR//
	//CLCD_voidSendCommand(0b00000001);
	DataPins.Pins = 0b0000;
 8001336:	793b      	ldrb	r3, [r7, #4]
 8001338:	f36f 0303 	bfc	r3, #0, #4
 800133c:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 800133e:	7938      	ldrb	r0, [r7, #4]
 8001340:	f7ff ff16 	bl	8001170 <CLCD_voidSendCommand>

	DataPins.Pins = 0b0001;
 8001344:	793b      	ldrb	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f362 0303 	bfi	r3, r2, #0, #4
 800134c:	713b      	strb	r3, [r7, #4]
	CLCD_voidSendCommand(DataPins);
 800134e:	7938      	ldrb	r0, [r7, #4]
 8001350:	f7ff ff0e 	bl	8001170 <CLCD_voidSendCommand>

	DELAY_MS(20);
 8001354:	2014      	movs	r0, #20
 8001356:	f007 fa47 	bl	80087e8 <vTaskDelay>

}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <CLCD_voidSendString>:



//SEND STRING DATA TO LCD//
void CLCD_voidSendString(const char *Copy_pcString)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
	u8 Local_u8Counter = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
	LCD_Data DataPins;

	//PRINT EACH CHAR UNTIL IT REACH NULL CHAR//
	while(Copy_pcString[Local_u8Counter] != '\0')
 800136e:	e023      	b.n	80013b8 <CLCD_voidSendString+0x56>
	{
		//SEND CHAR BY CHAR TO THE END OF THE STRING//
		DataPins.Pins = Copy_pcString[Local_u8Counter] >> 4;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f003 030f 	and.w	r3, r3, #15
 8001380:	b2da      	uxtb	r2, r3
 8001382:	7b3b      	ldrb	r3, [r7, #12]
 8001384:	f362 0303 	bfi	r3, r2, #0, #4
 8001388:	733b      	strb	r3, [r7, #12]
		CLCD_voidSendData(DataPins);
 800138a:	7b38      	ldrb	r0, [r7, #12]
 800138c:	f7ff ff42 	bl	8001214 <CLCD_voidSendData>

		DataPins.Pins = Copy_pcString[Local_u8Counter];
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	b2da      	uxtb	r2, r3
 800139e:	7b3b      	ldrb	r3, [r7, #12]
 80013a0:	f362 0303 	bfi	r3, r2, #0, #4
 80013a4:	733b      	strb	r3, [r7, #12]
		CLCD_voidSendData(DataPins);
 80013a6:	7b38      	ldrb	r0, [r7, #12]
 80013a8:	f7ff ff34 	bl	8001214 <CLCD_voidSendData>

		Local_u8Counter++;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	3301      	adds	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]

		DELAY_MS(10);
 80013b2:	200a      	movs	r0, #10
 80013b4:	f007 fa18 	bl	80087e8 <vTaskDelay>
	while(Copy_pcString[Local_u8Counter] != '\0')
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1d5      	bne.n	8001370 <CLCD_voidSendString+0xe>
	}
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <CLCD_voidGoToXY>:



//GO TO SPECIFIC POSITION//
void CLCD_voidGoToXY(u8 Copy_u8Xpos , u8 Copy_u8Ypos)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	460a      	mov	r2, r1
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	4613      	mov	r3, r2
 80013dc:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8Address;
	LCD_Data DataPins;

	//LOCATION IN THE FRIST LINE //
	if (Copy_u8Xpos == 0)
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8Ypos;
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e005      	b.n	80013f6 <CLCD_voidGoToXY+0x28>
	}

	//LOCATION IN THE SECOND LINE //
	else if(Copy_u8Xpos == 1)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d102      	bne.n	80013f6 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = Copy_u8Ypos + 0X40;
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	3340      	adds	r3, #64	; 0x40
 80013f4:	73fb      	strb	r3, [r7, #15]
	}

	Local_u8Address |= 0X80;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013fc:	73fb      	strb	r3, [r7, #15]

	DataPins.Pins = Local_u8Address >> 4;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	b2da      	uxtb	r2, r3
 800140a:	7b3b      	ldrb	r3, [r7, #12]
 800140c:	f362 0303 	bfi	r3, r2, #0, #4
 8001410:	733b      	strb	r3, [r7, #12]
	CLCD_voidSendCommand(DataPins);
 8001412:	7b38      	ldrb	r0, [r7, #12]
 8001414:	f7ff feac 	bl	8001170 <CLCD_voidSendCommand>

	DataPins.Pins = Local_u8Address;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	b2da      	uxtb	r2, r3
 8001420:	7b3b      	ldrb	r3, [r7, #12]
 8001422:	f362 0303 	bfi	r3, r2, #0, #4
 8001426:	733b      	strb	r3, [r7, #12]
	CLCD_voidSendCommand(DataPins);
 8001428:	7b38      	ldrb	r0, [r7, #12]
 800142a:	f7ff fea1 	bl	8001170 <CLCD_voidSendCommand>

	//SET DDRAM ADDRESS COMMAND //
	//CLCD_voidSendCommand(Local_u8Address|0X80);

	DELAY_MS(5);
 800142e:	2005      	movs	r0, #5
 8001430:	f007 f9da 	bl	80087e8 <vTaskDelay>

}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <CLCD_voidWriteSpeacialChar>:



//WRITE SPECIAL CHAR//
void CLCD_voidWriteSpeacialChar(u8 *Copy_u8Arr , u8 Copy_u8BlockNum , u8 Copy_u8Xpos , u8 Copy_u8Ypos)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	4608      	mov	r0, r1
 8001446:	4611      	mov	r1, r2
 8001448:	461a      	mov	r2, r3
 800144a:	4603      	mov	r3, r0
 800144c:	70fb      	strb	r3, [r7, #3]
 800144e:	460b      	mov	r3, r1
 8001450:	70bb      	strb	r3, [r7, #2]
 8001452:	4613      	mov	r3, r2
 8001454:	707b      	strb	r3, [r7, #1]
	u8 Local_u8CGRAMAddress , Local_u8Iter;
	LCD_Data DataPins;


	//SPECIFY CGRAM ADDRESS//
	Local_u8CGRAMAddress = Copy_u8BlockNum*8;
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	73bb      	strb	r3, [r7, #14]


	//SET DDRAM ADDRESS COMMAND //
	Local_u8CGRAMAddress |= 0X40;
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001462:	73bb      	strb	r3, [r7, #14]

	DataPins.Pins = Local_u8CGRAMAddress >> 4;
 8001464:	7bbb      	ldrb	r3, [r7, #14]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	b2da      	uxtb	r2, r3
 8001470:	7b3b      	ldrb	r3, [r7, #12]
 8001472:	f362 0303 	bfi	r3, r2, #0, #4
 8001476:	733b      	strb	r3, [r7, #12]
	CLCD_voidSendCommand(DataPins);
 8001478:	7b38      	ldrb	r0, [r7, #12]
 800147a:	f7ff fe79 	bl	8001170 <CLCD_voidSendCommand>

	DataPins.Pins = Local_u8CGRAMAddress;
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	b2da      	uxtb	r2, r3
 8001486:	7b3b      	ldrb	r3, [r7, #12]
 8001488:	f362 0303 	bfi	r3, r2, #0, #4
 800148c:	733b      	strb	r3, [r7, #12]
	CLCD_voidSendCommand(DataPins);
 800148e:	7b38      	ldrb	r0, [r7, #12]
 8001490:	f7ff fe6e 	bl	8001170 <CLCD_voidSendCommand>
	//CLCD_voidSendCommand(Local_u8CGRAMAddress|0X40);


	//SAVING PATTERN IN CGRAM BY SENDING EACH BYTE//
	for(Local_u8Iter = 0 ; Local_u8Iter<8 ; Local_u8Iter++)
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e020      	b.n	80014dc <CLCD_voidWriteSpeacialChar+0xa0>
	{
		DataPins.Pins = Copy_u8Arr[Local_u8Iter] >> 4;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	f362 0303 	bfi	r3, r2, #0, #4
 80014b2:	733b      	strb	r3, [r7, #12]
		CLCD_voidSendData(DataPins);
 80014b4:	7b38      	ldrb	r0, [r7, #12]
 80014b6:	f7ff fead 	bl	8001214 <CLCD_voidSendData>

		DataPins.Pins = Copy_u8Arr[Local_u8Iter];
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	7b3b      	ldrb	r3, [r7, #12]
 80014ca:	f362 0303 	bfi	r3, r2, #0, #4
 80014ce:	733b      	strb	r3, [r7, #12]
		CLCD_voidSendData(DataPins);
 80014d0:	7b38      	ldrb	r0, [r7, #12]
 80014d2:	f7ff fe9f 	bl	8001214 <CLCD_voidSendData>
	for(Local_u8Iter = 0 ; Local_u8Iter<8 ; Local_u8Iter++)
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	3301      	adds	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b07      	cmp	r3, #7
 80014e0:	d9db      	bls.n	800149a <CLCD_voidWriteSpeacialChar+0x5e>
	}


	//GO TO SPECIFIC POSITION//
	CLCD_voidGoToXY(Copy_u8Xpos , Copy_u8Ypos);
 80014e2:	787a      	ldrb	r2, [r7, #1]
 80014e4:	78bb      	ldrb	r3, [r7, #2]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff70 	bl	80013ce <CLCD_voidGoToXY>



	//SEND DATA TO LCD//
	DataPins.Pins = Copy_u8BlockNum >> 4;
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	7b3b      	ldrb	r3, [r7, #12]
 80014fc:	f362 0303 	bfi	r3, r2, #0, #4
 8001500:	733b      	strb	r3, [r7, #12]
	CLCD_voidSendData(DataPins);
 8001502:	7b38      	ldrb	r0, [r7, #12]
 8001504:	f7ff fe86 	bl	8001214 <CLCD_voidSendData>

	DataPins.Pins = Copy_u8BlockNum;
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	b2da      	uxtb	r2, r3
 8001510:	7b3b      	ldrb	r3, [r7, #12]
 8001512:	f362 0303 	bfi	r3, r2, #0, #4
 8001516:	733b      	strb	r3, [r7, #12]
	CLCD_voidSendData(DataPins);
 8001518:	7b38      	ldrb	r0, [r7, #12]
 800151a:	f7ff fe7b 	bl	8001214 <CLCD_voidSendData>
	//CLCD_voidSendData(Copy_u8BlockNum);

}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <Build_Msg>:
	return Dec;
}

/*msg should be array of 32 chars*/
void Build_Msg(char *msg, double lat, double longt, char NS, char EW,
		double direction) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b092      	sub	sp, #72	; 0x48
 800152c:	af02      	add	r7, sp, #8
 800152e:	61f8      	str	r0, [r7, #28]
 8001530:	ed87 0b04 	vstr	d0, [r7, #16]
 8001534:	ed87 1b02 	vstr	d1, [r7, #8]
 8001538:	460b      	mov	r3, r1
 800153a:	ed87 2b00 	vstr	d2, [r7]
 800153e:	76fb      	strb	r3, [r7, #27]
 8001540:	4613      	mov	r3, r2
 8001542:	76bb      	strb	r3, [r7, #26]

	char direction_string[8] = { 0 };
 8001544:	2300      	movs	r3, #0
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
	char longtiude[11] = { 0 };
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001550:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	f8c3 2003 	str.w	r2, [r3, #3]
	char lattiude[11] = { 0 };
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f8c3 2003 	str.w	r2, [r3, #3]
	//lat = lat * 100;
	//longt = longt *100;

	// from double to string
	snprintf(lattiude,11, "%.6f", lat);
 800156c:	f107 0020 	add.w	r0, r7, #32
 8001570:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001574:	e9cd 2300 	strd	r2, r3, [sp]
 8001578:	4a5e      	ldr	r2, [pc, #376]	; (80016f4 <Build_Msg+0x1cc>)
 800157a:	210b      	movs	r1, #11
 800157c:	f009 fb34 	bl	800abe8 <sniprintf>
	snprintf(longtiude,11, "%.6f", longt);
 8001580:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001588:	e9cd 2300 	strd	r2, r3, [sp]
 800158c:	4a59      	ldr	r2, [pc, #356]	; (80016f4 <Build_Msg+0x1cc>)
 800158e:	210b      	movs	r1, #11
 8001590:	f009 fb2a 	bl	800abe8 <sniprintf>
	snprintf(direction_string,8, "%.3f", direction);
 8001594:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800159c:	e9cd 2300 	strd	r2, r3, [sp]
 80015a0:	4a55      	ldr	r2, [pc, #340]	; (80016f8 <Build_Msg+0x1d0>)
 80015a2:	2108      	movs	r1, #8
 80015a4:	f009 fb20 	bl	800abe8 <sniprintf>

	msg[0] = '#';
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2223      	movs	r2, #35	; 0x23
 80015ac:	701a      	strb	r2, [r3, #0]
	msg[1] = lattiude[0];
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3301      	adds	r3, #1
 80015b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015b6:	701a      	strb	r2, [r3, #0]
	msg[2] = lattiude[1];
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	3302      	adds	r3, #2
 80015bc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80015c0:	701a      	strb	r2, [r3, #0]
	msg[3] = lattiude[2];
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3303      	adds	r3, #3
 80015c6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80015ca:	701a      	strb	r2, [r3, #0]
	msg[4] = lattiude[3];
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	3304      	adds	r3, #4
 80015d0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015d4:	701a      	strb	r2, [r3, #0]
	msg[5] = lattiude[4];
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3305      	adds	r3, #5
 80015da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015de:	701a      	strb	r2, [r3, #0]
	msg[6] = lattiude[5];
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	3306      	adds	r3, #6
 80015e4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80015e8:	701a      	strb	r2, [r3, #0]
	msg[7] = lattiude[6];
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3307      	adds	r3, #7
 80015ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80015f2:	701a      	strb	r2, [r3, #0]
	msg[8] = lattiude[7];
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	3308      	adds	r3, #8
 80015f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015fc:	701a      	strb	r2, [r3, #0]
	msg[9] = lattiude[8];
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3309      	adds	r3, #9
 8001602:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001606:	701a      	strb	r2, [r3, #0]
	msg[10] = lattiude[9];
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	330a      	adds	r3, #10
 800160c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001610:	701a      	strb	r2, [r3, #0]

	msg[11] = NS;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	330b      	adds	r3, #11
 8001616:	7efa      	ldrb	r2, [r7, #27]
 8001618:	701a      	strb	r2, [r3, #0]

	msg[12] = longtiude[0];
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	330c      	adds	r3, #12
 800161e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001622:	701a      	strb	r2, [r3, #0]
	msg[13] = longtiude[1];
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	330d      	adds	r3, #13
 8001628:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800162c:	701a      	strb	r2, [r3, #0]
	msg[14] = longtiude[2];
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	330e      	adds	r3, #14
 8001632:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001636:	701a      	strb	r2, [r3, #0]
	msg[15] = longtiude[3];
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	330f      	adds	r3, #15
 800163c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001640:	701a      	strb	r2, [r3, #0]
	msg[16] = longtiude[4];
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3310      	adds	r3, #16
 8001646:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800164a:	701a      	strb	r2, [r3, #0]
	msg[17] = longtiude[5];
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	3311      	adds	r3, #17
 8001650:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8001654:	701a      	strb	r2, [r3, #0]
	msg[18] = longtiude[6];
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3312      	adds	r3, #18
 800165a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800165e:	701a      	strb	r2, [r3, #0]
	msg[19] = longtiude[7];
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	3313      	adds	r3, #19
 8001664:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001668:	701a      	strb	r2, [r3, #0]
	msg[20] = longtiude[8];
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3314      	adds	r3, #20
 800166e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001672:	701a      	strb	r2, [r3, #0]
	msg[21] = longtiude[9];
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	3315      	adds	r3, #21
 8001678:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800167c:	701a      	strb	r2, [r3, #0]
	msg[22] = EW;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3316      	adds	r3, #22
 8001682:	7eba      	ldrb	r2, [r7, #26]
 8001684:	701a      	strb	r2, [r3, #0]
	msg[23] = direction_string[0];
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3317      	adds	r3, #23
 800168a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800168e:	701a      	strb	r2, [r3, #0]
	msg[24] = direction_string[1];
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	3318      	adds	r3, #24
 8001694:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8001698:	701a      	strb	r2, [r3, #0]
	msg[25] = direction_string[2];
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3319      	adds	r3, #25
 800169e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80016a2:	701a      	strb	r2, [r3, #0]
	msg[26] = direction_string[3];
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	331a      	adds	r3, #26
 80016a8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80016ac:	701a      	strb	r2, [r3, #0]
	msg[27] = direction_string[4];
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	331b      	adds	r3, #27
 80016b2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80016b6:	701a      	strb	r2, [r3, #0]
	msg[28] = direction_string[5];
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	331c      	adds	r3, #28
 80016bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80016c0:	701a      	strb	r2, [r3, #0]
	msg[29] = direction_string[6];
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	331d      	adds	r3, #29
 80016c6:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80016ca:	701a      	strb	r2, [r3, #0]
	msg[30] = '#';
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	331e      	adds	r3, #30
 80016d0:	2223      	movs	r2, #35	; 0x23
 80016d2:	701a      	strb	r2, [r3, #0]
	msg[31] = '\r';
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	331f      	adds	r3, #31
 80016d8:	220d      	movs	r2, #13
 80016da:	701a      	strb	r2, [r3, #0]
	msg[32] = '\n';
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	3320      	adds	r3, #32
 80016e0:	220a      	movs	r2, #10
 80016e2:	701a      	strb	r2, [r3, #0]
	msg[33] = '\0';
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	3321      	adds	r3, #33	; 0x21
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
	/*3003.95734N3116.64210E# is the message
	 * first 10 chars is lattiude N
	 * then 10 chars for longtiude then E 
	 * And # specifies the end of message */

}
 80016ec:	bf00      	nop
 80016ee:	3740      	adds	r7, #64	; 0x40
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	0800e3b8 	.word	0x0800e3b8
 80016f8:	0800e3c0 	.word	0x0800e3c0

080016fc <Task_sendMessage>:
extern int8_t bluetooth_mode;
extern int8_t bluetooth_received_character;

extern int8_t message_sending_mode;

void Task_sendMessage(void *parameters) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(send_message_semaphore, 0);
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <Task_sendMessage+0xb8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f006 fc28 	bl	8007f60 <xQueueSemaphoreTake>
	vTaskSuspend(NULL);
 8001710:	2000      	movs	r0, #0
 8001712:	f007 f89d 	bl	8008850 <vTaskSuspend>
	while (1) {
		switch(message_sending_mode){
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <Task_sendMessage+0xbc>)
 8001718:	f993 3000 	ldrsb.w	r3, [r3]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <Task_sendMessage+0x2a>
 8001720:	2b01      	cmp	r3, #1
 8001722:	d02b      	beq.n	800177c <Task_sendMessage+0x80>
 8001724:	e03b      	b.n	800179e <Task_sendMessage+0xa2>
		case WARNING_MSG_MODE:
			Build_Msg((char*) tx_buffer, my_car_latitude, my_car_longitude,
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <Task_sendMessage+0xc0>)
 8001728:	ed93 7b00 	vldr	d7, [r3]
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <Task_sendMessage+0xc4>)
 800172e:	ed93 6b00 	vldr	d6, [r3]
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <Task_sendMessage+0xc8>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4a24      	ldr	r2, [pc, #144]	; (80017c8 <Task_sendMessage+0xcc>)
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	4924      	ldr	r1, [pc, #144]	; (80017cc <Task_sendMessage+0xd0>)
 800173c:	ed91 5b00 	vldr	d5, [r1]
 8001740:	eeb0 2a45 	vmov.f32	s4, s10
 8001744:	eef0 2a65 	vmov.f32	s5, s11
 8001748:	4619      	mov	r1, r3
 800174a:	eeb0 1a46 	vmov.f32	s2, s12
 800174e:	eef0 1a66 	vmov.f32	s3, s13
 8001752:	eeb0 0a47 	vmov.f32	s0, s14
 8001756:	eef0 0a67 	vmov.f32	s1, s15
 800175a:	481d      	ldr	r0, [pc, #116]	; (80017d0 <Task_sendMessage+0xd4>)
 800175c:	f7ff fee4 	bl	8001528 <Build_Msg>
					north_south, east_west, car_direction);

			HAL_UART_Transmit_DMA(&huart1, (uint8_t*) tx_buffer, 34);
 8001760:	2222      	movs	r2, #34	; 0x22
 8001762:	491b      	ldr	r1, [pc, #108]	; (80017d0 <Task_sendMessage+0xd4>)
 8001764:	481b      	ldr	r0, [pc, #108]	; (80017d4 <Task_sendMessage+0xd8>)
 8001766:	f004 ffbf 	bl	80066e8 <HAL_UART_Transmit_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <Task_sendMessage+0xdc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <Task_sendMessage+0xdc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0208 	bic.w	r2, r2, #8
 8001778:	601a      	str	r2, [r3, #0]
			break;
 800177a:	e010      	b.n	800179e <Task_sendMessage+0xa2>
		case ARREST_MSG_MODE:
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*) arrest_message_buffer, 11);
 800177c:	220b      	movs	r2, #11
 800177e:	4917      	ldr	r1, [pc, #92]	; (80017dc <Task_sendMessage+0xe0>)
 8001780:	4814      	ldr	r0, [pc, #80]	; (80017d4 <Task_sendMessage+0xd8>)
 8001782:	f004 ffb1 	bl	80066e8 <HAL_UART_Transmit_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <Task_sendMessage+0xdc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <Task_sendMessage+0xdc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0208 	bic.w	r2, r2, #8
 8001794:	601a      	str	r2, [r3, #0]
			message_sending_mode = WARNING_MSG_MODE;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <Task_sendMessage+0xbc>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
			break;
 800179c:	bf00      	nop
		}
		vTaskSuspend(NULL);
 800179e:	2000      	movs	r0, #0
 80017a0:	f007 f856 	bl	8008850 <vTaskSuspend>
		xSemaphoreTake(send_message_semaphore, portMAX_DELAY);
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <Task_sendMessage+0xb8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	4618      	mov	r0, r3
 80017ae:	f006 fbd7 	bl	8007f60 <xQueueSemaphoreTake>
		switch(message_sending_mode){
 80017b2:	e7b0      	b.n	8001716 <Task_sendMessage+0x1a>
 80017b4:	20000928 	.word	0x20000928
 80017b8:	20000964 	.word	0x20000964
 80017bc:	20000940 	.word	0x20000940
 80017c0:	20000948 	.word	0x20000948
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000001 	.word	0x20000001
 80017cc:	20000950 	.word	0x20000950
 80017d0:	200008d4 	.word	0x200008d4
 80017d4:	20000648 	.word	0x20000648
 80017d8:	20000790 	.word	0x20000790
 80017dc:	200008f8 	.word	0x200008f8

080017e0 <Task_handleReceivedMessage>:
	}
}

void Task_handleReceivedMessage(void *parameters) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	//Receive the message
	unsigned int i = 0, j = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
 80017ec:	2300      	movs	r3, #0
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
	int8_t message_start = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
	int8_t received_plate[7] = { 0 };
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2100      	movs	r1, #0
 80017fe:	460a      	mov	r2, r1
 8001800:	801a      	strh	r2, [r3, #0]
 8001802:	460a      	mov	r2, r1
 8001804:	709a      	strb	r2, [r3, #2]
	double message_latitude, message_longitude, message_direction;
	double distance_calculation, bearing_difference;
	xSemaphoreTake(receive_message_semaphore, 0);
 8001806:	4bab      	ldr	r3, [pc, #684]	; (8001ab4 <Task_handleReceivedMessage+0x2d4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f006 fba7 	bl	8007f60 <xQueueSemaphoreTake>
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&message_start, 1);
 8001812:	f107 030f 	add.w	r3, r7, #15
 8001816:	2201      	movs	r2, #1
 8001818:	4619      	mov	r1, r3
 800181a:	48a7      	ldr	r0, [pc, #668]	; (8001ab8 <Task_handleReceivedMessage+0x2d8>)
 800181c:	f004 ff33 	bl	8006686 <HAL_UART_Receive_IT>
	while (1) {
		xSemaphoreTake(receive_message_semaphore, portMAX_DELAY);
 8001820:	4ba4      	ldr	r3, [pc, #656]	; (8001ab4 <Task_handleReceivedMessage+0x2d4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	4618      	mov	r0, r3
 800182a:	f006 fb99 	bl	8007f60 <xQueueSemaphoreTake>
		switch (message_start) {
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	2b21      	cmp	r3, #33	; 0x21
 8001834:	f000 80f1 	beq.w	8001a1a <Task_handleReceivedMessage+0x23a>
 8001838:	2b23      	cmp	r3, #35	; 0x23
 800183a:	f040 8168 	bne.w	8001b0e <Task_handleReceivedMessage+0x32e>
		case '#':
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)rx_buffer, 33);
 800183e:	2221      	movs	r2, #33	; 0x21
 8001840:	499e      	ldr	r1, [pc, #632]	; (8001abc <Task_handleReceivedMessage+0x2dc>)
 8001842:	489d      	ldr	r0, [pc, #628]	; (8001ab8 <Task_handleReceivedMessage+0x2d8>)
 8001844:	f004 ffce 	bl	80067e4 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001848:	4b9d      	ldr	r3, [pc, #628]	; (8001ac0 <Task_handleReceivedMessage+0x2e0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b9c      	ldr	r3, [pc, #624]	; (8001ac0 <Task_handleReceivedMessage+0x2e0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0208 	bic.w	r2, r2, #8
 8001856:	601a      	str	r2, [r3, #0]
			xSemaphoreTake(receive_message_semaphore, portMAX_DELAY);
 8001858:	4b96      	ldr	r3, [pc, #600]	; (8001ab4 <Task_handleReceivedMessage+0x2d4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f04f 31ff 	mov.w	r1, #4294967295
 8001860:	4618      	mov	r0, r3
 8001862:	f006 fb7d 	bl	8007f60 <xQueueSemaphoreTake>
			//rx_buffer contains message
			//Extract up to N for latitude, up to E for longitude
			i = 0, j = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
 800186a:	2300      	movs	r3, #0
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
			while (i < 34 && rx_buffer[i] != 'N' && rx_buffer[i] != 'S'
 800186e:	e010      	b.n	8001892 <Task_handleReceivedMessage+0xb2>
					&& j < 11) {
				second_car_latitude[j] = rx_buffer[i];
 8001870:	4a92      	ldr	r2, [pc, #584]	; (8001abc <Task_handleReceivedMessage+0x2dc>)
 8001872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001874:	4413      	add	r3, r2
 8001876:	f993 3000 	ldrsb.w	r3, [r3]
 800187a:	b2d9      	uxtb	r1, r3
 800187c:	4a91      	ldr	r2, [pc, #580]	; (8001ac4 <Task_handleReceivedMessage+0x2e4>)
 800187e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001880:	4413      	add	r3, r2
 8001882:	460a      	mov	r2, r1
 8001884:	701a      	strb	r2, [r3, #0]
				i++;
 8001886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001888:	3301      	adds	r3, #1
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
				j++;
 800188c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188e:	3301      	adds	r3, #1
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
			while (i < 34 && rx_buffer[i] != 'N' && rx_buffer[i] != 'S'
 8001892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001894:	2b21      	cmp	r3, #33	; 0x21
 8001896:	d810      	bhi.n	80018ba <Task_handleReceivedMessage+0xda>
 8001898:	4a88      	ldr	r2, [pc, #544]	; (8001abc <Task_handleReceivedMessage+0x2dc>)
 800189a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189c:	4413      	add	r3, r2
 800189e:	f993 3000 	ldrsb.w	r3, [r3]
 80018a2:	2b4e      	cmp	r3, #78	; 0x4e
 80018a4:	d009      	beq.n	80018ba <Task_handleReceivedMessage+0xda>
 80018a6:	4a85      	ldr	r2, [pc, #532]	; (8001abc <Task_handleReceivedMessage+0x2dc>)
 80018a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018aa:	4413      	add	r3, r2
 80018ac:	f993 3000 	ldrsb.w	r3, [r3]
 80018b0:	2b53      	cmp	r3, #83	; 0x53
 80018b2:	d002      	beq.n	80018ba <Task_handleReceivedMessage+0xda>
					&& j < 11) {
 80018b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b6:	2b0a      	cmp	r3, #10
 80018b8:	d9da      	bls.n	8001870 <Task_handleReceivedMessage+0x90>
			}
			second_car_latitude[j] = '\0';
 80018ba:	4a82      	ldr	r2, [pc, #520]	; (8001ac4 <Task_handleReceivedMessage+0x2e4>)
 80018bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018be:	4413      	add	r3, r2
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
			i++;         //no need for NS
 80018c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c6:	3301      	adds	r3, #1
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
			j = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30

			while (i < 34 && rx_buffer[i] != 'E' && rx_buffer[i] != 'W'
 80018ce:	e010      	b.n	80018f2 <Task_handleReceivedMessage+0x112>
					&& j < 11) {
				second_car_longitude[j] = rx_buffer[i];
 80018d0:	4a7a      	ldr	r2, [pc, #488]	; (8001abc <Task_handleReceivedMessage+0x2dc>)
 80018d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d4:	4413      	add	r3, r2
 80018d6:	f993 3000 	ldrsb.w	r3, [r3]
 80018da:	b2d9      	uxtb	r1, r3
 80018dc:	4a7a      	ldr	r2, [pc, #488]	; (8001ac8 <Task_handleReceivedMessage+0x2e8>)
 80018de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e0:	4413      	add	r3, r2
 80018e2:	460a      	mov	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
				i++;
 80018e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e8:	3301      	adds	r3, #1
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
				j++;
 80018ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ee:	3301      	adds	r3, #1
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
			while (i < 34 && rx_buffer[i] != 'E' && rx_buffer[i] != 'W'
 80018f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f4:	2b21      	cmp	r3, #33	; 0x21
 80018f6:	d810      	bhi.n	800191a <Task_handleReceivedMessage+0x13a>
 80018f8:	4a70      	ldr	r2, [pc, #448]	; (8001abc <Task_handleReceivedMessage+0x2dc>)
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fc:	4413      	add	r3, r2
 80018fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001902:	2b45      	cmp	r3, #69	; 0x45
 8001904:	d009      	beq.n	800191a <Task_handleReceivedMessage+0x13a>
 8001906:	4a6d      	ldr	r2, [pc, #436]	; (8001abc <Task_handleReceivedMessage+0x2dc>)
 8001908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190a:	4413      	add	r3, r2
 800190c:	f993 3000 	ldrsb.w	r3, [r3]
 8001910:	2b57      	cmp	r3, #87	; 0x57
 8001912:	d002      	beq.n	800191a <Task_handleReceivedMessage+0x13a>
					&& j < 11) {
 8001914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001916:	2b0a      	cmp	r3, #10
 8001918:	d9da      	bls.n	80018d0 <Task_handleReceivedMessage+0xf0>
			}
			second_car_longitude[j] = '\0';
 800191a:	4a6b      	ldr	r2, [pc, #428]	; (8001ac8 <Task_handleReceivedMessage+0x2e8>)
 800191c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191e:	4413      	add	r3, r2
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
			i++;          //no need for EW
 8001924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001926:	3301      	adds	r3, #1
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
			j = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	633b      	str	r3, [r7, #48]	; 0x30

			while (i < 34 && rx_buffer[i] != '#' && j < 8) {
 800192e:	e010      	b.n	8001952 <Task_handleReceivedMessage+0x172>
				second_car_direction[j] = rx_buffer[i];
 8001930:	4a62      	ldr	r2, [pc, #392]	; (8001abc <Task_handleReceivedMessage+0x2dc>)
 8001932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001934:	4413      	add	r3, r2
 8001936:	f993 3000 	ldrsb.w	r3, [r3]
 800193a:	b2d9      	uxtb	r1, r3
 800193c:	4a63      	ldr	r2, [pc, #396]	; (8001acc <Task_handleReceivedMessage+0x2ec>)
 800193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001940:	4413      	add	r3, r2
 8001942:	460a      	mov	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
				i++;
 8001946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001948:	3301      	adds	r3, #1
 800194a:	637b      	str	r3, [r7, #52]	; 0x34
				j++;
 800194c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800194e:	3301      	adds	r3, #1
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
			while (i < 34 && rx_buffer[i] != '#' && j < 8) {
 8001952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001954:	2b21      	cmp	r3, #33	; 0x21
 8001956:	d809      	bhi.n	800196c <Task_handleReceivedMessage+0x18c>
 8001958:	4a58      	ldr	r2, [pc, #352]	; (8001abc <Task_handleReceivedMessage+0x2dc>)
 800195a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195c:	4413      	add	r3, r2
 800195e:	f993 3000 	ldrsb.w	r3, [r3]
 8001962:	2b23      	cmp	r3, #35	; 0x23
 8001964:	d002      	beq.n	800196c <Task_handleReceivedMessage+0x18c>
 8001966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001968:	2b07      	cmp	r3, #7
 800196a:	d9e1      	bls.n	8001930 <Task_handleReceivedMessage+0x150>
			}
			second_car_direction[j] = '\0';
 800196c:	4a57      	ldr	r2, [pc, #348]	; (8001acc <Task_handleReceivedMessage+0x2ec>)
 800196e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001970:	4413      	add	r3, r2
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]

			message_latitude = atof(second_car_latitude);
 8001976:	4853      	ldr	r0, [pc, #332]	; (8001ac4 <Task_handleReceivedMessage+0x2e4>)
 8001978:	f008 fa80 	bl	8009e7c <atof>
 800197c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
			message_longitude = atof(second_car_longitude);
 8001980:	4851      	ldr	r0, [pc, #324]	; (8001ac8 <Task_handleReceivedMessage+0x2e8>)
 8001982:	f008 fa7b 	bl	8009e7c <atof>
 8001986:	ed87 0b08 	vstr	d0, [r7, #32]
			message_direction = atof(second_car_direction);
 800198a:	4850      	ldr	r0, [pc, #320]	; (8001acc <Task_handleReceivedMessage+0x2ec>)
 800198c:	f008 fa76 	bl	8009e7c <atof>
 8001990:	ed87 0b06 	vstr	d0, [r7, #24]

			//bearing_difference
			bearing_difference = fabs(message_direction - car_direction);
 8001994:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <Task_handleReceivedMessage+0x2f0>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800199e:	f7fe fca3 	bl	80002e8 <__aeabi_dsub>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	6139      	str	r1, [r7, #16]
 80019aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019ae:	617b      	str	r3, [r7, #20]

			CLCD_voidDisplayClear();
 80019b0:	f7ff fcbe 	bl	8001330 <CLCD_voidDisplayClear>

			CLCD_voidWriteSpeacialChar(Upper_Left, 0, 0, 13);
 80019b4:	230d      	movs	r3, #13
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	4846      	ldr	r0, [pc, #280]	; (8001ad4 <Task_handleReceivedMessage+0x2f4>)
 80019bc:	f7ff fd3e 	bl	800143c <CLCD_voidWriteSpeacialChar>
			CLCD_voidWriteSpeacialChar(Upper_Mid, 1, 0, 14);
 80019c0:	230e      	movs	r3, #14
 80019c2:	2200      	movs	r2, #0
 80019c4:	2101      	movs	r1, #1
 80019c6:	4844      	ldr	r0, [pc, #272]	; (8001ad8 <Task_handleReceivedMessage+0x2f8>)
 80019c8:	f7ff fd38 	bl	800143c <CLCD_voidWriteSpeacialChar>
			CLCD_voidWriteSpeacialChar(Upper_Right, 2, 0, 15);
 80019cc:	230f      	movs	r3, #15
 80019ce:	2200      	movs	r2, #0
 80019d0:	2102      	movs	r1, #2
 80019d2:	4842      	ldr	r0, [pc, #264]	; (8001adc <Task_handleReceivedMessage+0x2fc>)
 80019d4:	f7ff fd32 	bl	800143c <CLCD_voidWriteSpeacialChar>

			CLCD_voidWriteSpeacialChar(Lower_Left, 3, 1, 13);
 80019d8:	230d      	movs	r3, #13
 80019da:	2201      	movs	r2, #1
 80019dc:	2103      	movs	r1, #3
 80019de:	4840      	ldr	r0, [pc, #256]	; (8001ae0 <Task_handleReceivedMessage+0x300>)
 80019e0:	f7ff fd2c 	bl	800143c <CLCD_voidWriteSpeacialChar>
			CLCD_voidWriteSpeacialChar(Lower_Mid, 4, 1, 14);
 80019e4:	230e      	movs	r3, #14
 80019e6:	2201      	movs	r2, #1
 80019e8:	2104      	movs	r1, #4
 80019ea:	483e      	ldr	r0, [pc, #248]	; (8001ae4 <Task_handleReceivedMessage+0x304>)
 80019ec:	f7ff fd26 	bl	800143c <CLCD_voidWriteSpeacialChar>
			CLCD_voidWriteSpeacialChar(Lower_Right, 5, 1, 15);
 80019f0:	230f      	movs	r3, #15
 80019f2:	2201      	movs	r2, #1
 80019f4:	2105      	movs	r1, #5
 80019f6:	483c      	ldr	r0, [pc, #240]	; (8001ae8 <Task_handleReceivedMessage+0x308>)
 80019f8:	f7ff fd20 	bl	800143c <CLCD_voidWriteSpeacialChar>

			CLCD_voidGoToXY(0, 0);
 80019fc:	2100      	movs	r1, #0
 80019fe:	2000      	movs	r0, #0
 8001a00:	f7ff fce5 	bl	80013ce <CLCD_voidGoToXY>

			CLCD_voidSendString("Warning: Car");
 8001a04:	4839      	ldr	r0, [pc, #228]	; (8001aec <Task_handleReceivedMessage+0x30c>)
 8001a06:	f7ff fcac 	bl	8001362 <CLCD_voidSendString>

			CLCD_voidGoToXY(1, 2);
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f7ff fcde 	bl	80013ce <CLCD_voidGoToXY>

			CLCD_voidSendString("In Front");
 8001a12:	4837      	ldr	r0, [pc, #220]	; (8001af0 <Task_handleReceivedMessage+0x310>)
 8001a14:	f7ff fca5 	bl	8001362 <CLCD_voidSendString>
			break;
 8001a18:	e079      	b.n	8001b0e <Task_handleReceivedMessage+0x32e>
		case '!':
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)rx_buffer, 10); //!CAR123!\r\n\0
 8001a1a:	220a      	movs	r2, #10
 8001a1c:	4927      	ldr	r1, [pc, #156]	; (8001abc <Task_handleReceivedMessage+0x2dc>)
 8001a1e:	4826      	ldr	r0, [pc, #152]	; (8001ab8 <Task_handleReceivedMessage+0x2d8>)
 8001a20:	f004 fee0 	bl	80067e4 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <Task_handleReceivedMessage+0x2e0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <Task_handleReceivedMessage+0x2e0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0208 	bic.w	r2, r2, #8
 8001a32:	601a      	str	r2, [r3, #0]
			xSemaphoreTake(receive_message_semaphore, portMAX_DELAY);
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <Task_handleReceivedMessage+0x2d4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f006 fa8f 	bl	8007f60 <xQueueSemaphoreTake>
			i = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
			while (rx_buffer[i] != '!' && i < 6) {
 8001a46:	e00d      	b.n	8001a64 <Task_handleReceivedMessage+0x284>
				received_plate[i] = rx_buffer[i];
 8001a48:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <Task_handleReceivedMessage+0x2dc>)
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f993 1000 	ldrsb.w	r1, [r3]
 8001a52:	f107 0208 	add.w	r2, r7, #8
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	4413      	add	r3, r2
 8001a5a:	460a      	mov	r2, r1
 8001a5c:	701a      	strb	r2, [r3, #0]
				i++;
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a60:	3301      	adds	r3, #1
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
			while (rx_buffer[i] != '!' && i < 6) {
 8001a64:	4a15      	ldr	r2, [pc, #84]	; (8001abc <Task_handleReceivedMessage+0x2dc>)
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	4413      	add	r3, r2
 8001a6a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a6e:	2b21      	cmp	r3, #33	; 0x21
 8001a70:	d002      	beq.n	8001a78 <Task_handleReceivedMessage+0x298>
 8001a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d9e7      	bls.n	8001a48 <Task_handleReceivedMessage+0x268>
			}
			received_plate[i] = '\0';
 8001a78:	f107 0208 	add.w	r2, r7, #8
 8001a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7e:	4413      	add	r3, r2
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
			if (strcmp((const char *)received_plate, (const char *)CAR_PLATE) == 0) {
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	491a      	ldr	r1, [pc, #104]	; (8001af4 <Task_handleReceivedMessage+0x314>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fbc0 	bl	8000210 <strcmp>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d13a      	bne.n	8001b0c <Task_handleReceivedMessage+0x32c>
				/* Decrease The Speed Gradually */
				if ((TIM3->CCR1) >= 10) {
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <Task_handleReceivedMessage+0x318>)
 8001a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9a:	2b09      	cmp	r3, #9
 8001a9c:	d930      	bls.n	8001b00 <Task_handleReceivedMessage+0x320>
					TIM3->CCR1 -= 1;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <Task_handleReceivedMessage+0x318>)
 8001aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa2:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <Task_handleReceivedMessage+0x318>)
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	6353      	str	r3, [r2, #52]	; 0x34
					TIM12->CCR1 -= 1;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <Task_handleReceivedMessage+0x31c>)
 8001aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <Task_handleReceivedMessage+0x31c>)
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6353      	str	r3, [r2, #52]	; 0x34
				else {
					TIM3->CCR1 = 0;
					TIM12->CCR1 = 0;
				}
			}
			break;
 8001ab2:	e02b      	b.n	8001b0c <Task_handleReceivedMessage+0x32c>
 8001ab4:	2000092c 	.word	0x2000092c
 8001ab8:	20000648 	.word	0x20000648
 8001abc:	200008b0 	.word	0x200008b0
 8001ac0:	20000790 	.word	0x20000790
 8001ac4:	20000904 	.word	0x20000904
 8001ac8:	20000910 	.word	0x20000910
 8001acc:	2000091c 	.word	0x2000091c
 8001ad0:	20000950 	.word	0x20000950
 8001ad4:	20000004 	.word	0x20000004
 8001ad8:	2000002c 	.word	0x2000002c
 8001adc:	2000000c 	.word	0x2000000c
 8001ae0:	20000014 	.word	0x20000014
 8001ae4:	20000024 	.word	0x20000024
 8001ae8:	2000001c 	.word	0x2000001c
 8001aec:	0800e3c8 	.word	0x0800e3c8
 8001af0:	0800e3d8 	.word	0x0800e3d8
 8001af4:	0800e3e4 	.word	0x0800e3e4
 8001af8:	40000400 	.word	0x40000400
 8001afc:	40001800 	.word	0x40001800
					TIM3->CCR1 = 0;
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <Task_handleReceivedMessage+0x340>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	635a      	str	r2, [r3, #52]	; 0x34
					TIM12->CCR1 = 0;
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <Task_handleReceivedMessage+0x344>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001b0c:	bf00      	nop
		}

		HAL_UART_Receive_IT(&huart1, (uint8_t*)&message_start, 1);
 8001b0e:	f107 030f 	add.w	r3, r7, #15
 8001b12:	2201      	movs	r2, #1
 8001b14:	4619      	mov	r1, r3
 8001b16:	4804      	ldr	r0, [pc, #16]	; (8001b28 <Task_handleReceivedMessage+0x348>)
 8001b18:	f004 fdb5 	bl	8006686 <HAL_UART_Receive_IT>
		xSemaphoreTake(receive_message_semaphore, portMAX_DELAY);
 8001b1c:	e680      	b.n	8001820 <Task_handleReceivedMessage+0x40>
 8001b1e:	bf00      	nop
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40001800 	.word	0x40001800
 8001b28:	20000648 	.word	0x20000648

08001b2c <Task_speedCalculation>:
		}
#endif
	}
}

void Task_speedCalculation(void *parameters) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

	float current_speed = 0;
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
	float previous_speed = 0;
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]

	float speed_difference = 0;
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]

	TickType_t xLastWakeTime;

	taskENTER_CRITICAL();
 8001b46:	f007 fe8d 	bl	8009864 <vPortEnterCritical>

	slit_count = 0;
 8001b4a:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <Task_speedCalculation+0xc4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	801a      	strh	r2, [r3, #0]
	xLastWakeTime = xTaskGetTickCount();
 8001b50:	f007 f8b4 	bl	8008cbc <xTaskGetTickCount>
 8001b54:	4603      	mov	r3, r0
 8001b56:	60bb      	str	r3, [r7, #8]

	taskEXIT_CRITICAL();
 8001b58:	f007 feb4 	bl	80098c4 <vPortExitCritical>

	while (1) {

		vTaskDelayUntil(&xLastWakeTime, 500 / portTICK_RATE_MS);
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b64:	4618      	mov	r0, r3
 8001b66:	f006 fdc1 	bl	80086ec <vTaskDelayUntil>

		taskENTER_CRITICAL();
 8001b6a:	f007 fe7b 	bl	8009864 <vPortEnterCritical>

		/* (1.6328 / 2) = 0.8164 */
		//current_speed = (uint16_t) (0.8164 * slit_count); //In Cm/Sec
		current_speed = (slit_count / 20.0) * 120.0; //RPM
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <Task_speedCalculation+0xc4>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fd05 	bl	8000584 <__aeabi_i2d>
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <Task_speedCalculation+0xc8>)
 8001b80:	f7fe fe94 	bl	80008ac <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <Task_speedCalculation+0xcc>)
 8001b92:	f7fe fd61 	bl	8000658 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff f853 	bl	8000c48 <__aeabi_d2f>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	613b      	str	r3, [r7, #16]
		slit_count = 0;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <Task_speedCalculation+0xc4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	801a      	strh	r2, [r3, #0]

		taskEXIT_CRITICAL();
 8001bac:	f007 fe8a 	bl	80098c4 <vPortExitCritical>

		speed_difference = current_speed - previous_speed;
 8001bb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbc:	edc7 7a03 	vstr	s15, [r7, #12]

		previous_speed = current_speed;
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	617b      	str	r3, [r7, #20]

		if (speed_difference < SS_VELOCITY_THRESHOLD) {
 8001bc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001bfc <Task_speedCalculation+0xd0>
 8001bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d50a      	bpl.n	8001bec <Task_speedCalculation+0xc0>
			//Transmit UART Message using DMA
			//taskENTER_CRITICAL();
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001bd6:	2006      	movs	r0, #6
 8001bd8:	f001 fcfe 	bl	80035d8 <HAL_NVIC_DisableIRQ>
			vTaskResume(send_message_task_handle);
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <Task_speedCalculation+0xd4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f006 fef9 	bl	80089d8 <vTaskResume>
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001be6:	2006      	movs	r0, #6
 8001be8:	f001 fce8 	bl	80035bc <HAL_NVIC_EnableIRQ>
		vTaskDelayUntil(&xLastWakeTime, 500 / portTICK_RATE_MS);
 8001bec:	e7b6      	b.n	8001b5c <Task_speedCalculation+0x30>
 8001bee:	bf00      	nop
 8001bf0:	20000938 	.word	0x20000938
 8001bf4:	40340000 	.word	0x40340000
 8001bf8:	405e0000 	.word	0x405e0000
 8001bfc:	c4bb8000 	.word	0xc4bb8000
 8001c00:	20000934 	.word	0x20000934

08001c04 <Task_controlCar>:

/*
 * f b r l s
 * !CAR222!
 * */
void Task_controlCar(void *parameters) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

	TickType_t xLastWakeTime;

	xLastWakeTime = xTaskGetTickCount();
 8001c0c:	f007 f856 	bl	8008cbc <xTaskGetTickCount>
 8001c10:	4603      	mov	r3, r0
 8001c12:	60fb      	str	r3, [r7, #12]
	while (1) {
		//car_control_character = 0;

		//HAL_UART_Receive_IT(&huart4, &Local_u8Received_data, 1);

		vTaskDelayUntil(&xLastWakeTime, 100 / portTICK_RATE_MS);
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	2164      	movs	r1, #100	; 0x64
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f006 fd66 	bl	80086ec <vTaskDelayUntil>

		if (car_control_character != 'f' && car_control_character != 'b'
 8001c20:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <Task_controlCar+0xdc>)
 8001c22:	f993 3000 	ldrsb.w	r3, [r3]
 8001c26:	2b66      	cmp	r3, #102	; 0x66
 8001c28:	d029      	beq.n	8001c7e <Task_controlCar+0x7a>
 8001c2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <Task_controlCar+0xdc>)
 8001c2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c30:	2b62      	cmp	r3, #98	; 0x62
 8001c32:	d024      	beq.n	8001c7e <Task_controlCar+0x7a>
				&& car_control_character != 'l' && car_control_character != 'r'
 8001c34:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <Task_controlCar+0xdc>)
 8001c36:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3a:	2b6c      	cmp	r3, #108	; 0x6c
 8001c3c:	d01f      	beq.n	8001c7e <Task_controlCar+0x7a>
 8001c3e:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <Task_controlCar+0xdc>)
 8001c40:	f993 3000 	ldrsb.w	r3, [r3]
 8001c44:	2b72      	cmp	r3, #114	; 0x72
 8001c46:	d01a      	beq.n	8001c7e <Task_controlCar+0x7a>
				&& car_control_character != 's') {
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <Task_controlCar+0xdc>)
 8001c4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c4e:	2b73      	cmp	r3, #115	; 0x73
 8001c50:	d015      	beq.n	8001c7e <Task_controlCar+0x7a>
			/* Decrease The Speed Gradually */
			if ((TIM3->CCR1) >= 10) {
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <Task_controlCar+0xe0>)
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	2b09      	cmp	r3, #9
 8001c58:	d90a      	bls.n	8001c70 <Task_controlCar+0x6c>
				TIM3->CCR1 -= 1;
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <Task_controlCar+0xe0>)
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5e:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <Task_controlCar+0xe0>)
 8001c60:	3b01      	subs	r3, #1
 8001c62:	6353      	str	r3, [r2, #52]	; 0x34
				TIM12->CCR1 -= 1;
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <Task_controlCar+0xe4>)
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	4a1f      	ldr	r2, [pc, #124]	; (8001ce8 <Task_controlCar+0xe4>)
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6353      	str	r3, [r2, #52]	; 0x34
			if ((TIM3->CCR1) >= 10) {
 8001c6e:	e035      	b.n	8001cdc <Task_controlCar+0xd8>
			}
			/* Stop The RC Car */
			else {
				TIM3->CCR1 = 0;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <Task_controlCar+0xe0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
				TIM12->CCR1 = 0;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <Task_controlCar+0xe4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
			if ((TIM3->CCR1) >= 10) {
 8001c7c:	e02e      	b.n	8001cdc <Task_controlCar+0xd8>
			}
		} else {

			/* Return To The Normal Speed */
			TIM3->CCR1 = 75;
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <Task_controlCar+0xe0>)
 8001c80:	224b      	movs	r2, #75	; 0x4b
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34
			TIM12->CCR1 = 75;
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <Task_controlCar+0xe4>)
 8001c86:	224b      	movs	r2, #75	; 0x4b
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34

			/* Direction Change According To The Received Direction */
			if (car_control_character == 'f')
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <Task_controlCar+0xdc>)
 8001c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c90:	2b66      	cmp	r3, #102	; 0x66
 8001c92:	d102      	bne.n	8001c9a <Task_controlCar+0x96>
				HAL_CAR_CTRL_voidForward();
 8001c94:	f7ff f9e0 	bl	8001058 <HAL_CAR_CTRL_voidForward>
 8001c98:	e7bc      	b.n	8001c14 <Task_controlCar+0x10>
			else if (car_control_character == 'b')
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <Task_controlCar+0xdc>)
 8001c9c:	f993 3000 	ldrsb.w	r3, [r3]
 8001ca0:	2b62      	cmp	r3, #98	; 0x62
 8001ca2:	d102      	bne.n	8001caa <Task_controlCar+0xa6>
				HAL_CAR_CTRL_voidBackward();
 8001ca4:	f7ff f9f4 	bl	8001090 <HAL_CAR_CTRL_voidBackward>
 8001ca8:	e7b4      	b.n	8001c14 <Task_controlCar+0x10>
			else if (car_control_character == 'l')
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <Task_controlCar+0xdc>)
 8001cac:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb0:	2b6c      	cmp	r3, #108	; 0x6c
 8001cb2:	d102      	bne.n	8001cba <Task_controlCar+0xb6>
				HAL_CAR_CTRL_voidRight();
 8001cb4:	f7ff fa08 	bl	80010c8 <HAL_CAR_CTRL_voidRight>
 8001cb8:	e7ac      	b.n	8001c14 <Task_controlCar+0x10>
			else if (car_control_character == 'r')
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <Task_controlCar+0xdc>)
 8001cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc0:	2b72      	cmp	r3, #114	; 0x72
 8001cc2:	d102      	bne.n	8001cca <Task_controlCar+0xc6>
				HAL_CAR_CTRL_voidLeft();
 8001cc4:	f7ff fa1c 	bl	8001100 <HAL_CAR_CTRL_voidLeft>
 8001cc8:	e7a4      	b.n	8001c14 <Task_controlCar+0x10>
			else if (car_control_character == 's') {
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <Task_controlCar+0xdc>)
 8001ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd0:	2b73      	cmp	r3, #115	; 0x73
 8001cd2:	d19f      	bne.n	8001c14 <Task_controlCar+0x10>
				HAL_CAR_CTRL_voidStop();
 8001cd4:	f7ff fa30 	bl	8001138 <HAL_CAR_CTRL_voidStop>
				CLCD_voidDisplayClear();
 8001cd8:	f7ff fb2a 	bl	8001330 <CLCD_voidDisplayClear>
		vTaskDelayUntil(&xLastWakeTime, 100 / portTICK_RATE_MS);
 8001cdc:	e79a      	b.n	8001c14 <Task_controlCar+0x10>
 8001cde:	bf00      	nop
 8001ce0:	20000925 	.word	0x20000925
 8001ce4:	40000400 	.word	0x40000400
 8001ce8:	40001800 	.word	0x40001800

08001cec <Task_arrestMessageHandler>:

	}

}

void Task_arrestMessageHandler(void *parameters) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(bluetooth_message_semaphore, 0);
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <Task_arrestMessageHandler+0xa4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f006 f930 	bl	8007f60 <xQueueSemaphoreTake>

	/* Start receiving from UART4 which is connected to the blue-tooth */
	HAL_UART_Receive_IT(&huart4, (uint8_t *)&bluetooth_received_character, 1);
 8001d00:	2201      	movs	r2, #1
 8001d02:	4924      	ldr	r1, [pc, #144]	; (8001d94 <Task_arrestMessageHandler+0xa8>)
 8001d04:	4824      	ldr	r0, [pc, #144]	; (8001d98 <Task_arrestMessageHandler+0xac>)
 8001d06:	f004 fcbe 	bl	8006686 <HAL_UART_Receive_IT>

	while (1) {
		xSemaphoreTake(bluetooth_message_semaphore, portMAX_DELAY);
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <Task_arrestMessageHandler+0xa4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d12:	4618      	mov	r0, r3
 8001d14:	f006 f924 	bl	8007f60 <xQueueSemaphoreTake>
		arrest_message_buffer[0] = bluetooth_received_character;
 8001d18:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <Task_arrestMessageHandler+0xa8>)
 8001d1a:	f993 2000 	ldrsb.w	r2, [r3]
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <Task_arrestMessageHandler+0xb0>)
 8001d20:	701a      	strb	r2, [r3, #0]
		arrest_message_buffer[7] = 0;
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <Task_arrestMessageHandler+0xb0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	71da      	strb	r2, [r3, #7]
		HAL_UART_Receive_DMA(&huart4, (uint8_t *)(arrest_message_buffer + 1), 7);
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <Task_arrestMessageHandler+0xb4>)
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481a      	ldr	r0, [pc, #104]	; (8001d98 <Task_arrestMessageHandler+0xac>)
 8001d30:	f004 fd58 	bl	80067e4 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <Task_arrestMessageHandler+0xb8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <Task_arrestMessageHandler+0xb8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0208 	bic.w	r2, r2, #8
 8001d42:	601a      	str	r2, [r3, #0]
		xSemaphoreTake(bluetooth_message_semaphore, (1000 / portTICK_RATE_MS));
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <Task_arrestMessageHandler+0xa4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f006 f907 	bl	8007f60 <xQueueSemaphoreTake>
		bluetooth_mode = BLTH_CAR_CTL_MODE;
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <Task_arrestMessageHandler+0xbc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
		if(arrest_message_buffer[7] == '!'){
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <Task_arrestMessageHandler+0xb0>)
 8001d5a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001d5e:	2b21      	cmp	r3, #33	; 0x21
 8001d60:	d10b      	bne.n	8001d7a <Task_arrestMessageHandler+0x8e>
			arrest_message_buffer[8] = '\r';
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <Task_arrestMessageHandler+0xb0>)
 8001d64:	220d      	movs	r2, #13
 8001d66:	721a      	strb	r2, [r3, #8]
			arrest_message_buffer[9] = '\n';
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <Task_arrestMessageHandler+0xb0>)
 8001d6a:	220a      	movs	r2, #10
 8001d6c:	725a      	strb	r2, [r3, #9]
			arrest_message_buffer[10] = '\0';
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <Task_arrestMessageHandler+0xb0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	729a      	strb	r2, [r3, #10]
			message_sending_mode = ARREST_MSG_MODE;
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <Task_arrestMessageHandler+0xc0>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart4, (uint8_t *)&bluetooth_received_character, 1);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4905      	ldr	r1, [pc, #20]	; (8001d94 <Task_arrestMessageHandler+0xa8>)
 8001d7e:	4806      	ldr	r0, [pc, #24]	; (8001d98 <Task_arrestMessageHandler+0xac>)
 8001d80:	f004 fc81 	bl	8006686 <HAL_UART_Receive_IT>
		vTaskResume(send_message_task_handle);
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <Task_arrestMessageHandler+0xc4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f006 fe25 	bl	80089d8 <vTaskResume>
		xSemaphoreTake(bluetooth_message_semaphore, portMAX_DELAY);
 8001d8e:	e7bc      	b.n	8001d0a <Task_arrestMessageHandler+0x1e>
 8001d90:	20000930 	.word	0x20000930
 8001d94:	20000924 	.word	0x20000924
 8001d98:	200005c0 	.word	0x200005c0
 8001d9c:	200008f8 	.word	0x200008f8
 8001da0:	200008f9 	.word	0x200008f9
 8001da4:	200006d0 	.word	0x200006d0
 8001da8:	20000926 	.word	0x20000926
 8001dac:	20000964 	.word	0x20000964
 8001db0:	20000934 	.word	0x20000934

08001db4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001dc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	4a06      	ldr	r2, [pc, #24]	; (8001de4 <vApplicationGetIdleTaskMemory+0x30>)
 8001dca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000234 	.word	0x20000234
 8001de4:	200002e8 	.word	0x200002e8

08001de8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db0c      	blt.n	8001e14 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	4907      	ldr	r1, [pc, #28]	; (8001e20 <__NVIC_ClearPendingIRQ+0x38>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2001      	movs	r0, #1
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	3360      	adds	r3, #96	; 0x60
 8001e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <HAL_UART_RxCpltCallback>:
extern uint8_t icFlag;
extern uint32_t edge1Time;
extern uint32_t edge2Time;
extern uint8_t edgeNumber;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]

	if (huart->Instance == USART1) {
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a30      	ldr	r2, [pc, #192]	; (8001ef8 <HAL_UART_RxCpltCallback+0xd4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d116      	bne.n	8001e68 <HAL_UART_RxCpltCallback+0x44>
		NVIC_ClearPendingIRQ(USART1_IRQn);
 8001e3a:	2025      	movs	r0, #37	; 0x25
 8001e3c:	f7ff ffd4 	bl	8001de8 <__NVIC_ClearPendingIRQ>

		xSemaphoreGiveFromISR(receive_message_semaphore,
 8001e40:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <HAL_UART_RxCpltCallback+0xd8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f107 020c 	add.w	r2, r7, #12
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f005 fffb 	bl	8007e46 <xQueueGiveFromISR>
				&xHigherPriorityTaskWoken);

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d04b      	beq.n	8001eee <HAL_UART_RxCpltCallback+0xca>
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_UART_RxCpltCallback+0xdc>)
 8001e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	f3bf 8f4f 	dsb	sy
 8001e62:	f3bf 8f6f 	isb	sy
			HAL_UART_Receive_IT(&huart4,
					(uint8_t*) &bluetooth_received_character, 1);
			break;
		}
	}
}
 8001e66:	e042      	b.n	8001eee <HAL_UART_RxCpltCallback+0xca>
	} else if (huart->Instance == UART4) {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <HAL_UART_RxCpltCallback+0xe0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d13a      	bne.n	8001ee8 <HAL_UART_RxCpltCallback+0xc4>
		if (bluetooth_received_character == '!')
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_UART_RxCpltCallback+0xe4>)
 8001e74:	f993 3000 	ldrsb.w	r3, [r3]
 8001e78:	2b21      	cmp	r3, #33	; 0x21
 8001e7a:	d102      	bne.n	8001e82 <HAL_UART_RxCpltCallback+0x5e>
			bluetooth_mode = BLTH_MESSAGE_MODE;
 8001e7c:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_UART_RxCpltCallback+0xe8>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
		switch (bluetooth_mode) {
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_UART_RxCpltCallback+0xe8>)
 8001e84:	f993 3000 	ldrsb.w	r3, [r3]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d018      	beq.n	8001ebe <HAL_UART_RxCpltCallback+0x9a>
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d12e      	bne.n	8001eee <HAL_UART_RxCpltCallback+0xca>
			NVIC_ClearPendingIRQ(USART1_IRQn);
 8001e90:	2025      	movs	r0, #37	; 0x25
 8001e92:	f7ff ffa9 	bl	8001de8 <__NVIC_ClearPendingIRQ>
			xSemaphoreGiveFromISR(bluetooth_message_semaphore,
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_UART_RxCpltCallback+0xec>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f107 020c 	add.w	r2, r7, #12
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f005 ffd0 	bl	8007e46 <xQueueGiveFromISR>
			portEND_SWITCHING_ISR(xHigherPriorityTaskWoken)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01f      	beq.n	8001eec <HAL_UART_RxCpltCallback+0xc8>
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_UART_RxCpltCallback+0xdc>)
 8001eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	f3bf 8f6f 	isb	sy
			break;
 8001ebc:	e016      	b.n	8001eec <HAL_UART_RxCpltCallback+0xc8>
			if (bluetooth_received_character != '\r' && bluetooth_received_character != '\n' ) {
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_UART_RxCpltCallback+0xe4>)
 8001ec0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec4:	2b0d      	cmp	r3, #13
 8001ec6:	d009      	beq.n	8001edc <HAL_UART_RxCpltCallback+0xb8>
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_UART_RxCpltCallback+0xe4>)
 8001eca:	f993 3000 	ldrsb.w	r3, [r3]
 8001ece:	2b0a      	cmp	r3, #10
 8001ed0:	d004      	beq.n	8001edc <HAL_UART_RxCpltCallback+0xb8>
				car_control_character = bluetooth_received_character;
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_UART_RxCpltCallback+0xe4>)
 8001ed4:	f993 2000 	ldrsb.w	r2, [r3]
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_UART_RxCpltCallback+0xf0>)
 8001eda:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart4,
 8001edc:	2201      	movs	r2, #1
 8001ede:	490a      	ldr	r1, [pc, #40]	; (8001f08 <HAL_UART_RxCpltCallback+0xe4>)
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <HAL_UART_RxCpltCallback+0xf4>)
 8001ee2:	f004 fbd0 	bl	8006686 <HAL_UART_Receive_IT>
			break;
 8001ee6:	e002      	b.n	8001eee <HAL_UART_RxCpltCallback+0xca>
	}
 8001ee8:	bf00      	nop
 8001eea:	e000      	b.n	8001eee <HAL_UART_RxCpltCallback+0xca>
			break;
 8001eec:	bf00      	nop
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40011000 	.word	0x40011000
 8001efc:	2000092c 	.word	0x2000092c
 8001f00:	e000ed04 	.word	0xe000ed04
 8001f04:	40004c00 	.word	0x40004c00
 8001f08:	20000924 	.word	0x20000924
 8001f0c:	20000926 	.word	0x20000926
 8001f10:	20000930 	.word	0x20000930
 8001f14:	20000925 	.word	0x20000925
 8001f18:	200005c0 	.word	0x200005c0

08001f1c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_UART_TxCpltCallback+0x34>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10c      	bne.n	8001f48 <HAL_UART_TxCpltCallback+0x2c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
		NVIC_ClearPendingIRQ(USART1_IRQn);
 8001f32:	2025      	movs	r0, #37	; 0x25
 8001f34:	f7ff ff58 	bl	8001de8 <__NVIC_ClearPendingIRQ>
		xSemaphoreGiveFromISR(send_message_semaphore,
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_UART_TxCpltCallback+0x38>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f107 020c 	add.w	r2, r7, #12
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f005 ff7f 	bl	8007e46 <xQueueGiveFromISR>
				&xHigherPriorityTaskWoken);
	}
}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40011000 	.word	0x40011000
 8001f54:	20000928 	.word	0x20000928

08001f58 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d106      	bne.n	8001f76 <HAL_GPIO_EXTI_Callback+0x1e>
		slit_count++;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001f74:	801a      	strh	r2, [r3, #0]
	}
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000938 	.word	0x20000938

08001f88 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	if (edgeNumber == 0) {
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <HAL_TIM_IC_CaptureCallback+0x26>
		edge1Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f003 fcc6 	bl	800592c <HAL_TIM_ReadCapturedValue>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <HAL_TIM_IC_CaptureCallback+0x54>)
 8001fa4:	6013      	str	r3, [r2, #0]
		edgeNumber = 1;
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
	} else if (edgeNumber == 1) {
		edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		edgeNumber = 0;
		icFlag = 1;
	}
}
 8001fac:	e010      	b.n	8001fd0 <HAL_TIM_IC_CaptureCallback+0x48>
	} else if (edgeNumber == 1) {
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_TIM_IC_CaptureCallback+0x48>
		edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f003 fcb7 	bl	800592c <HAL_TIM_ReadCapturedValue>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001fc2:	6013      	str	r3, [r2, #0]
		edgeNumber = 0;
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
		icFlag = 1;
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000959 	.word	0x20000959
 8001fdc:	2000095c 	.word	0x2000095c
 8001fe0:	20000960 	.word	0x20000960
 8001fe4:	20000958 	.word	0x20000958

08001fe8 <Task_initialization>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Task_initialization(void *parameters) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	6078      	str	r0, [r7, #4]

	int8_t wifi_ready_signal = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	737b      	strb	r3, [r7, #13]
	uint8_t wifi_timeout_count = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]

	// Timer PWM for the car motor
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	484e      	ldr	r0, [pc, #312]	; (8002134 <Task_initialization+0x14c>)
 8001ffc:	f003 f846 	bl	800508c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002000:	2100      	movs	r1, #0
 8002002:	484d      	ldr	r0, [pc, #308]	; (8002138 <Task_initialization+0x150>)
 8002004:	f003 f842 	bl	800508c <HAL_TIM_PWM_Start>

	/* Print the welcome message on the LCD */
	CLCD_voidInit();
 8002008:	f7ff f956 	bl	80012b8 <CLCD_voidInit>
	CLCD_voidGoToXY(0, 0);
 800200c:	2100      	movs	r1, #0
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff f9dd 	bl	80013ce <CLCD_voidGoToXY>
	CLCD_voidSendString("WELCOME TO V2X");
 8002014:	4849      	ldr	r0, [pc, #292]	; (800213c <Task_initialization+0x154>)
 8002016:	f7ff f9a4 	bl	8001362 <CLCD_voidSendString>
	CLCD_voidGoToXY(1, 2);
 800201a:	2102      	movs	r1, #2
 800201c:	2001      	movs	r0, #1
 800201e:	f7ff f9d6 	bl	80013ce <CLCD_voidGoToXY>
	CLCD_voidSendString("GP: 2023");
 8002022:	4847      	ldr	r0, [pc, #284]	; (8002140 <Task_initialization+0x158>)
 8002024:	f7ff f99d 	bl	8001362 <CLCD_voidSendString>

	vTaskDelay(3000 / portTICK_RATE_MS);
 8002028:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800202c:	f006 fbdc 	bl	80087e8 <vTaskDelay>

	while ((USART1->SR & USART_SR_RXNE) != 0)
 8002030:	e002      	b.n	8002038 <Task_initialization+0x50>
	{
	    uint8_t dummy = USART1->DR; // Read and discard received data
 8002032:	4b44      	ldr	r3, [pc, #272]	; (8002144 <Task_initialization+0x15c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	73bb      	strb	r3, [r7, #14]
	while ((USART1->SR & USART_SR_RXNE) != 0)
 8002038:	4b42      	ldr	r3, [pc, #264]	; (8002144 <Task_initialization+0x15c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f6      	bne.n	8002032 <Task_initialization+0x4a>
	    (void)dummy; // Avoid compiler warnings
	}

	HAL_UART_Transmit(&huart1, (uint8_t*) "I", 1, 15000);
 8002044:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002048:	2201      	movs	r2, #1
 800204a:	493f      	ldr	r1, [pc, #252]	; (8002148 <Task_initialization+0x160>)
 800204c:	483f      	ldr	r0, [pc, #252]	; (800214c <Task_initialization+0x164>)
 800204e:	f004 f9e6 	bl	800641e <HAL_UART_Transmit>

	HAL_UART_Receive(&huart1, (uint8_t*) &wifi_ready_signal, 1,15000);
 8002052:	f107 010d 	add.w	r1, r7, #13
 8002056:	f643 2398 	movw	r3, #15000	; 0x3a98
 800205a:	2201      	movs	r2, #1
 800205c:	483b      	ldr	r0, [pc, #236]	; (800214c <Task_initialization+0x164>)
 800205e:	f004 fa70 	bl	8006542 <HAL_UART_Receive>
//	while (wifi_ready_signal == 0 && wifi_timeout_count < 8) {
//		wifi_timeout_count++;
//		vTaskDelay(3000 / portTICK_RATE_MS);
//	}

	if (wifi_ready_signal == 0) {
 8002062:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d109      	bne.n	800207e <Task_initialization+0x96>
		CLCD_voidDisplayClear();
 800206a:	f7ff f961 	bl	8001330 <CLCD_voidDisplayClear>
		CLCD_voidGoToXY(0, 0);
 800206e:	2100      	movs	r1, #0
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff f9ac 	bl	80013ce <CLCD_voidGoToXY>
		CLCD_voidSendString("NO WIFI");
 8002076:	4836      	ldr	r0, [pc, #216]	; (8002150 <Task_initialization+0x168>)
 8002078:	f7ff f973 	bl	8001362 <CLCD_voidSendString>
 800207c:	e008      	b.n	8002090 <Task_initialization+0xa8>
	} else {
		CLCD_voidDisplayClear();
 800207e:	f7ff f957 	bl	8001330 <CLCD_voidDisplayClear>
		CLCD_voidGoToXY(0, 0);
 8002082:	2100      	movs	r1, #0
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff f9a2 	bl	80013ce <CLCD_voidGoToXY>
		CLCD_voidSendString("RUNNING");
 800208a:	4832      	ldr	r0, [pc, #200]	; (8002154 <Task_initialization+0x16c>)
 800208c:	f7ff f969 	bl	8001362 <CLCD_voidSendString>

	}

	/* Initialize the semaphores */
	send_message_semaphore = xSemaphoreCreateBinary();
 8002090:	2203      	movs	r2, #3
 8002092:	2100      	movs	r1, #0
 8002094:	2001      	movs	r0, #1
 8002096:	f005 fe7d 	bl	8007d94 <xQueueGenericCreate>
 800209a:	4603      	mov	r3, r0
 800209c:	4a2e      	ldr	r2, [pc, #184]	; (8002158 <Task_initialization+0x170>)
 800209e:	6013      	str	r3, [r2, #0]
	receive_message_semaphore = xSemaphoreCreateBinary();
 80020a0:	2203      	movs	r2, #3
 80020a2:	2100      	movs	r1, #0
 80020a4:	2001      	movs	r0, #1
 80020a6:	f005 fe75 	bl	8007d94 <xQueueGenericCreate>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a2b      	ldr	r2, [pc, #172]	; (800215c <Task_initialization+0x174>)
 80020ae:	6013      	str	r3, [r2, #0]
	bluetooth_message_semaphore = xSemaphoreCreateBinary();
 80020b0:	2203      	movs	r2, #3
 80020b2:	2100      	movs	r1, #0
 80020b4:	2001      	movs	r0, #1
 80020b6:	f005 fe6d 	bl	8007d94 <xQueueGenericCreate>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4a28      	ldr	r2, [pc, #160]	; (8002160 <Task_initialization+0x178>)
 80020be:	6013      	str	r3, [r2, #0]
	NULL);

	xTaskCreate(&Task_directionOfCar, "Car_direction", 240, NULL, 5,
	NULL);
#endif
	xTaskCreate(&Task_handleReceivedMessage, "Message_Handling", 240, NULL, 4,
 80020c0:	2300      	movs	r3, #0
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	2304      	movs	r3, #4
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2300      	movs	r3, #0
 80020ca:	22f0      	movs	r2, #240	; 0xf0
 80020cc:	4925      	ldr	r1, [pc, #148]	; (8002164 <Task_initialization+0x17c>)
 80020ce:	4826      	ldr	r0, [pc, #152]	; (8002168 <Task_initialization+0x180>)
 80020d0:	f006 f92f 	bl	8008332 <xTaskCreate>
	NULL);

	xTaskCreate(&Task_speedCalculation, "Speed_Calculation", 240, NULL, 4,
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2304      	movs	r3, #4
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2300      	movs	r3, #0
 80020de:	22f0      	movs	r2, #240	; 0xf0
 80020e0:	4922      	ldr	r1, [pc, #136]	; (800216c <Task_initialization+0x184>)
 80020e2:	4823      	ldr	r0, [pc, #140]	; (8002170 <Task_initialization+0x188>)
 80020e4:	f006 f925 	bl	8008332 <xTaskCreate>
	NULL);

	xTaskCreate(&Task_sendMessage, "Message_Sending", 240, NULL, 6,
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <Task_initialization+0x18c>)
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	2306      	movs	r3, #6
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	2300      	movs	r3, #0
 80020f2:	22f0      	movs	r2, #240	; 0xf0
 80020f4:	4920      	ldr	r1, [pc, #128]	; (8002178 <Task_initialization+0x190>)
 80020f6:	4821      	ldr	r0, [pc, #132]	; (800217c <Task_initialization+0x194>)
 80020f8:	f006 f91b 	bl	8008332 <xTaskCreate>
			&send_message_task_handle);

	xTaskCreate(&Task_arrestMessageHandler, "Bluetooth", 240, NULL, 3,
 80020fc:	2300      	movs	r3, #0
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	2303      	movs	r3, #3
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2300      	movs	r3, #0
 8002106:	22f0      	movs	r2, #240	; 0xf0
 8002108:	491d      	ldr	r1, [pc, #116]	; (8002180 <Task_initialization+0x198>)
 800210a:	481e      	ldr	r0, [pc, #120]	; (8002184 <Task_initialization+0x19c>)
 800210c:	f006 f911 	bl	8008332 <xTaskCreate>
	NULL);

	xTaskCreate(&Task_controlCar, "Car_Control", 240, NULL, 7,
 8002110:	2300      	movs	r3, #0
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	2307      	movs	r3, #7
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2300      	movs	r3, #0
 800211a:	22f0      	movs	r2, #240	; 0xf0
 800211c:	491a      	ldr	r1, [pc, #104]	; (8002188 <Task_initialization+0x1a0>)
 800211e:	481b      	ldr	r0, [pc, #108]	; (800218c <Task_initialization+0x1a4>)
 8002120:	f006 f907 	bl	8008332 <xTaskCreate>
//		HAL_UART_Transmit(&huart1, (uint8_t*) "I", 1, 600);
//		HAL_UART_Receive(&huart1, (uint8_t*) &wifi_ready_signal, 1, 600);
//	} while (wifi_ready_signal != 'R');

	/* Delete the initialization task to start running other tasks */
	vTaskDelete(NULL);
 8002124:	2000      	movs	r0, #0
 8002126:	f006 fa51 	bl	80085cc <vTaskDelete>
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200004e8 	.word	0x200004e8
 8002138:	20000578 	.word	0x20000578
 800213c:	0800e3f4 	.word	0x0800e3f4
 8002140:	0800e404 	.word	0x0800e404
 8002144:	40011000 	.word	0x40011000
 8002148:	0800e410 	.word	0x0800e410
 800214c:	20000648 	.word	0x20000648
 8002150:	0800e414 	.word	0x0800e414
 8002154:	0800e41c 	.word	0x0800e41c
 8002158:	20000928 	.word	0x20000928
 800215c:	2000092c 	.word	0x2000092c
 8002160:	20000930 	.word	0x20000930
 8002164:	0800e424 	.word	0x0800e424
 8002168:	080017e1 	.word	0x080017e1
 800216c:	0800e438 	.word	0x0800e438
 8002170:	08001b2d 	.word	0x08001b2d
 8002174:	20000934 	.word	0x20000934
 8002178:	0800e44c 	.word	0x0800e44c
 800217c:	080016fd 	.word	0x080016fd
 8002180:	0800e45c 	.word	0x0800e45c
 8002184:	08001ced 	.word	0x08001ced
 8002188:	0800e468 	.word	0x0800e468
 800218c:	08001c05 	.word	0x08001c05

08002190 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002196:	f001 f8d7 	bl	8003348 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800219a:	f000 f823 	bl	80021e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800219e:	f000 fad1 	bl	8002744 <MX_GPIO_Init>
	MX_DMA_Init();
 80021a2:	f000 fa81 	bl	80026a8 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80021a6:	f000 fa2b 	bl	8002600 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 80021aa:	f000 f88d 	bl	80022c8 <MX_TIM3_Init>
	MX_TIM4_Init();
 80021ae:	f000 f901 	bl	80023b4 <MX_TIM4_Init>
	MX_TIM12_Init();
 80021b2:	f000 f96f 	bl	8002494 <MX_TIM12_Init>
	MX_UART4_Init();
 80021b6:	f000 f9cf 	bl	8002558 <MX_UART4_Init>
	MX_UART5_Init();
 80021ba:	f000 f9f7 	bl	80025ac <MX_UART5_Init>
	MX_USART3_UART_Init();
 80021be:	f000 fa49 	bl	8002654 <MX_USART3_UART_Init>
	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(&Task_initialization, "Initialization", 240, NULL, 8,
 80021c2:	2300      	movs	r3, #0
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	2308      	movs	r3, #8
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2300      	movs	r3, #0
 80021cc:	22f0      	movs	r2, #240	; 0xf0
 80021ce:	4903      	ldr	r1, [pc, #12]	; (80021dc <main+0x4c>)
 80021d0:	4803      	ldr	r0, [pc, #12]	; (80021e0 <main+0x50>)
 80021d2:	f006 f8ae 	bl	8008332 <xTaskCreate>
	NULL);
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	vTaskStartScheduler();
 80021d6:	f006 fc5d 	bl	8008a94 <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80021da:	e7fe      	b.n	80021da <main+0x4a>
 80021dc:	0800e474 	.word	0x0800e474
 80021e0:	08001fe9 	.word	0x08001fe9

080021e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b094      	sub	sp, #80	; 0x50
 80021e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80021ea:	f107 031c 	add.w	r3, r7, #28
 80021ee:	2234      	movs	r2, #52	; 0x34
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f007 ff77 	bl	800a0e6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <SystemClock_Config+0xdc>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	4a2b      	ldr	r2, [pc, #172]	; (80022c0 <SystemClock_Config+0xdc>)
 8002212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002216:	6413      	str	r3, [r2, #64]	; 0x40
 8002218:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <SystemClock_Config+0xdc>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002224:	2300      	movs	r3, #0
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <SystemClock_Config+0xe0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <SystemClock_Config+0xe0>)
 800222e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <SystemClock_Config+0xe0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002240:	2302      	movs	r3, #2
 8002242:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002244:	2301      	movs	r3, #1
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002248:	2310      	movs	r3, #16
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800224c:	2302      	movs	r3, #2
 800224e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002250:	2300      	movs	r3, #0
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002254:	2308      	movs	r3, #8
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002258:	23b4      	movs	r3, #180	; 0xb4
 800225a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800225c:	2302      	movs	r3, #2
 800225e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002260:	2302      	movs	r3, #2
 8002262:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002264:	2302      	movs	r3, #2
 8002266:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4618      	mov	r0, r3
 800226e:	f002 fb55 	bl	800491c <HAL_RCC_OscConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <SystemClock_Config+0x98>
		Error_Handler();
 8002278:	f000 fb1a 	bl	80028b0 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800227c:	f001 ff82 	bl	8004184 <HAL_PWREx_EnableOverDrive>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <SystemClock_Config+0xa6>
		Error_Handler();
 8002286:	f000 fb13 	bl	80028b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800228a:	230f      	movs	r3, #15
 800228c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800228e:	2302      	movs	r3, #2
 8002290:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002296:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800229a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800229c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a0:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	2105      	movs	r1, #5
 80022a8:	4618      	mov	r0, r3
 80022aa:	f001 ffbb 	bl	8004224 <HAL_RCC_ClockConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <SystemClock_Config+0xd4>
		Error_Handler();
 80022b4:	f000 fafc 	bl	80028b0 <Error_Handler>
	}
}
 80022b8:	bf00      	nop
 80022ba:	3750      	adds	r7, #80	; 0x50
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000

080022c8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08e      	sub	sp, #56	; 0x38
 80022cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80022ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80022dc:	f107 0320 	add.w	r3, r7, #32
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
 80022f4:	615a      	str	r2, [r3, #20]
 80022f6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80022f8:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <MX_TIM3_Init+0xe4>)
 80022fa:	4a2d      	ldr	r2, [pc, #180]	; (80023b0 <MX_TIM3_Init+0xe8>)
 80022fc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 29;
 80022fe:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <MX_TIM3_Init+0xe4>)
 8002300:	221d      	movs	r2, #29
 8002302:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002304:	4b29      	ldr	r3, [pc, #164]	; (80023ac <MX_TIM3_Init+0xe4>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 99;
 800230a:	4b28      	ldr	r3, [pc, #160]	; (80023ac <MX_TIM3_Init+0xe4>)
 800230c:	2263      	movs	r2, #99	; 0x63
 800230e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002310:	4b26      	ldr	r3, [pc, #152]	; (80023ac <MX_TIM3_Init+0xe4>)
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002316:	4b25      	ldr	r3, [pc, #148]	; (80023ac <MX_TIM3_Init+0xe4>)
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800231c:	4823      	ldr	r0, [pc, #140]	; (80023ac <MX_TIM3_Init+0xe4>)
 800231e:	f002 fd9b 	bl	8004e58 <HAL_TIM_Base_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM3_Init+0x64>
		Error_Handler();
 8002328:	f000 fac2 	bl	80028b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002336:	4619      	mov	r1, r3
 8002338:	481c      	ldr	r0, [pc, #112]	; (80023ac <MX_TIM3_Init+0xe4>)
 800233a:	f003 fa2f 	bl	800579c <HAL_TIM_ConfigClockSource>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM3_Init+0x80>
		Error_Handler();
 8002344:	f000 fab4 	bl	80028b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002348:	4818      	ldr	r0, [pc, #96]	; (80023ac <MX_TIM3_Init+0xe4>)
 800234a:	f002 fe45 	bl	8004fd8 <HAL_TIM_PWM_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM3_Init+0x90>
		Error_Handler();
 8002354:	f000 faac 	bl	80028b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002360:	f107 0320 	add.w	r3, r7, #32
 8002364:	4619      	mov	r1, r3
 8002366:	4811      	ldr	r0, [pc, #68]	; (80023ac <MX_TIM3_Init+0xe4>)
 8002368:	f003 ff7c 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM3_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8002372:	f000 fa9d 	bl	80028b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002376:	2360      	movs	r3, #96	; 0x60
 8002378:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2200      	movs	r2, #0
 800238a:	4619      	mov	r1, r3
 800238c:	4807      	ldr	r0, [pc, #28]	; (80023ac <MX_TIM3_Init+0xe4>)
 800238e:	f003 f943 	bl	8005618 <HAL_TIM_PWM_ConfigChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM3_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8002398:	f000 fa8a 	bl	80028b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800239c:	4803      	ldr	r0, [pc, #12]	; (80023ac <MX_TIM3_Init+0xe4>)
 800239e:	f000 fb35 	bl	8002a0c <HAL_TIM_MspPostInit>

}
 80023a2:	bf00      	nop
 80023a4:	3738      	adds	r7, #56	; 0x38
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200004e8 	.word	0x200004e8
 80023b0:	40000400 	.word	0x40000400

080023b4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80023ba:	f107 0318 	add.w	r3, r7, #24
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80023d2:	463b      	mov	r3, r7
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <MX_TIM4_Init+0xd8>)
 80023e0:	4a2b      	ldr	r2, [pc, #172]	; (8002490 <MX_TIM4_Init+0xdc>)
 80023e2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 15;
 80023e4:	4b29      	ldr	r3, [pc, #164]	; (800248c <MX_TIM4_Init+0xd8>)
 80023e6:	220f      	movs	r2, #15
 80023e8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ea:	4b28      	ldr	r3, [pc, #160]	; (800248c <MX_TIM4_Init+0xd8>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80023f0:	4b26      	ldr	r3, [pc, #152]	; (800248c <MX_TIM4_Init+0xd8>)
 80023f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023f6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <MX_TIM4_Init+0xd8>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <MX_TIM4_Init+0xd8>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002404:	4821      	ldr	r0, [pc, #132]	; (800248c <MX_TIM4_Init+0xd8>)
 8002406:	f002 fd27 	bl	8004e58 <HAL_TIM_Base_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM4_Init+0x60>
		Error_Handler();
 8002410:	f000 fa4e 	bl	80028b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002418:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800241a:	f107 0318 	add.w	r3, r7, #24
 800241e:	4619      	mov	r1, r3
 8002420:	481a      	ldr	r0, [pc, #104]	; (800248c <MX_TIM4_Init+0xd8>)
 8002422:	f003 f9bb 	bl	800579c <HAL_TIM_ConfigClockSource>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM4_Init+0x7c>
		Error_Handler();
 800242c:	f000 fa40 	bl	80028b0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 8002430:	4816      	ldr	r0, [pc, #88]	; (800248c <MX_TIM4_Init+0xd8>)
 8002432:	f002 fef3 	bl	800521c <HAL_TIM_IC_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_TIM4_Init+0x8c>
		Error_Handler();
 800243c:	f000 fa38 	bl	80028b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	4619      	mov	r1, r3
 800244e:	480f      	ldr	r0, [pc, #60]	; (800248c <MX_TIM4_Init+0xd8>)
 8002450:	f003 ff08 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM4_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 800245a:	f000 fa29 	bl	80028b0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800245e:	230a      	movs	r3, #10
 8002460:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002462:	2301      	movs	r3, #1
 8002464:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 4;
 800246a:	2304      	movs	r3, #4
 800246c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800246e:	463b      	mov	r3, r7
 8002470:	2200      	movs	r2, #0
 8002472:	4619      	mov	r1, r3
 8002474:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_TIM4_Init+0xd8>)
 8002476:	f003 f832 	bl	80054de <HAL_TIM_IC_ConfigChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM4_Init+0xd0>
		Error_Handler();
 8002480:	f000 fa16 	bl	80028b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000530 	.word	0x20000530
 8002490:	40000800 	.word	0x40000800

08002494 <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800249a:	f107 0320 	add.w	r3, r7, #32
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	611a      	str	r2, [r3, #16]
 80024b6:	615a      	str	r2, [r3, #20]
 80024b8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 80024ba:	4b25      	ldr	r3, [pc, #148]	; (8002550 <MX_TIM12_Init+0xbc>)
 80024bc:	4a25      	ldr	r2, [pc, #148]	; (8002554 <MX_TIM12_Init+0xc0>)
 80024be:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 29;
 80024c0:	4b23      	ldr	r3, [pc, #140]	; (8002550 <MX_TIM12_Init+0xbc>)
 80024c2:	221d      	movs	r2, #29
 80024c4:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <MX_TIM12_Init+0xbc>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 99;
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <MX_TIM12_Init+0xbc>)
 80024ce:	2263      	movs	r2, #99	; 0x63
 80024d0:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d2:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <MX_TIM12_Init+0xbc>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <MX_TIM12_Init+0xbc>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 80024de:	481c      	ldr	r0, [pc, #112]	; (8002550 <MX_TIM12_Init+0xbc>)
 80024e0:	f002 fcba 	bl	8004e58 <HAL_TIM_Base_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM12_Init+0x5a>
		Error_Handler();
 80024ea:	f000 f9e1 	bl	80028b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f2:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 80024f4:	f107 0320 	add.w	r3, r7, #32
 80024f8:	4619      	mov	r1, r3
 80024fa:	4815      	ldr	r0, [pc, #84]	; (8002550 <MX_TIM12_Init+0xbc>)
 80024fc:	f003 f94e 	bl	800579c <HAL_TIM_ConfigClockSource>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM12_Init+0x76>
		Error_Handler();
 8002506:	f000 f9d3 	bl	80028b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 800250a:	4811      	ldr	r0, [pc, #68]	; (8002550 <MX_TIM12_Init+0xbc>)
 800250c:	f002 fd64 	bl	8004fd8 <HAL_TIM_PWM_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM12_Init+0x86>
		Error_Handler();
 8002516:	f000 f9cb 	bl	80028b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251a:	2360      	movs	r3, #96	; 0x60
 800251c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1)
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	2200      	movs	r2, #0
 800252e:	4619      	mov	r1, r3
 8002530:	4807      	ldr	r0, [pc, #28]	; (8002550 <MX_TIM12_Init+0xbc>)
 8002532:	f003 f871 	bl	8005618 <HAL_TIM_PWM_ConfigChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM12_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 800253c:	f000 f9b8 	bl	80028b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8002540:	4803      	ldr	r0, [pc, #12]	; (8002550 <MX_TIM12_Init+0xbc>)
 8002542:	f000 fa63 	bl	8002a0c <HAL_TIM_MspPostInit>

}
 8002546:	bf00      	nop
 8002548:	3730      	adds	r7, #48	; 0x30
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000578 	.word	0x20000578
 8002554:	40001800 	.word	0x40001800

08002558 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <MX_UART4_Init+0x4c>)
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <MX_UART4_Init+0x50>)
 8002560:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <MX_UART4_Init+0x4c>)
 8002564:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002568:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <MX_UART4_Init+0x4c>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <MX_UART4_Init+0x4c>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <MX_UART4_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <MX_UART4_Init+0x4c>)
 800257e:	220c      	movs	r2, #12
 8002580:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <MX_UART4_Init+0x4c>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <MX_UART4_Init+0x4c>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 800258e:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_UART4_Init+0x4c>)
 8002590:	f003 fef8 	bl	8006384 <HAL_UART_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_UART4_Init+0x46>
		Error_Handler();
 800259a:	f000 f989 	bl	80028b0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200005c0 	.word	0x200005c0
 80025a8:	40004c00 	.word	0x40004c00

080025ac <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <MX_UART5_Init+0x4c>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <MX_UART5_Init+0x50>)
 80025b4:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <MX_UART5_Init+0x4c>)
 80025b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025bc:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <MX_UART5_Init+0x4c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <MX_UART5_Init+0x4c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <MX_UART5_Init+0x4c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <MX_UART5_Init+0x4c>)
 80025d2:	220c      	movs	r2, #12
 80025d4:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <MX_UART5_Init+0x4c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <MX_UART5_Init+0x4c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 80025e2:	4805      	ldr	r0, [pc, #20]	; (80025f8 <MX_UART5_Init+0x4c>)
 80025e4:	f003 fece 	bl	8006384 <HAL_UART_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_UART5_Init+0x46>
		Error_Handler();
 80025ee:	f000 f95f 	bl	80028b0 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000604 	.word	0x20000604
 80025fc:	40005000 	.word	0x40005000

08002600 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <MX_USART1_UART_Init+0x4c>)
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <MX_USART1_UART_Init+0x50>)
 8002608:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <MX_USART1_UART_Init+0x4c>)
 800260c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002610:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <MX_USART1_UART_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <MX_USART1_UART_Init+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <MX_USART1_UART_Init+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <MX_USART1_UART_Init+0x4c>)
 8002626:	220c      	movs	r2, #12
 8002628:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <MX_USART1_UART_Init+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <MX_USART1_UART_Init+0x4c>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002636:	4805      	ldr	r0, [pc, #20]	; (800264c <MX_USART1_UART_Init+0x4c>)
 8002638:	f003 fea4 	bl	8006384 <HAL_UART_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002642:	f000 f935 	bl	80028b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000648 	.word	0x20000648
 8002650:	40011000 	.word	0x40011000

08002654 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_USART3_UART_Init+0x4c>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <MX_USART3_UART_Init+0x50>)
 800265c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_USART3_UART_Init+0x4c>)
 8002660:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002664:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_USART3_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_USART3_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <MX_USART3_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_USART3_UART_Init+0x4c>)
 800267a:	220c      	movs	r2, #12
 800267c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <MX_USART3_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_USART3_UART_Init+0x4c>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_USART3_UART_Init+0x4c>)
 800268c:	f003 fe7a 	bl	8006384 <HAL_UART_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8002696:	f000 f90b 	bl	80028b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000068c 	.word	0x2000068c
 80026a4:	40004800 	.word	0x40004800

080026a8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	4b23      	ldr	r3, [pc, #140]	; (8002740 <MX_DMA_Init+0x98>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a22      	ldr	r2, [pc, #136]	; (8002740 <MX_DMA_Init+0x98>)
 80026b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <MX_DMA_Init+0x98>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <MX_DMA_Init+0x98>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <MX_DMA_Init+0x98>)
 80026d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <MX_DMA_Init+0x98>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2105      	movs	r1, #5
 80026ea:	200c      	movs	r0, #12
 80026ec:	f000 ff4a 	bl	8003584 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026f0:	200c      	movs	r0, #12
 80026f2:	f000 ff63 	bl	80035bc <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2105      	movs	r1, #5
 80026fa:	200d      	movs	r0, #13
 80026fc:	f000 ff42 	bl	8003584 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002700:	200d      	movs	r0, #13
 8002702:	f000 ff5b 	bl	80035bc <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2105      	movs	r1, #5
 800270a:	200f      	movs	r0, #15
 800270c:	f000 ff3a 	bl	8003584 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002710:	200f      	movs	r0, #15
 8002712:	f000 ff53 	bl	80035bc <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2105      	movs	r1, #5
 800271a:	203a      	movs	r0, #58	; 0x3a
 800271c:	f000 ff32 	bl	8003584 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002720:	203a      	movs	r0, #58	; 0x3a
 8002722:	f000 ff4b 	bl	80035bc <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2105      	movs	r1, #5
 800272a:	2046      	movs	r0, #70	; 0x46
 800272c:	f000 ff2a 	bl	8003584 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002730:	2046      	movs	r0, #70	; 0x46
 8002732:	f000 ff43 	bl	80035bc <HAL_NVIC_EnableIRQ>

}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800

08002744 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	60da      	str	r2, [r3, #12]
 8002758:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <MX_GPIO_Init+0x138>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a46      	ldr	r2, [pc, #280]	; (800287c <MX_GPIO_Init+0x138>)
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b44      	ldr	r3, [pc, #272]	; (800287c <MX_GPIO_Init+0x138>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b40      	ldr	r3, [pc, #256]	; (800287c <MX_GPIO_Init+0x138>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a3f      	ldr	r2, [pc, #252]	; (800287c <MX_GPIO_Init+0x138>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b3d      	ldr	r3, [pc, #244]	; (800287c <MX_GPIO_Init+0x138>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b39      	ldr	r3, [pc, #228]	; (800287c <MX_GPIO_Init+0x138>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a38      	ldr	r2, [pc, #224]	; (800287c <MX_GPIO_Init+0x138>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b36      	ldr	r3, [pc, #216]	; (800287c <MX_GPIO_Init+0x138>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	4b32      	ldr	r3, [pc, #200]	; (800287c <MX_GPIO_Init+0x138>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a31      	ldr	r2, [pc, #196]	; (800287c <MX_GPIO_Init+0x138>)
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b2f      	ldr	r3, [pc, #188]	; (800287c <MX_GPIO_Init+0x138>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80027ca:	2200      	movs	r2, #0
 80027cc:	f24c 31cc 	movw	r1, #50124	; 0xc3cc
 80027d0:	482b      	ldr	r0, [pc, #172]	; (8002880 <MX_GPIO_Init+0x13c>)
 80027d2:	f001 fca5 	bl	8004120 <HAL_GPIO_WritePin>
			GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6
					| GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_12,
 80027d6:	2200      	movs	r2, #0
 80027d8:	f641 0104 	movw	r1, #6148	; 0x1804
 80027dc:	4829      	ldr	r0, [pc, #164]	; (8002884 <MX_GPIO_Init+0x140>)
 80027de:	f001 fc9f 	bl	8004120 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80027e2:	2200      	movs	r2, #0
 80027e4:	f24b 01b8 	movw	r1, #45240	; 0xb0b8
 80027e8:	4827      	ldr	r0, [pc, #156]	; (8002888 <MX_GPIO_Init+0x144>)
 80027ea:	f001 fc99 	bl	8004120 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15 | GPIO_PIN_3 | GPIO_PIN_4
					| GPIO_PIN_5 | GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pins : PC14 PC15 PC2 PC3
	 PC6 PC7 PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_2 | GPIO_PIN_3
 80027ee:	f24c 33cc 	movw	r3, #50124	; 0xc3cc
 80027f2:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f4:	2301      	movs	r3, #1
 80027f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	4619      	mov	r1, r3
 8002806:	481e      	ldr	r0, [pc, #120]	; (8002880 <MX_GPIO_Init+0x13c>)
 8002808:	f001 faf6 	bl	8003df8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800280c:	2301      	movs	r3, #1
 800280e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002810:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002814:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4619      	mov	r1, r3
 8002820:	4817      	ldr	r0, [pc, #92]	; (8002880 <MX_GPIO_Init+0x13c>)
 8002822:	f001 fae9 	bl	8003df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_12;
 8002826:	f641 0304 	movw	r3, #6148	; 0x1804
 800282a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282c:	2301      	movs	r3, #1
 800282e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002834:	2300      	movs	r3, #0
 8002836:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	4619      	mov	r1, r3
 800283e:	4811      	ldr	r0, [pc, #68]	; (8002884 <MX_GPIO_Init+0x140>)
 8002840:	f001 fada 	bl	8003df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB15 PB3
	 PB4 PB5 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15 | GPIO_PIN_3
 8002844:	f24b 03b8 	movw	r3, #45240	; 0xb0b8
 8002848:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284a:	2301      	movs	r3, #1
 800284c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002852:	2300      	movs	r3, #0
 8002854:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	4619      	mov	r1, r3
 800285c:	480a      	ldr	r0, [pc, #40]	; (8002888 <MX_GPIO_Init+0x144>)
 800285e:	f001 facb 	bl	8003df8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2105      	movs	r1, #5
 8002866:	2006      	movs	r0, #6
 8002868:	f000 fe8c 	bl	8003584 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800286c:	2006      	movs	r0, #6
 800286e:	f000 fea5 	bl	80035bc <HAL_NVIC_EnableIRQ>

}
 8002872:	bf00      	nop
 8002874:	3728      	adds	r7, #40	; 0x28
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40020800 	.word	0x40020800
 8002884:	40020000 	.word	0x40020000
 8002888:	40020400 	.word	0x40020400

0800288c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a04      	ldr	r2, [pc, #16]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800289e:	f000 fd75 	bl	800338c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40010000 	.word	0x40010000

080028b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b4:	b672      	cpsid	i
}
 80028b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80028b8:	e7fe      	b.n	80028b8 <Error_Handler+0x8>
	...

080028bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_MspInit+0x54>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4a11      	ldr	r2, [pc, #68]	; (8002910 <HAL_MspInit+0x54>)
 80028cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <HAL_MspInit+0x54>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_MspInit+0x54>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <HAL_MspInit+0x54>)
 80028e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <HAL_MspInit+0x54>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	210f      	movs	r1, #15
 80028fe:	f06f 0001 	mvn.w	r0, #1
 8002902:	f000 fe3f 	bl	8003584 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800

08002914 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08c      	sub	sp, #48	; 0x30
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 031c 	add.w	r3, r7, #28
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a31      	ldr	r2, [pc, #196]	; (80029f8 <HAL_TIM_Base_MspInit+0xe4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10e      	bne.n	8002954 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	4b30      	ldr	r3, [pc, #192]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a2f      	ldr	r2, [pc, #188]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002952:	e04c      	b.n	80029ee <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <HAL_TIM_Base_MspInit+0xec>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d134      	bne.n	80029c8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a25      	ldr	r2, [pc, #148]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a1e      	ldr	r2, [pc, #120]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002996:	2340      	movs	r3, #64	; 0x40
 8002998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029a6:	2302      	movs	r3, #2
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029aa:	f107 031c 	add.w	r3, r7, #28
 80029ae:	4619      	mov	r1, r3
 80029b0:	4814      	ldr	r0, [pc, #80]	; (8002a04 <HAL_TIM_Base_MspInit+0xf0>)
 80029b2:	f001 fa21 	bl	8003df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2105      	movs	r1, #5
 80029ba:	201e      	movs	r0, #30
 80029bc:	f000 fde2 	bl	8003584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029c0:	201e      	movs	r0, #30
 80029c2:	f000 fdfb 	bl	80035bc <HAL_NVIC_EnableIRQ>
}
 80029c6:	e012      	b.n	80029ee <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM12)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <HAL_TIM_Base_MspInit+0xf4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10d      	bne.n	80029ee <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a08      	ldr	r2, [pc, #32]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 80029dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
}
 80029ee:	bf00      	nop
 80029f0:	3730      	adds	r7, #48	; 0x30
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40000400 	.word	0x40000400
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40000800 	.word	0x40000800
 8002a04:	40020400 	.word	0x40020400
 8002a08:	40001800 	.word	0x40001800

08002a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_TIM_MspPostInit+0xb0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d11e      	bne.n	8002a6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_TIM_MspPostInit+0xb4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <HAL_TIM_MspPostInit+0xb4>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_TIM_MspPostInit+0xb4>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a4a:	2340      	movs	r3, #64	; 0x40
 8002a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	f107 0314 	add.w	r3, r7, #20
 8002a62:	4619      	mov	r1, r3
 8002a64:	4817      	ldr	r0, [pc, #92]	; (8002ac4 <HAL_TIM_MspPostInit+0xb8>)
 8002a66:	f001 f9c7 	bl	8003df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002a6a:	e023      	b.n	8002ab4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a15      	ldr	r2, [pc, #84]	; (8002ac8 <HAL_TIM_MspPostInit+0xbc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d11e      	bne.n	8002ab4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_TIM_MspPostInit+0xb4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a10      	ldr	r2, [pc, #64]	; (8002ac0 <HAL_TIM_MspPostInit+0xb4>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <HAL_TIM_MspPostInit+0xb4>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002aa4:	2309      	movs	r3, #9
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	4807      	ldr	r0, [pc, #28]	; (8002acc <HAL_TIM_MspPostInit+0xc0>)
 8002ab0:	f001 f9a2 	bl	8003df8 <HAL_GPIO_Init>
}
 8002ab4:	bf00      	nop
 8002ab6:	3728      	adds	r7, #40	; 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	40001800 	.word	0x40001800
 8002acc:	40020400 	.word	0x40020400

08002ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b092      	sub	sp, #72	; 0x48
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a77      	ldr	r2, [pc, #476]	; (8002ccc <HAL_UART_MspInit+0x1fc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	f040 8092 	bne.w	8002c18 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002af4:	2300      	movs	r3, #0
 8002af6:	633b      	str	r3, [r7, #48]	; 0x30
 8002af8:	4b75      	ldr	r3, [pc, #468]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	4a74      	ldr	r2, [pc, #464]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002afe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b02:	6413      	str	r3, [r2, #64]	; 0x40
 8002b04:	4b72      	ldr	r3, [pc, #456]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b10:	2300      	movs	r3, #0
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b14:	4b6e      	ldr	r3, [pc, #440]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	4a6d      	ldr	r2, [pc, #436]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b20:	4b6b      	ldr	r3, [pc, #428]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	2302      	movs	r3, #2
 8002b34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b3e:	2308      	movs	r3, #8
 8002b40:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b46:	4619      	mov	r1, r3
 8002b48:	4862      	ldr	r0, [pc, #392]	; (8002cd4 <HAL_UART_MspInit+0x204>)
 8002b4a:	f001 f955 	bl	8003df8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002b4e:	4b62      	ldr	r3, [pc, #392]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002b50:	4a62      	ldr	r2, [pc, #392]	; (8002cdc <HAL_UART_MspInit+0x20c>)
 8002b52:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002b54:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002b56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b5a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b5c:	4b5e      	ldr	r3, [pc, #376]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b62:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b68:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b6e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b76:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002b7c:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b82:	4b55      	ldr	r3, [pc, #340]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002b8e:	4852      	ldr	r0, [pc, #328]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002b90:	f000 fd30 	bl	80035f4 <HAL_DMA_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002b9a:	f7ff fe89 	bl	80028b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4d      	ldr	r2, [pc, #308]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ba4:	4a4c      	ldr	r2, [pc, #304]	; (8002cd8 <HAL_UART_MspInit+0x208>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002baa:	4b4d      	ldr	r3, [pc, #308]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002bac:	4a4d      	ldr	r2, [pc, #308]	; (8002ce4 <HAL_UART_MspInit+0x214>)
 8002bae:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002bb0:	4b4b      	ldr	r3, [pc, #300]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bb6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bb8:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002bba:	2240      	movs	r2, #64	; 0x40
 8002bbc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bbe:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bc4:	4b46      	ldr	r3, [pc, #280]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bca:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bcc:	4b44      	ldr	r3, [pc, #272]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bd2:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002bd8:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bde:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002be4:	4b3e      	ldr	r3, [pc, #248]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002bea:	483d      	ldr	r0, [pc, #244]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002bec:	f000 fd02 	bl	80035f4 <HAL_DMA_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002bf6:	f7ff fe5b 	bl	80028b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a38      	ldr	r2, [pc, #224]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002bfe:	635a      	str	r2, [r3, #52]	; 0x34
 8002c00:	4a37      	ldr	r2, [pc, #220]	; (8002ce0 <HAL_UART_MspInit+0x210>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2105      	movs	r1, #5
 8002c0a:	2034      	movs	r0, #52	; 0x34
 8002c0c:	f000 fcba 	bl	8003584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002c10:	2034      	movs	r0, #52	; 0x34
 8002c12:	f000 fcd3 	bl	80035bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c16:	e182      	b.n	8002f1e <HAL_UART_MspInit+0x44e>
  else if(huart->Instance==UART5)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a32      	ldr	r2, [pc, #200]	; (8002ce8 <HAL_UART_MspInit+0x218>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d166      	bne.n	8002cf0 <HAL_UART_MspInit+0x220>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c26:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a29      	ldr	r2, [pc, #164]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002c48:	f043 0304 	orr.w	r3, r3, #4
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a1b      	ldr	r2, [pc, #108]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002c64:	f043 0308 	orr.w	r3, r3, #8
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_UART_MspInit+0x200>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	623b      	str	r3, [r7, #32]
 8002c74:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c84:	2303      	movs	r3, #3
 8002c86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c88:	2308      	movs	r3, #8
 8002c8a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c90:	4619      	mov	r1, r3
 8002c92:	4810      	ldr	r0, [pc, #64]	; (8002cd4 <HAL_UART_MspInit+0x204>)
 8002c94:	f001 f8b0 	bl	8003df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c98:	2304      	movs	r3, #4
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ca8:	2308      	movs	r3, #8
 8002caa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	480e      	ldr	r0, [pc, #56]	; (8002cec <HAL_UART_MspInit+0x21c>)
 8002cb4:	f001 f8a0 	bl	8003df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2105      	movs	r1, #5
 8002cbc:	2035      	movs	r0, #53	; 0x35
 8002cbe:	f000 fc61 	bl	8003584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002cc2:	2035      	movs	r0, #53	; 0x35
 8002cc4:	f000 fc7a 	bl	80035bc <HAL_NVIC_EnableIRQ>
}
 8002cc8:	e129      	b.n	8002f1e <HAL_UART_MspInit+0x44e>
 8002cca:	bf00      	nop
 8002ccc:	40004c00 	.word	0x40004c00
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40020800 	.word	0x40020800
 8002cd8:	200006d0 	.word	0x200006d0
 8002cdc:	40026040 	.word	0x40026040
 8002ce0:	20000730 	.word	0x20000730
 8002ce4:	40026070 	.word	0x40026070
 8002ce8:	40005000 	.word	0x40005000
 8002cec:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a8c      	ldr	r2, [pc, #560]	; (8002f28 <HAL_UART_MspInit+0x458>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	f040 8092 	bne.w	8002e20 <HAL_UART_MspInit+0x350>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	4b8a      	ldr	r3, [pc, #552]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	4a89      	ldr	r2, [pc, #548]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002d06:	f043 0310 	orr.w	r3, r3, #16
 8002d0a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0c:	4b87      	ldr	r3, [pc, #540]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	4b83      	ldr	r3, [pc, #524]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	4a82      	ldr	r2, [pc, #520]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6313      	str	r3, [r2, #48]	; 0x30
 8002d28:	4b80      	ldr	r3, [pc, #512]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d42:	2303      	movs	r3, #3
 8002d44:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d46:	2307      	movs	r3, #7
 8002d48:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4877      	ldr	r0, [pc, #476]	; (8002f30 <HAL_UART_MspInit+0x460>)
 8002d52:	f001 f851 	bl	8003df8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002d56:	4b77      	ldr	r3, [pc, #476]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002d58:	4a77      	ldr	r2, [pc, #476]	; (8002f38 <HAL_UART_MspInit+0x468>)
 8002d5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002d5c:	4b75      	ldr	r3, [pc, #468]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002d5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d62:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d64:	4b73      	ldr	r3, [pc, #460]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d6a:	4b72      	ldr	r3, [pc, #456]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d70:	4b70      	ldr	r3, [pc, #448]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d76:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d78:	4b6e      	ldr	r3, [pc, #440]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d7e:	4b6d      	ldr	r3, [pc, #436]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d84:	4b6b      	ldr	r3, [pc, #428]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d8a:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d90:	4b68      	ldr	r3, [pc, #416]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d96:	4867      	ldr	r0, [pc, #412]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002d98:	f000 fc2c 	bl	80035f4 <HAL_DMA_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_UART_MspInit+0x2d6>
      Error_Handler();
 8002da2:	f7ff fd85 	bl	80028b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a62      	ldr	r2, [pc, #392]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
 8002dac:	4a61      	ldr	r2, [pc, #388]	; (8002f34 <HAL_UART_MspInit+0x464>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002db2:	4b62      	ldr	r3, [pc, #392]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002db4:	4a62      	ldr	r2, [pc, #392]	; (8002f40 <HAL_UART_MspInit+0x470>)
 8002db6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002db8:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002dba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dbe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dc0:	4b5e      	ldr	r3, [pc, #376]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002dc2:	2240      	movs	r2, #64	; 0x40
 8002dc4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc6:	4b5d      	ldr	r3, [pc, #372]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dcc:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dd4:	4b59      	ldr	r3, [pc, #356]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dda:	4b58      	ldr	r3, [pc, #352]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002de0:	4b56      	ldr	r3, [pc, #344]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002de6:	4b55      	ldr	r3, [pc, #340]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dec:	4b53      	ldr	r3, [pc, #332]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002df2:	4852      	ldr	r0, [pc, #328]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002df4:	f000 fbfe 	bl	80035f4 <HAL_DMA_Init>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_UART_MspInit+0x332>
      Error_Handler();
 8002dfe:	f7ff fd57 	bl	80028b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4d      	ldr	r2, [pc, #308]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002e06:	635a      	str	r2, [r3, #52]	; 0x34
 8002e08:	4a4c      	ldr	r2, [pc, #304]	; (8002f3c <HAL_UART_MspInit+0x46c>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2105      	movs	r1, #5
 8002e12:	2025      	movs	r0, #37	; 0x25
 8002e14:	f000 fbb6 	bl	8003584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e18:	2025      	movs	r0, #37	; 0x25
 8002e1a:	f000 fbcf 	bl	80035bc <HAL_NVIC_EnableIRQ>
}
 8002e1e:	e07e      	b.n	8002f1e <HAL_UART_MspInit+0x44e>
  else if(huart->Instance==USART3)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a47      	ldr	r2, [pc, #284]	; (8002f44 <HAL_UART_MspInit+0x474>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d179      	bne.n	8002f1e <HAL_UART_MspInit+0x44e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	4b3f      	ldr	r3, [pc, #252]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a3e      	ldr	r2, [pc, #248]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b3c      	ldr	r3, [pc, #240]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	4b38      	ldr	r3, [pc, #224]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a37      	ldr	r2, [pc, #220]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b35      	ldr	r3, [pc, #212]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <HAL_UART_MspInit+0x45c>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e7e:	2320      	movs	r3, #32
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e8e:	2307      	movs	r3, #7
 8002e90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e96:	4619      	mov	r1, r3
 8002e98:	482b      	ldr	r0, [pc, #172]	; (8002f48 <HAL_UART_MspInit+0x478>)
 8002e9a:	f000 ffad 	bl	8003df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eac:	2303      	movs	r3, #3
 8002eae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002eb0:	2307      	movs	r3, #7
 8002eb2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4824      	ldr	r0, [pc, #144]	; (8002f4c <HAL_UART_MspInit+0x47c>)
 8002ebc:	f000 ff9c 	bl	8003df8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002ec0:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002ec2:	4a24      	ldr	r2, [pc, #144]	; (8002f54 <HAL_UART_MspInit+0x484>)
 8002ec4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002ec8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ecc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002eda:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ee8:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ef4:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002ef6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002efa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f02:	4813      	ldr	r0, [pc, #76]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002f04:	f000 fb76 	bl	80035f4 <HAL_DMA_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_UART_MspInit+0x442>
      Error_Handler();
 8002f0e:	f7ff fccf 	bl	80028b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <HAL_UART_MspInit+0x480>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f1e:	bf00      	nop
 8002f20:	3748      	adds	r7, #72	; 0x48
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40011000 	.word	0x40011000
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40020000 	.word	0x40020000
 8002f34:	20000790 	.word	0x20000790
 8002f38:	40026440 	.word	0x40026440
 8002f3c:	200007f0 	.word	0x200007f0
 8002f40:	400264b8 	.word	0x400264b8
 8002f44:	40004800 	.word	0x40004800
 8002f48:	40020800 	.word	0x40020800
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	20000850 	.word	0x20000850
 8002f54:	40026028 	.word	0x40026028

08002f58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	; 0x30
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	4b2f      	ldr	r3, [pc, #188]	; (800302c <HAL_InitTick+0xd4>)
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	4a2e      	ldr	r2, [pc, #184]	; (800302c <HAL_InitTick+0xd4>)
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	6453      	str	r3, [r2, #68]	; 0x44
 8002f78:	4b2c      	ldr	r3, [pc, #176]	; (800302c <HAL_InitTick+0xd4>)
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f84:	f107 020c 	add.w	r2, r7, #12
 8002f88:	f107 0310 	add.w	r3, r7, #16
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 fa62 	bl	8004458 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002f94:	f001 fa4c 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	4a23      	ldr	r2, [pc, #140]	; (8003030 <HAL_InitTick+0xd8>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	0c9b      	lsrs	r3, r3, #18
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <HAL_InitTick+0xdc>)
 8002fae:	4a22      	ldr	r2, [pc, #136]	; (8003038 <HAL_InitTick+0xe0>)
 8002fb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_InitTick+0xdc>)
 8002fb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fb8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002fba:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <HAL_InitTick+0xdc>)
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002fc0:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <HAL_InitTick+0xdc>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <HAL_InitTick+0xdc>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fcc:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_InitTick+0xdc>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002fd2:	4818      	ldr	r0, [pc, #96]	; (8003034 <HAL_InitTick+0xdc>)
 8002fd4:	f001 ff40 	bl	8004e58 <HAL_TIM_Base_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002fde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d11b      	bne.n	800301e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002fe6:	4813      	ldr	r0, [pc, #76]	; (8003034 <HAL_InitTick+0xdc>)
 8002fe8:	f001 ff86 	bl	8004ef8 <HAL_TIM_Base_Start_IT>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002ff2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d111      	bne.n	800301e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ffa:	2019      	movs	r0, #25
 8002ffc:	f000 fade 	bl	80035bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	d808      	bhi.n	8003018 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003006:	2200      	movs	r2, #0
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	2019      	movs	r0, #25
 800300c:	f000 faba 	bl	8003584 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003010:	4a0a      	ldr	r2, [pc, #40]	; (800303c <HAL_InitTick+0xe4>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e002      	b.n	800301e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800301e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003022:	4618      	mov	r0, r3
 8003024:	3730      	adds	r7, #48	; 0x30
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	431bde83 	.word	0x431bde83
 8003034:	20000968 	.word	0x20000968
 8003038:	40010000 	.word	0x40010000
 800303c:	20000038 	.word	0x20000038

08003040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003044:	e7fe      	b.n	8003044 <NMI_Handler+0x4>

08003046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800304a:	e7fe      	b.n	800304a <HardFault_Handler+0x4>

0800304c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003050:	e7fe      	b.n	8003050 <MemManage_Handler+0x4>

08003052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003056:	e7fe      	b.n	8003056 <BusFault_Handler+0x4>

08003058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800305c:	e7fe      	b.n	800305c <UsageFault_Handler+0x4>

0800305e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003070:	2001      	movs	r0, #1
 8003072:	f001 f86f 	bl	8004154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003080:	4802      	ldr	r0, [pc, #8]	; (800308c <DMA1_Stream1_IRQHandler+0x10>)
 8003082:	f000 fc4f 	bl	8003924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000850 	.word	0x20000850

08003090 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <DMA1_Stream2_IRQHandler+0x10>)
 8003096:	f000 fc45 	bl	8003924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	200006d0 	.word	0x200006d0

080030a4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <DMA1_Stream4_IRQHandler+0x10>)
 80030aa:	f000 fc3b 	bl	8003924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000730 	.word	0x20000730

080030b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80030be:	f002 f906 	bl	80052ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000968 	.word	0x20000968

080030cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <TIM4_IRQHandler+0x10>)
 80030d2:	f002 f8fc 	bl	80052ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000530 	.word	0x20000530

080030e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <USART1_IRQHandler+0x10>)
 80030e6:	f003 fbad 	bl	8006844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000648 	.word	0x20000648

080030f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <UART4_IRQHandler+0x10>)
 80030fa:	f003 fba3 	bl	8006844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200005c0 	.word	0x200005c0

08003108 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <UART5_IRQHandler+0x10>)
 800310e:	f003 fb99 	bl	8006844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000604 	.word	0x20000604

0800311c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <DMA2_Stream2_IRQHandler+0x10>)
 8003122:	f000 fbff 	bl	8003924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000790 	.word	0x20000790

08003130 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <DMA2_Stream7_IRQHandler+0x10>)
 8003136:	f000 fbf5 	bl	8003924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200007f0 	.word	0x200007f0

08003144 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
	return 1;
 8003148:	2301      	movs	r3, #1
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <_kill>:

int _kill(int pid, int sig)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800315e:	f006 fe91 	bl	8009e84 <__errno>
 8003162:	4603      	mov	r3, r0
 8003164:	2216      	movs	r2, #22
 8003166:	601a      	str	r2, [r3, #0]
	return -1;
 8003168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_exit>:

void _exit (int status)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800317c:	f04f 31ff 	mov.w	r1, #4294967295
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ffe7 	bl	8003154 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003186:	e7fe      	b.n	8003186 <_exit+0x12>

08003188 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e00a      	b.n	80031b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800319a:	f3af 8000 	nop.w
 800319e:	4601      	mov	r1, r0
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	60ba      	str	r2, [r7, #8]
 80031a6:	b2ca      	uxtb	r2, r1
 80031a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	3301      	adds	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	dbf0      	blt.n	800319a <_read+0x12>
	}

return len;
 80031b8:	687b      	ldr	r3, [r7, #4]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	e009      	b.n	80031e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	60ba      	str	r2, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	3301      	adds	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	dbf1      	blt.n	80031d4 <_write+0x12>
	}
	return len;
 80031f0:	687b      	ldr	r3, [r7, #4]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_close>:

int _close(int file)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
	return -1;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003222:	605a      	str	r2, [r3, #4]
	return 0;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <_isatty>:

int _isatty(int file)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
	return 1;
 800323a:	2301      	movs	r3, #1
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
	return 0;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800326c:	4a14      	ldr	r2, [pc, #80]	; (80032c0 <_sbrk+0x5c>)
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <_sbrk+0x60>)
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003278:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <_sbrk+0x64>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003280:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <_sbrk+0x64>)
 8003282:	4a12      	ldr	r2, [pc, #72]	; (80032cc <_sbrk+0x68>)
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <_sbrk+0x64>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	429a      	cmp	r2, r3
 8003292:	d207      	bcs.n	80032a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003294:	f006 fdf6 	bl	8009e84 <__errno>
 8003298:	4603      	mov	r3, r0
 800329a:	220c      	movs	r2, #12
 800329c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800329e:	f04f 33ff 	mov.w	r3, #4294967295
 80032a2:	e009      	b.n	80032b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032a4:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <_sbrk+0x64>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <_sbrk+0x64>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <_sbrk+0x64>)
 80032b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032b6:	68fb      	ldr	r3, [r7, #12]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20020000 	.word	0x20020000
 80032c4:	00000400 	.word	0x00000400
 80032c8:	200009b0 	.word	0x200009b0
 80032cc:	20004730 	.word	0x20004730

080032d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <SystemInit+0x20>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032da:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <SystemInit+0x20>)
 80032dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800332c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032f8:	480d      	ldr	r0, [pc, #52]	; (8003330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032fa:	490e      	ldr	r1, [pc, #56]	; (8003334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032fc:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003310:	4c0b      	ldr	r4, [pc, #44]	; (8003340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800331e:	f7ff ffd7 	bl	80032d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003322:	f006 feab 	bl	800a07c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003326:	f7fe ff33 	bl	8002190 <main>
  bx  lr    
 800332a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800332c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003334:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003338:	0800e95c 	.word	0x0800e95c
  ldr r2, =_sbss
 800333c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003340:	20004730 	.word	0x20004730

08003344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003344:	e7fe      	b.n	8003344 <ADC_IRQHandler>
	...

08003348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <HAL_Init+0x40>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <HAL_Init+0x40>)
 8003352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_Init+0x40>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_Init+0x40>)
 800335e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_Init+0x40>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <HAL_Init+0x40>)
 800336a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003370:	2003      	movs	r0, #3
 8003372:	f000 f8fc 	bl	800356e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003376:	200f      	movs	r0, #15
 8003378:	f7ff fdee 	bl	8002f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800337c:	f7ff fa9e 	bl	80028bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023c00 	.word	0x40023c00

0800338c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_IncTick+0x20>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_IncTick+0x24>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4413      	add	r3, r2
 800339c:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <HAL_IncTick+0x24>)
 800339e:	6013      	str	r3, [r2, #0]
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	2000003c 	.word	0x2000003c
 80033b0:	200009b4 	.word	0x200009b4

080033b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return uwTick;
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_GetTick+0x14>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	200009b4 	.word	0x200009b4

080033cc <__NVIC_SetPriorityGrouping>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <__NVIC_SetPriorityGrouping+0x44>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033e8:	4013      	ands	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fe:	4a04      	ldr	r2, [pc, #16]	; (8003410 <__NVIC_SetPriorityGrouping+0x44>)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	60d3      	str	r3, [r2, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_GetPriorityGrouping>:
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <__NVIC_GetPriorityGrouping+0x18>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	0a1b      	lsrs	r3, r3, #8
 800341e:	f003 0307 	and.w	r3, r3, #7
}
 8003422:	4618      	mov	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <__NVIC_EnableIRQ>:
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	2b00      	cmp	r3, #0
 8003440:	db0b      	blt.n	800345a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	f003 021f 	and.w	r2, r3, #31
 8003448:	4907      	ldr	r1, [pc, #28]	; (8003468 <__NVIC_EnableIRQ+0x38>)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2001      	movs	r0, #1
 8003452:	fa00 f202 	lsl.w	r2, r0, r2
 8003456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000e100 	.word	0xe000e100

0800346c <__NVIC_DisableIRQ>:
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	2b00      	cmp	r3, #0
 800347c:	db12      	blt.n	80034a4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	490a      	ldr	r1, [pc, #40]	; (80034b0 <__NVIC_DisableIRQ+0x44>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2001      	movs	r0, #1
 800348e:	fa00 f202 	lsl.w	r2, r0, r2
 8003492:	3320      	adds	r3, #32
 8003494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003498:	f3bf 8f4f 	dsb	sy
}
 800349c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800349e:	f3bf 8f6f 	isb	sy
}
 80034a2:	bf00      	nop
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000e100 	.word	0xe000e100

080034b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	6039      	str	r1, [r7, #0]
 80034be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	db0a      	blt.n	80034de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	490c      	ldr	r1, [pc, #48]	; (8003500 <__NVIC_SetPriority+0x4c>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	0112      	lsls	r2, r2, #4
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	440b      	add	r3, r1
 80034d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034dc:	e00a      	b.n	80034f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4908      	ldr	r1, [pc, #32]	; (8003504 <__NVIC_SetPriority+0x50>)
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	3b04      	subs	r3, #4
 80034ec:	0112      	lsls	r2, r2, #4
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	440b      	add	r3, r1
 80034f2:	761a      	strb	r2, [r3, #24]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000e100 	.word	0xe000e100
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f1c3 0307 	rsb	r3, r3, #7
 8003522:	2b04      	cmp	r3, #4
 8003524:	bf28      	it	cs
 8003526:	2304      	movcs	r3, #4
 8003528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3304      	adds	r3, #4
 800352e:	2b06      	cmp	r3, #6
 8003530:	d902      	bls.n	8003538 <NVIC_EncodePriority+0x30>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3b03      	subs	r3, #3
 8003536:	e000      	b.n	800353a <NVIC_EncodePriority+0x32>
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	f04f 32ff 	mov.w	r2, #4294967295
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	401a      	ands	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003550:	f04f 31ff 	mov.w	r1, #4294967295
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	43d9      	mvns	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	4313      	orrs	r3, r2
         );
}
 8003562:	4618      	mov	r0, r3
 8003564:	3724      	adds	r7, #36	; 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ff28 	bl	80033cc <__NVIC_SetPriorityGrouping>
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003596:	f7ff ff3d 	bl	8003414 <__NVIC_GetPriorityGrouping>
 800359a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	6978      	ldr	r0, [r7, #20]
 80035a2:	f7ff ffb1 	bl	8003508 <NVIC_EncodePriority>
 80035a6:	4602      	mov	r2, r0
 80035a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff ff80 	bl	80034b4 <__NVIC_SetPriority>
}
 80035b4:	bf00      	nop
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff ff30 	bl	8003430 <__NVIC_EnableIRQ>
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff ff40 	bl	800346c <__NVIC_DisableIRQ>
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003600:	f7ff fed8 	bl	80033b4 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e099      	b.n	8003744 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003630:	e00f      	b.n	8003652 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003632:	f7ff febf 	bl	80033b4 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b05      	cmp	r3, #5
 800363e:	d908      	bls.n	8003652 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2203      	movs	r2, #3
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e078      	b.n	8003744 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e8      	bne.n	8003632 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4b38      	ldr	r3, [pc, #224]	; (800374c <HAL_DMA_Init+0x158>)
 800366c:	4013      	ands	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800367e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d107      	bne.n	80036bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	4313      	orrs	r3, r2
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0307 	bic.w	r3, r3, #7
 80036d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d117      	bne.n	8003716 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00e      	beq.n	8003716 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fb01 	bl	8003d00 <DMA_CheckFifoParam>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2240      	movs	r2, #64	; 0x40
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003712:	2301      	movs	r3, #1
 8003714:	e016      	b.n	8003744 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fab8 	bl	8003c94 <DMA_CalcBaseAndBitshift>
 8003724:	4603      	mov	r3, r0
 8003726:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	223f      	movs	r2, #63	; 0x3f
 800372e:	409a      	lsls	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	f010803f 	.word	0xf010803f

08003750 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_DMA_Start_IT+0x26>
 8003772:	2302      	movs	r3, #2
 8003774:	e040      	b.n	80037f8 <HAL_DMA_Start_IT+0xa8>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d12f      	bne.n	80037ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2202      	movs	r2, #2
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fa4a 	bl	8003c38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	223f      	movs	r2, #63	; 0x3f
 80037aa:	409a      	lsls	r2, r3
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0216 	orr.w	r2, r2, #22
 80037be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0208 	orr.w	r2, r2, #8
 80037d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e005      	b.n	80037f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037f2:	2302      	movs	r3, #2
 80037f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800380e:	f7ff fdd1 	bl	80033b4 <HAL_GetTick>
 8003812:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d008      	beq.n	8003832 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e052      	b.n	80038d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0216 	bic.w	r2, r2, #22
 8003840:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003850:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d103      	bne.n	8003862 <HAL_DMA_Abort+0x62>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0208 	bic.w	r2, r2, #8
 8003870:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0201 	bic.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003882:	e013      	b.n	80038ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003884:	f7ff fd96 	bl	80033b4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b05      	cmp	r3, #5
 8003890:	d90c      	bls.n	80038ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2203      	movs	r2, #3
 800389c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e015      	b.n	80038d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e4      	bne.n	8003884 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038be:	223f      	movs	r2, #63	; 0x3f
 80038c0:	409a      	lsls	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d004      	beq.n	80038fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2280      	movs	r2, #128	; 0x80
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e00c      	b.n	8003918 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2205      	movs	r2, #5
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003930:	4b8e      	ldr	r3, [pc, #568]	; (8003b6c <HAL_DMA_IRQHandler+0x248>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a8e      	ldr	r2, [pc, #568]	; (8003b70 <HAL_DMA_IRQHandler+0x24c>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	0a9b      	lsrs	r3, r3, #10
 800393c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	2208      	movs	r2, #8
 8003950:	409a      	lsls	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01a      	beq.n	8003990 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0204 	bic.w	r2, r2, #4
 8003976:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	2208      	movs	r2, #8
 800397e:	409a      	lsls	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	f043 0201 	orr.w	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	2201      	movs	r2, #1
 8003996:	409a      	lsls	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d012      	beq.n	80039c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	2201      	movs	r2, #1
 80039b4:	409a      	lsls	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f043 0202 	orr.w	r2, r3, #2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ca:	2204      	movs	r2, #4
 80039cc:	409a      	lsls	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d012      	beq.n	80039fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00b      	beq.n	80039fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e8:	2204      	movs	r2, #4
 80039ea:	409a      	lsls	r2, r3
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	f043 0204 	orr.w	r2, r3, #4
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	2210      	movs	r2, #16
 8003a02:	409a      	lsls	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d043      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d03c      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1e:	2210      	movs	r2, #16
 8003a20:	409a      	lsls	r2, r3
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d018      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d024      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
 8003a52:	e01f      	b.n	8003a94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01b      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
 8003a64:	e016      	b.n	8003a94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d107      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0208 	bic.w	r2, r2, #8
 8003a82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a98:	2220      	movs	r2, #32
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 808f 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8087 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aba:	2220      	movs	r2, #32
 8003abc:	409a      	lsls	r2, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	d136      	bne.n	8003b3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0216 	bic.w	r2, r2, #22
 8003adc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d103      	bne.n	8003afe <HAL_DMA_IRQHandler+0x1da>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0208 	bic.w	r2, r2, #8
 8003b0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	223f      	movs	r2, #63	; 0x3f
 8003b14:	409a      	lsls	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d07e      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
        }
        return;
 8003b3a:	e079      	b.n	8003c30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d01d      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10d      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d031      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
 8003b68:	e02c      	b.n	8003bc4 <HAL_DMA_IRQHandler+0x2a0>
 8003b6a:	bf00      	nop
 8003b6c:	20000034 	.word	0x20000034
 8003b70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d023      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4798      	blx	r3
 8003b84:	e01e      	b.n	8003bc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10f      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0210 	bic.w	r2, r2, #16
 8003ba2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d032      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d022      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2205      	movs	r2, #5
 8003bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d307      	bcc.n	8003c0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f2      	bne.n	8003bf0 <HAL_DMA_IRQHandler+0x2cc>
 8003c0a:	e000      	b.n	8003c0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
 8003c2e:	e000      	b.n	8003c32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c30:	bf00      	nop
    }
  }
}
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d108      	bne.n	8003c78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c76:	e007      	b.n	8003c88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	60da      	str	r2, [r3, #12]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	3b10      	subs	r3, #16
 8003ca4:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x64>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	091b      	lsrs	r3, r3, #4
 8003cac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cae:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <DMA_CalcBaseAndBitshift+0x68>)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d909      	bls.n	8003cd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cca:	f023 0303 	bic.w	r3, r3, #3
 8003cce:	1d1a      	adds	r2, r3, #4
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	659a      	str	r2, [r3, #88]	; 0x58
 8003cd4:	e007      	b.n	8003ce6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cde:	f023 0303 	bic.w	r3, r3, #3
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	aaaaaaab 	.word	0xaaaaaaab
 8003cfc:	0800e4a4 	.word	0x0800e4a4

08003d00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d11f      	bne.n	8003d5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d856      	bhi.n	8003dce <DMA_CheckFifoParam+0xce>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <DMA_CheckFifoParam+0x28>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d39 	.word	0x08003d39
 8003d2c:	08003d4b 	.word	0x08003d4b
 8003d30:	08003d39 	.word	0x08003d39
 8003d34:	08003dcf 	.word	0x08003dcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d046      	beq.n	8003dd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d48:	e043      	b.n	8003dd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d52:	d140      	bne.n	8003dd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d58:	e03d      	b.n	8003dd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d62:	d121      	bne.n	8003da8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d837      	bhi.n	8003dda <DMA_CheckFifoParam+0xda>
 8003d6a:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <DMA_CheckFifoParam+0x70>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d87 	.word	0x08003d87
 8003d78:	08003d81 	.word	0x08003d81
 8003d7c:	08003d99 	.word	0x08003d99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
      break;
 8003d84:	e030      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d025      	beq.n	8003dde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d96:	e022      	b.n	8003dde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003da0:	d11f      	bne.n	8003de2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003da6:	e01c      	b.n	8003de2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d903      	bls.n	8003db6 <DMA_CheckFifoParam+0xb6>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d003      	beq.n	8003dbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003db4:	e018      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
      break;
 8003dba:	e015      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00e      	beq.n	8003de6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      break;
 8003dcc:	e00b      	b.n	8003de6 <DMA_CheckFifoParam+0xe6>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e00a      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e008      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e006      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e004      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
      break;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
      break;
 8003de6:	bf00      	nop
    }
  } 
  
  return status; 
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop

08003df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b089      	sub	sp, #36	; 0x24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	e165      	b.n	80040e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e14:	2201      	movs	r2, #1
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4013      	ands	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	f040 8154 	bne.w	80040da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d005      	beq.n	8003e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d130      	bne.n	8003eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	2203      	movs	r2, #3
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e80:	2201      	movs	r2, #1
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 0201 	and.w	r2, r3, #1
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d017      	beq.n	8003ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d123      	bne.n	8003f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	08da      	lsrs	r2, r3, #3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3208      	adds	r2, #8
 8003efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	220f      	movs	r2, #15
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	08da      	lsrs	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3208      	adds	r2, #8
 8003f36:	69b9      	ldr	r1, [r7, #24]
 8003f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	2203      	movs	r2, #3
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0203 	and.w	r2, r3, #3
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80ae 	beq.w	80040da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <HAL_GPIO_Init+0x300>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	4a5c      	ldr	r2, [pc, #368]	; (80040f8 <HAL_GPIO_Init+0x300>)
 8003f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8e:	4b5a      	ldr	r3, [pc, #360]	; (80040f8 <HAL_GPIO_Init+0x300>)
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f9a:	4a58      	ldr	r2, [pc, #352]	; (80040fc <HAL_GPIO_Init+0x304>)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a4f      	ldr	r2, [pc, #316]	; (8004100 <HAL_GPIO_Init+0x308>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d025      	beq.n	8004012 <HAL_GPIO_Init+0x21a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a4e      	ldr	r2, [pc, #312]	; (8004104 <HAL_GPIO_Init+0x30c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01f      	beq.n	800400e <HAL_GPIO_Init+0x216>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a4d      	ldr	r2, [pc, #308]	; (8004108 <HAL_GPIO_Init+0x310>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d019      	beq.n	800400a <HAL_GPIO_Init+0x212>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a4c      	ldr	r2, [pc, #304]	; (800410c <HAL_GPIO_Init+0x314>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_GPIO_Init+0x20e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a4b      	ldr	r2, [pc, #300]	; (8004110 <HAL_GPIO_Init+0x318>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00d      	beq.n	8004002 <HAL_GPIO_Init+0x20a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a4a      	ldr	r2, [pc, #296]	; (8004114 <HAL_GPIO_Init+0x31c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d007      	beq.n	8003ffe <HAL_GPIO_Init+0x206>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a49      	ldr	r2, [pc, #292]	; (8004118 <HAL_GPIO_Init+0x320>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d101      	bne.n	8003ffa <HAL_GPIO_Init+0x202>
 8003ff6:	2306      	movs	r3, #6
 8003ff8:	e00c      	b.n	8004014 <HAL_GPIO_Init+0x21c>
 8003ffa:	2307      	movs	r3, #7
 8003ffc:	e00a      	b.n	8004014 <HAL_GPIO_Init+0x21c>
 8003ffe:	2305      	movs	r3, #5
 8004000:	e008      	b.n	8004014 <HAL_GPIO_Init+0x21c>
 8004002:	2304      	movs	r3, #4
 8004004:	e006      	b.n	8004014 <HAL_GPIO_Init+0x21c>
 8004006:	2303      	movs	r3, #3
 8004008:	e004      	b.n	8004014 <HAL_GPIO_Init+0x21c>
 800400a:	2302      	movs	r3, #2
 800400c:	e002      	b.n	8004014 <HAL_GPIO_Init+0x21c>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <HAL_GPIO_Init+0x21c>
 8004012:	2300      	movs	r3, #0
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	f002 0203 	and.w	r2, r2, #3
 800401a:	0092      	lsls	r2, r2, #2
 800401c:	4093      	lsls	r3, r2
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004024:	4935      	ldr	r1, [pc, #212]	; (80040fc <HAL_GPIO_Init+0x304>)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	089b      	lsrs	r3, r3, #2
 800402a:	3302      	adds	r3, #2
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004032:	4b3a      	ldr	r3, [pc, #232]	; (800411c <HAL_GPIO_Init+0x324>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004056:	4a31      	ldr	r2, [pc, #196]	; (800411c <HAL_GPIO_Init+0x324>)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800405c:	4b2f      	ldr	r3, [pc, #188]	; (800411c <HAL_GPIO_Init+0x324>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004080:	4a26      	ldr	r2, [pc, #152]	; (800411c <HAL_GPIO_Init+0x324>)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004086:	4b25      	ldr	r3, [pc, #148]	; (800411c <HAL_GPIO_Init+0x324>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040aa:	4a1c      	ldr	r2, [pc, #112]	; (800411c <HAL_GPIO_Init+0x324>)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b0:	4b1a      	ldr	r3, [pc, #104]	; (800411c <HAL_GPIO_Init+0x324>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040d4:	4a11      	ldr	r2, [pc, #68]	; (800411c <HAL_GPIO_Init+0x324>)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3301      	adds	r3, #1
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	2b0f      	cmp	r3, #15
 80040e4:	f67f ae96 	bls.w	8003e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	3724      	adds	r7, #36	; 0x24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40013800 	.word	0x40013800
 8004100:	40020000 	.word	0x40020000
 8004104:	40020400 	.word	0x40020400
 8004108:	40020800 	.word	0x40020800
 800410c:	40020c00 	.word	0x40020c00
 8004110:	40021000 	.word	0x40021000
 8004114:	40021400 	.word	0x40021400
 8004118:	40021800 	.word	0x40021800
 800411c:	40013c00 	.word	0x40013c00

08004120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
 800412c:	4613      	mov	r3, r2
 800412e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004130:	787b      	ldrb	r3, [r7, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800413c:	e003      	b.n	8004146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800413e:	887b      	ldrh	r3, [r7, #2]
 8004140:	041a      	lsls	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	619a      	str	r2, [r3, #24]
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d006      	beq.n	8004178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800416a:	4a05      	ldr	r2, [pc, #20]	; (8004180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fd fef0 	bl	8001f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40013c00 	.word	0x40013c00

08004184 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	4b20      	ldr	r3, [pc, #128]	; (8004214 <HAL_PWREx_EnableOverDrive+0x90>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <HAL_PWREx_EnableOverDrive+0x90>)
 8004198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419c:	6413      	str	r3, [r2, #64]	; 0x40
 800419e:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <HAL_PWREx_EnableOverDrive+0x90>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80041aa:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <HAL_PWREx_EnableOverDrive+0x94>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041b0:	f7ff f900 	bl	80033b4 <HAL_GetTick>
 80041b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041b6:	e009      	b.n	80041cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041b8:	f7ff f8fc 	bl	80033b4 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041c6:	d901      	bls.n	80041cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e01f      	b.n	800420c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041cc:	4b13      	ldr	r3, [pc, #76]	; (800421c <HAL_PWREx_EnableOverDrive+0x98>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d8:	d1ee      	bne.n	80041b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041da:	4b11      	ldr	r3, [pc, #68]	; (8004220 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041dc:	2201      	movs	r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041e0:	f7ff f8e8 	bl	80033b4 <HAL_GetTick>
 80041e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041e6:	e009      	b.n	80041fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041e8:	f7ff f8e4 	bl	80033b4 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041f6:	d901      	bls.n	80041fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e007      	b.n	800420c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <HAL_PWREx_EnableOverDrive+0x98>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004208:	d1ee      	bne.n	80041e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40023800 	.word	0x40023800
 8004218:	420e0040 	.word	0x420e0040
 800421c:	40007000 	.word	0x40007000
 8004220:	420e0044 	.word	0x420e0044

08004224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0cc      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004238:	4b68      	ldr	r3, [pc, #416]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d90c      	bls.n	8004260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b65      	ldr	r3, [pc, #404]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b63      	ldr	r3, [pc, #396]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0b8      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d020      	beq.n	80042ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004278:	4b59      	ldr	r3, [pc, #356]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4a58      	ldr	r2, [pc, #352]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004290:	4b53      	ldr	r3, [pc, #332]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4a52      	ldr	r2, [pc, #328]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800429a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800429c:	4b50      	ldr	r3, [pc, #320]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	494d      	ldr	r1, [pc, #308]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d044      	beq.n	8004344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d107      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	4b47      	ldr	r3, [pc, #284]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d119      	bne.n	8004302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e07f      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d003      	beq.n	80042e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d107      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e2:	4b3f      	ldr	r3, [pc, #252]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e06f      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f2:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e067      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004302:	4b37      	ldr	r3, [pc, #220]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f023 0203 	bic.w	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4934      	ldr	r1, [pc, #208]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	4313      	orrs	r3, r2
 8004312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004314:	f7ff f84e 	bl	80033b4 <HAL_GetTick>
 8004318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431a:	e00a      	b.n	8004332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800431c:	f7ff f84a 	bl	80033b4 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	; 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e04f      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 020c 	and.w	r2, r3, #12
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	429a      	cmp	r2, r3
 8004342:	d1eb      	bne.n	800431c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004344:	4b25      	ldr	r3, [pc, #148]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d20c      	bcs.n	800436c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b22      	ldr	r3, [pc, #136]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435a:	4b20      	ldr	r3, [pc, #128]	; (80043dc <HAL_RCC_ClockConfig+0x1b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e032      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004378:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4916      	ldr	r1, [pc, #88]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004396:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	490e      	ldr	r1, [pc, #56]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043aa:	f000 f887 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 80043ae:	4602      	mov	r2, r0
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	490a      	ldr	r1, [pc, #40]	; (80043e4 <HAL_RCC_ClockConfig+0x1c0>)
 80043bc:	5ccb      	ldrb	r3, [r1, r3]
 80043be:	fa22 f303 	lsr.w	r3, r2, r3
 80043c2:	4a09      	ldr	r2, [pc, #36]	; (80043e8 <HAL_RCC_ClockConfig+0x1c4>)
 80043c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe fdc4 	bl	8002f58 <HAL_InitTick>

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40023c00 	.word	0x40023c00
 80043e0:	40023800 	.word	0x40023800
 80043e4:	0800e48c 	.word	0x0800e48c
 80043e8:	20000034 	.word	0x20000034
 80043ec:	20000038 	.word	0x20000038

080043f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000034 	.word	0x20000034

08004408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800440c:	f7ff fff0 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0a9b      	lsrs	r3, r3, #10
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4903      	ldr	r1, [pc, #12]	; (800442c <HAL_RCC_GetPCLK1Freq+0x24>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	0800e49c 	.word	0x0800e49c

08004430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004434:	f7ff ffdc 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0b5b      	lsrs	r3, r3, #13
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4903      	ldr	r1, [pc, #12]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40023800 	.word	0x40023800
 8004454:	0800e49c 	.word	0x0800e49c

08004458 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	220f      	movs	r2, #15
 8004466:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_RCC_GetClockConfig+0x5c>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0203 	and.w	r2, r3, #3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004474:	4b0f      	ldr	r3, [pc, #60]	; (80044b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_GetClockConfig+0x5c>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	08db      	lsrs	r3, r3, #3
 8004492:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800449a:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <HAL_RCC_GetClockConfig+0x60>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 020f 	and.w	r2, r3, #15
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	601a      	str	r2, [r3, #0]
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40023c00 	.word	0x40023c00

080044bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c0:	b0ae      	sub	sp, #184	; 0xb8
 80044c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044e2:	4bcb      	ldr	r3, [pc, #812]	; (8004810 <HAL_RCC_GetSysClockFreq+0x354>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b0c      	cmp	r3, #12
 80044ec:	f200 8206 	bhi.w	80048fc <HAL_RCC_GetSysClockFreq+0x440>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	080048fd 	.word	0x080048fd
 8004500:	080048fd 	.word	0x080048fd
 8004504:	080048fd 	.word	0x080048fd
 8004508:	08004535 	.word	0x08004535
 800450c:	080048fd 	.word	0x080048fd
 8004510:	080048fd 	.word	0x080048fd
 8004514:	080048fd 	.word	0x080048fd
 8004518:	0800453d 	.word	0x0800453d
 800451c:	080048fd 	.word	0x080048fd
 8004520:	080048fd 	.word	0x080048fd
 8004524:	080048fd 	.word	0x080048fd
 8004528:	0800472d 	.word	0x0800472d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800452c:	4bb9      	ldr	r3, [pc, #740]	; (8004814 <HAL_RCC_GetSysClockFreq+0x358>)
 800452e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004532:	e1e7      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004534:	4bb8      	ldr	r3, [pc, #736]	; (8004818 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800453a:	e1e3      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800453c:	4bb4      	ldr	r3, [pc, #720]	; (8004810 <HAL_RCC_GetSysClockFreq+0x354>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004548:	4bb1      	ldr	r3, [pc, #708]	; (8004810 <HAL_RCC_GetSysClockFreq+0x354>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d071      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004554:	4bae      	ldr	r3, [pc, #696]	; (8004810 <HAL_RCC_GetSysClockFreq+0x354>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	099b      	lsrs	r3, r3, #6
 800455a:	2200      	movs	r2, #0
 800455c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004560:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004570:	2300      	movs	r3, #0
 8004572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800457a:	4622      	mov	r2, r4
 800457c:	462b      	mov	r3, r5
 800457e:	f04f 0000 	mov.w	r0, #0
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	0159      	lsls	r1, r3, #5
 8004588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800458c:	0150      	lsls	r0, r2, #5
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4621      	mov	r1, r4
 8004594:	1a51      	subs	r1, r2, r1
 8004596:	6439      	str	r1, [r7, #64]	; 0x40
 8004598:	4629      	mov	r1, r5
 800459a:	eb63 0301 	sbc.w	r3, r3, r1
 800459e:	647b      	str	r3, [r7, #68]	; 0x44
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80045ac:	4649      	mov	r1, r9
 80045ae:	018b      	lsls	r3, r1, #6
 80045b0:	4641      	mov	r1, r8
 80045b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045b6:	4641      	mov	r1, r8
 80045b8:	018a      	lsls	r2, r1, #6
 80045ba:	4641      	mov	r1, r8
 80045bc:	1a51      	subs	r1, r2, r1
 80045be:	63b9      	str	r1, [r7, #56]	; 0x38
 80045c0:	4649      	mov	r1, r9
 80045c2:	eb63 0301 	sbc.w	r3, r3, r1
 80045c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80045d4:	4649      	mov	r1, r9
 80045d6:	00cb      	lsls	r3, r1, #3
 80045d8:	4641      	mov	r1, r8
 80045da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045de:	4641      	mov	r1, r8
 80045e0:	00ca      	lsls	r2, r1, #3
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	4603      	mov	r3, r0
 80045e8:	4622      	mov	r2, r4
 80045ea:	189b      	adds	r3, r3, r2
 80045ec:	633b      	str	r3, [r7, #48]	; 0x30
 80045ee:	462b      	mov	r3, r5
 80045f0:	460a      	mov	r2, r1
 80045f2:	eb42 0303 	adc.w	r3, r2, r3
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004604:	4629      	mov	r1, r5
 8004606:	024b      	lsls	r3, r1, #9
 8004608:	4621      	mov	r1, r4
 800460a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800460e:	4621      	mov	r1, r4
 8004610:	024a      	lsls	r2, r1, #9
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800461a:	2200      	movs	r2, #0
 800461c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004620:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004624:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004628:	f7fc fb5e 	bl	8000ce8 <__aeabi_uldivmod>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4613      	mov	r3, r2
 8004632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004636:	e067      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004638:	4b75      	ldr	r3, [pc, #468]	; (8004810 <HAL_RCC_GetSysClockFreq+0x354>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	099b      	lsrs	r3, r3, #6
 800463e:	2200      	movs	r2, #0
 8004640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004644:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	67bb      	str	r3, [r7, #120]	; 0x78
 8004652:	2300      	movs	r3, #0
 8004654:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004656:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800465a:	4622      	mov	r2, r4
 800465c:	462b      	mov	r3, r5
 800465e:	f04f 0000 	mov.w	r0, #0
 8004662:	f04f 0100 	mov.w	r1, #0
 8004666:	0159      	lsls	r1, r3, #5
 8004668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800466c:	0150      	lsls	r0, r2, #5
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4621      	mov	r1, r4
 8004674:	1a51      	subs	r1, r2, r1
 8004676:	62b9      	str	r1, [r7, #40]	; 0x28
 8004678:	4629      	mov	r1, r5
 800467a:	eb63 0301 	sbc.w	r3, r3, r1
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800468c:	4649      	mov	r1, r9
 800468e:	018b      	lsls	r3, r1, #6
 8004690:	4641      	mov	r1, r8
 8004692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004696:	4641      	mov	r1, r8
 8004698:	018a      	lsls	r2, r1, #6
 800469a:	4641      	mov	r1, r8
 800469c:	ebb2 0a01 	subs.w	sl, r2, r1
 80046a0:	4649      	mov	r1, r9
 80046a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046ba:	4692      	mov	sl, r2
 80046bc:	469b      	mov	fp, r3
 80046be:	4623      	mov	r3, r4
 80046c0:	eb1a 0303 	adds.w	r3, sl, r3
 80046c4:	623b      	str	r3, [r7, #32]
 80046c6:	462b      	mov	r3, r5
 80046c8:	eb4b 0303 	adc.w	r3, fp, r3
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	f04f 0300 	mov.w	r3, #0
 80046d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80046da:	4629      	mov	r1, r5
 80046dc:	028b      	lsls	r3, r1, #10
 80046de:	4621      	mov	r1, r4
 80046e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046e4:	4621      	mov	r1, r4
 80046e6:	028a      	lsls	r2, r1, #10
 80046e8:	4610      	mov	r0, r2
 80046ea:	4619      	mov	r1, r3
 80046ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046f0:	2200      	movs	r2, #0
 80046f2:	673b      	str	r3, [r7, #112]	; 0x70
 80046f4:	677a      	str	r2, [r7, #116]	; 0x74
 80046f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80046fa:	f7fc faf5 	bl	8000ce8 <__aeabi_uldivmod>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4613      	mov	r3, r2
 8004704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004708:	4b41      	ldr	r3, [pc, #260]	; (8004810 <HAL_RCC_GetSysClockFreq+0x354>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	3301      	adds	r3, #1
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800471a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800471e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004722:	fbb2 f3f3 	udiv	r3, r2, r3
 8004726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800472a:	e0eb      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800472c:	4b38      	ldr	r3, [pc, #224]	; (8004810 <HAL_RCC_GetSysClockFreq+0x354>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004738:	4b35      	ldr	r3, [pc, #212]	; (8004810 <HAL_RCC_GetSysClockFreq+0x354>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d06b      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004744:	4b32      	ldr	r3, [pc, #200]	; (8004810 <HAL_RCC_GetSysClockFreq+0x354>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	099b      	lsrs	r3, r3, #6
 800474a:	2200      	movs	r2, #0
 800474c:	66bb      	str	r3, [r7, #104]	; 0x68
 800474e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	663b      	str	r3, [r7, #96]	; 0x60
 8004758:	2300      	movs	r3, #0
 800475a:	667b      	str	r3, [r7, #100]	; 0x64
 800475c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004760:	4622      	mov	r2, r4
 8004762:	462b      	mov	r3, r5
 8004764:	f04f 0000 	mov.w	r0, #0
 8004768:	f04f 0100 	mov.w	r1, #0
 800476c:	0159      	lsls	r1, r3, #5
 800476e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004772:	0150      	lsls	r0, r2, #5
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4621      	mov	r1, r4
 800477a:	1a51      	subs	r1, r2, r1
 800477c:	61b9      	str	r1, [r7, #24]
 800477e:	4629      	mov	r1, r5
 8004780:	eb63 0301 	sbc.w	r3, r3, r1
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004792:	4659      	mov	r1, fp
 8004794:	018b      	lsls	r3, r1, #6
 8004796:	4651      	mov	r1, sl
 8004798:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800479c:	4651      	mov	r1, sl
 800479e:	018a      	lsls	r2, r1, #6
 80047a0:	4651      	mov	r1, sl
 80047a2:	ebb2 0801 	subs.w	r8, r2, r1
 80047a6:	4659      	mov	r1, fp
 80047a8:	eb63 0901 	sbc.w	r9, r3, r1
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047c0:	4690      	mov	r8, r2
 80047c2:	4699      	mov	r9, r3
 80047c4:	4623      	mov	r3, r4
 80047c6:	eb18 0303 	adds.w	r3, r8, r3
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	462b      	mov	r3, r5
 80047ce:	eb49 0303 	adc.w	r3, r9, r3
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80047e0:	4629      	mov	r1, r5
 80047e2:	024b      	lsls	r3, r1, #9
 80047e4:	4621      	mov	r1, r4
 80047e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047ea:	4621      	mov	r1, r4
 80047ec:	024a      	lsls	r2, r1, #9
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047f6:	2200      	movs	r2, #0
 80047f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80047fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80047fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004800:	f7fc fa72 	bl	8000ce8 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800480e:	e065      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x420>
 8004810:	40023800 	.word	0x40023800
 8004814:	00f42400 	.word	0x00f42400
 8004818:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800481c:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_RCC_GetSysClockFreq+0x458>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	2200      	movs	r2, #0
 8004824:	4618      	mov	r0, r3
 8004826:	4611      	mov	r1, r2
 8004828:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800482c:	653b      	str	r3, [r7, #80]	; 0x50
 800482e:	2300      	movs	r3, #0
 8004830:	657b      	str	r3, [r7, #84]	; 0x54
 8004832:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004836:	4642      	mov	r2, r8
 8004838:	464b      	mov	r3, r9
 800483a:	f04f 0000 	mov.w	r0, #0
 800483e:	f04f 0100 	mov.w	r1, #0
 8004842:	0159      	lsls	r1, r3, #5
 8004844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004848:	0150      	lsls	r0, r2, #5
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4641      	mov	r1, r8
 8004850:	1a51      	subs	r1, r2, r1
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	4649      	mov	r1, r9
 8004856:	eb63 0301 	sbc.w	r3, r3, r1
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004868:	4659      	mov	r1, fp
 800486a:	018b      	lsls	r3, r1, #6
 800486c:	4651      	mov	r1, sl
 800486e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004872:	4651      	mov	r1, sl
 8004874:	018a      	lsls	r2, r1, #6
 8004876:	4651      	mov	r1, sl
 8004878:	1a54      	subs	r4, r2, r1
 800487a:	4659      	mov	r1, fp
 800487c:	eb63 0501 	sbc.w	r5, r3, r1
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	00eb      	lsls	r3, r5, #3
 800488a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800488e:	00e2      	lsls	r2, r4, #3
 8004890:	4614      	mov	r4, r2
 8004892:	461d      	mov	r5, r3
 8004894:	4643      	mov	r3, r8
 8004896:	18e3      	adds	r3, r4, r3
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	464b      	mov	r3, r9
 800489c:	eb45 0303 	adc.w	r3, r5, r3
 80048a0:	607b      	str	r3, [r7, #4]
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ae:	4629      	mov	r1, r5
 80048b0:	028b      	lsls	r3, r1, #10
 80048b2:	4621      	mov	r1, r4
 80048b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b8:	4621      	mov	r1, r4
 80048ba:	028a      	lsls	r2, r1, #10
 80048bc:	4610      	mov	r0, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048c4:	2200      	movs	r2, #0
 80048c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80048ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048ce:	f7fc fa0b 	bl	8000ce8 <__aeabi_uldivmod>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4613      	mov	r3, r2
 80048d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048dc:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <HAL_RCC_GetSysClockFreq+0x458>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	0f1b      	lsrs	r3, r3, #28
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80048ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80048fa:	e003      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <HAL_RCC_GetSysClockFreq+0x45c>)
 80048fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004902:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004904:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004908:	4618      	mov	r0, r3
 800490a:	37b8      	adds	r7, #184	; 0xb8
 800490c:	46bd      	mov	sp, r7
 800490e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
 8004918:	00f42400 	.word	0x00f42400

0800491c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e28d      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8083 	beq.w	8004a42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800493c:	4b94      	ldr	r3, [pc, #592]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b04      	cmp	r3, #4
 8004946:	d019      	beq.n	800497c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004948:	4b91      	ldr	r3, [pc, #580]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004950:	2b08      	cmp	r3, #8
 8004952:	d106      	bne.n	8004962 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004954:	4b8e      	ldr	r3, [pc, #568]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004960:	d00c      	beq.n	800497c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004962:	4b8b      	ldr	r3, [pc, #556]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d112      	bne.n	8004994 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496e:	4b88      	ldr	r3, [pc, #544]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800497a:	d10b      	bne.n	8004994 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800497c:	4b84      	ldr	r3, [pc, #528]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d05b      	beq.n	8004a40 <HAL_RCC_OscConfig+0x124>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d157      	bne.n	8004a40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e25a      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499c:	d106      	bne.n	80049ac <HAL_RCC_OscConfig+0x90>
 800499e:	4b7c      	ldr	r3, [pc, #496]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a7b      	ldr	r2, [pc, #492]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	e01d      	b.n	80049e8 <HAL_RCC_OscConfig+0xcc>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCC_OscConfig+0xb4>
 80049b6:	4b76      	ldr	r3, [pc, #472]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a75      	ldr	r2, [pc, #468]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	4b73      	ldr	r3, [pc, #460]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a72      	ldr	r2, [pc, #456]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e00b      	b.n	80049e8 <HAL_RCC_OscConfig+0xcc>
 80049d0:	4b6f      	ldr	r3, [pc, #444]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a6e      	ldr	r2, [pc, #440]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4b6c      	ldr	r3, [pc, #432]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a6b      	ldr	r2, [pc, #428]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d013      	beq.n	8004a18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fe fce0 	bl	80033b4 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fe fcdc 	bl	80033b4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e21f      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	4b61      	ldr	r3, [pc, #388]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0xdc>
 8004a16:	e014      	b.n	8004a42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fe fccc 	bl	80033b4 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a20:	f7fe fcc8 	bl	80033b4 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b64      	cmp	r3, #100	; 0x64
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e20b      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a32:	4b57      	ldr	r3, [pc, #348]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x104>
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d06f      	beq.n	8004b2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a4e:	4b50      	ldr	r3, [pc, #320]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d017      	beq.n	8004a8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a5a:	4b4d      	ldr	r3, [pc, #308]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d105      	bne.n	8004a72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a66:	4b4a      	ldr	r3, [pc, #296]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a72:	4b47      	ldr	r3, [pc, #284]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	d11c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a7e:	4b44      	ldr	r3, [pc, #272]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d116      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8a:	4b41      	ldr	r3, [pc, #260]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x186>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d001      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e1d3      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa2:	4b3b      	ldr	r3, [pc, #236]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4937      	ldr	r1, [pc, #220]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ab6:	e03a      	b.n	8004b2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d020      	beq.n	8004b02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac0:	4b34      	ldr	r3, [pc, #208]	; (8004b94 <HAL_RCC_OscConfig+0x278>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac6:	f7fe fc75 	bl	80033b4 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ace:	f7fe fc71 	bl	80033b4 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e1b4      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae0:	4b2b      	ldr	r3, [pc, #172]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aec:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4925      	ldr	r1, [pc, #148]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	600b      	str	r3, [r1, #0]
 8004b00:	e015      	b.n	8004b2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b02:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <HAL_RCC_OscConfig+0x278>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b08:	f7fe fc54 	bl	80033b4 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b10:	f7fe fc50 	bl	80033b4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e193      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b22:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d036      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b42:	4b15      	ldr	r3, [pc, #84]	; (8004b98 <HAL_RCC_OscConfig+0x27c>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fe fc34 	bl	80033b4 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b50:	f7fe fc30 	bl	80033b4 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e173      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x234>
 8004b6e:	e01b      	b.n	8004ba8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <HAL_RCC_OscConfig+0x27c>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b76:	f7fe fc1d 	bl	80033b4 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b7c:	e00e      	b.n	8004b9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b7e:	f7fe fc19 	bl	80033b4 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d907      	bls.n	8004b9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e15c      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
 8004b90:	40023800 	.word	0x40023800
 8004b94:	42470000 	.word	0x42470000
 8004b98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b9c:	4b8a      	ldr	r3, [pc, #552]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1ea      	bne.n	8004b7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8097 	beq.w	8004ce4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bba:	4b83      	ldr	r3, [pc, #524]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10f      	bne.n	8004be6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	4b7f      	ldr	r3, [pc, #508]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	4a7e      	ldr	r2, [pc, #504]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bd6:	4b7c      	ldr	r3, [pc, #496]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be6:	4b79      	ldr	r3, [pc, #484]	; (8004dcc <HAL_RCC_OscConfig+0x4b0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d118      	bne.n	8004c24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bf2:	4b76      	ldr	r3, [pc, #472]	; (8004dcc <HAL_RCC_OscConfig+0x4b0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a75      	ldr	r2, [pc, #468]	; (8004dcc <HAL_RCC_OscConfig+0x4b0>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfe:	f7fe fbd9 	bl	80033b4 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c06:	f7fe fbd5 	bl	80033b4 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e118      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c18:	4b6c      	ldr	r3, [pc, #432]	; (8004dcc <HAL_RCC_OscConfig+0x4b0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCC_OscConfig+0x31e>
 8004c2c:	4b66      	ldr	r3, [pc, #408]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	4a65      	ldr	r2, [pc, #404]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
 8004c38:	e01c      	b.n	8004c74 <HAL_RCC_OscConfig+0x358>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x340>
 8004c42:	4b61      	ldr	r3, [pc, #388]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4a60      	ldr	r2, [pc, #384]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c48:	f043 0304 	orr.w	r3, r3, #4
 8004c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4e:	4b5e      	ldr	r3, [pc, #376]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	4a5d      	ldr	r2, [pc, #372]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5a:	e00b      	b.n	8004c74 <HAL_RCC_OscConfig+0x358>
 8004c5c:	4b5a      	ldr	r3, [pc, #360]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c60:	4a59      	ldr	r2, [pc, #356]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	6713      	str	r3, [r2, #112]	; 0x70
 8004c68:	4b57      	ldr	r3, [pc, #348]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6c:	4a56      	ldr	r2, [pc, #344]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c6e:	f023 0304 	bic.w	r3, r3, #4
 8004c72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d015      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7c:	f7fe fb9a 	bl	80033b4 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c84:	f7fe fb96 	bl	80033b4 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e0d7      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9a:	4b4b      	ldr	r3, [pc, #300]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0ee      	beq.n	8004c84 <HAL_RCC_OscConfig+0x368>
 8004ca6:	e014      	b.n	8004cd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fe fb84 	bl	80033b4 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cae:	e00a      	b.n	8004cc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb0:	f7fe fb80 	bl	80033b4 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e0c1      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cc6:	4b40      	ldr	r3, [pc, #256]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1ee      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd8:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	4a3a      	ldr	r2, [pc, #232]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80ad 	beq.w	8004e48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cee:	4b36      	ldr	r3, [pc, #216]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d060      	beq.n	8004dbc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d145      	bne.n	8004d8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d02:	4b33      	ldr	r3, [pc, #204]	; (8004dd0 <HAL_RCC_OscConfig+0x4b4>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fe fb54 	bl	80033b4 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d10:	f7fe fb50 	bl	80033b4 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e093      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d22:	4b29      	ldr	r3, [pc, #164]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69da      	ldr	r2, [r3, #28]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	019b      	lsls	r3, r3, #6
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	3b01      	subs	r3, #1
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	061b      	lsls	r3, r3, #24
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	071b      	lsls	r3, r3, #28
 8004d5a:	491b      	ldr	r1, [pc, #108]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d60:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_RCC_OscConfig+0x4b4>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fe fb25 	bl	80033b4 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d6e:	f7fe fb21 	bl	80033b4 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e064      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d80:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x452>
 8004d8c:	e05c      	b.n	8004e48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <HAL_RCC_OscConfig+0x4b4>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fe fb0e 	bl	80033b4 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fe fb0a 	bl	80033b4 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e04d      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x480>
 8004dba:	e045      	b.n	8004e48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d107      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e040      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	40007000 	.word	0x40007000
 8004dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dd4:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <HAL_RCC_OscConfig+0x538>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d030      	beq.n	8004e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d129      	bne.n	8004e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d122      	bne.n	8004e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d119      	bne.n	8004e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d10f      	bne.n	8004e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d001      	beq.n	8004e48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800

08004e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e041      	b.n	8004eee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fd fd48 	bl	8002914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f000 fdaa 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d001      	beq.n	8004f10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e04e      	b.n	8004fae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a23      	ldr	r2, [pc, #140]	; (8004fbc <HAL_TIM_Base_Start_IT+0xc4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d022      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x80>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3a:	d01d      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x80>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1f      	ldr	r2, [pc, #124]	; (8004fc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d018      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x80>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x80>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00e      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x80>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1b      	ldr	r2, [pc, #108]	; (8004fcc <HAL_TIM_Base_Start_IT+0xd4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x80>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a19      	ldr	r2, [pc, #100]	; (8004fd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x80>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d111      	bne.n	8004f9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b06      	cmp	r3, #6
 8004f88:	d010      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9a:	e007      	b.n	8004fac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40000c00 	.word	0x40000c00
 8004fcc:	40010400 	.word	0x40010400
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40001800 	.word	0x40001800

08004fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e041      	b.n	800506e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f839 	bl	8005076 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f000 fcea 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d109      	bne.n	80050b0 <HAL_TIM_PWM_Start+0x24>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	bf14      	ite	ne
 80050a8:	2301      	movne	r3, #1
 80050aa:	2300      	moveq	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	e022      	b.n	80050f6 <HAL_TIM_PWM_Start+0x6a>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d109      	bne.n	80050ca <HAL_TIM_PWM_Start+0x3e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b01      	cmp	r3, #1
 80050c0:	bf14      	ite	ne
 80050c2:	2301      	movne	r3, #1
 80050c4:	2300      	moveq	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	e015      	b.n	80050f6 <HAL_TIM_PWM_Start+0x6a>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d109      	bne.n	80050e4 <HAL_TIM_PWM_Start+0x58>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	e008      	b.n	80050f6 <HAL_TIM_PWM_Start+0x6a>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	bf14      	ite	ne
 80050f0:	2301      	movne	r3, #1
 80050f2:	2300      	moveq	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07c      	b.n	80051f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <HAL_TIM_PWM_Start+0x82>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800510c:	e013      	b.n	8005136 <HAL_TIM_PWM_Start+0xaa>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b04      	cmp	r3, #4
 8005112:	d104      	bne.n	800511e <HAL_TIM_PWM_Start+0x92>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800511c:	e00b      	b.n	8005136 <HAL_TIM_PWM_Start+0xaa>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d104      	bne.n	800512e <HAL_TIM_PWM_Start+0xa2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800512c:	e003      	b.n	8005136 <HAL_TIM_PWM_Start+0xaa>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2201      	movs	r2, #1
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f001 f86a 	bl	8006218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2d      	ldr	r2, [pc, #180]	; (8005200 <HAL_TIM_PWM_Start+0x174>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <HAL_TIM_PWM_Start+0xcc>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2c      	ldr	r2, [pc, #176]	; (8005204 <HAL_TIM_PWM_Start+0x178>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d101      	bne.n	800515c <HAL_TIM_PWM_Start+0xd0>
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <HAL_TIM_PWM_Start+0xd2>
 800515c:	2300      	movs	r3, #0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005170:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a22      	ldr	r2, [pc, #136]	; (8005200 <HAL_TIM_PWM_Start+0x174>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d022      	beq.n	80051c2 <HAL_TIM_PWM_Start+0x136>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005184:	d01d      	beq.n	80051c2 <HAL_TIM_PWM_Start+0x136>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <HAL_TIM_PWM_Start+0x17c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d018      	beq.n	80051c2 <HAL_TIM_PWM_Start+0x136>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1d      	ldr	r2, [pc, #116]	; (800520c <HAL_TIM_PWM_Start+0x180>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <HAL_TIM_PWM_Start+0x136>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <HAL_TIM_PWM_Start+0x184>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00e      	beq.n	80051c2 <HAL_TIM_PWM_Start+0x136>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a16      	ldr	r2, [pc, #88]	; (8005204 <HAL_TIM_PWM_Start+0x178>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d009      	beq.n	80051c2 <HAL_TIM_PWM_Start+0x136>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a18      	ldr	r2, [pc, #96]	; (8005214 <HAL_TIM_PWM_Start+0x188>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d004      	beq.n	80051c2 <HAL_TIM_PWM_Start+0x136>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a16      	ldr	r2, [pc, #88]	; (8005218 <HAL_TIM_PWM_Start+0x18c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d111      	bne.n	80051e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b06      	cmp	r3, #6
 80051d2:	d010      	beq.n	80051f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e4:	e007      	b.n	80051f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40010000 	.word	0x40010000
 8005204:	40010400 	.word	0x40010400
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800
 8005210:	40000c00 	.word	0x40000c00
 8005214:	40014000 	.word	0x40014000
 8005218:	40001800 	.word	0x40001800

0800521c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e041      	b.n	80052b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f839 	bl	80052ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f000 fbc8 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d122      	bne.n	800532a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d11b      	bne.n	800532a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f06f 0202 	mvn.w	r2, #2
 80052fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fc fe39 	bl	8001f88 <HAL_TIM_IC_CaptureCallback>
 8005316:	e005      	b.n	8005324 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fb4b 	bl	80059b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fb52 	bl	80059c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b04      	cmp	r3, #4
 8005336:	d122      	bne.n	800537e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b04      	cmp	r3, #4
 8005344:	d11b      	bne.n	800537e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f06f 0204 	mvn.w	r2, #4
 800534e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7fc fe0f 	bl	8001f88 <HAL_TIM_IC_CaptureCallback>
 800536a:	e005      	b.n	8005378 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fb21 	bl	80059b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fb28 	bl	80059c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b08      	cmp	r3, #8
 800538a:	d122      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b08      	cmp	r3, #8
 8005398:	d11b      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f06f 0208 	mvn.w	r2, #8
 80053a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2204      	movs	r2, #4
 80053a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7fc fde5 	bl	8001f88 <HAL_TIM_IC_CaptureCallback>
 80053be:	e005      	b.n	80053cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 faf7 	bl	80059b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fafe 	bl	80059c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 0310 	and.w	r3, r3, #16
 80053dc:	2b10      	cmp	r3, #16
 80053de:	d122      	bne.n	8005426 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2b10      	cmp	r3, #16
 80053ec:	d11b      	bne.n	8005426 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f06f 0210 	mvn.w	r2, #16
 80053f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2208      	movs	r2, #8
 80053fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7fc fdbb 	bl	8001f88 <HAL_TIM_IC_CaptureCallback>
 8005412:	e005      	b.n	8005420 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 facd 	bl	80059b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fad4 	bl	80059c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10e      	bne.n	8005452 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d107      	bne.n	8005452 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f06f 0201 	mvn.w	r2, #1
 800544a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fd fa1d 	bl	800288c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545c:	2b80      	cmp	r3, #128	; 0x80
 800545e:	d10e      	bne.n	800547e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d107      	bne.n	800547e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 ff79 	bl	8006370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b40      	cmp	r3, #64	; 0x40
 800548a:	d10e      	bne.n	80054aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005496:	2b40      	cmp	r3, #64	; 0x40
 8005498:	d107      	bne.n	80054aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa99 	bl	80059dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d10e      	bne.n	80054d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d107      	bne.n	80054d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f06f 0220 	mvn.w	r2, #32
 80054ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 ff43 	bl	800635c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b086      	sub	sp, #24
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_TIM_IC_ConfigChannel+0x1e>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e088      	b.n	800560e <HAL_TIM_IC_ConfigChannel+0x130>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d11b      	bne.n	8005542 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	6819      	ldr	r1, [r3, #0]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f000 fcb9 	bl	8005e90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 020c 	bic.w	r2, r2, #12
 800552c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6999      	ldr	r1, [r3, #24]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	619a      	str	r2, [r3, #24]
 8005540:	e060      	b.n	8005604 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b04      	cmp	r3, #4
 8005546:	d11c      	bne.n	8005582 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f000 fd3d 	bl	8005fd6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800556a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6999      	ldr	r1, [r3, #24]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	021a      	lsls	r2, r3, #8
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	619a      	str	r2, [r3, #24]
 8005580:	e040      	b.n	8005604 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b08      	cmp	r3, #8
 8005586:	d11b      	bne.n	80055c0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	6819      	ldr	r1, [r3, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f000 fd8a 	bl	80060b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69da      	ldr	r2, [r3, #28]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 020c 	bic.w	r2, r2, #12
 80055aa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69d9      	ldr	r1, [r3, #28]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	61da      	str	r2, [r3, #28]
 80055be:	e021      	b.n	8005604 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b0c      	cmp	r3, #12
 80055c4:	d11c      	bne.n	8005600 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6819      	ldr	r1, [r3, #0]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f000 fda7 	bl	8006128 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69d9      	ldr	r1, [r3, #28]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	021a      	lsls	r2, r3, #8
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	61da      	str	r2, [r3, #28]
 80055fe:	e001      	b.n	8005604 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800560c:	7dfb      	ldrb	r3, [r7, #23]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005632:	2302      	movs	r3, #2
 8005634:	e0ae      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b0c      	cmp	r3, #12
 8005642:	f200 809f 	bhi.w	8005784 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	08005681 	.word	0x08005681
 8005650:	08005785 	.word	0x08005785
 8005654:	08005785 	.word	0x08005785
 8005658:	08005785 	.word	0x08005785
 800565c:	080056c1 	.word	0x080056c1
 8005660:	08005785 	.word	0x08005785
 8005664:	08005785 	.word	0x08005785
 8005668:	08005785 	.word	0x08005785
 800566c:	08005703 	.word	0x08005703
 8005670:	08005785 	.word	0x08005785
 8005674:	08005785 	.word	0x08005785
 8005678:	08005785 	.word	0x08005785
 800567c:	08005743 	.word	0x08005743
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fa52 	bl	8005b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0208 	orr.w	r2, r2, #8
 800569a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0204 	bic.w	r2, r2, #4
 80056aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6999      	ldr	r1, [r3, #24]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	619a      	str	r2, [r3, #24]
      break;
 80056be:	e064      	b.n	800578a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 faa2 	bl	8005c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6999      	ldr	r1, [r3, #24]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	021a      	lsls	r2, r3, #8
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	619a      	str	r2, [r3, #24]
      break;
 8005700:	e043      	b.n	800578a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	4618      	mov	r0, r3
 800570a:	f000 faf7 	bl	8005cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0208 	orr.w	r2, r2, #8
 800571c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0204 	bic.w	r2, r2, #4
 800572c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69d9      	ldr	r1, [r3, #28]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	61da      	str	r2, [r3, #28]
      break;
 8005740:	e023      	b.n	800578a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fb4b 	bl	8005de4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800575c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69d9      	ldr	r1, [r3, #28]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	021a      	lsls	r2, r3, #8
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	61da      	str	r2, [r3, #28]
      break;
 8005782:	e002      	b.n	800578a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	75fb      	strb	r3, [r7, #23]
      break;
 8005788:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_TIM_ConfigClockSource+0x1c>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e0b4      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x186>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f0:	d03e      	beq.n	8005870 <HAL_TIM_ConfigClockSource+0xd4>
 80057f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f6:	f200 8087 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x16c>
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fe:	f000 8086 	beq.w	800590e <HAL_TIM_ConfigClockSource+0x172>
 8005802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005806:	d87f      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x16c>
 8005808:	2b70      	cmp	r3, #112	; 0x70
 800580a:	d01a      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0xa6>
 800580c:	2b70      	cmp	r3, #112	; 0x70
 800580e:	d87b      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x16c>
 8005810:	2b60      	cmp	r3, #96	; 0x60
 8005812:	d050      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005814:	2b60      	cmp	r3, #96	; 0x60
 8005816:	d877      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x16c>
 8005818:	2b50      	cmp	r3, #80	; 0x50
 800581a:	d03c      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0xfa>
 800581c:	2b50      	cmp	r3, #80	; 0x50
 800581e:	d873      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x16c>
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d058      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d86f      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x16c>
 8005828:	2b30      	cmp	r3, #48	; 0x30
 800582a:	d064      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x15a>
 800582c:	2b30      	cmp	r3, #48	; 0x30
 800582e:	d86b      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b20      	cmp	r3, #32
 8005832:	d060      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005834:	2b20      	cmp	r3, #32
 8005836:	d867      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x16c>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d05c      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x15a>
 800583c:	2b10      	cmp	r3, #16
 800583e:	d05a      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005840:	e062      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6899      	ldr	r1, [r3, #8]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f000 fcc1 	bl	80061d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	609a      	str	r2, [r3, #8]
      break;
 800586e:	e04f      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	6899      	ldr	r1, [r3, #8]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f000 fcaa 	bl	80061d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005892:	609a      	str	r2, [r3, #8]
      break;
 8005894:	e03c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6859      	ldr	r1, [r3, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f000 fb68 	bl	8005f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2150      	movs	r1, #80	; 0x50
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fc77 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 80058b4:	e02c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f000 fbc4 	bl	8006050 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2160      	movs	r1, #96	; 0x60
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fc67 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 80058d4:	e01c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6859      	ldr	r1, [r3, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f000 fb48 	bl	8005f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2140      	movs	r1, #64	; 0x40
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fc57 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 80058f4:	e00c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4619      	mov	r1, r3
 8005900:	4610      	mov	r0, r2
 8005902:	f000 fc4e 	bl	80061a2 <TIM_ITRx_SetConfig>
      break;
 8005906:	e003      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
      break;
 800590c:	e000      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800590e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b0c      	cmp	r3, #12
 800593e:	d831      	bhi.n	80059a4 <HAL_TIM_ReadCapturedValue+0x78>
 8005940:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005946:	bf00      	nop
 8005948:	0800597d 	.word	0x0800597d
 800594c:	080059a5 	.word	0x080059a5
 8005950:	080059a5 	.word	0x080059a5
 8005954:	080059a5 	.word	0x080059a5
 8005958:	08005987 	.word	0x08005987
 800595c:	080059a5 	.word	0x080059a5
 8005960:	080059a5 	.word	0x080059a5
 8005964:	080059a5 	.word	0x080059a5
 8005968:	08005991 	.word	0x08005991
 800596c:	080059a5 	.word	0x080059a5
 8005970:	080059a5 	.word	0x080059a5
 8005974:	080059a5 	.word	0x080059a5
 8005978:	0800599b 	.word	0x0800599b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005982:	60fb      	str	r3, [r7, #12]

      break;
 8005984:	e00f      	b.n	80059a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	60fb      	str	r3, [r7, #12]

      break;
 800598e:	e00a      	b.n	80059a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005996:	60fb      	str	r3, [r7, #12]

      break;
 8005998:	e005      	b.n	80059a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	60fb      	str	r3, [r7, #12]

      break;
 80059a2:	e000      	b.n	80059a6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80059a4:	bf00      	nop
  }

  return tmpreg;
 80059a6:	68fb      	ldr	r3, [r7, #12]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a40      	ldr	r2, [pc, #256]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d013      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d00f      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3d      	ldr	r2, [pc, #244]	; (8005b08 <TIM_Base_SetConfig+0x118>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a3c      	ldr	r2, [pc, #240]	; (8005b0c <TIM_Base_SetConfig+0x11c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a3b      	ldr	r2, [pc, #236]	; (8005b10 <TIM_Base_SetConfig+0x120>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a3a      	ldr	r2, [pc, #232]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d108      	bne.n	8005a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2f      	ldr	r2, [pc, #188]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d02b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a50:	d027      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <TIM_Base_SetConfig+0x118>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d023      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2b      	ldr	r2, [pc, #172]	; (8005b0c <TIM_Base_SetConfig+0x11c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2a      	ldr	r2, [pc, #168]	; (8005b10 <TIM_Base_SetConfig+0x120>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d017      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a28      	ldr	r2, [pc, #160]	; (8005b18 <TIM_Base_SetConfig+0x128>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a27      	ldr	r2, [pc, #156]	; (8005b1c <TIM_Base_SetConfig+0x12c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a26      	ldr	r2, [pc, #152]	; (8005b20 <TIM_Base_SetConfig+0x130>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	; (8005b24 <TIM_Base_SetConfig+0x134>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a24      	ldr	r2, [pc, #144]	; (8005b28 <TIM_Base_SetConfig+0x138>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a23      	ldr	r2, [pc, #140]	; (8005b2c <TIM_Base_SetConfig+0x13c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d108      	bne.n	8005ab4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_Base_SetConfig+0xf8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a0c      	ldr	r2, [pc, #48]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d103      	bne.n	8005af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	615a      	str	r2, [r3, #20]
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800
 8005b10:	40000c00 	.word	0x40000c00
 8005b14:	40010400 	.word	0x40010400
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40014400 	.word	0x40014400
 8005b20:	40014800 	.word	0x40014800
 8005b24:	40001800 	.word	0x40001800
 8005b28:	40001c00 	.word	0x40001c00
 8005b2c:	40002000 	.word	0x40002000

08005b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f023 0201 	bic.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f023 0302 	bic.w	r3, r3, #2
 8005b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a20      	ldr	r2, [pc, #128]	; (8005c08 <TIM_OC1_SetConfig+0xd8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_OC1_SetConfig+0x64>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a1f      	ldr	r2, [pc, #124]	; (8005c0c <TIM_OC1_SetConfig+0xdc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10c      	bne.n	8005bae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f023 0308 	bic.w	r3, r3, #8
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f023 0304 	bic.w	r3, r3, #4
 8005bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <TIM_OC1_SetConfig+0xd8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_OC1_SetConfig+0x8e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a14      	ldr	r2, [pc, #80]	; (8005c0c <TIM_OC1_SetConfig+0xdc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d111      	bne.n	8005be2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40010400 	.word	0x40010400

08005c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f023 0210 	bic.w	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0320 	bic.w	r3, r3, #32
 8005c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a22      	ldr	r2, [pc, #136]	; (8005cf4 <TIM_OC2_SetConfig+0xe4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_OC2_SetConfig+0x68>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <TIM_OC2_SetConfig+0xe8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d10d      	bne.n	8005c94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a17      	ldr	r2, [pc, #92]	; (8005cf4 <TIM_OC2_SetConfig+0xe4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d003      	beq.n	8005ca4 <TIM_OC2_SetConfig+0x94>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <TIM_OC2_SetConfig+0xe8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d113      	bne.n	8005ccc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40010400 	.word	0x40010400

08005cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a21      	ldr	r2, [pc, #132]	; (8005ddc <TIM_OC3_SetConfig+0xe0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d003      	beq.n	8005d62 <TIM_OC3_SetConfig+0x66>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a20      	ldr	r2, [pc, #128]	; (8005de0 <TIM_OC3_SetConfig+0xe4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d10d      	bne.n	8005d7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <TIM_OC3_SetConfig+0xe0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_OC3_SetConfig+0x92>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <TIM_OC3_SetConfig+0xe4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d113      	bne.n	8005db6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	621a      	str	r2, [r3, #32]
}
 8005dd0:	bf00      	nop
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40010400 	.word	0x40010400

08005de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	031b      	lsls	r3, r3, #12
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a12      	ldr	r2, [pc, #72]	; (8005e88 <TIM_OC4_SetConfig+0xa4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_OC4_SetConfig+0x68>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a11      	ldr	r2, [pc, #68]	; (8005e8c <TIM_OC4_SetConfig+0xa8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d109      	bne.n	8005e60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	019b      	lsls	r3, r3, #6
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40010400 	.word	0x40010400

08005e90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f023 0201 	bic.w	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4a28      	ldr	r2, [pc, #160]	; (8005f5c <TIM_TI1_SetConfig+0xcc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01b      	beq.n	8005ef6 <TIM_TI1_SetConfig+0x66>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec4:	d017      	beq.n	8005ef6 <TIM_TI1_SetConfig+0x66>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a25      	ldr	r2, [pc, #148]	; (8005f60 <TIM_TI1_SetConfig+0xd0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <TIM_TI1_SetConfig+0x66>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4a24      	ldr	r2, [pc, #144]	; (8005f64 <TIM_TI1_SetConfig+0xd4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00f      	beq.n	8005ef6 <TIM_TI1_SetConfig+0x66>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4a23      	ldr	r2, [pc, #140]	; (8005f68 <TIM_TI1_SetConfig+0xd8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00b      	beq.n	8005ef6 <TIM_TI1_SetConfig+0x66>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a22      	ldr	r2, [pc, #136]	; (8005f6c <TIM_TI1_SetConfig+0xdc>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d007      	beq.n	8005ef6 <TIM_TI1_SetConfig+0x66>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <TIM_TI1_SetConfig+0xe0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d003      	beq.n	8005ef6 <TIM_TI1_SetConfig+0x66>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4a20      	ldr	r2, [pc, #128]	; (8005f74 <TIM_TI1_SetConfig+0xe4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d101      	bne.n	8005efa <TIM_TI1_SetConfig+0x6a>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <TIM_TI1_SetConfig+0x6c>
 8005efa:	2300      	movs	r3, #0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d008      	beq.n	8005f12 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f023 0303 	bic.w	r3, r3, #3
 8005f06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	e003      	b.n	8005f1a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f023 030a 	bic.w	r3, r3, #10
 8005f34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f003 030a 	and.w	r3, r3, #10
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	40010400 	.word	0x40010400
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40001800 	.word	0x40001800

08005f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f023 0201 	bic.w	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f023 030a 	bic.w	r3, r3, #10
 8005fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b087      	sub	sp, #28
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
 8005fe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	f023 0210 	bic.w	r2, r3, #16
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006002:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	021b      	lsls	r3, r3, #8
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	031b      	lsls	r3, r3, #12
 800601a:	b29b      	uxth	r3, r3
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006028:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4313      	orrs	r3, r2
 8006036:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	621a      	str	r2, [r3, #32]
}
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f023 0210 	bic.w	r2, r3, #16
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800607a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	031b      	lsls	r3, r3, #12
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800608c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	621a      	str	r2, [r3, #32]
}
 80060a4:	bf00      	nop
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f023 0303 	bic.w	r3, r3, #3
 80060dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006100:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	021b      	lsls	r3, r3, #8
 8006106:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	621a      	str	r2, [r3, #32]
}
 800611c:	bf00      	nop
 800611e:	371c      	adds	r7, #28
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006154:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006166:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	031b      	lsls	r3, r3, #12
 800616c:	b29b      	uxth	r3, r3
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800617a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	031b      	lsls	r3, r3, #12
 8006180:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	f043 0307 	orr.w	r3, r3, #7
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	609a      	str	r2, [r3, #8]
}
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	021a      	lsls	r2, r3, #8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4313      	orrs	r3, r2
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2201      	movs	r2, #1
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1a      	ldr	r2, [r3, #32]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	43db      	mvns	r3, r3
 800623a:	401a      	ands	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1a      	ldr	r2, [r3, #32]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	fa01 f303 	lsl.w	r3, r1, r3
 8006250:	431a      	orrs	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006278:	2302      	movs	r3, #2
 800627a:	e05a      	b.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c8:	d01d      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1b      	ldr	r2, [pc, #108]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1a      	ldr	r2, [pc, #104]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a18      	ldr	r2, [pc, #96]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a17      	ldr	r2, [pc, #92]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a15      	ldr	r2, [pc, #84]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d10c      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	4313      	orrs	r3, r2
 8006316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40010000 	.word	0x40010000
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40010400 	.word	0x40010400
 8006354:	40014000 	.word	0x40014000
 8006358:	40001800 	.word	0x40001800

0800635c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e03f      	b.n	8006416 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fc fb90 	bl	8002ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2224      	movs	r2, #36	; 0x24
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 f953 	bl	8007674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695a      	ldr	r2, [r3, #20]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b08a      	sub	sp, #40	; 0x28
 8006422:	af02      	add	r7, sp, #8
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	603b      	str	r3, [r7, #0]
 800642a:	4613      	mov	r3, r2
 800642c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b20      	cmp	r3, #32
 800643c:	d17c      	bne.n	8006538 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <HAL_UART_Transmit+0x2c>
 8006444:	88fb      	ldrh	r3, [r7, #6]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e075      	b.n	800653a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_UART_Transmit+0x3e>
 8006458:	2302      	movs	r3, #2
 800645a:	e06e      	b.n	800653a <HAL_UART_Transmit+0x11c>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2221      	movs	r2, #33	; 0x21
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006472:	f7fc ff9f 	bl	80033b4 <HAL_GetTick>
 8006476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	88fa      	ldrh	r2, [r7, #6]
 800647c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	88fa      	ldrh	r2, [r7, #6]
 8006482:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648c:	d108      	bne.n	80064a0 <HAL_UART_Transmit+0x82>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d104      	bne.n	80064a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	61bb      	str	r3, [r7, #24]
 800649e:	e003      	b.n	80064a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80064b0:	e02a      	b.n	8006508 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	2180      	movs	r1, #128	; 0x80
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fdcc 	bl	800705a <UART_WaitOnFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e036      	b.n	800653a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10b      	bne.n	80064ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	3302      	adds	r3, #2
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	e007      	b.n	80064fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1cf      	bne.n	80064b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2200      	movs	r2, #0
 800651a:	2140      	movs	r1, #64	; 0x40
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fd9c 	bl	800705a <UART_WaitOnFlagUntilTimeout>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e006      	b.n	800653a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	e000      	b.n	800653a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006538:	2302      	movs	r3, #2
  }
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b08a      	sub	sp, #40	; 0x28
 8006546:	af02      	add	r7, sp, #8
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	4613      	mov	r3, r2
 8006550:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b20      	cmp	r3, #32
 8006560:	f040 808c 	bne.w	800667c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <HAL_UART_Receive+0x2e>
 800656a:	88fb      	ldrh	r3, [r7, #6]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e084      	b.n	800667e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <HAL_UART_Receive+0x40>
 800657e:	2302      	movs	r3, #2
 8006580:	e07d      	b.n	800667e <HAL_UART_Receive+0x13c>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2222      	movs	r2, #34	; 0x22
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800659e:	f7fc ff09 	bl	80033b4 <HAL_GetTick>
 80065a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	88fa      	ldrh	r2, [r7, #6]
 80065ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b8:	d108      	bne.n	80065cc <HAL_UART_Receive+0x8a>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d104      	bne.n	80065cc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	e003      	b.n	80065d4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80065dc:	e043      	b.n	8006666 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2200      	movs	r2, #0
 80065e6:	2120      	movs	r1, #32
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fd36 	bl	800705a <UART_WaitOnFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e042      	b.n	800667e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10c      	bne.n	8006618 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	b29b      	uxth	r3, r3
 8006606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660a:	b29a      	uxth	r2, r3
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	3302      	adds	r3, #2
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	e01f      	b.n	8006658 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006620:	d007      	beq.n	8006632 <HAL_UART_Receive+0xf0>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <HAL_UART_Receive+0xfe>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	e008      	b.n	8006652 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800664c:	b2da      	uxtb	r2, r3
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	3301      	adds	r3, #1
 8006656:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1b6      	bne.n	80065de <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	e000      	b.n	800667e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800667c:	2302      	movs	r3, #2
  }
}
 800667e:	4618      	mov	r0, r3
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	4613      	mov	r3, r2
 8006692:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b20      	cmp	r3, #32
 800669e:	d11d      	bne.n	80066dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_UART_Receive_IT+0x26>
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e016      	b.n	80066de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_UART_Receive_IT+0x38>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e00f      	b.n	80066de <HAL_UART_Receive_IT+0x58>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066cc:	88fb      	ldrh	r3, [r7, #6]
 80066ce:	461a      	mov	r2, r3
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fd2f 	bl	8007136 <UART_Start_Receive_IT>
 80066d8:	4603      	mov	r3, r0
 80066da:	e000      	b.n	80066de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80066dc:	2302      	movs	r3, #2
  }
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08c      	sub	sp, #48	; 0x30
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d165      	bne.n	80067ce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <HAL_UART_Transmit_DMA+0x26>
 8006708:	88fb      	ldrh	r3, [r7, #6]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e05e      	b.n	80067d0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_UART_Transmit_DMA+0x38>
 800671c:	2302      	movs	r3, #2
 800671e:	e057      	b.n	80067d0 <HAL_UART_Transmit_DMA+0xe8>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	88fa      	ldrh	r2, [r7, #6]
 8006732:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	88fa      	ldrh	r2, [r7, #6]
 8006738:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2221      	movs	r2, #33	; 0x21
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674c:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <HAL_UART_Transmit_DMA+0xf0>)
 800674e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006754:	4a21      	ldr	r2, [pc, #132]	; (80067dc <HAL_UART_Transmit_DMA+0xf4>)
 8006756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675c:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <HAL_UART_Transmit_DMA+0xf8>)
 800675e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006764:	2200      	movs	r2, #0
 8006766:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006768:	f107 0308 	add.w	r3, r7, #8
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	6819      	ldr	r1, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3304      	adds	r3, #4
 800677c:	461a      	mov	r2, r3
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	f7fc ffe6 	bl	8003750 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800678c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3314      	adds	r3, #20
 800679c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	617b      	str	r3, [r7, #20]
   return(result);
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3314      	adds	r3, #20
 80067b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b6:	627a      	str	r2, [r7, #36]	; 0x24
 80067b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	6a39      	ldr	r1, [r7, #32]
 80067bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1e5      	bne.n	8006796 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e000      	b.n	80067d0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80067ce:	2302      	movs	r3, #2
  }
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3730      	adds	r7, #48	; 0x30
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	08006db5 	.word	0x08006db5
 80067dc:	08006e4f 	.word	0x08006e4f
 80067e0:	08006fc7 	.word	0x08006fc7

080067e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	4613      	mov	r3, r2
 80067f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b20      	cmp	r3, #32
 80067fc:	d11d      	bne.n	800683a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <HAL_UART_Receive_DMA+0x26>
 8006804:	88fb      	ldrh	r3, [r7, #6]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e016      	b.n	800683c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_UART_Receive_DMA+0x38>
 8006818:	2302      	movs	r3, #2
 800681a:	e00f      	b.n	800683c <HAL_UART_Receive_DMA+0x58>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	461a      	mov	r2, r3
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 fcbf 	bl	80071b4 <UART_Start_Receive_DMA>
 8006836:	4603      	mov	r3, r0
 8006838:	e000      	b.n	800683c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800683a:	2302      	movs	r3, #2
  }
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b0ba      	sub	sp, #232	; 0xe8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800686a:	2300      	movs	r3, #0
 800686c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006870:	2300      	movs	r3, #0
 8006872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10f      	bne.n	80068aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <HAL_UART_IRQHandler+0x66>
 8006896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fe2b 	bl	80074fe <UART_Receive_IT>
      return;
 80068a8:	e256      	b.n	8006d58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80de 	beq.w	8006a70 <HAL_UART_IRQHandler+0x22c>
 80068b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d106      	bne.n	80068ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80d1 	beq.w	8006a70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00b      	beq.n	80068f2 <HAL_UART_IRQHandler+0xae>
 80068da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f043 0201 	orr.w	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <HAL_UART_IRQHandler+0xd2>
 80068fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d005      	beq.n	8006916 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	f043 0202 	orr.w	r2, r3, #2
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <HAL_UART_IRQHandler+0xf6>
 8006922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	f043 0204 	orr.w	r2, r3, #4
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800693a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d011      	beq.n	800696a <HAL_UART_IRQHandler+0x126>
 8006946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d105      	bne.n	800695e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d005      	beq.n	800696a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	f043 0208 	orr.w	r2, r3, #8
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 81ed 	beq.w	8006d4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d008      	beq.n	8006992 <HAL_UART_IRQHandler+0x14e>
 8006980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fdb6 	bl	80074fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b40      	cmp	r3, #64	; 0x40
 800699e:	bf0c      	ite	eq
 80069a0:	2301      	moveq	r3, #1
 80069a2:	2300      	movne	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d103      	bne.n	80069be <HAL_UART_IRQHandler+0x17a>
 80069b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d04f      	beq.n	8006a5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fcbe 	bl	8007340 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d141      	bne.n	8006a56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3314      	adds	r3, #20
 80069d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3314      	adds	r3, #20
 80069fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a0e:	e841 2300 	strex	r3, r2, [r1]
 8006a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1d9      	bne.n	80069d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d013      	beq.n	8006a4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	4a7d      	ldr	r2, [pc, #500]	; (8006c20 <HAL_UART_IRQHandler+0x3dc>)
 8006a2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fc ff54 	bl	80038e0 <HAL_DMA_Abort_IT>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d016      	beq.n	8006a6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4c:	e00e      	b.n	8006a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f99a 	bl	8006d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a54:	e00a      	b.n	8006a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f996 	bl	8006d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5c:	e006      	b.n	8006a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f992 	bl	8006d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a6a:	e170      	b.n	8006d4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6c:	bf00      	nop
    return;
 8006a6e:	e16e      	b.n	8006d4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	f040 814a 	bne.w	8006d0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8143 	beq.w	8006d0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8c:	f003 0310 	and.w	r3, r3, #16
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 813c 	beq.w	8006d0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a96:	2300      	movs	r3, #0
 8006a98:	60bb      	str	r3, [r7, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	f040 80b4 	bne.w	8006c24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ac8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8140 	beq.w	8006d52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ada:	429a      	cmp	r2, r3
 8006adc:	f080 8139 	bcs.w	8006d52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ae6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af2:	f000 8088 	beq.w	8006c06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	330c      	adds	r3, #12
 8006b1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1d9      	bne.n	8006af6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3314      	adds	r3, #20
 8006b48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b54:	f023 0301 	bic.w	r3, r3, #1
 8006b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3314      	adds	r3, #20
 8006b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e1      	bne.n	8006b42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3314      	adds	r3, #20
 8006b84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3314      	adds	r3, #20
 8006b9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ba2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ba4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ba8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e3      	bne.n	8006b7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	330c      	adds	r3, #12
 8006bca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd6:	f023 0310 	bic.w	r3, r3, #16
 8006bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006be8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bf0:	e841 2300 	strex	r3, r2, [r1]
 8006bf4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1e3      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fc fdfd 	bl	8003800 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f8c0 	bl	8006d9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c1c:	e099      	b.n	8006d52 <HAL_UART_IRQHandler+0x50e>
 8006c1e:	bf00      	nop
 8006c20:	08007407 	.word	0x08007407
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 808b 	beq.w	8006d56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 8086 	beq.w	8006d56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	330c      	adds	r3, #12
 8006c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	330c      	adds	r3, #12
 8006c6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c6e:	647a      	str	r2, [r7, #68]	; 0x44
 8006c70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e3      	bne.n	8006c4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3314      	adds	r3, #20
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	623b      	str	r3, [r7, #32]
   return(result);
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	f023 0301 	bic.w	r3, r3, #1
 8006c98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3314      	adds	r3, #20
 8006ca2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ca6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e3      	bne.n	8006c82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0310 	bic.w	r3, r3, #16
 8006cde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006cec:	61fa      	str	r2, [r7, #28]
 8006cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	69b9      	ldr	r1, [r7, #24]
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e3      	bne.n	8006cc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f848 	bl	8006d9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d0c:	e023      	b.n	8006d56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <HAL_UART_IRQHandler+0x4ea>
 8006d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fb81 	bl	800742e <UART_Transmit_IT>
    return;
 8006d2c:	e014      	b.n	8006d58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00e      	beq.n	8006d58 <HAL_UART_IRQHandler+0x514>
 8006d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d008      	beq.n	8006d58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fbc1 	bl	80074ce <UART_EndTransmit_IT>
    return;
 8006d4c:	e004      	b.n	8006d58 <HAL_UART_IRQHandler+0x514>
    return;
 8006d4e:	bf00      	nop
 8006d50:	e002      	b.n	8006d58 <HAL_UART_IRQHandler+0x514>
      return;
 8006d52:	bf00      	nop
 8006d54:	e000      	b.n	8006d58 <HAL_UART_IRQHandler+0x514>
      return;
 8006d56:	bf00      	nop
  }
}
 8006d58:	37e8      	adds	r7, #232	; 0xe8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop

08006d60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b090      	sub	sp, #64	; 0x40
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d137      	bne.n	8006e40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3314      	adds	r3, #20
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	623b      	str	r3, [r7, #32]
   return(result);
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dec:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3314      	adds	r3, #20
 8006df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006df6:	633a      	str	r2, [r7, #48]	; 0x30
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e5      	bne.n	8006dd6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e20:	637b      	str	r3, [r7, #52]	; 0x34
 8006e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	330c      	adds	r3, #12
 8006e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e2a:	61fa      	str	r2, [r7, #28]
 8006e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	69b9      	ldr	r1, [r7, #24]
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	617b      	str	r3, [r7, #20]
   return(result);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e5      	bne.n	8006e0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e3e:	e002      	b.n	8006e46 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006e42:	f7fb f86b 	bl	8001f1c <HAL_UART_TxCpltCallback>
}
 8006e46:	bf00      	nop
 8006e48:	3740      	adds	r7, #64	; 0x40
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff ff7f 	bl	8006d60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b09c      	sub	sp, #112	; 0x70
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d172      	bne.n	8006f6c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e88:	2200      	movs	r2, #0
 8006e8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	330c      	adds	r3, #12
 8006e92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e96:	e853 3f00 	ldrex	r3, [r3]
 8006e9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ea2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	330c      	adds	r3, #12
 8006eaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006eac:	65ba      	str	r2, [r7, #88]	; 0x58
 8006eae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006eb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eb4:	e841 2300 	strex	r3, r2, [r1]
 8006eb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e5      	bne.n	8006e8c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3314      	adds	r3, #20
 8006ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	e853 3f00 	ldrex	r3, [r3]
 8006ece:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed2:	f023 0301 	bic.w	r3, r3, #1
 8006ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8006ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3314      	adds	r3, #20
 8006ede:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ee0:	647a      	str	r2, [r7, #68]	; 0x44
 8006ee2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e5      	bne.n	8006ec0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3314      	adds	r3, #20
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	623b      	str	r3, [r7, #32]
   return(result);
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3314      	adds	r3, #20
 8006f12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f14:	633a      	str	r2, [r7, #48]	; 0x30
 8006f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f1c:	e841 2300 	strex	r3, r2, [r1]
 8006f20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e5      	bne.n	8006ef4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d119      	bne.n	8006f6c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	330c      	adds	r3, #12
 8006f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0310 	bic.w	r3, r3, #16
 8006f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	330c      	adds	r3, #12
 8006f56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f58:	61fa      	str	r2, [r7, #28]
 8006f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	69b9      	ldr	r1, [r7, #24]
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	617b      	str	r3, [r7, #20]
   return(result);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e5      	bne.n	8006f38 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d106      	bne.n	8006f82 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f7c:	f7ff ff0e 	bl	8006d9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f80:	e002      	b.n	8006f88 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006f82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f84:	f7fa ff4e 	bl	8001e24 <HAL_UART_RxCpltCallback>
}
 8006f88:	bf00      	nop
 8006f8a:	3770      	adds	r7, #112	; 0x70
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d108      	bne.n	8006fb8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff fef3 	bl	8006d9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fb6:	e002      	b.n	8006fbe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7ff fedb 	bl	8006d74 <HAL_UART_RxHalfCpltCallback>
}
 8006fbe:	bf00      	nop
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	bf0c      	ite	eq
 8006fe6:	2301      	moveq	r3, #1
 8006fe8:	2300      	movne	r3, #0
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b21      	cmp	r3, #33	; 0x21
 8006ff8:	d108      	bne.n	800700c <UART_DMAError+0x46>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d005      	beq.n	800700c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2200      	movs	r2, #0
 8007004:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007006:	68b8      	ldr	r0, [r7, #8]
 8007008:	f000 f972 	bl	80072f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b40      	cmp	r3, #64	; 0x40
 8007018:	bf0c      	ite	eq
 800701a:	2301      	moveq	r3, #1
 800701c:	2300      	movne	r3, #0
 800701e:	b2db      	uxtb	r3, r3
 8007020:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b22      	cmp	r3, #34	; 0x22
 800702c:	d108      	bne.n	8007040 <UART_DMAError+0x7a>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2200      	movs	r2, #0
 8007038:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800703a:	68b8      	ldr	r0, [r7, #8]
 800703c:	f000 f980 	bl	8007340 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	f043 0210 	orr.w	r2, r3, #16
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800704c:	68b8      	ldr	r0, [r7, #8]
 800704e:	f7ff fe9b 	bl	8006d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b090      	sub	sp, #64	; 0x40
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	603b      	str	r3, [r7, #0]
 8007066:	4613      	mov	r3, r2
 8007068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706a:	e050      	b.n	800710e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800706c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d04c      	beq.n	800710e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007076:	2b00      	cmp	r3, #0
 8007078:	d007      	beq.n	800708a <UART_WaitOnFlagUntilTimeout+0x30>
 800707a:	f7fc f99b 	bl	80033b4 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007086:	429a      	cmp	r2, r3
 8007088:	d241      	bcs.n	800710e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	330c      	adds	r3, #12
 8007090:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	330c      	adds	r3, #12
 80070a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070aa:	637a      	str	r2, [r7, #52]	; 0x34
 80070ac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e5      	bne.n	800708a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3314      	adds	r3, #20
 80070c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	613b      	str	r3, [r7, #16]
   return(result);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f023 0301 	bic.w	r3, r3, #1
 80070d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3314      	adds	r3, #20
 80070dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070de:	623a      	str	r2, [r7, #32]
 80070e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	69f9      	ldr	r1, [r7, #28]
 80070e4:	6a3a      	ldr	r2, [r7, #32]
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e5      	bne.n	80070be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e00f      	b.n	800712e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4013      	ands	r3, r2
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	429a      	cmp	r2, r3
 800711c:	bf0c      	ite	eq
 800711e:	2301      	moveq	r3, #1
 8007120:	2300      	movne	r3, #0
 8007122:	b2db      	uxtb	r3, r3
 8007124:	461a      	mov	r2, r3
 8007126:	79fb      	ldrb	r3, [r7, #7]
 8007128:	429a      	cmp	r2, r3
 800712a:	d09f      	beq.n	800706c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3740      	adds	r7, #64	; 0x40
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	4613      	mov	r3, r2
 8007142:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	88fa      	ldrh	r2, [r7, #6]
 800714e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2222      	movs	r2, #34	; 0x22
 8007160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d007      	beq.n	8007184 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007182:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695a      	ldr	r2, [r3, #20]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0220 	orr.w	r2, r2, #32
 80071a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
	...

080071b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b098      	sub	sp, #96	; 0x60
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	4613      	mov	r3, r2
 80071c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2222      	movs	r2, #34	; 0x22
 80071d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	4a40      	ldr	r2, [pc, #256]	; (80072e4 <UART_Start_Receive_DMA+0x130>)
 80071e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	4a3f      	ldr	r2, [pc, #252]	; (80072e8 <UART_Start_Receive_DMA+0x134>)
 80071ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	4a3e      	ldr	r2, [pc, #248]	; (80072ec <UART_Start_Receive_DMA+0x138>)
 80071f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f8:	2200      	movs	r2, #0
 80071fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80071fc:	f107 0308 	add.w	r3, r7, #8
 8007200:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3304      	adds	r3, #4
 800720c:	4619      	mov	r1, r3
 800720e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	f7fc fa9c 	bl	8003750 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007218:	2300      	movs	r3, #0
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	613b      	str	r3, [r7, #16]
 800722c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d019      	beq.n	8007272 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	330c      	adds	r3, #12
 8007244:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800724e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007254:	65bb      	str	r3, [r7, #88]	; 0x58
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	330c      	adds	r3, #12
 800725c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800725e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007260:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007264:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800726c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e5      	bne.n	800723e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3314      	adds	r3, #20
 8007278:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	f043 0301 	orr.w	r3, r3, #1
 8007288:	657b      	str	r3, [r7, #84]	; 0x54
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3314      	adds	r3, #20
 8007290:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007292:	63ba      	str	r2, [r7, #56]	; 0x38
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e5      	bne.n	8007272 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3314      	adds	r3, #20
 80072ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	617b      	str	r3, [r7, #20]
   return(result);
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072bc:	653b      	str	r3, [r7, #80]	; 0x50
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3314      	adds	r3, #20
 80072c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072c6:	627a      	str	r2, [r7, #36]	; 0x24
 80072c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6a39      	ldr	r1, [r7, #32]
 80072cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e5      	bne.n	80072a6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3760      	adds	r7, #96	; 0x60
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	08006e6b 	.word	0x08006e6b
 80072e8:	08006f91 	.word	0x08006f91
 80072ec:	08006fc7 	.word	0x08006fc7

080072f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b089      	sub	sp, #36	; 0x24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	330c      	adds	r3, #12
 80072fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	60bb      	str	r3, [r7, #8]
   return(result);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800730e:	61fb      	str	r3, [r7, #28]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	330c      	adds	r3, #12
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	61ba      	str	r2, [r7, #24]
 800731a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6979      	ldr	r1, [r7, #20]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	613b      	str	r3, [r7, #16]
   return(result);
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e5      	bne.n	80072f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007334:	bf00      	nop
 8007336:	3724      	adds	r7, #36	; 0x24
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007340:	b480      	push	{r7}
 8007342:	b095      	sub	sp, #84	; 0x54
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	330c      	adds	r3, #12
 800734e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800735e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	330c      	adds	r3, #12
 8007366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007368:	643a      	str	r2, [r7, #64]	; 0x40
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800736e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e5      	bne.n	8007348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3314      	adds	r3, #20
 8007382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	61fb      	str	r3, [r7, #28]
   return(result);
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f023 0301 	bic.w	r3, r3, #1
 8007392:	64bb      	str	r3, [r7, #72]	; 0x48
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3314      	adds	r3, #20
 800739a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800739c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e5      	bne.n	800737c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d119      	bne.n	80073ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	330c      	adds	r3, #12
 80073be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f023 0310 	bic.w	r3, r3, #16
 80073ce:	647b      	str	r3, [r7, #68]	; 0x44
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	330c      	adds	r3, #12
 80073d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073d8:	61ba      	str	r2, [r7, #24]
 80073da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6979      	ldr	r1, [r7, #20]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	e841 2300 	strex	r3, r2, [r1]
 80073e4:	613b      	str	r3, [r7, #16]
   return(result);
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e5      	bne.n	80073b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073fa:	bf00      	nop
 80073fc:	3754      	adds	r7, #84	; 0x54
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f7ff fcb1 	bl	8006d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007426:	bf00      	nop
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800742e:	b480      	push	{r7}
 8007430:	b085      	sub	sp, #20
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b21      	cmp	r3, #33	; 0x21
 8007440:	d13e      	bne.n	80074c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744a:	d114      	bne.n	8007476 <UART_Transmit_IT+0x48>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d110      	bne.n	8007476 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007468:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	1c9a      	adds	r2, r3, #2
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	621a      	str	r2, [r3, #32]
 8007474:	e008      	b.n	8007488 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	1c59      	adds	r1, r3, #1
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6211      	str	r1, [r2, #32]
 8007480:	781a      	ldrb	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800748c:	b29b      	uxth	r3, r3
 800748e:	3b01      	subs	r3, #1
 8007490:	b29b      	uxth	r3, r3
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	4619      	mov	r1, r3
 8007496:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10f      	bne.n	80074bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	e000      	b.n	80074c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074c0:	2302      	movs	r3, #2
  }
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b082      	sub	sp, #8
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68da      	ldr	r2, [r3, #12]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7fa fd14 	bl	8001f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b08c      	sub	sp, #48	; 0x30
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b22      	cmp	r3, #34	; 0x22
 8007510:	f040 80ab 	bne.w	800766a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800751c:	d117      	bne.n	800754e <UART_Receive_IT+0x50>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d113      	bne.n	800754e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753c:	b29a      	uxth	r2, r3
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	1c9a      	adds	r2, r3, #2
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	629a      	str	r2, [r3, #40]	; 0x28
 800754c:	e026      	b.n	800759c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007554:	2300      	movs	r3, #0
 8007556:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007560:	d007      	beq.n	8007572 <UART_Receive_IT+0x74>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10a      	bne.n	8007580 <UART_Receive_IT+0x82>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	b2da      	uxtb	r2, r3
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	e008      	b.n	8007592 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758c:	b2da      	uxtb	r2, r3
 800758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007590:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	3b01      	subs	r3, #1
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	4619      	mov	r1, r3
 80075aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d15a      	bne.n	8007666 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0220 	bic.w	r2, r2, #32
 80075be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695a      	ldr	r2, [r3, #20]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0201 	bic.w	r2, r2, #1
 80075de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d135      	bne.n	800765c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	330c      	adds	r3, #12
 80075fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	613b      	str	r3, [r7, #16]
   return(result);
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f023 0310 	bic.w	r3, r3, #16
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330c      	adds	r3, #12
 8007614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007616:	623a      	str	r2, [r7, #32]
 8007618:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	69f9      	ldr	r1, [r7, #28]
 800761c:	6a3a      	ldr	r2, [r7, #32]
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	61bb      	str	r3, [r7, #24]
   return(result);
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e5      	bne.n	80075f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2b10      	cmp	r3, #16
 8007636:	d10a      	bne.n	800764e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff fba1 	bl	8006d9c <HAL_UARTEx_RxEventCallback>
 800765a:	e002      	b.n	8007662 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7fa fbe1 	bl	8001e24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	e002      	b.n	800766c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	e000      	b.n	800766c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800766a:	2302      	movs	r3, #2
  }
}
 800766c:	4618      	mov	r0, r3
 800766e:	3730      	adds	r7, #48	; 0x30
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007678:	b0c0      	sub	sp, #256	; 0x100
 800767a:	af00      	add	r7, sp, #0
 800767c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800768c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007690:	68d9      	ldr	r1, [r3, #12]
 8007692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	ea40 0301 	orr.w	r3, r0, r1
 800769c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800769e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80076c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80076cc:	f021 010c 	bic.w	r1, r1, #12
 80076d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076da:	430b      	orrs	r3, r1
 80076dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ee:	6999      	ldr	r1, [r3, #24]
 80076f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	ea40 0301 	orr.w	r3, r0, r1
 80076fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4b8f      	ldr	r3, [pc, #572]	; (8007940 <UART_SetConfig+0x2cc>)
 8007704:	429a      	cmp	r2, r3
 8007706:	d005      	beq.n	8007714 <UART_SetConfig+0xa0>
 8007708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	4b8d      	ldr	r3, [pc, #564]	; (8007944 <UART_SetConfig+0x2d0>)
 8007710:	429a      	cmp	r2, r3
 8007712:	d104      	bne.n	800771e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007714:	f7fc fe8c 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8007718:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800771c:	e003      	b.n	8007726 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800771e:	f7fc fe73 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 8007722:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007730:	f040 810c 	bne.w	800794c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007738:	2200      	movs	r2, #0
 800773a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800773e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007742:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007746:	4622      	mov	r2, r4
 8007748:	462b      	mov	r3, r5
 800774a:	1891      	adds	r1, r2, r2
 800774c:	65b9      	str	r1, [r7, #88]	; 0x58
 800774e:	415b      	adcs	r3, r3
 8007750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007752:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007756:	4621      	mov	r1, r4
 8007758:	eb12 0801 	adds.w	r8, r2, r1
 800775c:	4629      	mov	r1, r5
 800775e:	eb43 0901 	adc.w	r9, r3, r1
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800776e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007776:	4690      	mov	r8, r2
 8007778:	4699      	mov	r9, r3
 800777a:	4623      	mov	r3, r4
 800777c:	eb18 0303 	adds.w	r3, r8, r3
 8007780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007784:	462b      	mov	r3, r5
 8007786:	eb49 0303 	adc.w	r3, r9, r3
 800778a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800778e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800779a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800779e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80077a2:	460b      	mov	r3, r1
 80077a4:	18db      	adds	r3, r3, r3
 80077a6:	653b      	str	r3, [r7, #80]	; 0x50
 80077a8:	4613      	mov	r3, r2
 80077aa:	eb42 0303 	adc.w	r3, r2, r3
 80077ae:	657b      	str	r3, [r7, #84]	; 0x54
 80077b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80077b8:	f7f9 fa96 	bl	8000ce8 <__aeabi_uldivmod>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4b61      	ldr	r3, [pc, #388]	; (8007948 <UART_SetConfig+0x2d4>)
 80077c2:	fba3 2302 	umull	r2, r3, r3, r2
 80077c6:	095b      	lsrs	r3, r3, #5
 80077c8:	011c      	lsls	r4, r3, #4
 80077ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80077d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80077dc:	4642      	mov	r2, r8
 80077de:	464b      	mov	r3, r9
 80077e0:	1891      	adds	r1, r2, r2
 80077e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80077e4:	415b      	adcs	r3, r3
 80077e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077ec:	4641      	mov	r1, r8
 80077ee:	eb12 0a01 	adds.w	sl, r2, r1
 80077f2:	4649      	mov	r1, r9
 80077f4:	eb43 0b01 	adc.w	fp, r3, r1
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	f04f 0300 	mov.w	r3, #0
 8007800:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007804:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800780c:	4692      	mov	sl, r2
 800780e:	469b      	mov	fp, r3
 8007810:	4643      	mov	r3, r8
 8007812:	eb1a 0303 	adds.w	r3, sl, r3
 8007816:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800781a:	464b      	mov	r3, r9
 800781c:	eb4b 0303 	adc.w	r3, fp, r3
 8007820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007830:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007834:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007838:	460b      	mov	r3, r1
 800783a:	18db      	adds	r3, r3, r3
 800783c:	643b      	str	r3, [r7, #64]	; 0x40
 800783e:	4613      	mov	r3, r2
 8007840:	eb42 0303 	adc.w	r3, r2, r3
 8007844:	647b      	str	r3, [r7, #68]	; 0x44
 8007846:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800784a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800784e:	f7f9 fa4b 	bl	8000ce8 <__aeabi_uldivmod>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4611      	mov	r1, r2
 8007858:	4b3b      	ldr	r3, [pc, #236]	; (8007948 <UART_SetConfig+0x2d4>)
 800785a:	fba3 2301 	umull	r2, r3, r3, r1
 800785e:	095b      	lsrs	r3, r3, #5
 8007860:	2264      	movs	r2, #100	; 0x64
 8007862:	fb02 f303 	mul.w	r3, r2, r3
 8007866:	1acb      	subs	r3, r1, r3
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800786e:	4b36      	ldr	r3, [pc, #216]	; (8007948 <UART_SetConfig+0x2d4>)
 8007870:	fba3 2302 	umull	r2, r3, r3, r2
 8007874:	095b      	lsrs	r3, r3, #5
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800787c:	441c      	add	r4, r3
 800787e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007882:	2200      	movs	r2, #0
 8007884:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007888:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800788c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007890:	4642      	mov	r2, r8
 8007892:	464b      	mov	r3, r9
 8007894:	1891      	adds	r1, r2, r2
 8007896:	63b9      	str	r1, [r7, #56]	; 0x38
 8007898:	415b      	adcs	r3, r3
 800789a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800789c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078a0:	4641      	mov	r1, r8
 80078a2:	1851      	adds	r1, r2, r1
 80078a4:	6339      	str	r1, [r7, #48]	; 0x30
 80078a6:	4649      	mov	r1, r9
 80078a8:	414b      	adcs	r3, r1
 80078aa:	637b      	str	r3, [r7, #52]	; 0x34
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	f04f 0300 	mov.w	r3, #0
 80078b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80078b8:	4659      	mov	r1, fp
 80078ba:	00cb      	lsls	r3, r1, #3
 80078bc:	4651      	mov	r1, sl
 80078be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078c2:	4651      	mov	r1, sl
 80078c4:	00ca      	lsls	r2, r1, #3
 80078c6:	4610      	mov	r0, r2
 80078c8:	4619      	mov	r1, r3
 80078ca:	4603      	mov	r3, r0
 80078cc:	4642      	mov	r2, r8
 80078ce:	189b      	adds	r3, r3, r2
 80078d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078d4:	464b      	mov	r3, r9
 80078d6:	460a      	mov	r2, r1
 80078d8:	eb42 0303 	adc.w	r3, r2, r3
 80078dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80078f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078f4:	460b      	mov	r3, r1
 80078f6:	18db      	adds	r3, r3, r3
 80078f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80078fa:	4613      	mov	r3, r2
 80078fc:	eb42 0303 	adc.w	r3, r2, r3
 8007900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007906:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800790a:	f7f9 f9ed 	bl	8000ce8 <__aeabi_uldivmod>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <UART_SetConfig+0x2d4>)
 8007914:	fba3 1302 	umull	r1, r3, r3, r2
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	2164      	movs	r1, #100	; 0x64
 800791c:	fb01 f303 	mul.w	r3, r1, r3
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	3332      	adds	r3, #50	; 0x32
 8007926:	4a08      	ldr	r2, [pc, #32]	; (8007948 <UART_SetConfig+0x2d4>)
 8007928:	fba2 2303 	umull	r2, r3, r2, r3
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	f003 0207 	and.w	r2, r3, #7
 8007932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4422      	add	r2, r4
 800793a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800793c:	e105      	b.n	8007b4a <UART_SetConfig+0x4d6>
 800793e:	bf00      	nop
 8007940:	40011000 	.word	0x40011000
 8007944:	40011400 	.word	0x40011400
 8007948:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800794c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007950:	2200      	movs	r2, #0
 8007952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007956:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800795a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800795e:	4642      	mov	r2, r8
 8007960:	464b      	mov	r3, r9
 8007962:	1891      	adds	r1, r2, r2
 8007964:	6239      	str	r1, [r7, #32]
 8007966:	415b      	adcs	r3, r3
 8007968:	627b      	str	r3, [r7, #36]	; 0x24
 800796a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800796e:	4641      	mov	r1, r8
 8007970:	1854      	adds	r4, r2, r1
 8007972:	4649      	mov	r1, r9
 8007974:	eb43 0501 	adc.w	r5, r3, r1
 8007978:	f04f 0200 	mov.w	r2, #0
 800797c:	f04f 0300 	mov.w	r3, #0
 8007980:	00eb      	lsls	r3, r5, #3
 8007982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007986:	00e2      	lsls	r2, r4, #3
 8007988:	4614      	mov	r4, r2
 800798a:	461d      	mov	r5, r3
 800798c:	4643      	mov	r3, r8
 800798e:	18e3      	adds	r3, r4, r3
 8007990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007994:	464b      	mov	r3, r9
 8007996:	eb45 0303 	adc.w	r3, r5, r3
 800799a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800799e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80079ba:	4629      	mov	r1, r5
 80079bc:	008b      	lsls	r3, r1, #2
 80079be:	4621      	mov	r1, r4
 80079c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079c4:	4621      	mov	r1, r4
 80079c6:	008a      	lsls	r2, r1, #2
 80079c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80079cc:	f7f9 f98c 	bl	8000ce8 <__aeabi_uldivmod>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4b60      	ldr	r3, [pc, #384]	; (8007b58 <UART_SetConfig+0x4e4>)
 80079d6:	fba3 2302 	umull	r2, r3, r3, r2
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	011c      	lsls	r4, r3, #4
 80079de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80079ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80079f0:	4642      	mov	r2, r8
 80079f2:	464b      	mov	r3, r9
 80079f4:	1891      	adds	r1, r2, r2
 80079f6:	61b9      	str	r1, [r7, #24]
 80079f8:	415b      	adcs	r3, r3
 80079fa:	61fb      	str	r3, [r7, #28]
 80079fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a00:	4641      	mov	r1, r8
 8007a02:	1851      	adds	r1, r2, r1
 8007a04:	6139      	str	r1, [r7, #16]
 8007a06:	4649      	mov	r1, r9
 8007a08:	414b      	adcs	r3, r1
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	f04f 0300 	mov.w	r3, #0
 8007a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a18:	4659      	mov	r1, fp
 8007a1a:	00cb      	lsls	r3, r1, #3
 8007a1c:	4651      	mov	r1, sl
 8007a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a22:	4651      	mov	r1, sl
 8007a24:	00ca      	lsls	r2, r1, #3
 8007a26:	4610      	mov	r0, r2
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	189b      	adds	r3, r3, r2
 8007a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a34:	464b      	mov	r3, r9
 8007a36:	460a      	mov	r2, r1
 8007a38:	eb42 0303 	adc.w	r3, r2, r3
 8007a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a58:	4649      	mov	r1, r9
 8007a5a:	008b      	lsls	r3, r1, #2
 8007a5c:	4641      	mov	r1, r8
 8007a5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a62:	4641      	mov	r1, r8
 8007a64:	008a      	lsls	r2, r1, #2
 8007a66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a6a:	f7f9 f93d 	bl	8000ce8 <__aeabi_uldivmod>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4b39      	ldr	r3, [pc, #228]	; (8007b58 <UART_SetConfig+0x4e4>)
 8007a74:	fba3 1302 	umull	r1, r3, r3, r2
 8007a78:	095b      	lsrs	r3, r3, #5
 8007a7a:	2164      	movs	r1, #100	; 0x64
 8007a7c:	fb01 f303 	mul.w	r3, r1, r3
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	011b      	lsls	r3, r3, #4
 8007a84:	3332      	adds	r3, #50	; 0x32
 8007a86:	4a34      	ldr	r2, [pc, #208]	; (8007b58 <UART_SetConfig+0x4e4>)
 8007a88:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8c:	095b      	lsrs	r3, r3, #5
 8007a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a92:	441c      	add	r4, r3
 8007a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a98:	2200      	movs	r2, #0
 8007a9a:	673b      	str	r3, [r7, #112]	; 0x70
 8007a9c:	677a      	str	r2, [r7, #116]	; 0x74
 8007a9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007aa2:	4642      	mov	r2, r8
 8007aa4:	464b      	mov	r3, r9
 8007aa6:	1891      	adds	r1, r2, r2
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	415b      	adcs	r3, r3
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ab2:	4641      	mov	r1, r8
 8007ab4:	1851      	adds	r1, r2, r1
 8007ab6:	6039      	str	r1, [r7, #0]
 8007ab8:	4649      	mov	r1, r9
 8007aba:	414b      	adcs	r3, r1
 8007abc:	607b      	str	r3, [r7, #4]
 8007abe:	f04f 0200 	mov.w	r2, #0
 8007ac2:	f04f 0300 	mov.w	r3, #0
 8007ac6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007aca:	4659      	mov	r1, fp
 8007acc:	00cb      	lsls	r3, r1, #3
 8007ace:	4651      	mov	r1, sl
 8007ad0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ad4:	4651      	mov	r1, sl
 8007ad6:	00ca      	lsls	r2, r1, #3
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4619      	mov	r1, r3
 8007adc:	4603      	mov	r3, r0
 8007ade:	4642      	mov	r2, r8
 8007ae0:	189b      	adds	r3, r3, r2
 8007ae2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	460a      	mov	r2, r1
 8007ae8:	eb42 0303 	adc.w	r3, r2, r3
 8007aec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	663b      	str	r3, [r7, #96]	; 0x60
 8007af8:	667a      	str	r2, [r7, #100]	; 0x64
 8007afa:	f04f 0200 	mov.w	r2, #0
 8007afe:	f04f 0300 	mov.w	r3, #0
 8007b02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b06:	4649      	mov	r1, r9
 8007b08:	008b      	lsls	r3, r1, #2
 8007b0a:	4641      	mov	r1, r8
 8007b0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b10:	4641      	mov	r1, r8
 8007b12:	008a      	lsls	r2, r1, #2
 8007b14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007b18:	f7f9 f8e6 	bl	8000ce8 <__aeabi_uldivmod>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4b0d      	ldr	r3, [pc, #52]	; (8007b58 <UART_SetConfig+0x4e4>)
 8007b22:	fba3 1302 	umull	r1, r3, r3, r2
 8007b26:	095b      	lsrs	r3, r3, #5
 8007b28:	2164      	movs	r1, #100	; 0x64
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	3332      	adds	r3, #50	; 0x32
 8007b34:	4a08      	ldr	r2, [pc, #32]	; (8007b58 <UART_SetConfig+0x4e4>)
 8007b36:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	f003 020f 	and.w	r2, r3, #15
 8007b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4422      	add	r2, r4
 8007b48:	609a      	str	r2, [r3, #8]
}
 8007b4a:	bf00      	nop
 8007b4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b50:	46bd      	mov	sp, r7
 8007b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b56:	bf00      	nop
 8007b58:	51eb851f 	.word	0x51eb851f

08007b5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f103 0208 	add.w	r2, r3, #8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f04f 32ff 	mov.w	r2, #4294967295
 8007b74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f103 0208 	add.w	r2, r3, #8
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f103 0208 	add.w	r2, r3, #8
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]
}
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c14:	d103      	bne.n	8007c1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e00c      	b.n	8007c38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3308      	adds	r3, #8
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	e002      	b.n	8007c2c <vListInsert+0x2e>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d2f6      	bcs.n	8007c26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	601a      	str	r2, [r3, #0]
}
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	6892      	ldr	r2, [r2, #8]
 8007c86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6852      	ldr	r2, [r2, #4]
 8007c90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d103      	bne.n	8007ca4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	1e5a      	subs	r2, r3, #1
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007cee:	f001 fdb9 	bl	8009864 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfa:	68f9      	ldr	r1, [r7, #12]
 8007cfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cfe:	fb01 f303 	mul.w	r3, r1, r3
 8007d02:	441a      	add	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	68f9      	ldr	r1, [r7, #12]
 8007d22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d24:	fb01 f303 	mul.w	r3, r1, r3
 8007d28:	441a      	add	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	22ff      	movs	r2, #255	; 0xff
 8007d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	22ff      	movs	r2, #255	; 0xff
 8007d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d114      	bne.n	8007d6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01a      	beq.n	8007d82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3310      	adds	r3, #16
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 f901 	bl	8008f58 <xTaskRemoveFromEventList>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d012      	beq.n	8007d82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d5c:	4b0c      	ldr	r3, [pc, #48]	; (8007d90 <xQueueGenericReset+0xcc>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	e009      	b.n	8007d82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3310      	adds	r3, #16
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7ff fef2 	bl	8007b5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3324      	adds	r3, #36	; 0x24
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff feed 	bl	8007b5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d82:	f001 fd9f 	bl	80098c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d86:	2301      	movs	r3, #1
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	e000ed04 	.word	0xe000ed04

08007d94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08a      	sub	sp, #40	; 0x28
 8007d98:	af02      	add	r7, sp, #8
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <xQueueGenericCreate+0x2a>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	613b      	str	r3, [r7, #16]
}
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	fb02 f303 	mul.w	r3, r2, r3
 8007dc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	3348      	adds	r3, #72	; 0x48
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 fe6b 	bl	8009aa8 <pvPortMalloc>
 8007dd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d011      	beq.n	8007dfe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	3348      	adds	r3, #72	; 0x48
 8007de2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007dec:	79fa      	ldrb	r2, [r7, #7]
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	4613      	mov	r3, r2
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	68b9      	ldr	r1, [r7, #8]
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f805 	bl	8007e08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007dfe:	69bb      	ldr	r3, [r7, #24]
	}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3720      	adds	r7, #32
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d103      	bne.n	8007e24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	e002      	b.n	8007e2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e36:	2101      	movs	r1, #1
 8007e38:	69b8      	ldr	r0, [r7, #24]
 8007e3a:	f7ff ff43 	bl	8007cc4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e3e:	bf00      	nop
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b08e      	sub	sp, #56	; 0x38
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10a      	bne.n	8007e70 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	623b      	str	r3, [r7, #32]
}
 8007e6c:	bf00      	nop
 8007e6e:	e7fe      	b.n	8007e6e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <xQueueGiveFromISR+0x48>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	61fb      	str	r3, [r7, #28]
}
 8007e8a:	bf00      	nop
 8007e8c:	e7fe      	b.n	8007e8c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d103      	bne.n	8007e9e <xQueueGiveFromISR+0x58>
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <xQueueGiveFromISR+0x5c>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e000      	b.n	8007ea4 <xQueueGiveFromISR+0x5e>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10a      	bne.n	8007ebe <xQueueGiveFromISR+0x78>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	61bb      	str	r3, [r7, #24]
}
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ebe:	f001 fdb3 	bl	8009a28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ec2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	617a      	str	r2, [r7, #20]
 8007ed8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007eda:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007edc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d22b      	bcs.n	8007f46 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f08:	d112      	bne.n	8007f30 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d016      	beq.n	8007f40 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	3324      	adds	r3, #36	; 0x24
 8007f16:	4618      	mov	r0, r3
 8007f18:	f001 f81e 	bl	8008f58 <xTaskRemoveFromEventList>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00e      	beq.n	8007f40 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	e007      	b.n	8007f40 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f34:	3301      	adds	r3, #1
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	b25a      	sxtb	r2, r3
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f40:	2301      	movs	r3, #1
 8007f42:	637b      	str	r3, [r7, #52]	; 0x34
 8007f44:	e001      	b.n	8007f4a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	637b      	str	r3, [r7, #52]	; 0x34
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3738      	adds	r7, #56	; 0x38
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08e      	sub	sp, #56	; 0x38
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007f72:	2300      	movs	r3, #0
 8007f74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	623b      	str	r3, [r7, #32]
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	61fb      	str	r3, [r7, #28]
}
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fb0:	f001 f992 	bl	80092d8 <xTaskGetSchedulerState>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d102      	bne.n	8007fc0 <xQueueSemaphoreTake+0x60>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <xQueueSemaphoreTake+0x64>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <xQueueSemaphoreTake+0x66>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	61bb      	str	r3, [r7, #24]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fe0:	f001 fc40 	bl	8009864 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d024      	beq.n	800803a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff2:	1e5a      	subs	r2, r3, #1
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d104      	bne.n	800800a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008000:	f001 fa8c 	bl	800951c <pvTaskIncrementMutexHeldCount>
 8008004:	4602      	mov	r2, r0
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00f      	beq.n	8008032 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	3310      	adds	r3, #16
 8008016:	4618      	mov	r0, r3
 8008018:	f000 ff9e 	bl	8008f58 <xTaskRemoveFromEventList>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008022:	4b54      	ldr	r3, [pc, #336]	; (8008174 <xQueueSemaphoreTake+0x214>)
 8008024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008032:	f001 fc47 	bl	80098c4 <vPortExitCritical>
				return pdPASS;
 8008036:	2301      	movs	r3, #1
 8008038:	e097      	b.n	800816a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d111      	bne.n	8008064 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	617b      	str	r3, [r7, #20]
}
 8008058:	bf00      	nop
 800805a:	e7fe      	b.n	800805a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800805c:	f001 fc32 	bl	80098c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008060:	2300      	movs	r3, #0
 8008062:	e082      	b.n	800816a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800806a:	f107 030c 	add.w	r3, r7, #12
 800806e:	4618      	mov	r0, r3
 8008070:	f000 ffd4 	bl	800901c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008074:	2301      	movs	r3, #1
 8008076:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008078:	f001 fc24 	bl	80098c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800807c:	f000 fd74 	bl	8008b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008080:	f001 fbf0 	bl	8009864 <vPortEnterCritical>
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800808a:	b25b      	sxtb	r3, r3
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d103      	bne.n	800809a <xQueueSemaphoreTake+0x13a>
 8008092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080a0:	b25b      	sxtb	r3, r3
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a6:	d103      	bne.n	80080b0 <xQueueSemaphoreTake+0x150>
 80080a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080b0:	f001 fc08 	bl	80098c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080b4:	463a      	mov	r2, r7
 80080b6:	f107 030c 	add.w	r3, r7, #12
 80080ba:	4611      	mov	r1, r2
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 ffc3 	bl	8009048 <xTaskCheckForTimeOut>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d132      	bne.n	800812e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080ca:	f000 f8bf 	bl	800824c <prvIsQueueEmpty>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d026      	beq.n	8008122 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d109      	bne.n	80080f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80080dc:	f001 fbc2 	bl	8009864 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 f915 	bl	8009314 <xTaskPriorityInherit>
 80080ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80080ec:	f001 fbea 	bl	80098c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f2:	3324      	adds	r3, #36	; 0x24
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	4611      	mov	r1, r2
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 ff09 	bl	8008f10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008100:	f000 f852 	bl	80081a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008104:	f000 fd3e 	bl	8008b84 <xTaskResumeAll>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	f47f af68 	bne.w	8007fe0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008110:	4b18      	ldr	r3, [pc, #96]	; (8008174 <xQueueSemaphoreTake+0x214>)
 8008112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	e75e      	b.n	8007fe0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008124:	f000 f840 	bl	80081a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008128:	f000 fd2c 	bl	8008b84 <xTaskResumeAll>
 800812c:	e758      	b.n	8007fe0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800812e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008130:	f000 f83a 	bl	80081a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008134:	f000 fd26 	bl	8008b84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800813a:	f000 f887 	bl	800824c <prvIsQueueEmpty>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	f43f af4d 	beq.w	8007fe0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00d      	beq.n	8008168 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800814c:	f001 fb8a 	bl	8009864 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008150:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008152:	f000 f811 	bl	8008178 <prvGetDisinheritPriorityAfterTimeout>
 8008156:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800815e:	4618      	mov	r0, r3
 8008160:	f001 f94e 	bl	8009400 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008164:	f001 fbae 	bl	80098c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008168:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800816a:	4618      	mov	r0, r3
 800816c:	3738      	adds	r7, #56	; 0x38
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	e000ed04 	.word	0xe000ed04

08008178 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008184:	2b00      	cmp	r3, #0
 8008186:	d006      	beq.n	8008196 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f1c3 0308 	rsb	r3, r3, #8
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	e001      	b.n	800819a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008196:	2300      	movs	r3, #0
 8008198:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800819a:	68fb      	ldr	r3, [r7, #12]
	}
 800819c:	4618      	mov	r0, r3
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081b0:	f001 fb58 	bl	8009864 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081bc:	e011      	b.n	80081e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d012      	beq.n	80081ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3324      	adds	r3, #36	; 0x24
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fec4 	bl	8008f58 <xTaskRemoveFromEventList>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081d6:	f000 ff99 	bl	800910c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	3b01      	subs	r3, #1
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	dce9      	bgt.n	80081be <prvUnlockQueue+0x16>
 80081ea:	e000      	b.n	80081ee <prvUnlockQueue+0x46>
					break;
 80081ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	22ff      	movs	r2, #255	; 0xff
 80081f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081f6:	f001 fb65 	bl	80098c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081fa:	f001 fb33 	bl	8009864 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008204:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008206:	e011      	b.n	800822c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d012      	beq.n	8008236 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3310      	adds	r3, #16
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fe9f 	bl	8008f58 <xTaskRemoveFromEventList>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008220:	f000 ff74 	bl	800910c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	3b01      	subs	r3, #1
 8008228:	b2db      	uxtb	r3, r3
 800822a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800822c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008230:	2b00      	cmp	r3, #0
 8008232:	dce9      	bgt.n	8008208 <prvUnlockQueue+0x60>
 8008234:	e000      	b.n	8008238 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008236:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	22ff      	movs	r2, #255	; 0xff
 800823c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008240:	f001 fb40 	bl	80098c4 <vPortExitCritical>
}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008254:	f001 fb06 	bl	8009864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	e001      	b.n	800826a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008266:	2300      	movs	r3, #0
 8008268:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800826a:	f001 fb2b 	bl	80098c4 <vPortExitCritical>

	return xReturn;
 800826e:	68fb      	ldr	r3, [r7, #12]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08e      	sub	sp, #56	; 0x38
 800827c:	af04      	add	r7, sp, #16
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	623b      	str	r3, [r7, #32]
}
 800829e:	bf00      	nop
 80082a0:	e7fe      	b.n	80082a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10a      	bne.n	80082be <xTaskCreateStatic+0x46>
	__asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	61fb      	str	r3, [r7, #28]
}
 80082ba:	bf00      	nop
 80082bc:	e7fe      	b.n	80082bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082be:	23b4      	movs	r3, #180	; 0xb4
 80082c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2bb4      	cmp	r3, #180	; 0xb4
 80082c6:	d00a      	beq.n	80082de <xTaskCreateStatic+0x66>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	61bb      	str	r3, [r7, #24]
}
 80082da:	bf00      	nop
 80082dc:	e7fe      	b.n	80082dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d01e      	beq.n	8008324 <xTaskCreateStatic+0xac>
 80082e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01b      	beq.n	8008324 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	2202      	movs	r2, #2
 80082fa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082fe:	2300      	movs	r3, #0
 8008300:	9303      	str	r3, [sp, #12]
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	9302      	str	r3, [sp, #8]
 8008306:	f107 0314 	add.w	r3, r7, #20
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f850 	bl	80083bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800831c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800831e:	f000 f8eb 	bl	80084f8 <prvAddNewTaskToReadyList>
 8008322:	e001      	b.n	8008328 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008324:	2300      	movs	r3, #0
 8008326:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008328:	697b      	ldr	r3, [r7, #20]
	}
 800832a:	4618      	mov	r0, r3
 800832c:	3728      	adds	r7, #40	; 0x28
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008332:	b580      	push	{r7, lr}
 8008334:	b08c      	sub	sp, #48	; 0x30
 8008336:	af04      	add	r7, sp, #16
 8008338:	60f8      	str	r0, [r7, #12]
 800833a:	60b9      	str	r1, [r7, #8]
 800833c:	603b      	str	r3, [r7, #0]
 800833e:	4613      	mov	r3, r2
 8008340:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008342:	88fb      	ldrh	r3, [r7, #6]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4618      	mov	r0, r3
 8008348:	f001 fbae 	bl	8009aa8 <pvPortMalloc>
 800834c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00e      	beq.n	8008372 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008354:	20b4      	movs	r0, #180	; 0xb4
 8008356:	f001 fba7 	bl	8009aa8 <pvPortMalloc>
 800835a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	631a      	str	r2, [r3, #48]	; 0x30
 8008368:	e005      	b.n	8008376 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800836a:	6978      	ldr	r0, [r7, #20]
 800836c:	f001 fc68 	bl	8009c40 <vPortFree>
 8008370:	e001      	b.n	8008376 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d017      	beq.n	80083ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008384:	88fa      	ldrh	r2, [r7, #6]
 8008386:	2300      	movs	r3, #0
 8008388:	9303      	str	r3, [sp, #12]
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	9302      	str	r3, [sp, #8]
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 f80e 	bl	80083bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083a0:	69f8      	ldr	r0, [r7, #28]
 80083a2:	f000 f8a9 	bl	80084f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083a6:	2301      	movs	r3, #1
 80083a8:	61bb      	str	r3, [r7, #24]
 80083aa:	e002      	b.n	80083b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083ac:	f04f 33ff 	mov.w	r3, #4294967295
 80083b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083b2:	69bb      	ldr	r3, [r7, #24]
	}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3720      	adds	r7, #32
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b088      	sub	sp, #32
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083d4:	3b01      	subs	r3, #1
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	f023 0307 	bic.w	r3, r3, #7
 80083e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00a      	beq.n	8008404 <prvInitialiseNewTask+0x48>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	617b      	str	r3, [r7, #20]
}
 8008400:	bf00      	nop
 8008402:	e7fe      	b.n	8008402 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d01f      	beq.n	800844a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800840a:	2300      	movs	r3, #0
 800840c:	61fb      	str	r3, [r7, #28]
 800840e:	e012      	b.n	8008436 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	4413      	add	r3, r2
 8008416:	7819      	ldrb	r1, [r3, #0]
 8008418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	4413      	add	r3, r2
 800841e:	3334      	adds	r3, #52	; 0x34
 8008420:	460a      	mov	r2, r1
 8008422:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	4413      	add	r3, r2
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d006      	beq.n	800843e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	3301      	adds	r3, #1
 8008434:	61fb      	str	r3, [r7, #28]
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	2b0f      	cmp	r3, #15
 800843a:	d9e9      	bls.n	8008410 <prvInitialiseNewTask+0x54>
 800843c:	e000      	b.n	8008440 <prvInitialiseNewTask+0x84>
			{
				break;
 800843e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008448:	e003      	b.n	8008452 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	2b07      	cmp	r3, #7
 8008456:	d901      	bls.n	800845c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008458:	2307      	movs	r3, #7
 800845a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008460:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008466:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	2200      	movs	r2, #0
 800846c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	3304      	adds	r3, #4
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff fb92 	bl	8007b9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	3318      	adds	r3, #24
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff fb8d 	bl	8007b9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008486:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	f1c3 0208 	rsb	r2, r3, #8
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008496:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	334c      	adds	r3, #76	; 0x4c
 80084ac:	2260      	movs	r2, #96	; 0x60
 80084ae:	2100      	movs	r1, #0
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 fe18 	bl	800a0e6 <memset>
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	4a0c      	ldr	r2, [pc, #48]	; (80084ec <prvInitialiseNewTask+0x130>)
 80084ba:	651a      	str	r2, [r3, #80]	; 0x50
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	4a0c      	ldr	r2, [pc, #48]	; (80084f0 <prvInitialiseNewTask+0x134>)
 80084c0:	655a      	str	r2, [r3, #84]	; 0x54
 80084c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c4:	4a0b      	ldr	r2, [pc, #44]	; (80084f4 <prvInitialiseNewTask+0x138>)
 80084c6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	68f9      	ldr	r1, [r7, #12]
 80084cc:	69b8      	ldr	r0, [r7, #24]
 80084ce:	f001 f89f 	bl	8009610 <pxPortInitialiseStack>
 80084d2:	4602      	mov	r2, r0
 80084d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084e4:	bf00      	nop
 80084e6:	3720      	adds	r7, #32
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	0800e4cc 	.word	0x0800e4cc
 80084f0:	0800e4ec 	.word	0x0800e4ec
 80084f4:	0800e4ac 	.word	0x0800e4ac

080084f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008500:	f001 f9b0 	bl	8009864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008504:	4b2a      	ldr	r3, [pc, #168]	; (80085b0 <prvAddNewTaskToReadyList+0xb8>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3301      	adds	r3, #1
 800850a:	4a29      	ldr	r2, [pc, #164]	; (80085b0 <prvAddNewTaskToReadyList+0xb8>)
 800850c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800850e:	4b29      	ldr	r3, [pc, #164]	; (80085b4 <prvAddNewTaskToReadyList+0xbc>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d109      	bne.n	800852a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008516:	4a27      	ldr	r2, [pc, #156]	; (80085b4 <prvAddNewTaskToReadyList+0xbc>)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800851c:	4b24      	ldr	r3, [pc, #144]	; (80085b0 <prvAddNewTaskToReadyList+0xb8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d110      	bne.n	8008546 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008524:	f000 fe16 	bl	8009154 <prvInitialiseTaskLists>
 8008528:	e00d      	b.n	8008546 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800852a:	4b23      	ldr	r3, [pc, #140]	; (80085b8 <prvAddNewTaskToReadyList+0xc0>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d109      	bne.n	8008546 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008532:	4b20      	ldr	r3, [pc, #128]	; (80085b4 <prvAddNewTaskToReadyList+0xbc>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	429a      	cmp	r2, r3
 800853e:	d802      	bhi.n	8008546 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008540:	4a1c      	ldr	r2, [pc, #112]	; (80085b4 <prvAddNewTaskToReadyList+0xbc>)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008546:	4b1d      	ldr	r3, [pc, #116]	; (80085bc <prvAddNewTaskToReadyList+0xc4>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3301      	adds	r3, #1
 800854c:	4a1b      	ldr	r2, [pc, #108]	; (80085bc <prvAddNewTaskToReadyList+0xc4>)
 800854e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	2201      	movs	r2, #1
 8008556:	409a      	lsls	r2, r3
 8008558:	4b19      	ldr	r3, [pc, #100]	; (80085c0 <prvAddNewTaskToReadyList+0xc8>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4313      	orrs	r3, r2
 800855e:	4a18      	ldr	r2, [pc, #96]	; (80085c0 <prvAddNewTaskToReadyList+0xc8>)
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4a15      	ldr	r2, [pc, #84]	; (80085c4 <prvAddNewTaskToReadyList+0xcc>)
 8008570:	441a      	add	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3304      	adds	r3, #4
 8008576:	4619      	mov	r1, r3
 8008578:	4610      	mov	r0, r2
 800857a:	f7ff fb1c 	bl	8007bb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800857e:	f001 f9a1 	bl	80098c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008582:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <prvAddNewTaskToReadyList+0xc0>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00e      	beq.n	80085a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800858a:	4b0a      	ldr	r3, [pc, #40]	; (80085b4 <prvAddNewTaskToReadyList+0xbc>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	429a      	cmp	r2, r3
 8008596:	d207      	bcs.n	80085a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008598:	4b0b      	ldr	r3, [pc, #44]	; (80085c8 <prvAddNewTaskToReadyList+0xd0>)
 800859a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	20000acc 	.word	0x20000acc
 80085b4:	200009b8 	.word	0x200009b8
 80085b8:	20000ad8 	.word	0x20000ad8
 80085bc:	20000ae8 	.word	0x20000ae8
 80085c0:	20000ad4 	.word	0x20000ad4
 80085c4:	200009bc 	.word	0x200009bc
 80085c8:	e000ed04 	.word	0xe000ed04

080085cc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80085d4:	f001 f946 	bl	8009864 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <vTaskDelete+0x18>
 80085de:	4b39      	ldr	r3, [pc, #228]	; (80086c4 <vTaskDelete+0xf8>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	e000      	b.n	80085e6 <vTaskDelete+0x1a>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7ff fb3f 	bl	8007c70 <uxListRemove>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d115      	bne.n	8008624 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fc:	4932      	ldr	r1, [pc, #200]	; (80086c8 <vTaskDelete+0xfc>)
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	440b      	add	r3, r1
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10a      	bne.n	8008624 <vTaskDelete+0x58>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008612:	2201      	movs	r2, #1
 8008614:	fa02 f303 	lsl.w	r3, r2, r3
 8008618:	43da      	mvns	r2, r3
 800861a:	4b2c      	ldr	r3, [pc, #176]	; (80086cc <vTaskDelete+0x100>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4013      	ands	r3, r2
 8008620:	4a2a      	ldr	r2, [pc, #168]	; (80086cc <vTaskDelete+0x100>)
 8008622:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008628:	2b00      	cmp	r3, #0
 800862a:	d004      	beq.n	8008636 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3318      	adds	r3, #24
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff fb1d 	bl	8007c70 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008636:	4b26      	ldr	r3, [pc, #152]	; (80086d0 <vTaskDelete+0x104>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3301      	adds	r3, #1
 800863c:	4a24      	ldr	r2, [pc, #144]	; (80086d0 <vTaskDelete+0x104>)
 800863e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008640:	4b20      	ldr	r3, [pc, #128]	; (80086c4 <vTaskDelete+0xf8>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	429a      	cmp	r2, r3
 8008648:	d10b      	bne.n	8008662 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3304      	adds	r3, #4
 800864e:	4619      	mov	r1, r3
 8008650:	4820      	ldr	r0, [pc, #128]	; (80086d4 <vTaskDelete+0x108>)
 8008652:	f7ff fab0 	bl	8007bb6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008656:	4b20      	ldr	r3, [pc, #128]	; (80086d8 <vTaskDelete+0x10c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3301      	adds	r3, #1
 800865c:	4a1e      	ldr	r2, [pc, #120]	; (80086d8 <vTaskDelete+0x10c>)
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	e009      	b.n	8008676 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008662:	4b1e      	ldr	r3, [pc, #120]	; (80086dc <vTaskDelete+0x110>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3b01      	subs	r3, #1
 8008668:	4a1c      	ldr	r2, [pc, #112]	; (80086dc <vTaskDelete+0x110>)
 800866a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 fddf 	bl	8009230 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008672:	f000 fe11 	bl	8009298 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008676:	f001 f925 	bl	80098c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800867a:	4b19      	ldr	r3, [pc, #100]	; (80086e0 <vTaskDelete+0x114>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d01b      	beq.n	80086ba <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8008682:	4b10      	ldr	r3, [pc, #64]	; (80086c4 <vTaskDelete+0xf8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	429a      	cmp	r2, r3
 800868a:	d116      	bne.n	80086ba <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800868c:	4b15      	ldr	r3, [pc, #84]	; (80086e4 <vTaskDelete+0x118>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <vTaskDelete+0xde>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	60bb      	str	r3, [r7, #8]
}
 80086a6:	bf00      	nop
 80086a8:	e7fe      	b.n	80086a8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80086aa:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <vTaskDelete+0x11c>)
 80086ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086ba:	bf00      	nop
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	200009b8 	.word	0x200009b8
 80086c8:	200009bc 	.word	0x200009bc
 80086cc:	20000ad4 	.word	0x20000ad4
 80086d0:	20000ae8 	.word	0x20000ae8
 80086d4:	20000aa0 	.word	0x20000aa0
 80086d8:	20000ab4 	.word	0x20000ab4
 80086dc:	20000acc 	.word	0x20000acc
 80086e0:	20000ad8 	.word	0x20000ad8
 80086e4:	20000af4 	.word	0x20000af4
 80086e8:	e000ed04 	.word	0xe000ed04

080086ec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08a      	sub	sp, #40	; 0x28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80086f6:	2300      	movs	r3, #0
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	617b      	str	r3, [r7, #20]
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10a      	bne.n	8008732 <vTaskDelayUntil+0x46>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	613b      	str	r3, [r7, #16]
}
 800872e:	bf00      	nop
 8008730:	e7fe      	b.n	8008730 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008732:	4b2a      	ldr	r3, [pc, #168]	; (80087dc <vTaskDelayUntil+0xf0>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <vTaskDelayUntil+0x64>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	60fb      	str	r3, [r7, #12]
}
 800874c:	bf00      	nop
 800874e:	e7fe      	b.n	800874e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008750:	f000 fa0a 	bl	8008b68 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008754:	4b22      	ldr	r3, [pc, #136]	; (80087e0 <vTaskDelayUntil+0xf4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	4413      	add	r3, r2
 8008762:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6a3a      	ldr	r2, [r7, #32]
 800876a:	429a      	cmp	r2, r3
 800876c:	d20b      	bcs.n	8008786 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	429a      	cmp	r2, r3
 8008776:	d211      	bcs.n	800879c <vTaskDelayUntil+0xb0>
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	429a      	cmp	r2, r3
 800877e:	d90d      	bls.n	800879c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008780:	2301      	movs	r3, #1
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
 8008784:	e00a      	b.n	800879c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	69fa      	ldr	r2, [r7, #28]
 800878c:	429a      	cmp	r2, r3
 800878e:	d303      	bcc.n	8008798 <vTaskDelayUntil+0xac>
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	429a      	cmp	r2, r3
 8008796:	d901      	bls.n	800879c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008798:	2301      	movs	r3, #1
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69fa      	ldr	r2, [r7, #28]
 80087a0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d006      	beq.n	80087b6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2100      	movs	r1, #0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 fec7 	bl	8009544 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80087b6:	f000 f9e5 	bl	8008b84 <xTaskResumeAll>
 80087ba:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d107      	bne.n	80087d2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80087c2:	4b08      	ldr	r3, [pc, #32]	; (80087e4 <vTaskDelayUntil+0xf8>)
 80087c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c8:	601a      	str	r2, [r3, #0]
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087d2:	bf00      	nop
 80087d4:	3728      	adds	r7, #40	; 0x28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	20000af4 	.word	0x20000af4
 80087e0:	20000ad0 	.word	0x20000ad0
 80087e4:	e000ed04 	.word	0xe000ed04

080087e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087f0:	2300      	movs	r3, #0
 80087f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d017      	beq.n	800882a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087fa:	4b13      	ldr	r3, [pc, #76]	; (8008848 <vTaskDelay+0x60>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <vTaskDelay+0x30>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	60bb      	str	r3, [r7, #8]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008818:	f000 f9a6 	bl	8008b68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800881c:	2100      	movs	r1, #0
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fe90 	bl	8009544 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008824:	f000 f9ae 	bl	8008b84 <xTaskResumeAll>
 8008828:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d107      	bne.n	8008840 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008830:	4b06      	ldr	r3, [pc, #24]	; (800884c <vTaskDelay+0x64>)
 8008832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008840:	bf00      	nop
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20000af4 	.word	0x20000af4
 800884c:	e000ed04 	.word	0xe000ed04

08008850 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008858:	f001 f804 	bl	8009864 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d102      	bne.n	8008868 <vTaskSuspend+0x18>
 8008862:	4b3c      	ldr	r3, [pc, #240]	; (8008954 <vTaskSuspend+0x104>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	e000      	b.n	800886a <vTaskSuspend+0x1a>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3304      	adds	r3, #4
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff f9fd 	bl	8007c70 <uxListRemove>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d115      	bne.n	80088a8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008880:	4935      	ldr	r1, [pc, #212]	; (8008958 <vTaskSuspend+0x108>)
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <vTaskSuspend+0x58>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008896:	2201      	movs	r2, #1
 8008898:	fa02 f303 	lsl.w	r3, r2, r3
 800889c:	43da      	mvns	r2, r3
 800889e:	4b2f      	ldr	r3, [pc, #188]	; (800895c <vTaskSuspend+0x10c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4013      	ands	r3, r2
 80088a4:	4a2d      	ldr	r2, [pc, #180]	; (800895c <vTaskSuspend+0x10c>)
 80088a6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d004      	beq.n	80088ba <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3318      	adds	r3, #24
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff f9db 	bl	8007c70 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3304      	adds	r3, #4
 80088be:	4619      	mov	r1, r3
 80088c0:	4827      	ldr	r0, [pc, #156]	; (8008960 <vTaskSuspend+0x110>)
 80088c2:	f7ff f978 	bl	8007bb6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d103      	bne.n	80088da <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80088da:	f000 fff3 	bl	80098c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80088de:	4b21      	ldr	r3, [pc, #132]	; (8008964 <vTaskSuspend+0x114>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d005      	beq.n	80088f2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80088e6:	f000 ffbd 	bl	8009864 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80088ea:	f000 fcd5 	bl	8009298 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80088ee:	f000 ffe9 	bl	80098c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80088f2:	4b18      	ldr	r3, [pc, #96]	; (8008954 <vTaskSuspend+0x104>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d127      	bne.n	800894c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80088fc:	4b19      	ldr	r3, [pc, #100]	; (8008964 <vTaskSuspend+0x114>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d017      	beq.n	8008934 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008904:	4b18      	ldr	r3, [pc, #96]	; (8008968 <vTaskSuspend+0x118>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <vTaskSuspend+0xd2>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	60bb      	str	r3, [r7, #8]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8008922:	4b12      	ldr	r3, [pc, #72]	; (800896c <vTaskSuspend+0x11c>)
 8008924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008932:	e00b      	b.n	800894c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008934:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <vTaskSuspend+0x110>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <vTaskSuspend+0x120>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	429a      	cmp	r2, r3
 800893e:	d103      	bne.n	8008948 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8008940:	4b04      	ldr	r3, [pc, #16]	; (8008954 <vTaskSuspend+0x104>)
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]
	}
 8008946:	e001      	b.n	800894c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8008948:	f000 fa80 	bl	8008e4c <vTaskSwitchContext>
	}
 800894c:	bf00      	nop
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	200009b8 	.word	0x200009b8
 8008958:	200009bc 	.word	0x200009bc
 800895c:	20000ad4 	.word	0x20000ad4
 8008960:	20000ab8 	.word	0x20000ab8
 8008964:	20000ad8 	.word	0x20000ad8
 8008968:	20000af4 	.word	0x20000af4
 800896c:	e000ed04 	.word	0xe000ed04
 8008970:	20000acc 	.word	0x20000acc

08008974 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10a      	bne.n	80089a0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	60fb      	str	r3, [r7, #12]
}
 800899c:	bf00      	nop
 800899e:	e7fe      	b.n	800899e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	4a0a      	ldr	r2, [pc, #40]	; (80089d0 <prvTaskIsTaskSuspended+0x5c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d10a      	bne.n	80089c0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ae:	4a09      	ldr	r2, [pc, #36]	; (80089d4 <prvTaskIsTaskSuspended+0x60>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d005      	beq.n	80089c0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80089bc:	2301      	movs	r3, #1
 80089be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089c0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80089c2:	4618      	mov	r0, r3
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	20000ab8 	.word	0x20000ab8
 80089d4:	20000a8c 	.word	0x20000a8c

080089d8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <vTaskResume+0x28>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	60bb      	str	r3, [r7, #8]
}
 80089fc:	bf00      	nop
 80089fe:	e7fe      	b.n	80089fe <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008a00:	4b20      	ldr	r3, [pc, #128]	; (8008a84 <vTaskResume+0xac>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d037      	beq.n	8008a7a <vTaskResume+0xa2>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d034      	beq.n	8008a7a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8008a10:	f000 ff28 	bl	8009864 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f7ff ffad 	bl	8008974 <prvTaskIsTaskSuspended>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d02a      	beq.n	8008a76 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	3304      	adds	r3, #4
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff f923 	bl	8007c70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2e:	2201      	movs	r2, #1
 8008a30:	409a      	lsls	r2, r3
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <vTaskResume+0xb0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	4a13      	ldr	r2, [pc, #76]	; (8008a88 <vTaskResume+0xb0>)
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4a10      	ldr	r2, [pc, #64]	; (8008a8c <vTaskResume+0xb4>)
 8008a4a:	441a      	add	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3304      	adds	r3, #4
 8008a50:	4619      	mov	r1, r3
 8008a52:	4610      	mov	r0, r2
 8008a54:	f7ff f8af 	bl	8007bb6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5c:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <vTaskResume+0xac>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d307      	bcc.n	8008a76 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008a66:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <vTaskResume+0xb8>)
 8008a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008a76:	f000 ff25 	bl	80098c4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a7a:	bf00      	nop
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	200009b8 	.word	0x200009b8
 8008a88:	20000ad4 	.word	0x20000ad4
 8008a8c:	200009bc 	.word	0x200009bc
 8008a90:	e000ed04 	.word	0xe000ed04

08008a94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08a      	sub	sp, #40	; 0x28
 8008a98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008aa2:	463a      	mov	r2, r7
 8008aa4:	1d39      	adds	r1, r7, #4
 8008aa6:	f107 0308 	add.w	r3, r7, #8
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7f9 f982 	bl	8001db4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	9202      	str	r2, [sp, #8]
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	2300      	movs	r3, #0
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	460a      	mov	r2, r1
 8008ac2:	4921      	ldr	r1, [pc, #132]	; (8008b48 <vTaskStartScheduler+0xb4>)
 8008ac4:	4821      	ldr	r0, [pc, #132]	; (8008b4c <vTaskStartScheduler+0xb8>)
 8008ac6:	f7ff fbd7 	bl	8008278 <xTaskCreateStatic>
 8008aca:	4603      	mov	r3, r0
 8008acc:	4a20      	ldr	r2, [pc, #128]	; (8008b50 <vTaskStartScheduler+0xbc>)
 8008ace:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ad0:	4b1f      	ldr	r3, [pc, #124]	; (8008b50 <vTaskStartScheduler+0xbc>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	617b      	str	r3, [r7, #20]
 8008adc:	e001      	b.n	8008ae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d11b      	bne.n	8008b20 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	613b      	str	r3, [r7, #16]
}
 8008afa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008afc:	4b15      	ldr	r3, [pc, #84]	; (8008b54 <vTaskStartScheduler+0xc0>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	334c      	adds	r3, #76	; 0x4c
 8008b02:	4a15      	ldr	r2, [pc, #84]	; (8008b58 <vTaskStartScheduler+0xc4>)
 8008b04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b06:	4b15      	ldr	r3, [pc, #84]	; (8008b5c <vTaskStartScheduler+0xc8>)
 8008b08:	f04f 32ff 	mov.w	r2, #4294967295
 8008b0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b0e:	4b14      	ldr	r3, [pc, #80]	; (8008b60 <vTaskStartScheduler+0xcc>)
 8008b10:	2201      	movs	r2, #1
 8008b12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b14:	4b13      	ldr	r3, [pc, #76]	; (8008b64 <vTaskStartScheduler+0xd0>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b1a:	f000 fe01 	bl	8009720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b1e:	e00e      	b.n	8008b3e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b26:	d10a      	bne.n	8008b3e <vTaskStartScheduler+0xaa>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	60fb      	str	r3, [r7, #12]
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <vTaskStartScheduler+0xa8>
}
 8008b3e:	bf00      	nop
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	0800e484 	.word	0x0800e484
 8008b4c:	08009125 	.word	0x08009125
 8008b50:	20000af0 	.word	0x20000af0
 8008b54:	200009b8 	.word	0x200009b8
 8008b58:	20000044 	.word	0x20000044
 8008b5c:	20000aec 	.word	0x20000aec
 8008b60:	20000ad8 	.word	0x20000ad8
 8008b64:	20000ad0 	.word	0x20000ad0

08008b68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b6c:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <vTaskSuspendAll+0x18>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3301      	adds	r3, #1
 8008b72:	4a03      	ldr	r2, [pc, #12]	; (8008b80 <vTaskSuspendAll+0x18>)
 8008b74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b76:	bf00      	nop
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	20000af4 	.word	0x20000af4

08008b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b92:	4b41      	ldr	r3, [pc, #260]	; (8008c98 <xTaskResumeAll+0x114>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	603b      	str	r3, [r7, #0]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bb0:	f000 fe58 	bl	8009864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bb4:	4b38      	ldr	r3, [pc, #224]	; (8008c98 <xTaskResumeAll+0x114>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	4a37      	ldr	r2, [pc, #220]	; (8008c98 <xTaskResumeAll+0x114>)
 8008bbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bbe:	4b36      	ldr	r3, [pc, #216]	; (8008c98 <xTaskResumeAll+0x114>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d161      	bne.n	8008c8a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bc6:	4b35      	ldr	r3, [pc, #212]	; (8008c9c <xTaskResumeAll+0x118>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d05d      	beq.n	8008c8a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bce:	e02e      	b.n	8008c2e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd0:	4b33      	ldr	r3, [pc, #204]	; (8008ca0 <xTaskResumeAll+0x11c>)
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3318      	adds	r3, #24
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7ff f847 	bl	8007c70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3304      	adds	r3, #4
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff f842 	bl	8007c70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	409a      	lsls	r2, r3
 8008bf4:	4b2b      	ldr	r3, [pc, #172]	; (8008ca4 <xTaskResumeAll+0x120>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	4a2a      	ldr	r2, [pc, #168]	; (8008ca4 <xTaskResumeAll+0x120>)
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c02:	4613      	mov	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4a27      	ldr	r2, [pc, #156]	; (8008ca8 <xTaskResumeAll+0x124>)
 8008c0c:	441a      	add	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3304      	adds	r3, #4
 8008c12:	4619      	mov	r1, r3
 8008c14:	4610      	mov	r0, r2
 8008c16:	f7fe ffce 	bl	8007bb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1e:	4b23      	ldr	r3, [pc, #140]	; (8008cac <xTaskResumeAll+0x128>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d302      	bcc.n	8008c2e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008c28:	4b21      	ldr	r3, [pc, #132]	; (8008cb0 <xTaskResumeAll+0x12c>)
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c2e:	4b1c      	ldr	r3, [pc, #112]	; (8008ca0 <xTaskResumeAll+0x11c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1cc      	bne.n	8008bd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c3c:	f000 fb2c 	bl	8009298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c40:	4b1c      	ldr	r3, [pc, #112]	; (8008cb4 <xTaskResumeAll+0x130>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d010      	beq.n	8008c6e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c4c:	f000 f846 	bl	8008cdc <xTaskIncrementTick>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d002      	beq.n	8008c5c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008c56:	4b16      	ldr	r3, [pc, #88]	; (8008cb0 <xTaskResumeAll+0x12c>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f1      	bne.n	8008c4c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008c68:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <xTaskResumeAll+0x130>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c6e:	4b10      	ldr	r3, [pc, #64]	; (8008cb0 <xTaskResumeAll+0x12c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d009      	beq.n	8008c8a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c76:	2301      	movs	r3, #1
 8008c78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c7a:	4b0f      	ldr	r3, [pc, #60]	; (8008cb8 <xTaskResumeAll+0x134>)
 8008c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c8a:	f000 fe1b 	bl	80098c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	20000af4 	.word	0x20000af4
 8008c9c:	20000acc 	.word	0x20000acc
 8008ca0:	20000a8c 	.word	0x20000a8c
 8008ca4:	20000ad4 	.word	0x20000ad4
 8008ca8:	200009bc 	.word	0x200009bc
 8008cac:	200009b8 	.word	0x200009b8
 8008cb0:	20000ae0 	.word	0x20000ae0
 8008cb4:	20000adc 	.word	0x20000adc
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008cc2:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <xTaskGetTickCount+0x1c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cc8:	687b      	ldr	r3, [r7, #4]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	20000ad0 	.word	0x20000ad0

08008cdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ce6:	4b4e      	ldr	r3, [pc, #312]	; (8008e20 <xTaskIncrementTick+0x144>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f040 808e 	bne.w	8008e0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cf0:	4b4c      	ldr	r3, [pc, #304]	; (8008e24 <xTaskIncrementTick+0x148>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cf8:	4a4a      	ldr	r2, [pc, #296]	; (8008e24 <xTaskIncrementTick+0x148>)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d120      	bne.n	8008d46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d04:	4b48      	ldr	r3, [pc, #288]	; (8008e28 <xTaskIncrementTick+0x14c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00a      	beq.n	8008d24 <xTaskIncrementTick+0x48>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	603b      	str	r3, [r7, #0]
}
 8008d20:	bf00      	nop
 8008d22:	e7fe      	b.n	8008d22 <xTaskIncrementTick+0x46>
 8008d24:	4b40      	ldr	r3, [pc, #256]	; (8008e28 <xTaskIncrementTick+0x14c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	60fb      	str	r3, [r7, #12]
 8008d2a:	4b40      	ldr	r3, [pc, #256]	; (8008e2c <xTaskIncrementTick+0x150>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a3e      	ldr	r2, [pc, #248]	; (8008e28 <xTaskIncrementTick+0x14c>)
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	4a3e      	ldr	r2, [pc, #248]	; (8008e2c <xTaskIncrementTick+0x150>)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	4b3d      	ldr	r3, [pc, #244]	; (8008e30 <xTaskIncrementTick+0x154>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	4a3c      	ldr	r2, [pc, #240]	; (8008e30 <xTaskIncrementTick+0x154>)
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	f000 faa9 	bl	8009298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d46:	4b3b      	ldr	r3, [pc, #236]	; (8008e34 <xTaskIncrementTick+0x158>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d348      	bcc.n	8008de2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d50:	4b35      	ldr	r3, [pc, #212]	; (8008e28 <xTaskIncrementTick+0x14c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d104      	bne.n	8008d64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d5a:	4b36      	ldr	r3, [pc, #216]	; (8008e34 <xTaskIncrementTick+0x158>)
 8008d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d60:	601a      	str	r2, [r3, #0]
					break;
 8008d62:	e03e      	b.n	8008de2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d64:	4b30      	ldr	r3, [pc, #192]	; (8008e28 <xTaskIncrementTick+0x14c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d203      	bcs.n	8008d84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d7c:	4a2d      	ldr	r2, [pc, #180]	; (8008e34 <xTaskIncrementTick+0x158>)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d82:	e02e      	b.n	8008de2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	3304      	adds	r3, #4
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fe ff71 	bl	8007c70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d004      	beq.n	8008da0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	3318      	adds	r3, #24
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe ff68 	bl	8007c70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da4:	2201      	movs	r2, #1
 8008da6:	409a      	lsls	r2, r3
 8008da8:	4b23      	ldr	r3, [pc, #140]	; (8008e38 <xTaskIncrementTick+0x15c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	4a22      	ldr	r2, [pc, #136]	; (8008e38 <xTaskIncrementTick+0x15c>)
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db6:	4613      	mov	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4a1f      	ldr	r2, [pc, #124]	; (8008e3c <xTaskIncrementTick+0x160>)
 8008dc0:	441a      	add	r2, r3
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4610      	mov	r0, r2
 8008dca:	f7fe fef4 	bl	8007bb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd2:	4b1b      	ldr	r3, [pc, #108]	; (8008e40 <xTaskIncrementTick+0x164>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d3b9      	bcc.n	8008d50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008de0:	e7b6      	b.n	8008d50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008de2:	4b17      	ldr	r3, [pc, #92]	; (8008e40 <xTaskIncrementTick+0x164>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de8:	4914      	ldr	r1, [pc, #80]	; (8008e3c <xTaskIncrementTick+0x160>)
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d901      	bls.n	8008dfe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008dfe:	4b11      	ldr	r3, [pc, #68]	; (8008e44 <xTaskIncrementTick+0x168>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d007      	beq.n	8008e16 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	617b      	str	r3, [r7, #20]
 8008e0a:	e004      	b.n	8008e16 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e0c:	4b0e      	ldr	r3, [pc, #56]	; (8008e48 <xTaskIncrementTick+0x16c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3301      	adds	r3, #1
 8008e12:	4a0d      	ldr	r2, [pc, #52]	; (8008e48 <xTaskIncrementTick+0x16c>)
 8008e14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e16:	697b      	ldr	r3, [r7, #20]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20000af4 	.word	0x20000af4
 8008e24:	20000ad0 	.word	0x20000ad0
 8008e28:	20000a84 	.word	0x20000a84
 8008e2c:	20000a88 	.word	0x20000a88
 8008e30:	20000ae4 	.word	0x20000ae4
 8008e34:	20000aec 	.word	0x20000aec
 8008e38:	20000ad4 	.word	0x20000ad4
 8008e3c:	200009bc 	.word	0x200009bc
 8008e40:	200009b8 	.word	0x200009b8
 8008e44:	20000ae0 	.word	0x20000ae0
 8008e48:	20000adc 	.word	0x20000adc

08008e4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e52:	4b29      	ldr	r3, [pc, #164]	; (8008ef8 <vTaskSwitchContext+0xac>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e5a:	4b28      	ldr	r3, [pc, #160]	; (8008efc <vTaskSwitchContext+0xb0>)
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e60:	e044      	b.n	8008eec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008e62:	4b26      	ldr	r3, [pc, #152]	; (8008efc <vTaskSwitchContext+0xb0>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e68:	4b25      	ldr	r3, [pc, #148]	; (8008f00 <vTaskSwitchContext+0xb4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	fab3 f383 	clz	r3, r3
 8008e74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008e76:	7afb      	ldrb	r3, [r7, #11]
 8008e78:	f1c3 031f 	rsb	r3, r3, #31
 8008e7c:	617b      	str	r3, [r7, #20]
 8008e7e:	4921      	ldr	r1, [pc, #132]	; (8008f04 <vTaskSwitchContext+0xb8>)
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	4613      	mov	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	440b      	add	r3, r1
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10a      	bne.n	8008ea8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	607b      	str	r3, [r7, #4]
}
 8008ea4:	bf00      	nop
 8008ea6:	e7fe      	b.n	8008ea6 <vTaskSwitchContext+0x5a>
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4a14      	ldr	r2, [pc, #80]	; (8008f04 <vTaskSwitchContext+0xb8>)
 8008eb4:	4413      	add	r3, r2
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	605a      	str	r2, [r3, #4]
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	3308      	adds	r3, #8
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d104      	bne.n	8008ed8 <vTaskSwitchContext+0x8c>
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	605a      	str	r2, [r3, #4]
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	4a0a      	ldr	r2, [pc, #40]	; (8008f08 <vTaskSwitchContext+0xbc>)
 8008ee0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <vTaskSwitchContext+0xbc>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	334c      	adds	r3, #76	; 0x4c
 8008ee8:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <vTaskSwitchContext+0xc0>)
 8008eea:	6013      	str	r3, [r2, #0]
}
 8008eec:	bf00      	nop
 8008eee:	371c      	adds	r7, #28
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	20000af4 	.word	0x20000af4
 8008efc:	20000ae0 	.word	0x20000ae0
 8008f00:	20000ad4 	.word	0x20000ad4
 8008f04:	200009bc 	.word	0x200009bc
 8008f08:	200009b8 	.word	0x200009b8
 8008f0c:	20000044 	.word	0x20000044

08008f10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	60fb      	str	r3, [r7, #12]
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f36:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <vTaskPlaceOnEventList+0x44>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3318      	adds	r3, #24
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7fe fe5d 	bl	8007bfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f44:	2101      	movs	r1, #1
 8008f46:	6838      	ldr	r0, [r7, #0]
 8008f48:	f000 fafc 	bl	8009544 <prvAddCurrentTaskToDelayedList>
}
 8008f4c:	bf00      	nop
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	200009b8 	.word	0x200009b8

08008f58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10a      	bne.n	8008f84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	60fb      	str	r3, [r7, #12]
}
 8008f80:	bf00      	nop
 8008f82:	e7fe      	b.n	8008f82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	3318      	adds	r3, #24
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe fe71 	bl	8007c70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f8e:	4b1d      	ldr	r3, [pc, #116]	; (8009004 <xTaskRemoveFromEventList+0xac>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d11c      	bne.n	8008fd0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe fe68 	bl	8007c70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	409a      	lsls	r2, r3
 8008fa8:	4b17      	ldr	r3, [pc, #92]	; (8009008 <xTaskRemoveFromEventList+0xb0>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	4a16      	ldr	r2, [pc, #88]	; (8009008 <xTaskRemoveFromEventList+0xb0>)
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4a13      	ldr	r2, [pc, #76]	; (800900c <xTaskRemoveFromEventList+0xb4>)
 8008fc0:	441a      	add	r2, r3
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	4610      	mov	r0, r2
 8008fca:	f7fe fdf4 	bl	8007bb6 <vListInsertEnd>
 8008fce:	e005      	b.n	8008fdc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	3318      	adds	r3, #24
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	480e      	ldr	r0, [pc, #56]	; (8009010 <xTaskRemoveFromEventList+0xb8>)
 8008fd8:	f7fe fded 	bl	8007bb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe0:	4b0c      	ldr	r3, [pc, #48]	; (8009014 <xTaskRemoveFromEventList+0xbc>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d905      	bls.n	8008ff6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008fea:	2301      	movs	r3, #1
 8008fec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008fee:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <xTaskRemoveFromEventList+0xc0>)
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	e001      	b.n	8008ffa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ffa:	697b      	ldr	r3, [r7, #20]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	20000af4 	.word	0x20000af4
 8009008:	20000ad4 	.word	0x20000ad4
 800900c:	200009bc 	.word	0x200009bc
 8009010:	20000a8c 	.word	0x20000a8c
 8009014:	200009b8 	.word	0x200009b8
 8009018:	20000ae0 	.word	0x20000ae0

0800901c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009024:	4b06      	ldr	r3, [pc, #24]	; (8009040 <vTaskInternalSetTimeOutState+0x24>)
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800902c:	4b05      	ldr	r3, [pc, #20]	; (8009044 <vTaskInternalSetTimeOutState+0x28>)
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	605a      	str	r2, [r3, #4]
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	20000ae4 	.word	0x20000ae4
 8009044:	20000ad0 	.word	0x20000ad0

08009048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10a      	bne.n	800906e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	613b      	str	r3, [r7, #16]
}
 800906a:	bf00      	nop
 800906c:	e7fe      	b.n	800906c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	60fb      	str	r3, [r7, #12]
}
 8009086:	bf00      	nop
 8009088:	e7fe      	b.n	8009088 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800908a:	f000 fbeb 	bl	8009864 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800908e:	4b1d      	ldr	r3, [pc, #116]	; (8009104 <xTaskCheckForTimeOut+0xbc>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	69ba      	ldr	r2, [r7, #24]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a6:	d102      	bne.n	80090ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090a8:	2300      	movs	r3, #0
 80090aa:	61fb      	str	r3, [r7, #28]
 80090ac:	e023      	b.n	80090f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b15      	ldr	r3, [pc, #84]	; (8009108 <xTaskCheckForTimeOut+0xc0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d007      	beq.n	80090ca <xTaskCheckForTimeOut+0x82>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d302      	bcc.n	80090ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090c4:	2301      	movs	r3, #1
 80090c6:	61fb      	str	r3, [r7, #28]
 80090c8:	e015      	b.n	80090f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d20b      	bcs.n	80090ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	1ad2      	subs	r2, r2, r3
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff ff9b 	bl	800901c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	61fb      	str	r3, [r7, #28]
 80090ea:	e004      	b.n	80090f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090f2:	2301      	movs	r3, #1
 80090f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090f6:	f000 fbe5 	bl	80098c4 <vPortExitCritical>

	return xReturn;
 80090fa:	69fb      	ldr	r3, [r7, #28]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3720      	adds	r7, #32
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	20000ad0 	.word	0x20000ad0
 8009108:	20000ae4 	.word	0x20000ae4

0800910c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009110:	4b03      	ldr	r3, [pc, #12]	; (8009120 <vTaskMissedYield+0x14>)
 8009112:	2201      	movs	r2, #1
 8009114:	601a      	str	r2, [r3, #0]
}
 8009116:	bf00      	nop
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	20000ae0 	.word	0x20000ae0

08009124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800912c:	f000 f852 	bl	80091d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009130:	4b06      	ldr	r3, [pc, #24]	; (800914c <prvIdleTask+0x28>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d9f9      	bls.n	800912c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009138:	4b05      	ldr	r3, [pc, #20]	; (8009150 <prvIdleTask+0x2c>)
 800913a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009148:	e7f0      	b.n	800912c <prvIdleTask+0x8>
 800914a:	bf00      	nop
 800914c:	200009bc 	.word	0x200009bc
 8009150:	e000ed04 	.word	0xe000ed04

08009154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800915a:	2300      	movs	r3, #0
 800915c:	607b      	str	r3, [r7, #4]
 800915e:	e00c      	b.n	800917a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	4613      	mov	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4a12      	ldr	r2, [pc, #72]	; (80091b4 <prvInitialiseTaskLists+0x60>)
 800916c:	4413      	add	r3, r2
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe fcf4 	bl	8007b5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	3301      	adds	r3, #1
 8009178:	607b      	str	r3, [r7, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b07      	cmp	r3, #7
 800917e:	d9ef      	bls.n	8009160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009180:	480d      	ldr	r0, [pc, #52]	; (80091b8 <prvInitialiseTaskLists+0x64>)
 8009182:	f7fe fceb 	bl	8007b5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009186:	480d      	ldr	r0, [pc, #52]	; (80091bc <prvInitialiseTaskLists+0x68>)
 8009188:	f7fe fce8 	bl	8007b5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800918c:	480c      	ldr	r0, [pc, #48]	; (80091c0 <prvInitialiseTaskLists+0x6c>)
 800918e:	f7fe fce5 	bl	8007b5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009192:	480c      	ldr	r0, [pc, #48]	; (80091c4 <prvInitialiseTaskLists+0x70>)
 8009194:	f7fe fce2 	bl	8007b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009198:	480b      	ldr	r0, [pc, #44]	; (80091c8 <prvInitialiseTaskLists+0x74>)
 800919a:	f7fe fcdf 	bl	8007b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800919e:	4b0b      	ldr	r3, [pc, #44]	; (80091cc <prvInitialiseTaskLists+0x78>)
 80091a0:	4a05      	ldr	r2, [pc, #20]	; (80091b8 <prvInitialiseTaskLists+0x64>)
 80091a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091a4:	4b0a      	ldr	r3, [pc, #40]	; (80091d0 <prvInitialiseTaskLists+0x7c>)
 80091a6:	4a05      	ldr	r2, [pc, #20]	; (80091bc <prvInitialiseTaskLists+0x68>)
 80091a8:	601a      	str	r2, [r3, #0]
}
 80091aa:	bf00      	nop
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	200009bc 	.word	0x200009bc
 80091b8:	20000a5c 	.word	0x20000a5c
 80091bc:	20000a70 	.word	0x20000a70
 80091c0:	20000a8c 	.word	0x20000a8c
 80091c4:	20000aa0 	.word	0x20000aa0
 80091c8:	20000ab8 	.word	0x20000ab8
 80091cc:	20000a84 	.word	0x20000a84
 80091d0:	20000a88 	.word	0x20000a88

080091d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091da:	e019      	b.n	8009210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091dc:	f000 fb42 	bl	8009864 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e0:	4b10      	ldr	r3, [pc, #64]	; (8009224 <prvCheckTasksWaitingTermination+0x50>)
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	3304      	adds	r3, #4
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fe fd3f 	bl	8007c70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091f2:	4b0d      	ldr	r3, [pc, #52]	; (8009228 <prvCheckTasksWaitingTermination+0x54>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	4a0b      	ldr	r2, [pc, #44]	; (8009228 <prvCheckTasksWaitingTermination+0x54>)
 80091fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091fc:	4b0b      	ldr	r3, [pc, #44]	; (800922c <prvCheckTasksWaitingTermination+0x58>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3b01      	subs	r3, #1
 8009202:	4a0a      	ldr	r2, [pc, #40]	; (800922c <prvCheckTasksWaitingTermination+0x58>)
 8009204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009206:	f000 fb5d 	bl	80098c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f810 	bl	8009230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009210:	4b06      	ldr	r3, [pc, #24]	; (800922c <prvCheckTasksWaitingTermination+0x58>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e1      	bne.n	80091dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009218:	bf00      	nop
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000aa0 	.word	0x20000aa0
 8009228:	20000acc 	.word	0x20000acc
 800922c:	20000ab4 	.word	0x20000ab4

08009230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	334c      	adds	r3, #76	; 0x4c
 800923c:	4618      	mov	r0, r3
 800923e:	f001 fc67 	bl	800ab10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009248:	2b00      	cmp	r3, #0
 800924a:	d108      	bne.n	800925e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009250:	4618      	mov	r0, r3
 8009252:	f000 fcf5 	bl	8009c40 <vPortFree>
				vPortFree( pxTCB );
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fcf2 	bl	8009c40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800925c:	e018      	b.n	8009290 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009264:	2b01      	cmp	r3, #1
 8009266:	d103      	bne.n	8009270 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fce9 	bl	8009c40 <vPortFree>
	}
 800926e:	e00f      	b.n	8009290 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009276:	2b02      	cmp	r3, #2
 8009278:	d00a      	beq.n	8009290 <prvDeleteTCB+0x60>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	60fb      	str	r3, [r7, #12]
}
 800928c:	bf00      	nop
 800928e:	e7fe      	b.n	800928e <prvDeleteTCB+0x5e>
	}
 8009290:	bf00      	nop
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800929e:	4b0c      	ldr	r3, [pc, #48]	; (80092d0 <prvResetNextTaskUnblockTime+0x38>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d104      	bne.n	80092b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80092a8:	4b0a      	ldr	r3, [pc, #40]	; (80092d4 <prvResetNextTaskUnblockTime+0x3c>)
 80092aa:	f04f 32ff 	mov.w	r2, #4294967295
 80092ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092b0:	e008      	b.n	80092c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092b2:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <prvResetNextTaskUnblockTime+0x38>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	4a04      	ldr	r2, [pc, #16]	; (80092d4 <prvResetNextTaskUnblockTime+0x3c>)
 80092c2:	6013      	str	r3, [r2, #0]
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	20000a84 	.word	0x20000a84
 80092d4:	20000aec 	.word	0x20000aec

080092d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092de:	4b0b      	ldr	r3, [pc, #44]	; (800930c <xTaskGetSchedulerState+0x34>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d102      	bne.n	80092ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092e6:	2301      	movs	r3, #1
 80092e8:	607b      	str	r3, [r7, #4]
 80092ea:	e008      	b.n	80092fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ec:	4b08      	ldr	r3, [pc, #32]	; (8009310 <xTaskGetSchedulerState+0x38>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092f4:	2302      	movs	r3, #2
 80092f6:	607b      	str	r3, [r7, #4]
 80092f8:	e001      	b.n	80092fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092fa:	2300      	movs	r3, #0
 80092fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092fe:	687b      	ldr	r3, [r7, #4]
	}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	20000ad8 	.word	0x20000ad8
 8009310:	20000af4 	.word	0x20000af4

08009314 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009320:	2300      	movs	r3, #0
 8009322:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d05e      	beq.n	80093e8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932e:	4b31      	ldr	r3, [pc, #196]	; (80093f4 <xTaskPriorityInherit+0xe0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009334:	429a      	cmp	r2, r3
 8009336:	d24e      	bcs.n	80093d6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	db06      	blt.n	800934e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009340:	4b2c      	ldr	r3, [pc, #176]	; (80093f4 <xTaskPriorityInherit+0xe0>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009346:	f1c3 0208 	rsb	r2, r3, #8
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	6959      	ldr	r1, [r3, #20]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009356:	4613      	mov	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4a26      	ldr	r2, [pc, #152]	; (80093f8 <xTaskPriorityInherit+0xe4>)
 8009360:	4413      	add	r3, r2
 8009362:	4299      	cmp	r1, r3
 8009364:	d12f      	bne.n	80093c6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	3304      	adds	r3, #4
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe fc80 	bl	8007c70 <uxListRemove>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10a      	bne.n	800938c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937a:	2201      	movs	r2, #1
 800937c:	fa02 f303 	lsl.w	r3, r2, r3
 8009380:	43da      	mvns	r2, r3
 8009382:	4b1e      	ldr	r3, [pc, #120]	; (80093fc <xTaskPriorityInherit+0xe8>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4013      	ands	r3, r2
 8009388:	4a1c      	ldr	r2, [pc, #112]	; (80093fc <xTaskPriorityInherit+0xe8>)
 800938a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800938c:	4b19      	ldr	r3, [pc, #100]	; (80093f4 <xTaskPriorityInherit+0xe0>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939a:	2201      	movs	r2, #1
 800939c:	409a      	lsls	r2, r3
 800939e:	4b17      	ldr	r3, [pc, #92]	; (80093fc <xTaskPriorityInherit+0xe8>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	4a15      	ldr	r2, [pc, #84]	; (80093fc <xTaskPriorityInherit+0xe8>)
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4a10      	ldr	r2, [pc, #64]	; (80093f8 <xTaskPriorityInherit+0xe4>)
 80093b6:	441a      	add	r2, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	3304      	adds	r3, #4
 80093bc:	4619      	mov	r1, r3
 80093be:	4610      	mov	r0, r2
 80093c0:	f7fe fbf9 	bl	8007bb6 <vListInsertEnd>
 80093c4:	e004      	b.n	80093d0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093c6:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <xTaskPriorityInherit+0xe0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80093d0:	2301      	movs	r3, #1
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	e008      	b.n	80093e8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093da:	4b06      	ldr	r3, [pc, #24]	; (80093f4 <xTaskPriorityInherit+0xe0>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d201      	bcs.n	80093e8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80093e4:	2301      	movs	r3, #1
 80093e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093e8:	68fb      	ldr	r3, [r7, #12]
	}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	200009b8 	.word	0x200009b8
 80093f8:	200009bc 	.word	0x200009bc
 80093fc:	20000ad4 	.word	0x20000ad4

08009400 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009400:	b580      	push	{r7, lr}
 8009402:	b088      	sub	sp, #32
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800940e:	2301      	movs	r3, #1
 8009410:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d077      	beq.n	8009508 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10a      	bne.n	8009436 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	60fb      	str	r3, [r7, #12]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d902      	bls.n	8009446 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	61fb      	str	r3, [r7, #28]
 8009444:	e002      	b.n	800944c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009450:	69fa      	ldr	r2, [r7, #28]
 8009452:	429a      	cmp	r2, r3
 8009454:	d058      	beq.n	8009508 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	429a      	cmp	r2, r3
 800945e:	d153      	bne.n	8009508 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009460:	4b2b      	ldr	r3, [pc, #172]	; (8009510 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	69ba      	ldr	r2, [r7, #24]
 8009466:	429a      	cmp	r2, r3
 8009468:	d10a      	bne.n	8009480 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800946a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	60bb      	str	r3, [r7, #8]
}
 800947c:	bf00      	nop
 800947e:	e7fe      	b.n	800947e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009484:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	69fa      	ldr	r2, [r7, #28]
 800948a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	db04      	blt.n	800949e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	f1c3 0208 	rsb	r2, r3, #8
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	6959      	ldr	r1, [r3, #20]
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	4a19      	ldr	r2, [pc, #100]	; (8009514 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80094ae:	4413      	add	r3, r2
 80094b0:	4299      	cmp	r1, r3
 80094b2:	d129      	bne.n	8009508 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	3304      	adds	r3, #4
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fe fbd9 	bl	8007c70 <uxListRemove>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c8:	2201      	movs	r2, #1
 80094ca:	fa02 f303 	lsl.w	r3, r2, r3
 80094ce:	43da      	mvns	r2, r3
 80094d0:	4b11      	ldr	r3, [pc, #68]	; (8009518 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4013      	ands	r3, r2
 80094d6:	4a10      	ldr	r2, [pc, #64]	; (8009518 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80094d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	2201      	movs	r2, #1
 80094e0:	409a      	lsls	r2, r3
 80094e2:	4b0d      	ldr	r3, [pc, #52]	; (8009518 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	4a0b      	ldr	r2, [pc, #44]	; (8009518 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4a06      	ldr	r2, [pc, #24]	; (8009514 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80094fa:	441a      	add	r2, r3
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	3304      	adds	r3, #4
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f7fe fb57 	bl	8007bb6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009508:	bf00      	nop
 800950a:	3720      	adds	r7, #32
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	200009b8 	.word	0x200009b8
 8009514:	200009bc 	.word	0x200009bc
 8009518:	20000ad4 	.word	0x20000ad4

0800951c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009520:	4b07      	ldr	r3, [pc, #28]	; (8009540 <pvTaskIncrementMutexHeldCount+0x24>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d004      	beq.n	8009532 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009528:	4b05      	ldr	r3, [pc, #20]	; (8009540 <pvTaskIncrementMutexHeldCount+0x24>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800952e:	3201      	adds	r2, #1
 8009530:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009532:	4b03      	ldr	r3, [pc, #12]	; (8009540 <pvTaskIncrementMutexHeldCount+0x24>)
 8009534:	681b      	ldr	r3, [r3, #0]
	}
 8009536:	4618      	mov	r0, r3
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	200009b8 	.word	0x200009b8

08009544 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800954e:	4b29      	ldr	r3, [pc, #164]	; (80095f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009554:	4b28      	ldr	r3, [pc, #160]	; (80095f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	3304      	adds	r3, #4
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fb88 	bl	8007c70 <uxListRemove>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10b      	bne.n	800957e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009566:	4b24      	ldr	r3, [pc, #144]	; (80095f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956c:	2201      	movs	r2, #1
 800956e:	fa02 f303 	lsl.w	r3, r2, r3
 8009572:	43da      	mvns	r2, r3
 8009574:	4b21      	ldr	r3, [pc, #132]	; (80095fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4013      	ands	r3, r2
 800957a:	4a20      	ldr	r2, [pc, #128]	; (80095fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800957c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009584:	d10a      	bne.n	800959c <prvAddCurrentTaskToDelayedList+0x58>
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d007      	beq.n	800959c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800958c:	4b1a      	ldr	r3, [pc, #104]	; (80095f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3304      	adds	r3, #4
 8009592:	4619      	mov	r1, r3
 8009594:	481a      	ldr	r0, [pc, #104]	; (8009600 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009596:	f7fe fb0e 	bl	8007bb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800959a:	e026      	b.n	80095ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4413      	add	r3, r2
 80095a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095a4:	4b14      	ldr	r3, [pc, #80]	; (80095f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d209      	bcs.n	80095c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095b4:	4b13      	ldr	r3, [pc, #76]	; (8009604 <prvAddCurrentTaskToDelayedList+0xc0>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	4b0f      	ldr	r3, [pc, #60]	; (80095f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3304      	adds	r3, #4
 80095be:	4619      	mov	r1, r3
 80095c0:	4610      	mov	r0, r2
 80095c2:	f7fe fb1c 	bl	8007bfe <vListInsert>
}
 80095c6:	e010      	b.n	80095ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095c8:	4b0f      	ldr	r3, [pc, #60]	; (8009608 <prvAddCurrentTaskToDelayedList+0xc4>)
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	4b0a      	ldr	r3, [pc, #40]	; (80095f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3304      	adds	r3, #4
 80095d2:	4619      	mov	r1, r3
 80095d4:	4610      	mov	r0, r2
 80095d6:	f7fe fb12 	bl	8007bfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095da:	4b0c      	ldr	r3, [pc, #48]	; (800960c <prvAddCurrentTaskToDelayedList+0xc8>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d202      	bcs.n	80095ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80095e4:	4a09      	ldr	r2, [pc, #36]	; (800960c <prvAddCurrentTaskToDelayedList+0xc8>)
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	6013      	str	r3, [r2, #0]
}
 80095ea:	bf00      	nop
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	20000ad0 	.word	0x20000ad0
 80095f8:	200009b8 	.word	0x200009b8
 80095fc:	20000ad4 	.word	0x20000ad4
 8009600:	20000ab8 	.word	0x20000ab8
 8009604:	20000a88 	.word	0x20000a88
 8009608:	20000a84 	.word	0x20000a84
 800960c:	20000aec 	.word	0x20000aec

08009610 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3b04      	subs	r3, #4
 8009620:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009628:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	3b04      	subs	r3, #4
 800962e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f023 0201 	bic.w	r2, r3, #1
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3b04      	subs	r3, #4
 800963e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009640:	4a0c      	ldr	r2, [pc, #48]	; (8009674 <pxPortInitialiseStack+0x64>)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3b14      	subs	r3, #20
 800964a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3b04      	subs	r3, #4
 8009656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f06f 0202 	mvn.w	r2, #2
 800965e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	3b20      	subs	r3, #32
 8009664:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009666:	68fb      	ldr	r3, [r7, #12]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	08009679 	.word	0x08009679

08009678 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800967e:	2300      	movs	r3, #0
 8009680:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009682:	4b12      	ldr	r3, [pc, #72]	; (80096cc <prvTaskExitError+0x54>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968a:	d00a      	beq.n	80096a2 <prvTaskExitError+0x2a>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	60fb      	str	r3, [r7, #12]
}
 800969e:	bf00      	nop
 80096a0:	e7fe      	b.n	80096a0 <prvTaskExitError+0x28>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	60bb      	str	r3, [r7, #8]
}
 80096b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096b6:	bf00      	nop
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0fc      	beq.n	80096b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096be:	bf00      	nop
 80096c0:	bf00      	nop
 80096c2:	3714      	adds	r7, #20
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	20000040 	.word	0x20000040

080096d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096d0:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <pxCurrentTCBConst2>)
 80096d2:	6819      	ldr	r1, [r3, #0]
 80096d4:	6808      	ldr	r0, [r1, #0]
 80096d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096da:	f380 8809 	msr	PSP, r0
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f04f 0000 	mov.w	r0, #0
 80096e6:	f380 8811 	msr	BASEPRI, r0
 80096ea:	4770      	bx	lr
 80096ec:	f3af 8000 	nop.w

080096f0 <pxCurrentTCBConst2>:
 80096f0:	200009b8 	.word	0x200009b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop

080096f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096f8:	4808      	ldr	r0, [pc, #32]	; (800971c <prvPortStartFirstTask+0x24>)
 80096fa:	6800      	ldr	r0, [r0, #0]
 80096fc:	6800      	ldr	r0, [r0, #0]
 80096fe:	f380 8808 	msr	MSP, r0
 8009702:	f04f 0000 	mov.w	r0, #0
 8009706:	f380 8814 	msr	CONTROL, r0
 800970a:	b662      	cpsie	i
 800970c:	b661      	cpsie	f
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	df00      	svc	0
 8009718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800971a:	bf00      	nop
 800971c:	e000ed08 	.word	0xe000ed08

08009720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009726:	4b46      	ldr	r3, [pc, #280]	; (8009840 <xPortStartScheduler+0x120>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a46      	ldr	r2, [pc, #280]	; (8009844 <xPortStartScheduler+0x124>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d10a      	bne.n	8009746 <xPortStartScheduler+0x26>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	613b      	str	r3, [r7, #16]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009746:	4b3e      	ldr	r3, [pc, #248]	; (8009840 <xPortStartScheduler+0x120>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a3f      	ldr	r2, [pc, #252]	; (8009848 <xPortStartScheduler+0x128>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d10a      	bne.n	8009766 <xPortStartScheduler+0x46>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	60fb      	str	r3, [r7, #12]
}
 8009762:	bf00      	nop
 8009764:	e7fe      	b.n	8009764 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009766:	4b39      	ldr	r3, [pc, #228]	; (800984c <xPortStartScheduler+0x12c>)
 8009768:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	b2db      	uxtb	r3, r3
 8009770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	22ff      	movs	r2, #255	; 0xff
 8009776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	b2db      	uxtb	r3, r3
 800977e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009788:	b2da      	uxtb	r2, r3
 800978a:	4b31      	ldr	r3, [pc, #196]	; (8009850 <xPortStartScheduler+0x130>)
 800978c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800978e:	4b31      	ldr	r3, [pc, #196]	; (8009854 <xPortStartScheduler+0x134>)
 8009790:	2207      	movs	r2, #7
 8009792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009794:	e009      	b.n	80097aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009796:	4b2f      	ldr	r3, [pc, #188]	; (8009854 <xPortStartScheduler+0x134>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3b01      	subs	r3, #1
 800979c:	4a2d      	ldr	r2, [pc, #180]	; (8009854 <xPortStartScheduler+0x134>)
 800979e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b2:	2b80      	cmp	r3, #128	; 0x80
 80097b4:	d0ef      	beq.n	8009796 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097b6:	4b27      	ldr	r3, [pc, #156]	; (8009854 <xPortStartScheduler+0x134>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f1c3 0307 	rsb	r3, r3, #7
 80097be:	2b04      	cmp	r3, #4
 80097c0:	d00a      	beq.n	80097d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	60bb      	str	r3, [r7, #8]
}
 80097d4:	bf00      	nop
 80097d6:	e7fe      	b.n	80097d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097d8:	4b1e      	ldr	r3, [pc, #120]	; (8009854 <xPortStartScheduler+0x134>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	021b      	lsls	r3, r3, #8
 80097de:	4a1d      	ldr	r2, [pc, #116]	; (8009854 <xPortStartScheduler+0x134>)
 80097e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097e2:	4b1c      	ldr	r3, [pc, #112]	; (8009854 <xPortStartScheduler+0x134>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097ea:	4a1a      	ldr	r2, [pc, #104]	; (8009854 <xPortStartScheduler+0x134>)
 80097ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097f6:	4b18      	ldr	r3, [pc, #96]	; (8009858 <xPortStartScheduler+0x138>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a17      	ldr	r2, [pc, #92]	; (8009858 <xPortStartScheduler+0x138>)
 80097fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009802:	4b15      	ldr	r3, [pc, #84]	; (8009858 <xPortStartScheduler+0x138>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a14      	ldr	r2, [pc, #80]	; (8009858 <xPortStartScheduler+0x138>)
 8009808:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800980c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800980e:	f000 f8dd 	bl	80099cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009812:	4b12      	ldr	r3, [pc, #72]	; (800985c <xPortStartScheduler+0x13c>)
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009818:	f000 f8fc 	bl	8009a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800981c:	4b10      	ldr	r3, [pc, #64]	; (8009860 <xPortStartScheduler+0x140>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a0f      	ldr	r2, [pc, #60]	; (8009860 <xPortStartScheduler+0x140>)
 8009822:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009826:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009828:	f7ff ff66 	bl	80096f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800982c:	f7ff fb0e 	bl	8008e4c <vTaskSwitchContext>
	prvTaskExitError();
 8009830:	f7ff ff22 	bl	8009678 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	e000ed00 	.word	0xe000ed00
 8009844:	410fc271 	.word	0x410fc271
 8009848:	410fc270 	.word	0x410fc270
 800984c:	e000e400 	.word	0xe000e400
 8009850:	20000af8 	.word	0x20000af8
 8009854:	20000afc 	.word	0x20000afc
 8009858:	e000ed20 	.word	0xe000ed20
 800985c:	20000040 	.word	0x20000040
 8009860:	e000ef34 	.word	0xe000ef34

08009864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
	__asm volatile
 800986a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986e:	f383 8811 	msr	BASEPRI, r3
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	607b      	str	r3, [r7, #4]
}
 800987c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800987e:	4b0f      	ldr	r3, [pc, #60]	; (80098bc <vPortEnterCritical+0x58>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3301      	adds	r3, #1
 8009884:	4a0d      	ldr	r2, [pc, #52]	; (80098bc <vPortEnterCritical+0x58>)
 8009886:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009888:	4b0c      	ldr	r3, [pc, #48]	; (80098bc <vPortEnterCritical+0x58>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d10f      	bne.n	80098b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009890:	4b0b      	ldr	r3, [pc, #44]	; (80098c0 <vPortEnterCritical+0x5c>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800989a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	603b      	str	r3, [r7, #0]
}
 80098ac:	bf00      	nop
 80098ae:	e7fe      	b.n	80098ae <vPortEnterCritical+0x4a>
	}
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	20000040 	.word	0x20000040
 80098c0:	e000ed04 	.word	0xe000ed04

080098c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098ca:	4b12      	ldr	r3, [pc, #72]	; (8009914 <vPortExitCritical+0x50>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10a      	bne.n	80098e8 <vPortExitCritical+0x24>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	607b      	str	r3, [r7, #4]
}
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098e8:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <vPortExitCritical+0x50>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	4a09      	ldr	r2, [pc, #36]	; (8009914 <vPortExitCritical+0x50>)
 80098f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098f2:	4b08      	ldr	r3, [pc, #32]	; (8009914 <vPortExitCritical+0x50>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d105      	bne.n	8009906 <vPortExitCritical+0x42>
 80098fa:	2300      	movs	r3, #0
 80098fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	f383 8811 	msr	BASEPRI, r3
}
 8009904:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	20000040 	.word	0x20000040
	...

08009920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009920:	f3ef 8009 	mrs	r0, PSP
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	4b15      	ldr	r3, [pc, #84]	; (8009980 <pxCurrentTCBConst>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	f01e 0f10 	tst.w	lr, #16
 8009930:	bf08      	it	eq
 8009932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993a:	6010      	str	r0, [r2, #0]
 800993c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009944:	f380 8811 	msr	BASEPRI, r0
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f7ff fa7c 	bl	8008e4c <vTaskSwitchContext>
 8009954:	f04f 0000 	mov.w	r0, #0
 8009958:	f380 8811 	msr	BASEPRI, r0
 800995c:	bc09      	pop	{r0, r3}
 800995e:	6819      	ldr	r1, [r3, #0]
 8009960:	6808      	ldr	r0, [r1, #0]
 8009962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009966:	f01e 0f10 	tst.w	lr, #16
 800996a:	bf08      	it	eq
 800996c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009970:	f380 8809 	msr	PSP, r0
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	f3af 8000 	nop.w

08009980 <pxCurrentTCBConst>:
 8009980:	200009b8 	.word	0x200009b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	607b      	str	r3, [r7, #4]
}
 80099a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099a2:	f7ff f99b 	bl	8008cdc <xTaskIncrementTick>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099ac:	4b06      	ldr	r3, [pc, #24]	; (80099c8 <SysTick_Handler+0x40>)
 80099ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	2300      	movs	r3, #0
 80099b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	f383 8811 	msr	BASEPRI, r3
}
 80099be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	e000ed04 	.word	0xe000ed04

080099cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099cc:	b480      	push	{r7}
 80099ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099d0:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <vPortSetupTimerInterrupt+0x34>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099d6:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <vPortSetupTimerInterrupt+0x38>)
 80099d8:	2200      	movs	r2, #0
 80099da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099dc:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <vPortSetupTimerInterrupt+0x3c>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a0a      	ldr	r2, [pc, #40]	; (8009a0c <vPortSetupTimerInterrupt+0x40>)
 80099e2:	fba2 2303 	umull	r2, r3, r2, r3
 80099e6:	099b      	lsrs	r3, r3, #6
 80099e8:	4a09      	ldr	r2, [pc, #36]	; (8009a10 <vPortSetupTimerInterrupt+0x44>)
 80099ea:	3b01      	subs	r3, #1
 80099ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099ee:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <vPortSetupTimerInterrupt+0x34>)
 80099f0:	2207      	movs	r2, #7
 80099f2:	601a      	str	r2, [r3, #0]
}
 80099f4:	bf00      	nop
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	e000e010 	.word	0xe000e010
 8009a04:	e000e018 	.word	0xe000e018
 8009a08:	20000034 	.word	0x20000034
 8009a0c:	10624dd3 	.word	0x10624dd3
 8009a10:	e000e014 	.word	0xe000e014

08009a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a24 <vPortEnableVFP+0x10>
 8009a18:	6801      	ldr	r1, [r0, #0]
 8009a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a1e:	6001      	str	r1, [r0, #0]
 8009a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a22:	bf00      	nop
 8009a24:	e000ed88 	.word	0xe000ed88

08009a28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a2e:	f3ef 8305 	mrs	r3, IPSR
 8009a32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b0f      	cmp	r3, #15
 8009a38:	d914      	bls.n	8009a64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a3a:	4a17      	ldr	r2, [pc, #92]	; (8009a98 <vPortValidateInterruptPriority+0x70>)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4413      	add	r3, r2
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a44:	4b15      	ldr	r3, [pc, #84]	; (8009a9c <vPortValidateInterruptPriority+0x74>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	7afa      	ldrb	r2, [r7, #11]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d20a      	bcs.n	8009a64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	607b      	str	r3, [r7, #4]
}
 8009a60:	bf00      	nop
 8009a62:	e7fe      	b.n	8009a62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a64:	4b0e      	ldr	r3, [pc, #56]	; (8009aa0 <vPortValidateInterruptPriority+0x78>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a6c:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <vPortValidateInterruptPriority+0x7c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d90a      	bls.n	8009a8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	603b      	str	r3, [r7, #0]
}
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <vPortValidateInterruptPriority+0x60>
	}
 8009a8a:	bf00      	nop
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	e000e3f0 	.word	0xe000e3f0
 8009a9c:	20000af8 	.word	0x20000af8
 8009aa0:	e000ed0c 	.word	0xe000ed0c
 8009aa4:	20000afc 	.word	0x20000afc

08009aa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b08a      	sub	sp, #40	; 0x28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ab4:	f7ff f858 	bl	8008b68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ab8:	4b5b      	ldr	r3, [pc, #364]	; (8009c28 <pvPortMalloc+0x180>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ac0:	f000 f920 	bl	8009d04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ac4:	4b59      	ldr	r3, [pc, #356]	; (8009c2c <pvPortMalloc+0x184>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4013      	ands	r3, r2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f040 8093 	bne.w	8009bf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d01d      	beq.n	8009b14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ad8:	2208      	movs	r2, #8
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4413      	add	r3, r2
 8009ade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d014      	beq.n	8009b14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f023 0307 	bic.w	r3, r3, #7
 8009af0:	3308      	adds	r3, #8
 8009af2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00a      	beq.n	8009b14 <pvPortMalloc+0x6c>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	617b      	str	r3, [r7, #20]
}
 8009b10:	bf00      	nop
 8009b12:	e7fe      	b.n	8009b12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d06e      	beq.n	8009bf8 <pvPortMalloc+0x150>
 8009b1a:	4b45      	ldr	r3, [pc, #276]	; (8009c30 <pvPortMalloc+0x188>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d869      	bhi.n	8009bf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b24:	4b43      	ldr	r3, [pc, #268]	; (8009c34 <pvPortMalloc+0x18c>)
 8009b26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b28:	4b42      	ldr	r3, [pc, #264]	; (8009c34 <pvPortMalloc+0x18c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b2e:	e004      	b.n	8009b3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d903      	bls.n	8009b4c <pvPortMalloc+0xa4>
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1f1      	bne.n	8009b30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b4c:	4b36      	ldr	r3, [pc, #216]	; (8009c28 <pvPortMalloc+0x180>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d050      	beq.n	8009bf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2208      	movs	r2, #8
 8009b5c:	4413      	add	r3, r2
 8009b5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	1ad2      	subs	r2, r2, r3
 8009b70:	2308      	movs	r3, #8
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d91f      	bls.n	8009bb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <pvPortMalloc+0xf8>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	613b      	str	r3, [r7, #16]
}
 8009b9c:	bf00      	nop
 8009b9e:	e7fe      	b.n	8009b9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	1ad2      	subs	r2, r2, r3
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bb2:	69b8      	ldr	r0, [r7, #24]
 8009bb4:	f000 f908 	bl	8009dc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bb8:	4b1d      	ldr	r3, [pc, #116]	; (8009c30 <pvPortMalloc+0x188>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	4a1b      	ldr	r2, [pc, #108]	; (8009c30 <pvPortMalloc+0x188>)
 8009bc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bc6:	4b1a      	ldr	r3, [pc, #104]	; (8009c30 <pvPortMalloc+0x188>)
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <pvPortMalloc+0x190>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d203      	bcs.n	8009bda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bd2:	4b17      	ldr	r3, [pc, #92]	; (8009c30 <pvPortMalloc+0x188>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a18      	ldr	r2, [pc, #96]	; (8009c38 <pvPortMalloc+0x190>)
 8009bd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	4b13      	ldr	r3, [pc, #76]	; (8009c2c <pvPortMalloc+0x184>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	431a      	orrs	r2, r3
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	2200      	movs	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bee:	4b13      	ldr	r3, [pc, #76]	; (8009c3c <pvPortMalloc+0x194>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	4a11      	ldr	r2, [pc, #68]	; (8009c3c <pvPortMalloc+0x194>)
 8009bf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bf8:	f7fe ffc4 	bl	8008b84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	f003 0307 	and.w	r3, r3, #7
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00a      	beq.n	8009c1c <pvPortMalloc+0x174>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	60fb      	str	r3, [r7, #12]
}
 8009c18:	bf00      	nop
 8009c1a:	e7fe      	b.n	8009c1a <pvPortMalloc+0x172>
	return pvReturn;
 8009c1c:	69fb      	ldr	r3, [r7, #28]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3728      	adds	r7, #40	; 0x28
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20004708 	.word	0x20004708
 8009c2c:	2000471c 	.word	0x2000471c
 8009c30:	2000470c 	.word	0x2000470c
 8009c34:	20004700 	.word	0x20004700
 8009c38:	20004710 	.word	0x20004710
 8009c3c:	20004714 	.word	0x20004714

08009c40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d04d      	beq.n	8009cee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c52:	2308      	movs	r3, #8
 8009c54:	425b      	negs	r3, r3
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	4413      	add	r3, r2
 8009c5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <vPortFree+0xb8>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4013      	ands	r3, r2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10a      	bne.n	8009c84 <vPortFree+0x44>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	60fb      	str	r3, [r7, #12]
}
 8009c80:	bf00      	nop
 8009c82:	e7fe      	b.n	8009c82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00a      	beq.n	8009ca2 <vPortFree+0x62>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	60bb      	str	r3, [r7, #8]
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	4b14      	ldr	r3, [pc, #80]	; (8009cf8 <vPortFree+0xb8>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4013      	ands	r3, r2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d01e      	beq.n	8009cee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d11a      	bne.n	8009cee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	4b0e      	ldr	r3, [pc, #56]	; (8009cf8 <vPortFree+0xb8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	43db      	mvns	r3, r3
 8009cc2:	401a      	ands	r2, r3
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cc8:	f7fe ff4e 	bl	8008b68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	4b0a      	ldr	r3, [pc, #40]	; (8009cfc <vPortFree+0xbc>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	4a09      	ldr	r2, [pc, #36]	; (8009cfc <vPortFree+0xbc>)
 8009cd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cda:	6938      	ldr	r0, [r7, #16]
 8009cdc:	f000 f874 	bl	8009dc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ce0:	4b07      	ldr	r3, [pc, #28]	; (8009d00 <vPortFree+0xc0>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	4a06      	ldr	r2, [pc, #24]	; (8009d00 <vPortFree+0xc0>)
 8009ce8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cea:	f7fe ff4b 	bl	8008b84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cee:	bf00      	nop
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	2000471c 	.word	0x2000471c
 8009cfc:	2000470c 	.word	0x2000470c
 8009d00:	20004718 	.word	0x20004718

08009d04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009d0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d10:	4b27      	ldr	r3, [pc, #156]	; (8009db0 <prvHeapInit+0xac>)
 8009d12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f003 0307 	and.w	r3, r3, #7
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00c      	beq.n	8009d38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3307      	adds	r3, #7
 8009d22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0307 	bic.w	r3, r3, #7
 8009d2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	4a1f      	ldr	r2, [pc, #124]	; (8009db0 <prvHeapInit+0xac>)
 8009d34:	4413      	add	r3, r2
 8009d36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d3c:	4a1d      	ldr	r2, [pc, #116]	; (8009db4 <prvHeapInit+0xb0>)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d42:	4b1c      	ldr	r3, [pc, #112]	; (8009db4 <prvHeapInit+0xb0>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d50:	2208      	movs	r2, #8
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	1a9b      	subs	r3, r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f023 0307 	bic.w	r3, r3, #7
 8009d5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4a15      	ldr	r2, [pc, #84]	; (8009db8 <prvHeapInit+0xb4>)
 8009d64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d66:	4b14      	ldr	r3, [pc, #80]	; (8009db8 <prvHeapInit+0xb4>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d6e:	4b12      	ldr	r3, [pc, #72]	; (8009db8 <prvHeapInit+0xb4>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	1ad2      	subs	r2, r2, r3
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d84:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <prvHeapInit+0xb4>)
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	4a0a      	ldr	r2, [pc, #40]	; (8009dbc <prvHeapInit+0xb8>)
 8009d92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	4a09      	ldr	r2, [pc, #36]	; (8009dc0 <prvHeapInit+0xbc>)
 8009d9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d9c:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <prvHeapInit+0xc0>)
 8009d9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009da2:	601a      	str	r2, [r3, #0]
}
 8009da4:	bf00      	nop
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	20000b00 	.word	0x20000b00
 8009db4:	20004700 	.word	0x20004700
 8009db8:	20004708 	.word	0x20004708
 8009dbc:	20004710 	.word	0x20004710
 8009dc0:	2000470c 	.word	0x2000470c
 8009dc4:	2000471c 	.word	0x2000471c

08009dc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dd0:	4b28      	ldr	r3, [pc, #160]	; (8009e74 <prvInsertBlockIntoFreeList+0xac>)
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	e002      	b.n	8009ddc <prvInsertBlockIntoFreeList+0x14>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d8f7      	bhi.n	8009dd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	4413      	add	r3, r2
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d108      	bne.n	8009e0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	441a      	add	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	441a      	add	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d118      	bne.n	8009e50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	4b15      	ldr	r3, [pc, #84]	; (8009e78 <prvInsertBlockIntoFreeList+0xb0>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d00d      	beq.n	8009e46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	441a      	add	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	e008      	b.n	8009e58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e46:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <prvInsertBlockIntoFreeList+0xb0>)
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	e003      	b.n	8009e58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d002      	beq.n	8009e66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e66:	bf00      	nop
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	20004700 	.word	0x20004700
 8009e78:	20004708 	.word	0x20004708

08009e7c <atof>:
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	f001 bd4d 	b.w	800b91c <strtod>
	...

08009e84 <__errno>:
 8009e84:	4b01      	ldr	r3, [pc, #4]	; (8009e8c <__errno+0x8>)
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	20000044 	.word	0x20000044

08009e90 <std>:
 8009e90:	2300      	movs	r3, #0
 8009e92:	b510      	push	{r4, lr}
 8009e94:	4604      	mov	r4, r0
 8009e96:	e9c0 3300 	strd	r3, r3, [r0]
 8009e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e9e:	6083      	str	r3, [r0, #8]
 8009ea0:	8181      	strh	r1, [r0, #12]
 8009ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8009ea4:	81c2      	strh	r2, [r0, #14]
 8009ea6:	6183      	str	r3, [r0, #24]
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	2208      	movs	r2, #8
 8009eac:	305c      	adds	r0, #92	; 0x5c
 8009eae:	f000 f91a 	bl	800a0e6 <memset>
 8009eb2:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <std+0x38>)
 8009eb4:	6263      	str	r3, [r4, #36]	; 0x24
 8009eb6:	4b05      	ldr	r3, [pc, #20]	; (8009ecc <std+0x3c>)
 8009eb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009eba:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <std+0x40>)
 8009ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ebe:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <std+0x44>)
 8009ec0:	6224      	str	r4, [r4, #32]
 8009ec2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ec4:	bd10      	pop	{r4, pc}
 8009ec6:	bf00      	nop
 8009ec8:	0800ac51 	.word	0x0800ac51
 8009ecc:	0800ac73 	.word	0x0800ac73
 8009ed0:	0800acab 	.word	0x0800acab
 8009ed4:	0800accf 	.word	0x0800accf

08009ed8 <_cleanup_r>:
 8009ed8:	4901      	ldr	r1, [pc, #4]	; (8009ee0 <_cleanup_r+0x8>)
 8009eda:	f000 b8af 	b.w	800a03c <_fwalk_reent>
 8009ede:	bf00      	nop
 8009ee0:	0800c779 	.word	0x0800c779

08009ee4 <__sfmoreglue>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	2268      	movs	r2, #104	; 0x68
 8009ee8:	1e4d      	subs	r5, r1, #1
 8009eea:	4355      	muls	r5, r2
 8009eec:	460e      	mov	r6, r1
 8009eee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ef2:	f000 f921 	bl	800a138 <_malloc_r>
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	b140      	cbz	r0, 8009f0c <__sfmoreglue+0x28>
 8009efa:	2100      	movs	r1, #0
 8009efc:	e9c0 1600 	strd	r1, r6, [r0]
 8009f00:	300c      	adds	r0, #12
 8009f02:	60a0      	str	r0, [r4, #8]
 8009f04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f08:	f000 f8ed 	bl	800a0e6 <memset>
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}

08009f10 <__sfp_lock_acquire>:
 8009f10:	4801      	ldr	r0, [pc, #4]	; (8009f18 <__sfp_lock_acquire+0x8>)
 8009f12:	f000 b8d8 	b.w	800a0c6 <__retarget_lock_acquire_recursive>
 8009f16:	bf00      	nop
 8009f18:	20004721 	.word	0x20004721

08009f1c <__sfp_lock_release>:
 8009f1c:	4801      	ldr	r0, [pc, #4]	; (8009f24 <__sfp_lock_release+0x8>)
 8009f1e:	f000 b8d3 	b.w	800a0c8 <__retarget_lock_release_recursive>
 8009f22:	bf00      	nop
 8009f24:	20004721 	.word	0x20004721

08009f28 <__sinit_lock_acquire>:
 8009f28:	4801      	ldr	r0, [pc, #4]	; (8009f30 <__sinit_lock_acquire+0x8>)
 8009f2a:	f000 b8cc 	b.w	800a0c6 <__retarget_lock_acquire_recursive>
 8009f2e:	bf00      	nop
 8009f30:	20004722 	.word	0x20004722

08009f34 <__sinit_lock_release>:
 8009f34:	4801      	ldr	r0, [pc, #4]	; (8009f3c <__sinit_lock_release+0x8>)
 8009f36:	f000 b8c7 	b.w	800a0c8 <__retarget_lock_release_recursive>
 8009f3a:	bf00      	nop
 8009f3c:	20004722 	.word	0x20004722

08009f40 <__sinit>:
 8009f40:	b510      	push	{r4, lr}
 8009f42:	4604      	mov	r4, r0
 8009f44:	f7ff fff0 	bl	8009f28 <__sinit_lock_acquire>
 8009f48:	69a3      	ldr	r3, [r4, #24]
 8009f4a:	b11b      	cbz	r3, 8009f54 <__sinit+0x14>
 8009f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f50:	f7ff bff0 	b.w	8009f34 <__sinit_lock_release>
 8009f54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f58:	6523      	str	r3, [r4, #80]	; 0x50
 8009f5a:	4b13      	ldr	r3, [pc, #76]	; (8009fa8 <__sinit+0x68>)
 8009f5c:	4a13      	ldr	r2, [pc, #76]	; (8009fac <__sinit+0x6c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f62:	42a3      	cmp	r3, r4
 8009f64:	bf04      	itt	eq
 8009f66:	2301      	moveq	r3, #1
 8009f68:	61a3      	streq	r3, [r4, #24]
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 f820 	bl	8009fb0 <__sfp>
 8009f70:	6060      	str	r0, [r4, #4]
 8009f72:	4620      	mov	r0, r4
 8009f74:	f000 f81c 	bl	8009fb0 <__sfp>
 8009f78:	60a0      	str	r0, [r4, #8]
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 f818 	bl	8009fb0 <__sfp>
 8009f80:	2200      	movs	r2, #0
 8009f82:	60e0      	str	r0, [r4, #12]
 8009f84:	2104      	movs	r1, #4
 8009f86:	6860      	ldr	r0, [r4, #4]
 8009f88:	f7ff ff82 	bl	8009e90 <std>
 8009f8c:	68a0      	ldr	r0, [r4, #8]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	2109      	movs	r1, #9
 8009f92:	f7ff ff7d 	bl	8009e90 <std>
 8009f96:	68e0      	ldr	r0, [r4, #12]
 8009f98:	2202      	movs	r2, #2
 8009f9a:	2112      	movs	r1, #18
 8009f9c:	f7ff ff78 	bl	8009e90 <std>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	61a3      	str	r3, [r4, #24]
 8009fa4:	e7d2      	b.n	8009f4c <__sinit+0xc>
 8009fa6:	bf00      	nop
 8009fa8:	0800e50c 	.word	0x0800e50c
 8009fac:	08009ed9 	.word	0x08009ed9

08009fb0 <__sfp>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	4607      	mov	r7, r0
 8009fb4:	f7ff ffac 	bl	8009f10 <__sfp_lock_acquire>
 8009fb8:	4b1e      	ldr	r3, [pc, #120]	; (800a034 <__sfp+0x84>)
 8009fba:	681e      	ldr	r6, [r3, #0]
 8009fbc:	69b3      	ldr	r3, [r6, #24]
 8009fbe:	b913      	cbnz	r3, 8009fc6 <__sfp+0x16>
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f7ff ffbd 	bl	8009f40 <__sinit>
 8009fc6:	3648      	adds	r6, #72	; 0x48
 8009fc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	d503      	bpl.n	8009fd8 <__sfp+0x28>
 8009fd0:	6833      	ldr	r3, [r6, #0]
 8009fd2:	b30b      	cbz	r3, 800a018 <__sfp+0x68>
 8009fd4:	6836      	ldr	r6, [r6, #0]
 8009fd6:	e7f7      	b.n	8009fc8 <__sfp+0x18>
 8009fd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fdc:	b9d5      	cbnz	r5, 800a014 <__sfp+0x64>
 8009fde:	4b16      	ldr	r3, [pc, #88]	; (800a038 <__sfp+0x88>)
 8009fe0:	60e3      	str	r3, [r4, #12]
 8009fe2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fe6:	6665      	str	r5, [r4, #100]	; 0x64
 8009fe8:	f000 f86c 	bl	800a0c4 <__retarget_lock_init_recursive>
 8009fec:	f7ff ff96 	bl	8009f1c <__sfp_lock_release>
 8009ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ff8:	6025      	str	r5, [r4, #0]
 8009ffa:	61a5      	str	r5, [r4, #24]
 8009ffc:	2208      	movs	r2, #8
 8009ffe:	4629      	mov	r1, r5
 800a000:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a004:	f000 f86f 	bl	800a0e6 <memset>
 800a008:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a00c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a010:	4620      	mov	r0, r4
 800a012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a014:	3468      	adds	r4, #104	; 0x68
 800a016:	e7d9      	b.n	8009fcc <__sfp+0x1c>
 800a018:	2104      	movs	r1, #4
 800a01a:	4638      	mov	r0, r7
 800a01c:	f7ff ff62 	bl	8009ee4 <__sfmoreglue>
 800a020:	4604      	mov	r4, r0
 800a022:	6030      	str	r0, [r6, #0]
 800a024:	2800      	cmp	r0, #0
 800a026:	d1d5      	bne.n	8009fd4 <__sfp+0x24>
 800a028:	f7ff ff78 	bl	8009f1c <__sfp_lock_release>
 800a02c:	230c      	movs	r3, #12
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	e7ee      	b.n	800a010 <__sfp+0x60>
 800a032:	bf00      	nop
 800a034:	0800e50c 	.word	0x0800e50c
 800a038:	ffff0001 	.word	0xffff0001

0800a03c <_fwalk_reent>:
 800a03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a040:	4606      	mov	r6, r0
 800a042:	4688      	mov	r8, r1
 800a044:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a048:	2700      	movs	r7, #0
 800a04a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a04e:	f1b9 0901 	subs.w	r9, r9, #1
 800a052:	d505      	bpl.n	800a060 <_fwalk_reent+0x24>
 800a054:	6824      	ldr	r4, [r4, #0]
 800a056:	2c00      	cmp	r4, #0
 800a058:	d1f7      	bne.n	800a04a <_fwalk_reent+0xe>
 800a05a:	4638      	mov	r0, r7
 800a05c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a060:	89ab      	ldrh	r3, [r5, #12]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d907      	bls.n	800a076 <_fwalk_reent+0x3a>
 800a066:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a06a:	3301      	adds	r3, #1
 800a06c:	d003      	beq.n	800a076 <_fwalk_reent+0x3a>
 800a06e:	4629      	mov	r1, r5
 800a070:	4630      	mov	r0, r6
 800a072:	47c0      	blx	r8
 800a074:	4307      	orrs	r7, r0
 800a076:	3568      	adds	r5, #104	; 0x68
 800a078:	e7e9      	b.n	800a04e <_fwalk_reent+0x12>
	...

0800a07c <__libc_init_array>:
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	4d0d      	ldr	r5, [pc, #52]	; (800a0b4 <__libc_init_array+0x38>)
 800a080:	4c0d      	ldr	r4, [pc, #52]	; (800a0b8 <__libc_init_array+0x3c>)
 800a082:	1b64      	subs	r4, r4, r5
 800a084:	10a4      	asrs	r4, r4, #2
 800a086:	2600      	movs	r6, #0
 800a088:	42a6      	cmp	r6, r4
 800a08a:	d109      	bne.n	800a0a0 <__libc_init_array+0x24>
 800a08c:	4d0b      	ldr	r5, [pc, #44]	; (800a0bc <__libc_init_array+0x40>)
 800a08e:	4c0c      	ldr	r4, [pc, #48]	; (800a0c0 <__libc_init_array+0x44>)
 800a090:	f004 f984 	bl	800e39c <_init>
 800a094:	1b64      	subs	r4, r4, r5
 800a096:	10a4      	asrs	r4, r4, #2
 800a098:	2600      	movs	r6, #0
 800a09a:	42a6      	cmp	r6, r4
 800a09c:	d105      	bne.n	800a0aa <__libc_init_array+0x2e>
 800a09e:	bd70      	pop	{r4, r5, r6, pc}
 800a0a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0a4:	4798      	blx	r3
 800a0a6:	3601      	adds	r6, #1
 800a0a8:	e7ee      	b.n	800a088 <__libc_init_array+0xc>
 800a0aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ae:	4798      	blx	r3
 800a0b0:	3601      	adds	r6, #1
 800a0b2:	e7f2      	b.n	800a09a <__libc_init_array+0x1e>
 800a0b4:	0800e954 	.word	0x0800e954
 800a0b8:	0800e954 	.word	0x0800e954
 800a0bc:	0800e954 	.word	0x0800e954
 800a0c0:	0800e958 	.word	0x0800e958

0800a0c4 <__retarget_lock_init_recursive>:
 800a0c4:	4770      	bx	lr

0800a0c6 <__retarget_lock_acquire_recursive>:
 800a0c6:	4770      	bx	lr

0800a0c8 <__retarget_lock_release_recursive>:
 800a0c8:	4770      	bx	lr

0800a0ca <memcpy>:
 800a0ca:	440a      	add	r2, r1
 800a0cc:	4291      	cmp	r1, r2
 800a0ce:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0d2:	d100      	bne.n	800a0d6 <memcpy+0xc>
 800a0d4:	4770      	bx	lr
 800a0d6:	b510      	push	{r4, lr}
 800a0d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0e0:	4291      	cmp	r1, r2
 800a0e2:	d1f9      	bne.n	800a0d8 <memcpy+0xe>
 800a0e4:	bd10      	pop	{r4, pc}

0800a0e6 <memset>:
 800a0e6:	4402      	add	r2, r0
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d100      	bne.n	800a0f0 <memset+0xa>
 800a0ee:	4770      	bx	lr
 800a0f0:	f803 1b01 	strb.w	r1, [r3], #1
 800a0f4:	e7f9      	b.n	800a0ea <memset+0x4>
	...

0800a0f8 <sbrk_aligned>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	4e0e      	ldr	r6, [pc, #56]	; (800a134 <sbrk_aligned+0x3c>)
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	6831      	ldr	r1, [r6, #0]
 800a100:	4605      	mov	r5, r0
 800a102:	b911      	cbnz	r1, 800a10a <sbrk_aligned+0x12>
 800a104:	f000 fd60 	bl	800abc8 <_sbrk_r>
 800a108:	6030      	str	r0, [r6, #0]
 800a10a:	4621      	mov	r1, r4
 800a10c:	4628      	mov	r0, r5
 800a10e:	f000 fd5b 	bl	800abc8 <_sbrk_r>
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	d00a      	beq.n	800a12c <sbrk_aligned+0x34>
 800a116:	1cc4      	adds	r4, r0, #3
 800a118:	f024 0403 	bic.w	r4, r4, #3
 800a11c:	42a0      	cmp	r0, r4
 800a11e:	d007      	beq.n	800a130 <sbrk_aligned+0x38>
 800a120:	1a21      	subs	r1, r4, r0
 800a122:	4628      	mov	r0, r5
 800a124:	f000 fd50 	bl	800abc8 <_sbrk_r>
 800a128:	3001      	adds	r0, #1
 800a12a:	d101      	bne.n	800a130 <sbrk_aligned+0x38>
 800a12c:	f04f 34ff 	mov.w	r4, #4294967295
 800a130:	4620      	mov	r0, r4
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	20004728 	.word	0x20004728

0800a138 <_malloc_r>:
 800a138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a13c:	1ccd      	adds	r5, r1, #3
 800a13e:	f025 0503 	bic.w	r5, r5, #3
 800a142:	3508      	adds	r5, #8
 800a144:	2d0c      	cmp	r5, #12
 800a146:	bf38      	it	cc
 800a148:	250c      	movcc	r5, #12
 800a14a:	2d00      	cmp	r5, #0
 800a14c:	4607      	mov	r7, r0
 800a14e:	db01      	blt.n	800a154 <_malloc_r+0x1c>
 800a150:	42a9      	cmp	r1, r5
 800a152:	d905      	bls.n	800a160 <_malloc_r+0x28>
 800a154:	230c      	movs	r3, #12
 800a156:	603b      	str	r3, [r7, #0]
 800a158:	2600      	movs	r6, #0
 800a15a:	4630      	mov	r0, r6
 800a15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a160:	4e2e      	ldr	r6, [pc, #184]	; (800a21c <_malloc_r+0xe4>)
 800a162:	f002 fee5 	bl	800cf30 <__malloc_lock>
 800a166:	6833      	ldr	r3, [r6, #0]
 800a168:	461c      	mov	r4, r3
 800a16a:	bb34      	cbnz	r4, 800a1ba <_malloc_r+0x82>
 800a16c:	4629      	mov	r1, r5
 800a16e:	4638      	mov	r0, r7
 800a170:	f7ff ffc2 	bl	800a0f8 <sbrk_aligned>
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	4604      	mov	r4, r0
 800a178:	d14d      	bne.n	800a216 <_malloc_r+0xde>
 800a17a:	6834      	ldr	r4, [r6, #0]
 800a17c:	4626      	mov	r6, r4
 800a17e:	2e00      	cmp	r6, #0
 800a180:	d140      	bne.n	800a204 <_malloc_r+0xcc>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	4631      	mov	r1, r6
 800a186:	4638      	mov	r0, r7
 800a188:	eb04 0803 	add.w	r8, r4, r3
 800a18c:	f000 fd1c 	bl	800abc8 <_sbrk_r>
 800a190:	4580      	cmp	r8, r0
 800a192:	d13a      	bne.n	800a20a <_malloc_r+0xd2>
 800a194:	6821      	ldr	r1, [r4, #0]
 800a196:	3503      	adds	r5, #3
 800a198:	1a6d      	subs	r5, r5, r1
 800a19a:	f025 0503 	bic.w	r5, r5, #3
 800a19e:	3508      	adds	r5, #8
 800a1a0:	2d0c      	cmp	r5, #12
 800a1a2:	bf38      	it	cc
 800a1a4:	250c      	movcc	r5, #12
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	f7ff ffa5 	bl	800a0f8 <sbrk_aligned>
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d02b      	beq.n	800a20a <_malloc_r+0xd2>
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	442b      	add	r3, r5
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	e00e      	b.n	800a1d8 <_malloc_r+0xa0>
 800a1ba:	6822      	ldr	r2, [r4, #0]
 800a1bc:	1b52      	subs	r2, r2, r5
 800a1be:	d41e      	bmi.n	800a1fe <_malloc_r+0xc6>
 800a1c0:	2a0b      	cmp	r2, #11
 800a1c2:	d916      	bls.n	800a1f2 <_malloc_r+0xba>
 800a1c4:	1961      	adds	r1, r4, r5
 800a1c6:	42a3      	cmp	r3, r4
 800a1c8:	6025      	str	r5, [r4, #0]
 800a1ca:	bf18      	it	ne
 800a1cc:	6059      	strne	r1, [r3, #4]
 800a1ce:	6863      	ldr	r3, [r4, #4]
 800a1d0:	bf08      	it	eq
 800a1d2:	6031      	streq	r1, [r6, #0]
 800a1d4:	5162      	str	r2, [r4, r5]
 800a1d6:	604b      	str	r3, [r1, #4]
 800a1d8:	4638      	mov	r0, r7
 800a1da:	f104 060b 	add.w	r6, r4, #11
 800a1de:	f002 fead 	bl	800cf3c <__malloc_unlock>
 800a1e2:	f026 0607 	bic.w	r6, r6, #7
 800a1e6:	1d23      	adds	r3, r4, #4
 800a1e8:	1af2      	subs	r2, r6, r3
 800a1ea:	d0b6      	beq.n	800a15a <_malloc_r+0x22>
 800a1ec:	1b9b      	subs	r3, r3, r6
 800a1ee:	50a3      	str	r3, [r4, r2]
 800a1f0:	e7b3      	b.n	800a15a <_malloc_r+0x22>
 800a1f2:	6862      	ldr	r2, [r4, #4]
 800a1f4:	42a3      	cmp	r3, r4
 800a1f6:	bf0c      	ite	eq
 800a1f8:	6032      	streq	r2, [r6, #0]
 800a1fa:	605a      	strne	r2, [r3, #4]
 800a1fc:	e7ec      	b.n	800a1d8 <_malloc_r+0xa0>
 800a1fe:	4623      	mov	r3, r4
 800a200:	6864      	ldr	r4, [r4, #4]
 800a202:	e7b2      	b.n	800a16a <_malloc_r+0x32>
 800a204:	4634      	mov	r4, r6
 800a206:	6876      	ldr	r6, [r6, #4]
 800a208:	e7b9      	b.n	800a17e <_malloc_r+0x46>
 800a20a:	230c      	movs	r3, #12
 800a20c:	603b      	str	r3, [r7, #0]
 800a20e:	4638      	mov	r0, r7
 800a210:	f002 fe94 	bl	800cf3c <__malloc_unlock>
 800a214:	e7a1      	b.n	800a15a <_malloc_r+0x22>
 800a216:	6025      	str	r5, [r4, #0]
 800a218:	e7de      	b.n	800a1d8 <_malloc_r+0xa0>
 800a21a:	bf00      	nop
 800a21c:	20004724 	.word	0x20004724

0800a220 <__cvt>:
 800a220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a224:	ec55 4b10 	vmov	r4, r5, d0
 800a228:	2d00      	cmp	r5, #0
 800a22a:	460e      	mov	r6, r1
 800a22c:	4619      	mov	r1, r3
 800a22e:	462b      	mov	r3, r5
 800a230:	bfbb      	ittet	lt
 800a232:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a236:	461d      	movlt	r5, r3
 800a238:	2300      	movge	r3, #0
 800a23a:	232d      	movlt	r3, #45	; 0x2d
 800a23c:	700b      	strb	r3, [r1, #0]
 800a23e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a240:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a244:	4691      	mov	r9, r2
 800a246:	f023 0820 	bic.w	r8, r3, #32
 800a24a:	bfbc      	itt	lt
 800a24c:	4622      	movlt	r2, r4
 800a24e:	4614      	movlt	r4, r2
 800a250:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a254:	d005      	beq.n	800a262 <__cvt+0x42>
 800a256:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a25a:	d100      	bne.n	800a25e <__cvt+0x3e>
 800a25c:	3601      	adds	r6, #1
 800a25e:	2102      	movs	r1, #2
 800a260:	e000      	b.n	800a264 <__cvt+0x44>
 800a262:	2103      	movs	r1, #3
 800a264:	ab03      	add	r3, sp, #12
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	ab02      	add	r3, sp, #8
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	ec45 4b10 	vmov	d0, r4, r5
 800a270:	4653      	mov	r3, sl
 800a272:	4632      	mov	r2, r6
 800a274:	f001 fc0c 	bl	800ba90 <_dtoa_r>
 800a278:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a27c:	4607      	mov	r7, r0
 800a27e:	d102      	bne.n	800a286 <__cvt+0x66>
 800a280:	f019 0f01 	tst.w	r9, #1
 800a284:	d022      	beq.n	800a2cc <__cvt+0xac>
 800a286:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a28a:	eb07 0906 	add.w	r9, r7, r6
 800a28e:	d110      	bne.n	800a2b2 <__cvt+0x92>
 800a290:	783b      	ldrb	r3, [r7, #0]
 800a292:	2b30      	cmp	r3, #48	; 0x30
 800a294:	d10a      	bne.n	800a2ac <__cvt+0x8c>
 800a296:	2200      	movs	r2, #0
 800a298:	2300      	movs	r3, #0
 800a29a:	4620      	mov	r0, r4
 800a29c:	4629      	mov	r1, r5
 800a29e:	f7f6 fc43 	bl	8000b28 <__aeabi_dcmpeq>
 800a2a2:	b918      	cbnz	r0, 800a2ac <__cvt+0x8c>
 800a2a4:	f1c6 0601 	rsb	r6, r6, #1
 800a2a8:	f8ca 6000 	str.w	r6, [sl]
 800a2ac:	f8da 3000 	ldr.w	r3, [sl]
 800a2b0:	4499      	add	r9, r3
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f7f6 fc35 	bl	8000b28 <__aeabi_dcmpeq>
 800a2be:	b108      	cbz	r0, 800a2c4 <__cvt+0xa4>
 800a2c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2c4:	2230      	movs	r2, #48	; 0x30
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	454b      	cmp	r3, r9
 800a2ca:	d307      	bcc.n	800a2dc <__cvt+0xbc>
 800a2cc:	9b03      	ldr	r3, [sp, #12]
 800a2ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2d0:	1bdb      	subs	r3, r3, r7
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	6013      	str	r3, [r2, #0]
 800a2d6:	b004      	add	sp, #16
 800a2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2dc:	1c59      	adds	r1, r3, #1
 800a2de:	9103      	str	r1, [sp, #12]
 800a2e0:	701a      	strb	r2, [r3, #0]
 800a2e2:	e7f0      	b.n	800a2c6 <__cvt+0xa6>

0800a2e4 <__exponent>:
 800a2e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2900      	cmp	r1, #0
 800a2ea:	bfb8      	it	lt
 800a2ec:	4249      	neglt	r1, r1
 800a2ee:	f803 2b02 	strb.w	r2, [r3], #2
 800a2f2:	bfb4      	ite	lt
 800a2f4:	222d      	movlt	r2, #45	; 0x2d
 800a2f6:	222b      	movge	r2, #43	; 0x2b
 800a2f8:	2909      	cmp	r1, #9
 800a2fa:	7042      	strb	r2, [r0, #1]
 800a2fc:	dd2a      	ble.n	800a354 <__exponent+0x70>
 800a2fe:	f10d 0407 	add.w	r4, sp, #7
 800a302:	46a4      	mov	ip, r4
 800a304:	270a      	movs	r7, #10
 800a306:	46a6      	mov	lr, r4
 800a308:	460a      	mov	r2, r1
 800a30a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a30e:	fb07 1516 	mls	r5, r7, r6, r1
 800a312:	3530      	adds	r5, #48	; 0x30
 800a314:	2a63      	cmp	r2, #99	; 0x63
 800a316:	f104 34ff 	add.w	r4, r4, #4294967295
 800a31a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a31e:	4631      	mov	r1, r6
 800a320:	dcf1      	bgt.n	800a306 <__exponent+0x22>
 800a322:	3130      	adds	r1, #48	; 0x30
 800a324:	f1ae 0502 	sub.w	r5, lr, #2
 800a328:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a32c:	1c44      	adds	r4, r0, #1
 800a32e:	4629      	mov	r1, r5
 800a330:	4561      	cmp	r1, ip
 800a332:	d30a      	bcc.n	800a34a <__exponent+0x66>
 800a334:	f10d 0209 	add.w	r2, sp, #9
 800a338:	eba2 020e 	sub.w	r2, r2, lr
 800a33c:	4565      	cmp	r5, ip
 800a33e:	bf88      	it	hi
 800a340:	2200      	movhi	r2, #0
 800a342:	4413      	add	r3, r2
 800a344:	1a18      	subs	r0, r3, r0
 800a346:	b003      	add	sp, #12
 800a348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a34a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a34e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a352:	e7ed      	b.n	800a330 <__exponent+0x4c>
 800a354:	2330      	movs	r3, #48	; 0x30
 800a356:	3130      	adds	r1, #48	; 0x30
 800a358:	7083      	strb	r3, [r0, #2]
 800a35a:	70c1      	strb	r1, [r0, #3]
 800a35c:	1d03      	adds	r3, r0, #4
 800a35e:	e7f1      	b.n	800a344 <__exponent+0x60>

0800a360 <_printf_float>:
 800a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	ed2d 8b02 	vpush	{d8}
 800a368:	b08d      	sub	sp, #52	; 0x34
 800a36a:	460c      	mov	r4, r1
 800a36c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a370:	4616      	mov	r6, r2
 800a372:	461f      	mov	r7, r3
 800a374:	4605      	mov	r5, r0
 800a376:	f002 fdab 	bl	800ced0 <_localeconv_r>
 800a37a:	f8d0 a000 	ldr.w	sl, [r0]
 800a37e:	4650      	mov	r0, sl
 800a380:	f7f5 ff50 	bl	8000224 <strlen>
 800a384:	2300      	movs	r3, #0
 800a386:	930a      	str	r3, [sp, #40]	; 0x28
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	9305      	str	r3, [sp, #20]
 800a38c:	f8d8 3000 	ldr.w	r3, [r8]
 800a390:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a394:	3307      	adds	r3, #7
 800a396:	f023 0307 	bic.w	r3, r3, #7
 800a39a:	f103 0208 	add.w	r2, r3, #8
 800a39e:	f8c8 2000 	str.w	r2, [r8]
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a3aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a3ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3b2:	9307      	str	r3, [sp, #28]
 800a3b4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3b8:	ee08 0a10 	vmov	s16, r0
 800a3bc:	4b9f      	ldr	r3, [pc, #636]	; (800a63c <_printf_float+0x2dc>)
 800a3be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c6:	f7f6 fbe1 	bl	8000b8c <__aeabi_dcmpun>
 800a3ca:	bb88      	cbnz	r0, 800a430 <_printf_float+0xd0>
 800a3cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3d0:	4b9a      	ldr	r3, [pc, #616]	; (800a63c <_printf_float+0x2dc>)
 800a3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d6:	f7f6 fbbb 	bl	8000b50 <__aeabi_dcmple>
 800a3da:	bb48      	cbnz	r0, 800a430 <_printf_float+0xd0>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2300      	movs	r3, #0
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f7f6 fbaa 	bl	8000b3c <__aeabi_dcmplt>
 800a3e8:	b110      	cbz	r0, 800a3f0 <_printf_float+0x90>
 800a3ea:	232d      	movs	r3, #45	; 0x2d
 800a3ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3f0:	4b93      	ldr	r3, [pc, #588]	; (800a640 <_printf_float+0x2e0>)
 800a3f2:	4894      	ldr	r0, [pc, #592]	; (800a644 <_printf_float+0x2e4>)
 800a3f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3f8:	bf94      	ite	ls
 800a3fa:	4698      	movls	r8, r3
 800a3fc:	4680      	movhi	r8, r0
 800a3fe:	2303      	movs	r3, #3
 800a400:	6123      	str	r3, [r4, #16]
 800a402:	9b05      	ldr	r3, [sp, #20]
 800a404:	f023 0204 	bic.w	r2, r3, #4
 800a408:	6022      	str	r2, [r4, #0]
 800a40a:	f04f 0900 	mov.w	r9, #0
 800a40e:	9700      	str	r7, [sp, #0]
 800a410:	4633      	mov	r3, r6
 800a412:	aa0b      	add	r2, sp, #44	; 0x2c
 800a414:	4621      	mov	r1, r4
 800a416:	4628      	mov	r0, r5
 800a418:	f000 f9d8 	bl	800a7cc <_printf_common>
 800a41c:	3001      	adds	r0, #1
 800a41e:	f040 8090 	bne.w	800a542 <_printf_float+0x1e2>
 800a422:	f04f 30ff 	mov.w	r0, #4294967295
 800a426:	b00d      	add	sp, #52	; 0x34
 800a428:	ecbd 8b02 	vpop	{d8}
 800a42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a430:	4642      	mov	r2, r8
 800a432:	464b      	mov	r3, r9
 800a434:	4640      	mov	r0, r8
 800a436:	4649      	mov	r1, r9
 800a438:	f7f6 fba8 	bl	8000b8c <__aeabi_dcmpun>
 800a43c:	b140      	cbz	r0, 800a450 <_printf_float+0xf0>
 800a43e:	464b      	mov	r3, r9
 800a440:	2b00      	cmp	r3, #0
 800a442:	bfbc      	itt	lt
 800a444:	232d      	movlt	r3, #45	; 0x2d
 800a446:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a44a:	487f      	ldr	r0, [pc, #508]	; (800a648 <_printf_float+0x2e8>)
 800a44c:	4b7f      	ldr	r3, [pc, #508]	; (800a64c <_printf_float+0x2ec>)
 800a44e:	e7d1      	b.n	800a3f4 <_printf_float+0x94>
 800a450:	6863      	ldr	r3, [r4, #4]
 800a452:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a456:	9206      	str	r2, [sp, #24]
 800a458:	1c5a      	adds	r2, r3, #1
 800a45a:	d13f      	bne.n	800a4dc <_printf_float+0x17c>
 800a45c:	2306      	movs	r3, #6
 800a45e:	6063      	str	r3, [r4, #4]
 800a460:	9b05      	ldr	r3, [sp, #20]
 800a462:	6861      	ldr	r1, [r4, #4]
 800a464:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a468:	2300      	movs	r3, #0
 800a46a:	9303      	str	r3, [sp, #12]
 800a46c:	ab0a      	add	r3, sp, #40	; 0x28
 800a46e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a472:	ab09      	add	r3, sp, #36	; 0x24
 800a474:	ec49 8b10 	vmov	d0, r8, r9
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	6022      	str	r2, [r4, #0]
 800a47c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a480:	4628      	mov	r0, r5
 800a482:	f7ff fecd 	bl	800a220 <__cvt>
 800a486:	9b06      	ldr	r3, [sp, #24]
 800a488:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a48a:	2b47      	cmp	r3, #71	; 0x47
 800a48c:	4680      	mov	r8, r0
 800a48e:	d108      	bne.n	800a4a2 <_printf_float+0x142>
 800a490:	1cc8      	adds	r0, r1, #3
 800a492:	db02      	blt.n	800a49a <_printf_float+0x13a>
 800a494:	6863      	ldr	r3, [r4, #4]
 800a496:	4299      	cmp	r1, r3
 800a498:	dd41      	ble.n	800a51e <_printf_float+0x1be>
 800a49a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a49e:	fa5f fb8b 	uxtb.w	fp, fp
 800a4a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4a6:	d820      	bhi.n	800a4ea <_printf_float+0x18a>
 800a4a8:	3901      	subs	r1, #1
 800a4aa:	465a      	mov	r2, fp
 800a4ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a4b0:	9109      	str	r1, [sp, #36]	; 0x24
 800a4b2:	f7ff ff17 	bl	800a2e4 <__exponent>
 800a4b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4b8:	1813      	adds	r3, r2, r0
 800a4ba:	2a01      	cmp	r2, #1
 800a4bc:	4681      	mov	r9, r0
 800a4be:	6123      	str	r3, [r4, #16]
 800a4c0:	dc02      	bgt.n	800a4c8 <_printf_float+0x168>
 800a4c2:	6822      	ldr	r2, [r4, #0]
 800a4c4:	07d2      	lsls	r2, r2, #31
 800a4c6:	d501      	bpl.n	800a4cc <_printf_float+0x16c>
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	6123      	str	r3, [r4, #16]
 800a4cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d09c      	beq.n	800a40e <_printf_float+0xae>
 800a4d4:	232d      	movs	r3, #45	; 0x2d
 800a4d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4da:	e798      	b.n	800a40e <_printf_float+0xae>
 800a4dc:	9a06      	ldr	r2, [sp, #24]
 800a4de:	2a47      	cmp	r2, #71	; 0x47
 800a4e0:	d1be      	bne.n	800a460 <_printf_float+0x100>
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1bc      	bne.n	800a460 <_printf_float+0x100>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e7b9      	b.n	800a45e <_printf_float+0xfe>
 800a4ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4ee:	d118      	bne.n	800a522 <_printf_float+0x1c2>
 800a4f0:	2900      	cmp	r1, #0
 800a4f2:	6863      	ldr	r3, [r4, #4]
 800a4f4:	dd0b      	ble.n	800a50e <_printf_float+0x1ae>
 800a4f6:	6121      	str	r1, [r4, #16]
 800a4f8:	b913      	cbnz	r3, 800a500 <_printf_float+0x1a0>
 800a4fa:	6822      	ldr	r2, [r4, #0]
 800a4fc:	07d0      	lsls	r0, r2, #31
 800a4fe:	d502      	bpl.n	800a506 <_printf_float+0x1a6>
 800a500:	3301      	adds	r3, #1
 800a502:	440b      	add	r3, r1
 800a504:	6123      	str	r3, [r4, #16]
 800a506:	65a1      	str	r1, [r4, #88]	; 0x58
 800a508:	f04f 0900 	mov.w	r9, #0
 800a50c:	e7de      	b.n	800a4cc <_printf_float+0x16c>
 800a50e:	b913      	cbnz	r3, 800a516 <_printf_float+0x1b6>
 800a510:	6822      	ldr	r2, [r4, #0]
 800a512:	07d2      	lsls	r2, r2, #31
 800a514:	d501      	bpl.n	800a51a <_printf_float+0x1ba>
 800a516:	3302      	adds	r3, #2
 800a518:	e7f4      	b.n	800a504 <_printf_float+0x1a4>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e7f2      	b.n	800a504 <_printf_float+0x1a4>
 800a51e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a524:	4299      	cmp	r1, r3
 800a526:	db05      	blt.n	800a534 <_printf_float+0x1d4>
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	6121      	str	r1, [r4, #16]
 800a52c:	07d8      	lsls	r0, r3, #31
 800a52e:	d5ea      	bpl.n	800a506 <_printf_float+0x1a6>
 800a530:	1c4b      	adds	r3, r1, #1
 800a532:	e7e7      	b.n	800a504 <_printf_float+0x1a4>
 800a534:	2900      	cmp	r1, #0
 800a536:	bfd4      	ite	le
 800a538:	f1c1 0202 	rsble	r2, r1, #2
 800a53c:	2201      	movgt	r2, #1
 800a53e:	4413      	add	r3, r2
 800a540:	e7e0      	b.n	800a504 <_printf_float+0x1a4>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	055a      	lsls	r2, r3, #21
 800a546:	d407      	bmi.n	800a558 <_printf_float+0x1f8>
 800a548:	6923      	ldr	r3, [r4, #16]
 800a54a:	4642      	mov	r2, r8
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	47b8      	blx	r7
 800a552:	3001      	adds	r0, #1
 800a554:	d12c      	bne.n	800a5b0 <_printf_float+0x250>
 800a556:	e764      	b.n	800a422 <_printf_float+0xc2>
 800a558:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a55c:	f240 80e0 	bls.w	800a720 <_printf_float+0x3c0>
 800a560:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a564:	2200      	movs	r2, #0
 800a566:	2300      	movs	r3, #0
 800a568:	f7f6 fade 	bl	8000b28 <__aeabi_dcmpeq>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d034      	beq.n	800a5da <_printf_float+0x27a>
 800a570:	4a37      	ldr	r2, [pc, #220]	; (800a650 <_printf_float+0x2f0>)
 800a572:	2301      	movs	r3, #1
 800a574:	4631      	mov	r1, r6
 800a576:	4628      	mov	r0, r5
 800a578:	47b8      	blx	r7
 800a57a:	3001      	adds	r0, #1
 800a57c:	f43f af51 	beq.w	800a422 <_printf_float+0xc2>
 800a580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a584:	429a      	cmp	r2, r3
 800a586:	db02      	blt.n	800a58e <_printf_float+0x22e>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	07d8      	lsls	r0, r3, #31
 800a58c:	d510      	bpl.n	800a5b0 <_printf_float+0x250>
 800a58e:	ee18 3a10 	vmov	r3, s16
 800a592:	4652      	mov	r2, sl
 800a594:	4631      	mov	r1, r6
 800a596:	4628      	mov	r0, r5
 800a598:	47b8      	blx	r7
 800a59a:	3001      	adds	r0, #1
 800a59c:	f43f af41 	beq.w	800a422 <_printf_float+0xc2>
 800a5a0:	f04f 0800 	mov.w	r8, #0
 800a5a4:	f104 091a 	add.w	r9, r4, #26
 800a5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	4543      	cmp	r3, r8
 800a5ae:	dc09      	bgt.n	800a5c4 <_printf_float+0x264>
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	079b      	lsls	r3, r3, #30
 800a5b4:	f100 8105 	bmi.w	800a7c2 <_printf_float+0x462>
 800a5b8:	68e0      	ldr	r0, [r4, #12]
 800a5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5bc:	4298      	cmp	r0, r3
 800a5be:	bfb8      	it	lt
 800a5c0:	4618      	movlt	r0, r3
 800a5c2:	e730      	b.n	800a426 <_printf_float+0xc6>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	464a      	mov	r2, r9
 800a5c8:	4631      	mov	r1, r6
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	47b8      	blx	r7
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	f43f af27 	beq.w	800a422 <_printf_float+0xc2>
 800a5d4:	f108 0801 	add.w	r8, r8, #1
 800a5d8:	e7e6      	b.n	800a5a8 <_printf_float+0x248>
 800a5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	dc39      	bgt.n	800a654 <_printf_float+0x2f4>
 800a5e0:	4a1b      	ldr	r2, [pc, #108]	; (800a650 <_printf_float+0x2f0>)
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	47b8      	blx	r7
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	f43f af19 	beq.w	800a422 <_printf_float+0xc2>
 800a5f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	d102      	bne.n	800a5fe <_printf_float+0x29e>
 800a5f8:	6823      	ldr	r3, [r4, #0]
 800a5fa:	07d9      	lsls	r1, r3, #31
 800a5fc:	d5d8      	bpl.n	800a5b0 <_printf_float+0x250>
 800a5fe:	ee18 3a10 	vmov	r3, s16
 800a602:	4652      	mov	r2, sl
 800a604:	4631      	mov	r1, r6
 800a606:	4628      	mov	r0, r5
 800a608:	47b8      	blx	r7
 800a60a:	3001      	adds	r0, #1
 800a60c:	f43f af09 	beq.w	800a422 <_printf_float+0xc2>
 800a610:	f04f 0900 	mov.w	r9, #0
 800a614:	f104 0a1a 	add.w	sl, r4, #26
 800a618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61a:	425b      	negs	r3, r3
 800a61c:	454b      	cmp	r3, r9
 800a61e:	dc01      	bgt.n	800a624 <_printf_float+0x2c4>
 800a620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a622:	e792      	b.n	800a54a <_printf_float+0x1ea>
 800a624:	2301      	movs	r3, #1
 800a626:	4652      	mov	r2, sl
 800a628:	4631      	mov	r1, r6
 800a62a:	4628      	mov	r0, r5
 800a62c:	47b8      	blx	r7
 800a62e:	3001      	adds	r0, #1
 800a630:	f43f aef7 	beq.w	800a422 <_printf_float+0xc2>
 800a634:	f109 0901 	add.w	r9, r9, #1
 800a638:	e7ee      	b.n	800a618 <_printf_float+0x2b8>
 800a63a:	bf00      	nop
 800a63c:	7fefffff 	.word	0x7fefffff
 800a640:	0800e510 	.word	0x0800e510
 800a644:	0800e514 	.word	0x0800e514
 800a648:	0800e51c 	.word	0x0800e51c
 800a64c:	0800e518 	.word	0x0800e518
 800a650:	0800e520 	.word	0x0800e520
 800a654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a658:	429a      	cmp	r2, r3
 800a65a:	bfa8      	it	ge
 800a65c:	461a      	movge	r2, r3
 800a65e:	2a00      	cmp	r2, #0
 800a660:	4691      	mov	r9, r2
 800a662:	dc37      	bgt.n	800a6d4 <_printf_float+0x374>
 800a664:	f04f 0b00 	mov.w	fp, #0
 800a668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a66c:	f104 021a 	add.w	r2, r4, #26
 800a670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a672:	9305      	str	r3, [sp, #20]
 800a674:	eba3 0309 	sub.w	r3, r3, r9
 800a678:	455b      	cmp	r3, fp
 800a67a:	dc33      	bgt.n	800a6e4 <_printf_float+0x384>
 800a67c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a680:	429a      	cmp	r2, r3
 800a682:	db3b      	blt.n	800a6fc <_printf_float+0x39c>
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	07da      	lsls	r2, r3, #31
 800a688:	d438      	bmi.n	800a6fc <_printf_float+0x39c>
 800a68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a68c:	9a05      	ldr	r2, [sp, #20]
 800a68e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a690:	1a9a      	subs	r2, r3, r2
 800a692:	eba3 0901 	sub.w	r9, r3, r1
 800a696:	4591      	cmp	r9, r2
 800a698:	bfa8      	it	ge
 800a69a:	4691      	movge	r9, r2
 800a69c:	f1b9 0f00 	cmp.w	r9, #0
 800a6a0:	dc35      	bgt.n	800a70e <_printf_float+0x3ae>
 800a6a2:	f04f 0800 	mov.w	r8, #0
 800a6a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6aa:	f104 0a1a 	add.w	sl, r4, #26
 800a6ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6b2:	1a9b      	subs	r3, r3, r2
 800a6b4:	eba3 0309 	sub.w	r3, r3, r9
 800a6b8:	4543      	cmp	r3, r8
 800a6ba:	f77f af79 	ble.w	800a5b0 <_printf_float+0x250>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	4652      	mov	r2, sl
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	47b8      	blx	r7
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	f43f aeaa 	beq.w	800a422 <_printf_float+0xc2>
 800a6ce:	f108 0801 	add.w	r8, r8, #1
 800a6d2:	e7ec      	b.n	800a6ae <_printf_float+0x34e>
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	4642      	mov	r2, r8
 800a6da:	4628      	mov	r0, r5
 800a6dc:	47b8      	blx	r7
 800a6de:	3001      	adds	r0, #1
 800a6e0:	d1c0      	bne.n	800a664 <_printf_float+0x304>
 800a6e2:	e69e      	b.n	800a422 <_printf_float+0xc2>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	4631      	mov	r1, r6
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	9205      	str	r2, [sp, #20]
 800a6ec:	47b8      	blx	r7
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	f43f ae97 	beq.w	800a422 <_printf_float+0xc2>
 800a6f4:	9a05      	ldr	r2, [sp, #20]
 800a6f6:	f10b 0b01 	add.w	fp, fp, #1
 800a6fa:	e7b9      	b.n	800a670 <_printf_float+0x310>
 800a6fc:	ee18 3a10 	vmov	r3, s16
 800a700:	4652      	mov	r2, sl
 800a702:	4631      	mov	r1, r6
 800a704:	4628      	mov	r0, r5
 800a706:	47b8      	blx	r7
 800a708:	3001      	adds	r0, #1
 800a70a:	d1be      	bne.n	800a68a <_printf_float+0x32a>
 800a70c:	e689      	b.n	800a422 <_printf_float+0xc2>
 800a70e:	9a05      	ldr	r2, [sp, #20]
 800a710:	464b      	mov	r3, r9
 800a712:	4442      	add	r2, r8
 800a714:	4631      	mov	r1, r6
 800a716:	4628      	mov	r0, r5
 800a718:	47b8      	blx	r7
 800a71a:	3001      	adds	r0, #1
 800a71c:	d1c1      	bne.n	800a6a2 <_printf_float+0x342>
 800a71e:	e680      	b.n	800a422 <_printf_float+0xc2>
 800a720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a722:	2a01      	cmp	r2, #1
 800a724:	dc01      	bgt.n	800a72a <_printf_float+0x3ca>
 800a726:	07db      	lsls	r3, r3, #31
 800a728:	d538      	bpl.n	800a79c <_printf_float+0x43c>
 800a72a:	2301      	movs	r3, #1
 800a72c:	4642      	mov	r2, r8
 800a72e:	4631      	mov	r1, r6
 800a730:	4628      	mov	r0, r5
 800a732:	47b8      	blx	r7
 800a734:	3001      	adds	r0, #1
 800a736:	f43f ae74 	beq.w	800a422 <_printf_float+0xc2>
 800a73a:	ee18 3a10 	vmov	r3, s16
 800a73e:	4652      	mov	r2, sl
 800a740:	4631      	mov	r1, r6
 800a742:	4628      	mov	r0, r5
 800a744:	47b8      	blx	r7
 800a746:	3001      	adds	r0, #1
 800a748:	f43f ae6b 	beq.w	800a422 <_printf_float+0xc2>
 800a74c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a750:	2200      	movs	r2, #0
 800a752:	2300      	movs	r3, #0
 800a754:	f7f6 f9e8 	bl	8000b28 <__aeabi_dcmpeq>
 800a758:	b9d8      	cbnz	r0, 800a792 <_printf_float+0x432>
 800a75a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a75c:	f108 0201 	add.w	r2, r8, #1
 800a760:	3b01      	subs	r3, #1
 800a762:	4631      	mov	r1, r6
 800a764:	4628      	mov	r0, r5
 800a766:	47b8      	blx	r7
 800a768:	3001      	adds	r0, #1
 800a76a:	d10e      	bne.n	800a78a <_printf_float+0x42a>
 800a76c:	e659      	b.n	800a422 <_printf_float+0xc2>
 800a76e:	2301      	movs	r3, #1
 800a770:	4652      	mov	r2, sl
 800a772:	4631      	mov	r1, r6
 800a774:	4628      	mov	r0, r5
 800a776:	47b8      	blx	r7
 800a778:	3001      	adds	r0, #1
 800a77a:	f43f ae52 	beq.w	800a422 <_printf_float+0xc2>
 800a77e:	f108 0801 	add.w	r8, r8, #1
 800a782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a784:	3b01      	subs	r3, #1
 800a786:	4543      	cmp	r3, r8
 800a788:	dcf1      	bgt.n	800a76e <_printf_float+0x40e>
 800a78a:	464b      	mov	r3, r9
 800a78c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a790:	e6dc      	b.n	800a54c <_printf_float+0x1ec>
 800a792:	f04f 0800 	mov.w	r8, #0
 800a796:	f104 0a1a 	add.w	sl, r4, #26
 800a79a:	e7f2      	b.n	800a782 <_printf_float+0x422>
 800a79c:	2301      	movs	r3, #1
 800a79e:	4642      	mov	r2, r8
 800a7a0:	e7df      	b.n	800a762 <_printf_float+0x402>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	464a      	mov	r2, r9
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	47b8      	blx	r7
 800a7ac:	3001      	adds	r0, #1
 800a7ae:	f43f ae38 	beq.w	800a422 <_printf_float+0xc2>
 800a7b2:	f108 0801 	add.w	r8, r8, #1
 800a7b6:	68e3      	ldr	r3, [r4, #12]
 800a7b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7ba:	1a5b      	subs	r3, r3, r1
 800a7bc:	4543      	cmp	r3, r8
 800a7be:	dcf0      	bgt.n	800a7a2 <_printf_float+0x442>
 800a7c0:	e6fa      	b.n	800a5b8 <_printf_float+0x258>
 800a7c2:	f04f 0800 	mov.w	r8, #0
 800a7c6:	f104 0919 	add.w	r9, r4, #25
 800a7ca:	e7f4      	b.n	800a7b6 <_printf_float+0x456>

0800a7cc <_printf_common>:
 800a7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d0:	4616      	mov	r6, r2
 800a7d2:	4699      	mov	r9, r3
 800a7d4:	688a      	ldr	r2, [r1, #8]
 800a7d6:	690b      	ldr	r3, [r1, #16]
 800a7d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	bfb8      	it	lt
 800a7e0:	4613      	movlt	r3, r2
 800a7e2:	6033      	str	r3, [r6, #0]
 800a7e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7e8:	4607      	mov	r7, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	b10a      	cbz	r2, 800a7f2 <_printf_common+0x26>
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	6033      	str	r3, [r6, #0]
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	0699      	lsls	r1, r3, #26
 800a7f6:	bf42      	ittt	mi
 800a7f8:	6833      	ldrmi	r3, [r6, #0]
 800a7fa:	3302      	addmi	r3, #2
 800a7fc:	6033      	strmi	r3, [r6, #0]
 800a7fe:	6825      	ldr	r5, [r4, #0]
 800a800:	f015 0506 	ands.w	r5, r5, #6
 800a804:	d106      	bne.n	800a814 <_printf_common+0x48>
 800a806:	f104 0a19 	add.w	sl, r4, #25
 800a80a:	68e3      	ldr	r3, [r4, #12]
 800a80c:	6832      	ldr	r2, [r6, #0]
 800a80e:	1a9b      	subs	r3, r3, r2
 800a810:	42ab      	cmp	r3, r5
 800a812:	dc26      	bgt.n	800a862 <_printf_common+0x96>
 800a814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a818:	1e13      	subs	r3, r2, #0
 800a81a:	6822      	ldr	r2, [r4, #0]
 800a81c:	bf18      	it	ne
 800a81e:	2301      	movne	r3, #1
 800a820:	0692      	lsls	r2, r2, #26
 800a822:	d42b      	bmi.n	800a87c <_printf_common+0xb0>
 800a824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a828:	4649      	mov	r1, r9
 800a82a:	4638      	mov	r0, r7
 800a82c:	47c0      	blx	r8
 800a82e:	3001      	adds	r0, #1
 800a830:	d01e      	beq.n	800a870 <_printf_common+0xa4>
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	68e5      	ldr	r5, [r4, #12]
 800a836:	6832      	ldr	r2, [r6, #0]
 800a838:	f003 0306 	and.w	r3, r3, #6
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	bf08      	it	eq
 800a840:	1aad      	subeq	r5, r5, r2
 800a842:	68a3      	ldr	r3, [r4, #8]
 800a844:	6922      	ldr	r2, [r4, #16]
 800a846:	bf0c      	ite	eq
 800a848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a84c:	2500      	movne	r5, #0
 800a84e:	4293      	cmp	r3, r2
 800a850:	bfc4      	itt	gt
 800a852:	1a9b      	subgt	r3, r3, r2
 800a854:	18ed      	addgt	r5, r5, r3
 800a856:	2600      	movs	r6, #0
 800a858:	341a      	adds	r4, #26
 800a85a:	42b5      	cmp	r5, r6
 800a85c:	d11a      	bne.n	800a894 <_printf_common+0xc8>
 800a85e:	2000      	movs	r0, #0
 800a860:	e008      	b.n	800a874 <_printf_common+0xa8>
 800a862:	2301      	movs	r3, #1
 800a864:	4652      	mov	r2, sl
 800a866:	4649      	mov	r1, r9
 800a868:	4638      	mov	r0, r7
 800a86a:	47c0      	blx	r8
 800a86c:	3001      	adds	r0, #1
 800a86e:	d103      	bne.n	800a878 <_printf_common+0xac>
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a878:	3501      	adds	r5, #1
 800a87a:	e7c6      	b.n	800a80a <_printf_common+0x3e>
 800a87c:	18e1      	adds	r1, r4, r3
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	2030      	movs	r0, #48	; 0x30
 800a882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a886:	4422      	add	r2, r4
 800a888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a88c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a890:	3302      	adds	r3, #2
 800a892:	e7c7      	b.n	800a824 <_printf_common+0x58>
 800a894:	2301      	movs	r3, #1
 800a896:	4622      	mov	r2, r4
 800a898:	4649      	mov	r1, r9
 800a89a:	4638      	mov	r0, r7
 800a89c:	47c0      	blx	r8
 800a89e:	3001      	adds	r0, #1
 800a8a0:	d0e6      	beq.n	800a870 <_printf_common+0xa4>
 800a8a2:	3601      	adds	r6, #1
 800a8a4:	e7d9      	b.n	800a85a <_printf_common+0x8e>
	...

0800a8a8 <_printf_i>:
 800a8a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ac:	7e0f      	ldrb	r7, [r1, #24]
 800a8ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8b0:	2f78      	cmp	r7, #120	; 0x78
 800a8b2:	4691      	mov	r9, r2
 800a8b4:	4680      	mov	r8, r0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	469a      	mov	sl, r3
 800a8ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8be:	d807      	bhi.n	800a8d0 <_printf_i+0x28>
 800a8c0:	2f62      	cmp	r7, #98	; 0x62
 800a8c2:	d80a      	bhi.n	800a8da <_printf_i+0x32>
 800a8c4:	2f00      	cmp	r7, #0
 800a8c6:	f000 80d8 	beq.w	800aa7a <_printf_i+0x1d2>
 800a8ca:	2f58      	cmp	r7, #88	; 0x58
 800a8cc:	f000 80a3 	beq.w	800aa16 <_printf_i+0x16e>
 800a8d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8d8:	e03a      	b.n	800a950 <_printf_i+0xa8>
 800a8da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8de:	2b15      	cmp	r3, #21
 800a8e0:	d8f6      	bhi.n	800a8d0 <_printf_i+0x28>
 800a8e2:	a101      	add	r1, pc, #4	; (adr r1, 800a8e8 <_printf_i+0x40>)
 800a8e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8e8:	0800a941 	.word	0x0800a941
 800a8ec:	0800a955 	.word	0x0800a955
 800a8f0:	0800a8d1 	.word	0x0800a8d1
 800a8f4:	0800a8d1 	.word	0x0800a8d1
 800a8f8:	0800a8d1 	.word	0x0800a8d1
 800a8fc:	0800a8d1 	.word	0x0800a8d1
 800a900:	0800a955 	.word	0x0800a955
 800a904:	0800a8d1 	.word	0x0800a8d1
 800a908:	0800a8d1 	.word	0x0800a8d1
 800a90c:	0800a8d1 	.word	0x0800a8d1
 800a910:	0800a8d1 	.word	0x0800a8d1
 800a914:	0800aa61 	.word	0x0800aa61
 800a918:	0800a985 	.word	0x0800a985
 800a91c:	0800aa43 	.word	0x0800aa43
 800a920:	0800a8d1 	.word	0x0800a8d1
 800a924:	0800a8d1 	.word	0x0800a8d1
 800a928:	0800aa83 	.word	0x0800aa83
 800a92c:	0800a8d1 	.word	0x0800a8d1
 800a930:	0800a985 	.word	0x0800a985
 800a934:	0800a8d1 	.word	0x0800a8d1
 800a938:	0800a8d1 	.word	0x0800a8d1
 800a93c:	0800aa4b 	.word	0x0800aa4b
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	1d1a      	adds	r2, r3, #4
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	602a      	str	r2, [r5, #0]
 800a948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a94c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a950:	2301      	movs	r3, #1
 800a952:	e0a3      	b.n	800aa9c <_printf_i+0x1f4>
 800a954:	6820      	ldr	r0, [r4, #0]
 800a956:	6829      	ldr	r1, [r5, #0]
 800a958:	0606      	lsls	r6, r0, #24
 800a95a:	f101 0304 	add.w	r3, r1, #4
 800a95e:	d50a      	bpl.n	800a976 <_printf_i+0xce>
 800a960:	680e      	ldr	r6, [r1, #0]
 800a962:	602b      	str	r3, [r5, #0]
 800a964:	2e00      	cmp	r6, #0
 800a966:	da03      	bge.n	800a970 <_printf_i+0xc8>
 800a968:	232d      	movs	r3, #45	; 0x2d
 800a96a:	4276      	negs	r6, r6
 800a96c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a970:	485e      	ldr	r0, [pc, #376]	; (800aaec <_printf_i+0x244>)
 800a972:	230a      	movs	r3, #10
 800a974:	e019      	b.n	800a9aa <_printf_i+0x102>
 800a976:	680e      	ldr	r6, [r1, #0]
 800a978:	602b      	str	r3, [r5, #0]
 800a97a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a97e:	bf18      	it	ne
 800a980:	b236      	sxthne	r6, r6
 800a982:	e7ef      	b.n	800a964 <_printf_i+0xbc>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	6820      	ldr	r0, [r4, #0]
 800a988:	1d19      	adds	r1, r3, #4
 800a98a:	6029      	str	r1, [r5, #0]
 800a98c:	0601      	lsls	r1, r0, #24
 800a98e:	d501      	bpl.n	800a994 <_printf_i+0xec>
 800a990:	681e      	ldr	r6, [r3, #0]
 800a992:	e002      	b.n	800a99a <_printf_i+0xf2>
 800a994:	0646      	lsls	r6, r0, #25
 800a996:	d5fb      	bpl.n	800a990 <_printf_i+0xe8>
 800a998:	881e      	ldrh	r6, [r3, #0]
 800a99a:	4854      	ldr	r0, [pc, #336]	; (800aaec <_printf_i+0x244>)
 800a99c:	2f6f      	cmp	r7, #111	; 0x6f
 800a99e:	bf0c      	ite	eq
 800a9a0:	2308      	moveq	r3, #8
 800a9a2:	230a      	movne	r3, #10
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9aa:	6865      	ldr	r5, [r4, #4]
 800a9ac:	60a5      	str	r5, [r4, #8]
 800a9ae:	2d00      	cmp	r5, #0
 800a9b0:	bfa2      	ittt	ge
 800a9b2:	6821      	ldrge	r1, [r4, #0]
 800a9b4:	f021 0104 	bicge.w	r1, r1, #4
 800a9b8:	6021      	strge	r1, [r4, #0]
 800a9ba:	b90e      	cbnz	r6, 800a9c0 <_printf_i+0x118>
 800a9bc:	2d00      	cmp	r5, #0
 800a9be:	d04d      	beq.n	800aa5c <_printf_i+0x1b4>
 800a9c0:	4615      	mov	r5, r2
 800a9c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9c6:	fb03 6711 	mls	r7, r3, r1, r6
 800a9ca:	5dc7      	ldrb	r7, [r0, r7]
 800a9cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9d0:	4637      	mov	r7, r6
 800a9d2:	42bb      	cmp	r3, r7
 800a9d4:	460e      	mov	r6, r1
 800a9d6:	d9f4      	bls.n	800a9c2 <_printf_i+0x11a>
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d10b      	bne.n	800a9f4 <_printf_i+0x14c>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	07de      	lsls	r6, r3, #31
 800a9e0:	d508      	bpl.n	800a9f4 <_printf_i+0x14c>
 800a9e2:	6923      	ldr	r3, [r4, #16]
 800a9e4:	6861      	ldr	r1, [r4, #4]
 800a9e6:	4299      	cmp	r1, r3
 800a9e8:	bfde      	ittt	le
 800a9ea:	2330      	movle	r3, #48	; 0x30
 800a9ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9f4:	1b52      	subs	r2, r2, r5
 800a9f6:	6122      	str	r2, [r4, #16]
 800a9f8:	f8cd a000 	str.w	sl, [sp]
 800a9fc:	464b      	mov	r3, r9
 800a9fe:	aa03      	add	r2, sp, #12
 800aa00:	4621      	mov	r1, r4
 800aa02:	4640      	mov	r0, r8
 800aa04:	f7ff fee2 	bl	800a7cc <_printf_common>
 800aa08:	3001      	adds	r0, #1
 800aa0a:	d14c      	bne.n	800aaa6 <_printf_i+0x1fe>
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	b004      	add	sp, #16
 800aa12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa16:	4835      	ldr	r0, [pc, #212]	; (800aaec <_printf_i+0x244>)
 800aa18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa1c:	6829      	ldr	r1, [r5, #0]
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa24:	6029      	str	r1, [r5, #0]
 800aa26:	061d      	lsls	r5, r3, #24
 800aa28:	d514      	bpl.n	800aa54 <_printf_i+0x1ac>
 800aa2a:	07df      	lsls	r7, r3, #31
 800aa2c:	bf44      	itt	mi
 800aa2e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa32:	6023      	strmi	r3, [r4, #0]
 800aa34:	b91e      	cbnz	r6, 800aa3e <_printf_i+0x196>
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	f023 0320 	bic.w	r3, r3, #32
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	2310      	movs	r3, #16
 800aa40:	e7b0      	b.n	800a9a4 <_printf_i+0xfc>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	f043 0320 	orr.w	r3, r3, #32
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	2378      	movs	r3, #120	; 0x78
 800aa4c:	4828      	ldr	r0, [pc, #160]	; (800aaf0 <_printf_i+0x248>)
 800aa4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa52:	e7e3      	b.n	800aa1c <_printf_i+0x174>
 800aa54:	0659      	lsls	r1, r3, #25
 800aa56:	bf48      	it	mi
 800aa58:	b2b6      	uxthmi	r6, r6
 800aa5a:	e7e6      	b.n	800aa2a <_printf_i+0x182>
 800aa5c:	4615      	mov	r5, r2
 800aa5e:	e7bb      	b.n	800a9d8 <_printf_i+0x130>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	6826      	ldr	r6, [r4, #0]
 800aa64:	6961      	ldr	r1, [r4, #20]
 800aa66:	1d18      	adds	r0, r3, #4
 800aa68:	6028      	str	r0, [r5, #0]
 800aa6a:	0635      	lsls	r5, r6, #24
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	d501      	bpl.n	800aa74 <_printf_i+0x1cc>
 800aa70:	6019      	str	r1, [r3, #0]
 800aa72:	e002      	b.n	800aa7a <_printf_i+0x1d2>
 800aa74:	0670      	lsls	r0, r6, #25
 800aa76:	d5fb      	bpl.n	800aa70 <_printf_i+0x1c8>
 800aa78:	8019      	strh	r1, [r3, #0]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	6123      	str	r3, [r4, #16]
 800aa7e:	4615      	mov	r5, r2
 800aa80:	e7ba      	b.n	800a9f8 <_printf_i+0x150>
 800aa82:	682b      	ldr	r3, [r5, #0]
 800aa84:	1d1a      	adds	r2, r3, #4
 800aa86:	602a      	str	r2, [r5, #0]
 800aa88:	681d      	ldr	r5, [r3, #0]
 800aa8a:	6862      	ldr	r2, [r4, #4]
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f7f5 fbd6 	bl	8000240 <memchr>
 800aa94:	b108      	cbz	r0, 800aa9a <_printf_i+0x1f2>
 800aa96:	1b40      	subs	r0, r0, r5
 800aa98:	6060      	str	r0, [r4, #4]
 800aa9a:	6863      	ldr	r3, [r4, #4]
 800aa9c:	6123      	str	r3, [r4, #16]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa4:	e7a8      	b.n	800a9f8 <_printf_i+0x150>
 800aaa6:	6923      	ldr	r3, [r4, #16]
 800aaa8:	462a      	mov	r2, r5
 800aaaa:	4649      	mov	r1, r9
 800aaac:	4640      	mov	r0, r8
 800aaae:	47d0      	blx	sl
 800aab0:	3001      	adds	r0, #1
 800aab2:	d0ab      	beq.n	800aa0c <_printf_i+0x164>
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	079b      	lsls	r3, r3, #30
 800aab8:	d413      	bmi.n	800aae2 <_printf_i+0x23a>
 800aaba:	68e0      	ldr	r0, [r4, #12]
 800aabc:	9b03      	ldr	r3, [sp, #12]
 800aabe:	4298      	cmp	r0, r3
 800aac0:	bfb8      	it	lt
 800aac2:	4618      	movlt	r0, r3
 800aac4:	e7a4      	b.n	800aa10 <_printf_i+0x168>
 800aac6:	2301      	movs	r3, #1
 800aac8:	4632      	mov	r2, r6
 800aaca:	4649      	mov	r1, r9
 800aacc:	4640      	mov	r0, r8
 800aace:	47d0      	blx	sl
 800aad0:	3001      	adds	r0, #1
 800aad2:	d09b      	beq.n	800aa0c <_printf_i+0x164>
 800aad4:	3501      	adds	r5, #1
 800aad6:	68e3      	ldr	r3, [r4, #12]
 800aad8:	9903      	ldr	r1, [sp, #12]
 800aada:	1a5b      	subs	r3, r3, r1
 800aadc:	42ab      	cmp	r3, r5
 800aade:	dcf2      	bgt.n	800aac6 <_printf_i+0x21e>
 800aae0:	e7eb      	b.n	800aaba <_printf_i+0x212>
 800aae2:	2500      	movs	r5, #0
 800aae4:	f104 0619 	add.w	r6, r4, #25
 800aae8:	e7f5      	b.n	800aad6 <_printf_i+0x22e>
 800aaea:	bf00      	nop
 800aaec:	0800e522 	.word	0x0800e522
 800aaf0:	0800e533 	.word	0x0800e533

0800aaf4 <cleanup_glue>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	6809      	ldr	r1, [r1, #0]
 800aafa:	4605      	mov	r5, r0
 800aafc:	b109      	cbz	r1, 800ab02 <cleanup_glue+0xe>
 800aafe:	f7ff fff9 	bl	800aaf4 <cleanup_glue>
 800ab02:	4621      	mov	r1, r4
 800ab04:	4628      	mov	r0, r5
 800ab06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab0a:	f002 bef5 	b.w	800d8f8 <_free_r>
	...

0800ab10 <_reclaim_reent>:
 800ab10:	4b2c      	ldr	r3, [pc, #176]	; (800abc4 <_reclaim_reent+0xb4>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4283      	cmp	r3, r0
 800ab16:	b570      	push	{r4, r5, r6, lr}
 800ab18:	4604      	mov	r4, r0
 800ab1a:	d051      	beq.n	800abc0 <_reclaim_reent+0xb0>
 800ab1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab1e:	b143      	cbz	r3, 800ab32 <_reclaim_reent+0x22>
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d14a      	bne.n	800abbc <_reclaim_reent+0xac>
 800ab26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab28:	6819      	ldr	r1, [r3, #0]
 800ab2a:	b111      	cbz	r1, 800ab32 <_reclaim_reent+0x22>
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f002 fee3 	bl	800d8f8 <_free_r>
 800ab32:	6961      	ldr	r1, [r4, #20]
 800ab34:	b111      	cbz	r1, 800ab3c <_reclaim_reent+0x2c>
 800ab36:	4620      	mov	r0, r4
 800ab38:	f002 fede 	bl	800d8f8 <_free_r>
 800ab3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab3e:	b111      	cbz	r1, 800ab46 <_reclaim_reent+0x36>
 800ab40:	4620      	mov	r0, r4
 800ab42:	f002 fed9 	bl	800d8f8 <_free_r>
 800ab46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ab48:	b111      	cbz	r1, 800ab50 <_reclaim_reent+0x40>
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f002 fed4 	bl	800d8f8 <_free_r>
 800ab50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ab52:	b111      	cbz	r1, 800ab5a <_reclaim_reent+0x4a>
 800ab54:	4620      	mov	r0, r4
 800ab56:	f002 fecf 	bl	800d8f8 <_free_r>
 800ab5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ab5c:	b111      	cbz	r1, 800ab64 <_reclaim_reent+0x54>
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f002 feca 	bl	800d8f8 <_free_r>
 800ab64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ab66:	b111      	cbz	r1, 800ab6e <_reclaim_reent+0x5e>
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f002 fec5 	bl	800d8f8 <_free_r>
 800ab6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ab70:	b111      	cbz	r1, 800ab78 <_reclaim_reent+0x68>
 800ab72:	4620      	mov	r0, r4
 800ab74:	f002 fec0 	bl	800d8f8 <_free_r>
 800ab78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab7a:	b111      	cbz	r1, 800ab82 <_reclaim_reent+0x72>
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f002 febb 	bl	800d8f8 <_free_r>
 800ab82:	69a3      	ldr	r3, [r4, #24]
 800ab84:	b1e3      	cbz	r3, 800abc0 <_reclaim_reent+0xb0>
 800ab86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ab88:	4620      	mov	r0, r4
 800ab8a:	4798      	blx	r3
 800ab8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ab8e:	b1b9      	cbz	r1, 800abc0 <_reclaim_reent+0xb0>
 800ab90:	4620      	mov	r0, r4
 800ab92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab96:	f7ff bfad 	b.w	800aaf4 <cleanup_glue>
 800ab9a:	5949      	ldr	r1, [r1, r5]
 800ab9c:	b941      	cbnz	r1, 800abb0 <_reclaim_reent+0xa0>
 800ab9e:	3504      	adds	r5, #4
 800aba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aba2:	2d80      	cmp	r5, #128	; 0x80
 800aba4:	68d9      	ldr	r1, [r3, #12]
 800aba6:	d1f8      	bne.n	800ab9a <_reclaim_reent+0x8a>
 800aba8:	4620      	mov	r0, r4
 800abaa:	f002 fea5 	bl	800d8f8 <_free_r>
 800abae:	e7ba      	b.n	800ab26 <_reclaim_reent+0x16>
 800abb0:	680e      	ldr	r6, [r1, #0]
 800abb2:	4620      	mov	r0, r4
 800abb4:	f002 fea0 	bl	800d8f8 <_free_r>
 800abb8:	4631      	mov	r1, r6
 800abba:	e7ef      	b.n	800ab9c <_reclaim_reent+0x8c>
 800abbc:	2500      	movs	r5, #0
 800abbe:	e7ef      	b.n	800aba0 <_reclaim_reent+0x90>
 800abc0:	bd70      	pop	{r4, r5, r6, pc}
 800abc2:	bf00      	nop
 800abc4:	20000044 	.word	0x20000044

0800abc8 <_sbrk_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4d06      	ldr	r5, [pc, #24]	; (800abe4 <_sbrk_r+0x1c>)
 800abcc:	2300      	movs	r3, #0
 800abce:	4604      	mov	r4, r0
 800abd0:	4608      	mov	r0, r1
 800abd2:	602b      	str	r3, [r5, #0]
 800abd4:	f7f8 fb46 	bl	8003264 <_sbrk>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_sbrk_r+0x1a>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_sbrk_r+0x1a>
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	2000472c 	.word	0x2000472c

0800abe8 <sniprintf>:
 800abe8:	b40c      	push	{r2, r3}
 800abea:	b530      	push	{r4, r5, lr}
 800abec:	4b17      	ldr	r3, [pc, #92]	; (800ac4c <sniprintf+0x64>)
 800abee:	1e0c      	subs	r4, r1, #0
 800abf0:	681d      	ldr	r5, [r3, #0]
 800abf2:	b09d      	sub	sp, #116	; 0x74
 800abf4:	da08      	bge.n	800ac08 <sniprintf+0x20>
 800abf6:	238b      	movs	r3, #139	; 0x8b
 800abf8:	602b      	str	r3, [r5, #0]
 800abfa:	f04f 30ff 	mov.w	r0, #4294967295
 800abfe:	b01d      	add	sp, #116	; 0x74
 800ac00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac04:	b002      	add	sp, #8
 800ac06:	4770      	bx	lr
 800ac08:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ac0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ac10:	bf14      	ite	ne
 800ac12:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ac16:	4623      	moveq	r3, r4
 800ac18:	9304      	str	r3, [sp, #16]
 800ac1a:	9307      	str	r3, [sp, #28]
 800ac1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac20:	9002      	str	r0, [sp, #8]
 800ac22:	9006      	str	r0, [sp, #24]
 800ac24:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ac28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac2a:	ab21      	add	r3, sp, #132	; 0x84
 800ac2c:	a902      	add	r1, sp, #8
 800ac2e:	4628      	mov	r0, r5
 800ac30:	9301      	str	r3, [sp, #4]
 800ac32:	f002 ff09 	bl	800da48 <_svfiprintf_r>
 800ac36:	1c43      	adds	r3, r0, #1
 800ac38:	bfbc      	itt	lt
 800ac3a:	238b      	movlt	r3, #139	; 0x8b
 800ac3c:	602b      	strlt	r3, [r5, #0]
 800ac3e:	2c00      	cmp	r4, #0
 800ac40:	d0dd      	beq.n	800abfe <sniprintf+0x16>
 800ac42:	9b02      	ldr	r3, [sp, #8]
 800ac44:	2200      	movs	r2, #0
 800ac46:	701a      	strb	r2, [r3, #0]
 800ac48:	e7d9      	b.n	800abfe <sniprintf+0x16>
 800ac4a:	bf00      	nop
 800ac4c:	20000044 	.word	0x20000044

0800ac50 <__sread>:
 800ac50:	b510      	push	{r4, lr}
 800ac52:	460c      	mov	r4, r1
 800ac54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac58:	f003 f950 	bl	800defc <_read_r>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	bfab      	itete	ge
 800ac60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac62:	89a3      	ldrhlt	r3, [r4, #12]
 800ac64:	181b      	addge	r3, r3, r0
 800ac66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac6a:	bfac      	ite	ge
 800ac6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac6e:	81a3      	strhlt	r3, [r4, #12]
 800ac70:	bd10      	pop	{r4, pc}

0800ac72 <__swrite>:
 800ac72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac76:	461f      	mov	r7, r3
 800ac78:	898b      	ldrh	r3, [r1, #12]
 800ac7a:	05db      	lsls	r3, r3, #23
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	460c      	mov	r4, r1
 800ac80:	4616      	mov	r6, r2
 800ac82:	d505      	bpl.n	800ac90 <__swrite+0x1e>
 800ac84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac88:	2302      	movs	r3, #2
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f002 f924 	bl	800ced8 <_lseek_r>
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac9a:	81a3      	strh	r3, [r4, #12]
 800ac9c:	4632      	mov	r2, r6
 800ac9e:	463b      	mov	r3, r7
 800aca0:	4628      	mov	r0, r5
 800aca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aca6:	f000 be45 	b.w	800b934 <_write_r>

0800acaa <__sseek>:
 800acaa:	b510      	push	{r4, lr}
 800acac:	460c      	mov	r4, r1
 800acae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb2:	f002 f911 	bl	800ced8 <_lseek_r>
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	bf15      	itete	ne
 800acbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800acbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acc6:	81a3      	strheq	r3, [r4, #12]
 800acc8:	bf18      	it	ne
 800acca:	81a3      	strhne	r3, [r4, #12]
 800accc:	bd10      	pop	{r4, pc}

0800acce <__sclose>:
 800acce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd2:	f000 be41 	b.w	800b958 <_close_r>

0800acd6 <sulp>:
 800acd6:	b570      	push	{r4, r5, r6, lr}
 800acd8:	4604      	mov	r4, r0
 800acda:	460d      	mov	r5, r1
 800acdc:	ec45 4b10 	vmov	d0, r4, r5
 800ace0:	4616      	mov	r6, r2
 800ace2:	f002 fca3 	bl	800d62c <__ulp>
 800ace6:	ec51 0b10 	vmov	r0, r1, d0
 800acea:	b17e      	cbz	r6, 800ad0c <sulp+0x36>
 800acec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800acf0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	dd09      	ble.n	800ad0c <sulp+0x36>
 800acf8:	051b      	lsls	r3, r3, #20
 800acfa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800acfe:	2400      	movs	r4, #0
 800ad00:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ad04:	4622      	mov	r2, r4
 800ad06:	462b      	mov	r3, r5
 800ad08:	f7f5 fca6 	bl	8000658 <__aeabi_dmul>
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad10 <_strtod_l>:
 800ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	ed2d 8b02 	vpush	{d8}
 800ad18:	b09d      	sub	sp, #116	; 0x74
 800ad1a:	461f      	mov	r7, r3
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	9318      	str	r3, [sp, #96]	; 0x60
 800ad20:	4ba2      	ldr	r3, [pc, #648]	; (800afac <_strtod_l+0x29c>)
 800ad22:	9213      	str	r2, [sp, #76]	; 0x4c
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	9305      	str	r3, [sp, #20]
 800ad28:	4604      	mov	r4, r0
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	4688      	mov	r8, r1
 800ad2e:	f7f5 fa79 	bl	8000224 <strlen>
 800ad32:	f04f 0a00 	mov.w	sl, #0
 800ad36:	4605      	mov	r5, r0
 800ad38:	f04f 0b00 	mov.w	fp, #0
 800ad3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad42:	781a      	ldrb	r2, [r3, #0]
 800ad44:	2a2b      	cmp	r2, #43	; 0x2b
 800ad46:	d04e      	beq.n	800ade6 <_strtod_l+0xd6>
 800ad48:	d83b      	bhi.n	800adc2 <_strtod_l+0xb2>
 800ad4a:	2a0d      	cmp	r2, #13
 800ad4c:	d834      	bhi.n	800adb8 <_strtod_l+0xa8>
 800ad4e:	2a08      	cmp	r2, #8
 800ad50:	d834      	bhi.n	800adbc <_strtod_l+0xac>
 800ad52:	2a00      	cmp	r2, #0
 800ad54:	d03e      	beq.n	800add4 <_strtod_l+0xc4>
 800ad56:	2300      	movs	r3, #0
 800ad58:	930a      	str	r3, [sp, #40]	; 0x28
 800ad5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ad5c:	7833      	ldrb	r3, [r6, #0]
 800ad5e:	2b30      	cmp	r3, #48	; 0x30
 800ad60:	f040 80b0 	bne.w	800aec4 <_strtod_l+0x1b4>
 800ad64:	7873      	ldrb	r3, [r6, #1]
 800ad66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad6a:	2b58      	cmp	r3, #88	; 0x58
 800ad6c:	d168      	bne.n	800ae40 <_strtod_l+0x130>
 800ad6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad70:	9301      	str	r3, [sp, #4]
 800ad72:	ab18      	add	r3, sp, #96	; 0x60
 800ad74:	9702      	str	r7, [sp, #8]
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	4a8d      	ldr	r2, [pc, #564]	; (800afb0 <_strtod_l+0x2a0>)
 800ad7a:	ab19      	add	r3, sp, #100	; 0x64
 800ad7c:	a917      	add	r1, sp, #92	; 0x5c
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f001 fd9e 	bl	800c8c0 <__gethex>
 800ad84:	f010 0707 	ands.w	r7, r0, #7
 800ad88:	4605      	mov	r5, r0
 800ad8a:	d005      	beq.n	800ad98 <_strtod_l+0x88>
 800ad8c:	2f06      	cmp	r7, #6
 800ad8e:	d12c      	bne.n	800adea <_strtod_l+0xda>
 800ad90:	3601      	adds	r6, #1
 800ad92:	2300      	movs	r3, #0
 800ad94:	9617      	str	r6, [sp, #92]	; 0x5c
 800ad96:	930a      	str	r3, [sp, #40]	; 0x28
 800ad98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f040 8590 	bne.w	800b8c0 <_strtod_l+0xbb0>
 800ada0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada2:	b1eb      	cbz	r3, 800ade0 <_strtod_l+0xd0>
 800ada4:	4652      	mov	r2, sl
 800ada6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800adaa:	ec43 2b10 	vmov	d0, r2, r3
 800adae:	b01d      	add	sp, #116	; 0x74
 800adb0:	ecbd 8b02 	vpop	{d8}
 800adb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb8:	2a20      	cmp	r2, #32
 800adba:	d1cc      	bne.n	800ad56 <_strtod_l+0x46>
 800adbc:	3301      	adds	r3, #1
 800adbe:	9317      	str	r3, [sp, #92]	; 0x5c
 800adc0:	e7be      	b.n	800ad40 <_strtod_l+0x30>
 800adc2:	2a2d      	cmp	r2, #45	; 0x2d
 800adc4:	d1c7      	bne.n	800ad56 <_strtod_l+0x46>
 800adc6:	2201      	movs	r2, #1
 800adc8:	920a      	str	r2, [sp, #40]	; 0x28
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	9217      	str	r2, [sp, #92]	; 0x5c
 800adce:	785b      	ldrb	r3, [r3, #1]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1c2      	bne.n	800ad5a <_strtod_l+0x4a>
 800add4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800add6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800adda:	2b00      	cmp	r3, #0
 800addc:	f040 856e 	bne.w	800b8bc <_strtod_l+0xbac>
 800ade0:	4652      	mov	r2, sl
 800ade2:	465b      	mov	r3, fp
 800ade4:	e7e1      	b.n	800adaa <_strtod_l+0x9a>
 800ade6:	2200      	movs	r2, #0
 800ade8:	e7ee      	b.n	800adc8 <_strtod_l+0xb8>
 800adea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800adec:	b13a      	cbz	r2, 800adfe <_strtod_l+0xee>
 800adee:	2135      	movs	r1, #53	; 0x35
 800adf0:	a81a      	add	r0, sp, #104	; 0x68
 800adf2:	f002 fd26 	bl	800d842 <__copybits>
 800adf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800adf8:	4620      	mov	r0, r4
 800adfa:	f002 f8e5 	bl	800cfc8 <_Bfree>
 800adfe:	3f01      	subs	r7, #1
 800ae00:	2f04      	cmp	r7, #4
 800ae02:	d806      	bhi.n	800ae12 <_strtod_l+0x102>
 800ae04:	e8df f007 	tbb	[pc, r7]
 800ae08:	1714030a 	.word	0x1714030a
 800ae0c:	0a          	.byte	0x0a
 800ae0d:	00          	.byte	0x00
 800ae0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ae12:	0728      	lsls	r0, r5, #28
 800ae14:	d5c0      	bpl.n	800ad98 <_strtod_l+0x88>
 800ae16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ae1a:	e7bd      	b.n	800ad98 <_strtod_l+0x88>
 800ae1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ae20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ae26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae2e:	e7f0      	b.n	800ae12 <_strtod_l+0x102>
 800ae30:	f8df b180 	ldr.w	fp, [pc, #384]	; 800afb4 <_strtod_l+0x2a4>
 800ae34:	e7ed      	b.n	800ae12 <_strtod_l+0x102>
 800ae36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ae3a:	f04f 3aff 	mov.w	sl, #4294967295
 800ae3e:	e7e8      	b.n	800ae12 <_strtod_l+0x102>
 800ae40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae46:	785b      	ldrb	r3, [r3, #1]
 800ae48:	2b30      	cmp	r3, #48	; 0x30
 800ae4a:	d0f9      	beq.n	800ae40 <_strtod_l+0x130>
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d0a3      	beq.n	800ad98 <_strtod_l+0x88>
 800ae50:	2301      	movs	r3, #1
 800ae52:	f04f 0900 	mov.w	r9, #0
 800ae56:	9304      	str	r3, [sp, #16]
 800ae58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae5a:	9308      	str	r3, [sp, #32]
 800ae5c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ae60:	464f      	mov	r7, r9
 800ae62:	220a      	movs	r2, #10
 800ae64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ae66:	7806      	ldrb	r6, [r0, #0]
 800ae68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ae6c:	b2d9      	uxtb	r1, r3
 800ae6e:	2909      	cmp	r1, #9
 800ae70:	d92a      	bls.n	800aec8 <_strtod_l+0x1b8>
 800ae72:	9905      	ldr	r1, [sp, #20]
 800ae74:	462a      	mov	r2, r5
 800ae76:	f003 f85b 	bl	800df30 <strncmp>
 800ae7a:	b398      	cbz	r0, 800aee4 <_strtod_l+0x1d4>
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	4632      	mov	r2, r6
 800ae80:	463d      	mov	r5, r7
 800ae82:	9005      	str	r0, [sp, #20]
 800ae84:	4603      	mov	r3, r0
 800ae86:	2a65      	cmp	r2, #101	; 0x65
 800ae88:	d001      	beq.n	800ae8e <_strtod_l+0x17e>
 800ae8a:	2a45      	cmp	r2, #69	; 0x45
 800ae8c:	d118      	bne.n	800aec0 <_strtod_l+0x1b0>
 800ae8e:	b91d      	cbnz	r5, 800ae98 <_strtod_l+0x188>
 800ae90:	9a04      	ldr	r2, [sp, #16]
 800ae92:	4302      	orrs	r2, r0
 800ae94:	d09e      	beq.n	800add4 <_strtod_l+0xc4>
 800ae96:	2500      	movs	r5, #0
 800ae98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ae9c:	f108 0201 	add.w	r2, r8, #1
 800aea0:	9217      	str	r2, [sp, #92]	; 0x5c
 800aea2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800aea6:	2a2b      	cmp	r2, #43	; 0x2b
 800aea8:	d075      	beq.n	800af96 <_strtod_l+0x286>
 800aeaa:	2a2d      	cmp	r2, #45	; 0x2d
 800aeac:	d07b      	beq.n	800afa6 <_strtod_l+0x296>
 800aeae:	f04f 0c00 	mov.w	ip, #0
 800aeb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aeb6:	2909      	cmp	r1, #9
 800aeb8:	f240 8082 	bls.w	800afc0 <_strtod_l+0x2b0>
 800aebc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aec0:	2600      	movs	r6, #0
 800aec2:	e09d      	b.n	800b000 <_strtod_l+0x2f0>
 800aec4:	2300      	movs	r3, #0
 800aec6:	e7c4      	b.n	800ae52 <_strtod_l+0x142>
 800aec8:	2f08      	cmp	r7, #8
 800aeca:	bfd8      	it	le
 800aecc:	9907      	ldrle	r1, [sp, #28]
 800aece:	f100 0001 	add.w	r0, r0, #1
 800aed2:	bfda      	itte	le
 800aed4:	fb02 3301 	mlale	r3, r2, r1, r3
 800aed8:	9307      	strle	r3, [sp, #28]
 800aeda:	fb02 3909 	mlagt	r9, r2, r9, r3
 800aede:	3701      	adds	r7, #1
 800aee0:	9017      	str	r0, [sp, #92]	; 0x5c
 800aee2:	e7bf      	b.n	800ae64 <_strtod_l+0x154>
 800aee4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aee6:	195a      	adds	r2, r3, r5
 800aee8:	9217      	str	r2, [sp, #92]	; 0x5c
 800aeea:	5d5a      	ldrb	r2, [r3, r5]
 800aeec:	2f00      	cmp	r7, #0
 800aeee:	d037      	beq.n	800af60 <_strtod_l+0x250>
 800aef0:	9005      	str	r0, [sp, #20]
 800aef2:	463d      	mov	r5, r7
 800aef4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aef8:	2b09      	cmp	r3, #9
 800aefa:	d912      	bls.n	800af22 <_strtod_l+0x212>
 800aefc:	2301      	movs	r3, #1
 800aefe:	e7c2      	b.n	800ae86 <_strtod_l+0x176>
 800af00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	9217      	str	r2, [sp, #92]	; 0x5c
 800af06:	785a      	ldrb	r2, [r3, #1]
 800af08:	3001      	adds	r0, #1
 800af0a:	2a30      	cmp	r2, #48	; 0x30
 800af0c:	d0f8      	beq.n	800af00 <_strtod_l+0x1f0>
 800af0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800af12:	2b08      	cmp	r3, #8
 800af14:	f200 84d9 	bhi.w	800b8ca <_strtod_l+0xbba>
 800af18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af1a:	9005      	str	r0, [sp, #20]
 800af1c:	2000      	movs	r0, #0
 800af1e:	9308      	str	r3, [sp, #32]
 800af20:	4605      	mov	r5, r0
 800af22:	3a30      	subs	r2, #48	; 0x30
 800af24:	f100 0301 	add.w	r3, r0, #1
 800af28:	d014      	beq.n	800af54 <_strtod_l+0x244>
 800af2a:	9905      	ldr	r1, [sp, #20]
 800af2c:	4419      	add	r1, r3
 800af2e:	9105      	str	r1, [sp, #20]
 800af30:	462b      	mov	r3, r5
 800af32:	eb00 0e05 	add.w	lr, r0, r5
 800af36:	210a      	movs	r1, #10
 800af38:	4573      	cmp	r3, lr
 800af3a:	d113      	bne.n	800af64 <_strtod_l+0x254>
 800af3c:	182b      	adds	r3, r5, r0
 800af3e:	2b08      	cmp	r3, #8
 800af40:	f105 0501 	add.w	r5, r5, #1
 800af44:	4405      	add	r5, r0
 800af46:	dc1c      	bgt.n	800af82 <_strtod_l+0x272>
 800af48:	9907      	ldr	r1, [sp, #28]
 800af4a:	230a      	movs	r3, #10
 800af4c:	fb03 2301 	mla	r3, r3, r1, r2
 800af50:	9307      	str	r3, [sp, #28]
 800af52:	2300      	movs	r3, #0
 800af54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af56:	1c51      	adds	r1, r2, #1
 800af58:	9117      	str	r1, [sp, #92]	; 0x5c
 800af5a:	7852      	ldrb	r2, [r2, #1]
 800af5c:	4618      	mov	r0, r3
 800af5e:	e7c9      	b.n	800aef4 <_strtod_l+0x1e4>
 800af60:	4638      	mov	r0, r7
 800af62:	e7d2      	b.n	800af0a <_strtod_l+0x1fa>
 800af64:	2b08      	cmp	r3, #8
 800af66:	dc04      	bgt.n	800af72 <_strtod_l+0x262>
 800af68:	9e07      	ldr	r6, [sp, #28]
 800af6a:	434e      	muls	r6, r1
 800af6c:	9607      	str	r6, [sp, #28]
 800af6e:	3301      	adds	r3, #1
 800af70:	e7e2      	b.n	800af38 <_strtod_l+0x228>
 800af72:	f103 0c01 	add.w	ip, r3, #1
 800af76:	f1bc 0f10 	cmp.w	ip, #16
 800af7a:	bfd8      	it	le
 800af7c:	fb01 f909 	mulle.w	r9, r1, r9
 800af80:	e7f5      	b.n	800af6e <_strtod_l+0x25e>
 800af82:	2d10      	cmp	r5, #16
 800af84:	bfdc      	itt	le
 800af86:	230a      	movle	r3, #10
 800af88:	fb03 2909 	mlale	r9, r3, r9, r2
 800af8c:	e7e1      	b.n	800af52 <_strtod_l+0x242>
 800af8e:	2300      	movs	r3, #0
 800af90:	9305      	str	r3, [sp, #20]
 800af92:	2301      	movs	r3, #1
 800af94:	e77c      	b.n	800ae90 <_strtod_l+0x180>
 800af96:	f04f 0c00 	mov.w	ip, #0
 800af9a:	f108 0202 	add.w	r2, r8, #2
 800af9e:	9217      	str	r2, [sp, #92]	; 0x5c
 800afa0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800afa4:	e785      	b.n	800aeb2 <_strtod_l+0x1a2>
 800afa6:	f04f 0c01 	mov.w	ip, #1
 800afaa:	e7f6      	b.n	800af9a <_strtod_l+0x28a>
 800afac:	0800e790 	.word	0x0800e790
 800afb0:	0800e544 	.word	0x0800e544
 800afb4:	7ff00000 	.word	0x7ff00000
 800afb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afba:	1c51      	adds	r1, r2, #1
 800afbc:	9117      	str	r1, [sp, #92]	; 0x5c
 800afbe:	7852      	ldrb	r2, [r2, #1]
 800afc0:	2a30      	cmp	r2, #48	; 0x30
 800afc2:	d0f9      	beq.n	800afb8 <_strtod_l+0x2a8>
 800afc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800afc8:	2908      	cmp	r1, #8
 800afca:	f63f af79 	bhi.w	800aec0 <_strtod_l+0x1b0>
 800afce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800afd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afd4:	9206      	str	r2, [sp, #24]
 800afd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afd8:	1c51      	adds	r1, r2, #1
 800afda:	9117      	str	r1, [sp, #92]	; 0x5c
 800afdc:	7852      	ldrb	r2, [r2, #1]
 800afde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800afe2:	2e09      	cmp	r6, #9
 800afe4:	d937      	bls.n	800b056 <_strtod_l+0x346>
 800afe6:	9e06      	ldr	r6, [sp, #24]
 800afe8:	1b89      	subs	r1, r1, r6
 800afea:	2908      	cmp	r1, #8
 800afec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800aff0:	dc02      	bgt.n	800aff8 <_strtod_l+0x2e8>
 800aff2:	4576      	cmp	r6, lr
 800aff4:	bfa8      	it	ge
 800aff6:	4676      	movge	r6, lr
 800aff8:	f1bc 0f00 	cmp.w	ip, #0
 800affc:	d000      	beq.n	800b000 <_strtod_l+0x2f0>
 800affe:	4276      	negs	r6, r6
 800b000:	2d00      	cmp	r5, #0
 800b002:	d14d      	bne.n	800b0a0 <_strtod_l+0x390>
 800b004:	9904      	ldr	r1, [sp, #16]
 800b006:	4301      	orrs	r1, r0
 800b008:	f47f aec6 	bne.w	800ad98 <_strtod_l+0x88>
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f47f aee1 	bne.w	800add4 <_strtod_l+0xc4>
 800b012:	2a69      	cmp	r2, #105	; 0x69
 800b014:	d027      	beq.n	800b066 <_strtod_l+0x356>
 800b016:	dc24      	bgt.n	800b062 <_strtod_l+0x352>
 800b018:	2a49      	cmp	r2, #73	; 0x49
 800b01a:	d024      	beq.n	800b066 <_strtod_l+0x356>
 800b01c:	2a4e      	cmp	r2, #78	; 0x4e
 800b01e:	f47f aed9 	bne.w	800add4 <_strtod_l+0xc4>
 800b022:	499f      	ldr	r1, [pc, #636]	; (800b2a0 <_strtod_l+0x590>)
 800b024:	a817      	add	r0, sp, #92	; 0x5c
 800b026:	f001 fea3 	bl	800cd70 <__match>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	f43f aed2 	beq.w	800add4 <_strtod_l+0xc4>
 800b030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	2b28      	cmp	r3, #40	; 0x28
 800b036:	d12d      	bne.n	800b094 <_strtod_l+0x384>
 800b038:	499a      	ldr	r1, [pc, #616]	; (800b2a4 <_strtod_l+0x594>)
 800b03a:	aa1a      	add	r2, sp, #104	; 0x68
 800b03c:	a817      	add	r0, sp, #92	; 0x5c
 800b03e:	f001 feab 	bl	800cd98 <__hexnan>
 800b042:	2805      	cmp	r0, #5
 800b044:	d126      	bne.n	800b094 <_strtod_l+0x384>
 800b046:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b048:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b04c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b050:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b054:	e6a0      	b.n	800ad98 <_strtod_l+0x88>
 800b056:	210a      	movs	r1, #10
 800b058:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b05c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b060:	e7b9      	b.n	800afd6 <_strtod_l+0x2c6>
 800b062:	2a6e      	cmp	r2, #110	; 0x6e
 800b064:	e7db      	b.n	800b01e <_strtod_l+0x30e>
 800b066:	4990      	ldr	r1, [pc, #576]	; (800b2a8 <_strtod_l+0x598>)
 800b068:	a817      	add	r0, sp, #92	; 0x5c
 800b06a:	f001 fe81 	bl	800cd70 <__match>
 800b06e:	2800      	cmp	r0, #0
 800b070:	f43f aeb0 	beq.w	800add4 <_strtod_l+0xc4>
 800b074:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b076:	498d      	ldr	r1, [pc, #564]	; (800b2ac <_strtod_l+0x59c>)
 800b078:	3b01      	subs	r3, #1
 800b07a:	a817      	add	r0, sp, #92	; 0x5c
 800b07c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b07e:	f001 fe77 	bl	800cd70 <__match>
 800b082:	b910      	cbnz	r0, 800b08a <_strtod_l+0x37a>
 800b084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b086:	3301      	adds	r3, #1
 800b088:	9317      	str	r3, [sp, #92]	; 0x5c
 800b08a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b2bc <_strtod_l+0x5ac>
 800b08e:	f04f 0a00 	mov.w	sl, #0
 800b092:	e681      	b.n	800ad98 <_strtod_l+0x88>
 800b094:	4886      	ldr	r0, [pc, #536]	; (800b2b0 <_strtod_l+0x5a0>)
 800b096:	f002 ff43 	bl	800df20 <nan>
 800b09a:	ec5b ab10 	vmov	sl, fp, d0
 800b09e:	e67b      	b.n	800ad98 <_strtod_l+0x88>
 800b0a0:	9b05      	ldr	r3, [sp, #20]
 800b0a2:	9807      	ldr	r0, [sp, #28]
 800b0a4:	1af3      	subs	r3, r6, r3
 800b0a6:	2f00      	cmp	r7, #0
 800b0a8:	bf08      	it	eq
 800b0aa:	462f      	moveq	r7, r5
 800b0ac:	2d10      	cmp	r5, #16
 800b0ae:	9306      	str	r3, [sp, #24]
 800b0b0:	46a8      	mov	r8, r5
 800b0b2:	bfa8      	it	ge
 800b0b4:	f04f 0810 	movge.w	r8, #16
 800b0b8:	f7f5 fa54 	bl	8000564 <__aeabi_ui2d>
 800b0bc:	2d09      	cmp	r5, #9
 800b0be:	4682      	mov	sl, r0
 800b0c0:	468b      	mov	fp, r1
 800b0c2:	dd13      	ble.n	800b0ec <_strtod_l+0x3dc>
 800b0c4:	4b7b      	ldr	r3, [pc, #492]	; (800b2b4 <_strtod_l+0x5a4>)
 800b0c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b0ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b0ce:	f7f5 fac3 	bl	8000658 <__aeabi_dmul>
 800b0d2:	4682      	mov	sl, r0
 800b0d4:	4648      	mov	r0, r9
 800b0d6:	468b      	mov	fp, r1
 800b0d8:	f7f5 fa44 	bl	8000564 <__aeabi_ui2d>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4650      	mov	r0, sl
 800b0e2:	4659      	mov	r1, fp
 800b0e4:	f7f5 f902 	bl	80002ec <__adddf3>
 800b0e8:	4682      	mov	sl, r0
 800b0ea:	468b      	mov	fp, r1
 800b0ec:	2d0f      	cmp	r5, #15
 800b0ee:	dc38      	bgt.n	800b162 <_strtod_l+0x452>
 800b0f0:	9b06      	ldr	r3, [sp, #24]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f43f ae50 	beq.w	800ad98 <_strtod_l+0x88>
 800b0f8:	dd24      	ble.n	800b144 <_strtod_l+0x434>
 800b0fa:	2b16      	cmp	r3, #22
 800b0fc:	dc0b      	bgt.n	800b116 <_strtod_l+0x406>
 800b0fe:	496d      	ldr	r1, [pc, #436]	; (800b2b4 <_strtod_l+0x5a4>)
 800b100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b104:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b108:	4652      	mov	r2, sl
 800b10a:	465b      	mov	r3, fp
 800b10c:	f7f5 faa4 	bl	8000658 <__aeabi_dmul>
 800b110:	4682      	mov	sl, r0
 800b112:	468b      	mov	fp, r1
 800b114:	e640      	b.n	800ad98 <_strtod_l+0x88>
 800b116:	9a06      	ldr	r2, [sp, #24]
 800b118:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b11c:	4293      	cmp	r3, r2
 800b11e:	db20      	blt.n	800b162 <_strtod_l+0x452>
 800b120:	4c64      	ldr	r4, [pc, #400]	; (800b2b4 <_strtod_l+0x5a4>)
 800b122:	f1c5 050f 	rsb	r5, r5, #15
 800b126:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b12a:	4652      	mov	r2, sl
 800b12c:	465b      	mov	r3, fp
 800b12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b132:	f7f5 fa91 	bl	8000658 <__aeabi_dmul>
 800b136:	9b06      	ldr	r3, [sp, #24]
 800b138:	1b5d      	subs	r5, r3, r5
 800b13a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b13e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b142:	e7e3      	b.n	800b10c <_strtod_l+0x3fc>
 800b144:	9b06      	ldr	r3, [sp, #24]
 800b146:	3316      	adds	r3, #22
 800b148:	db0b      	blt.n	800b162 <_strtod_l+0x452>
 800b14a:	9b05      	ldr	r3, [sp, #20]
 800b14c:	1b9e      	subs	r6, r3, r6
 800b14e:	4b59      	ldr	r3, [pc, #356]	; (800b2b4 <_strtod_l+0x5a4>)
 800b150:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b154:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b158:	4650      	mov	r0, sl
 800b15a:	4659      	mov	r1, fp
 800b15c:	f7f5 fba6 	bl	80008ac <__aeabi_ddiv>
 800b160:	e7d6      	b.n	800b110 <_strtod_l+0x400>
 800b162:	9b06      	ldr	r3, [sp, #24]
 800b164:	eba5 0808 	sub.w	r8, r5, r8
 800b168:	4498      	add	r8, r3
 800b16a:	f1b8 0f00 	cmp.w	r8, #0
 800b16e:	dd74      	ble.n	800b25a <_strtod_l+0x54a>
 800b170:	f018 030f 	ands.w	r3, r8, #15
 800b174:	d00a      	beq.n	800b18c <_strtod_l+0x47c>
 800b176:	494f      	ldr	r1, [pc, #316]	; (800b2b4 <_strtod_l+0x5a4>)
 800b178:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b17c:	4652      	mov	r2, sl
 800b17e:	465b      	mov	r3, fp
 800b180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b184:	f7f5 fa68 	bl	8000658 <__aeabi_dmul>
 800b188:	4682      	mov	sl, r0
 800b18a:	468b      	mov	fp, r1
 800b18c:	f038 080f 	bics.w	r8, r8, #15
 800b190:	d04f      	beq.n	800b232 <_strtod_l+0x522>
 800b192:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b196:	dd22      	ble.n	800b1de <_strtod_l+0x4ce>
 800b198:	2500      	movs	r5, #0
 800b19a:	462e      	mov	r6, r5
 800b19c:	9507      	str	r5, [sp, #28]
 800b19e:	9505      	str	r5, [sp, #20]
 800b1a0:	2322      	movs	r3, #34	; 0x22
 800b1a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b2bc <_strtod_l+0x5ac>
 800b1a6:	6023      	str	r3, [r4, #0]
 800b1a8:	f04f 0a00 	mov.w	sl, #0
 800b1ac:	9b07      	ldr	r3, [sp, #28]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f43f adf2 	beq.w	800ad98 <_strtod_l+0x88>
 800b1b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f001 ff06 	bl	800cfc8 <_Bfree>
 800b1bc:	9905      	ldr	r1, [sp, #20]
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f001 ff02 	bl	800cfc8 <_Bfree>
 800b1c4:	4631      	mov	r1, r6
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f001 fefe 	bl	800cfc8 <_Bfree>
 800b1cc:	9907      	ldr	r1, [sp, #28]
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f001 fefa 	bl	800cfc8 <_Bfree>
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f001 fef6 	bl	800cfc8 <_Bfree>
 800b1dc:	e5dc      	b.n	800ad98 <_strtod_l+0x88>
 800b1de:	4b36      	ldr	r3, [pc, #216]	; (800b2b8 <_strtod_l+0x5a8>)
 800b1e0:	9304      	str	r3, [sp, #16]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	4659      	mov	r1, fp
 800b1ec:	4699      	mov	r9, r3
 800b1ee:	f1b8 0f01 	cmp.w	r8, #1
 800b1f2:	dc21      	bgt.n	800b238 <_strtod_l+0x528>
 800b1f4:	b10b      	cbz	r3, 800b1fa <_strtod_l+0x4ea>
 800b1f6:	4682      	mov	sl, r0
 800b1f8:	468b      	mov	fp, r1
 800b1fa:	4b2f      	ldr	r3, [pc, #188]	; (800b2b8 <_strtod_l+0x5a8>)
 800b1fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b200:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b204:	4652      	mov	r2, sl
 800b206:	465b      	mov	r3, fp
 800b208:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b20c:	f7f5 fa24 	bl	8000658 <__aeabi_dmul>
 800b210:	4b2a      	ldr	r3, [pc, #168]	; (800b2bc <_strtod_l+0x5ac>)
 800b212:	460a      	mov	r2, r1
 800b214:	400b      	ands	r3, r1
 800b216:	492a      	ldr	r1, [pc, #168]	; (800b2c0 <_strtod_l+0x5b0>)
 800b218:	428b      	cmp	r3, r1
 800b21a:	4682      	mov	sl, r0
 800b21c:	d8bc      	bhi.n	800b198 <_strtod_l+0x488>
 800b21e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b222:	428b      	cmp	r3, r1
 800b224:	bf86      	itte	hi
 800b226:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b2c4 <_strtod_l+0x5b4>
 800b22a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b22e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b232:	2300      	movs	r3, #0
 800b234:	9304      	str	r3, [sp, #16]
 800b236:	e084      	b.n	800b342 <_strtod_l+0x632>
 800b238:	f018 0f01 	tst.w	r8, #1
 800b23c:	d005      	beq.n	800b24a <_strtod_l+0x53a>
 800b23e:	9b04      	ldr	r3, [sp, #16]
 800b240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b244:	f7f5 fa08 	bl	8000658 <__aeabi_dmul>
 800b248:	2301      	movs	r3, #1
 800b24a:	9a04      	ldr	r2, [sp, #16]
 800b24c:	3208      	adds	r2, #8
 800b24e:	f109 0901 	add.w	r9, r9, #1
 800b252:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b256:	9204      	str	r2, [sp, #16]
 800b258:	e7c9      	b.n	800b1ee <_strtod_l+0x4de>
 800b25a:	d0ea      	beq.n	800b232 <_strtod_l+0x522>
 800b25c:	f1c8 0800 	rsb	r8, r8, #0
 800b260:	f018 020f 	ands.w	r2, r8, #15
 800b264:	d00a      	beq.n	800b27c <_strtod_l+0x56c>
 800b266:	4b13      	ldr	r3, [pc, #76]	; (800b2b4 <_strtod_l+0x5a4>)
 800b268:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b26c:	4650      	mov	r0, sl
 800b26e:	4659      	mov	r1, fp
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	f7f5 fb1a 	bl	80008ac <__aeabi_ddiv>
 800b278:	4682      	mov	sl, r0
 800b27a:	468b      	mov	fp, r1
 800b27c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b280:	d0d7      	beq.n	800b232 <_strtod_l+0x522>
 800b282:	f1b8 0f1f 	cmp.w	r8, #31
 800b286:	dd1f      	ble.n	800b2c8 <_strtod_l+0x5b8>
 800b288:	2500      	movs	r5, #0
 800b28a:	462e      	mov	r6, r5
 800b28c:	9507      	str	r5, [sp, #28]
 800b28e:	9505      	str	r5, [sp, #20]
 800b290:	2322      	movs	r3, #34	; 0x22
 800b292:	f04f 0a00 	mov.w	sl, #0
 800b296:	f04f 0b00 	mov.w	fp, #0
 800b29a:	6023      	str	r3, [r4, #0]
 800b29c:	e786      	b.n	800b1ac <_strtod_l+0x49c>
 800b29e:	bf00      	nop
 800b2a0:	0800e51d 	.word	0x0800e51d
 800b2a4:	0800e558 	.word	0x0800e558
 800b2a8:	0800e515 	.word	0x0800e515
 800b2ac:	0800e69c 	.word	0x0800e69c
 800b2b0:	0800e948 	.word	0x0800e948
 800b2b4:	0800e828 	.word	0x0800e828
 800b2b8:	0800e800 	.word	0x0800e800
 800b2bc:	7ff00000 	.word	0x7ff00000
 800b2c0:	7ca00000 	.word	0x7ca00000
 800b2c4:	7fefffff 	.word	0x7fefffff
 800b2c8:	f018 0310 	ands.w	r3, r8, #16
 800b2cc:	bf18      	it	ne
 800b2ce:	236a      	movne	r3, #106	; 0x6a
 800b2d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b680 <_strtod_l+0x970>
 800b2d4:	9304      	str	r3, [sp, #16]
 800b2d6:	4650      	mov	r0, sl
 800b2d8:	4659      	mov	r1, fp
 800b2da:	2300      	movs	r3, #0
 800b2dc:	f018 0f01 	tst.w	r8, #1
 800b2e0:	d004      	beq.n	800b2ec <_strtod_l+0x5dc>
 800b2e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b2e6:	f7f5 f9b7 	bl	8000658 <__aeabi_dmul>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b2f0:	f109 0908 	add.w	r9, r9, #8
 800b2f4:	d1f2      	bne.n	800b2dc <_strtod_l+0x5cc>
 800b2f6:	b10b      	cbz	r3, 800b2fc <_strtod_l+0x5ec>
 800b2f8:	4682      	mov	sl, r0
 800b2fa:	468b      	mov	fp, r1
 800b2fc:	9b04      	ldr	r3, [sp, #16]
 800b2fe:	b1c3      	cbz	r3, 800b332 <_strtod_l+0x622>
 800b300:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b304:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b308:	2b00      	cmp	r3, #0
 800b30a:	4659      	mov	r1, fp
 800b30c:	dd11      	ble.n	800b332 <_strtod_l+0x622>
 800b30e:	2b1f      	cmp	r3, #31
 800b310:	f340 8124 	ble.w	800b55c <_strtod_l+0x84c>
 800b314:	2b34      	cmp	r3, #52	; 0x34
 800b316:	bfde      	ittt	le
 800b318:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b31c:	f04f 33ff 	movle.w	r3, #4294967295
 800b320:	fa03 f202 	lslle.w	r2, r3, r2
 800b324:	f04f 0a00 	mov.w	sl, #0
 800b328:	bfcc      	ite	gt
 800b32a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b32e:	ea02 0b01 	andle.w	fp, r2, r1
 800b332:	2200      	movs	r2, #0
 800b334:	2300      	movs	r3, #0
 800b336:	4650      	mov	r0, sl
 800b338:	4659      	mov	r1, fp
 800b33a:	f7f5 fbf5 	bl	8000b28 <__aeabi_dcmpeq>
 800b33e:	2800      	cmp	r0, #0
 800b340:	d1a2      	bne.n	800b288 <_strtod_l+0x578>
 800b342:	9b07      	ldr	r3, [sp, #28]
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	9908      	ldr	r1, [sp, #32]
 800b348:	462b      	mov	r3, r5
 800b34a:	463a      	mov	r2, r7
 800b34c:	4620      	mov	r0, r4
 800b34e:	f001 fea3 	bl	800d098 <__s2b>
 800b352:	9007      	str	r0, [sp, #28]
 800b354:	2800      	cmp	r0, #0
 800b356:	f43f af1f 	beq.w	800b198 <_strtod_l+0x488>
 800b35a:	9b05      	ldr	r3, [sp, #20]
 800b35c:	1b9e      	subs	r6, r3, r6
 800b35e:	9b06      	ldr	r3, [sp, #24]
 800b360:	2b00      	cmp	r3, #0
 800b362:	bfb4      	ite	lt
 800b364:	4633      	movlt	r3, r6
 800b366:	2300      	movge	r3, #0
 800b368:	930c      	str	r3, [sp, #48]	; 0x30
 800b36a:	9b06      	ldr	r3, [sp, #24]
 800b36c:	2500      	movs	r5, #0
 800b36e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b372:	9312      	str	r3, [sp, #72]	; 0x48
 800b374:	462e      	mov	r6, r5
 800b376:	9b07      	ldr	r3, [sp, #28]
 800b378:	4620      	mov	r0, r4
 800b37a:	6859      	ldr	r1, [r3, #4]
 800b37c:	f001 fde4 	bl	800cf48 <_Balloc>
 800b380:	9005      	str	r0, [sp, #20]
 800b382:	2800      	cmp	r0, #0
 800b384:	f43f af0c 	beq.w	800b1a0 <_strtod_l+0x490>
 800b388:	9b07      	ldr	r3, [sp, #28]
 800b38a:	691a      	ldr	r2, [r3, #16]
 800b38c:	3202      	adds	r2, #2
 800b38e:	f103 010c 	add.w	r1, r3, #12
 800b392:	0092      	lsls	r2, r2, #2
 800b394:	300c      	adds	r0, #12
 800b396:	f7fe fe98 	bl	800a0ca <memcpy>
 800b39a:	ec4b ab10 	vmov	d0, sl, fp
 800b39e:	aa1a      	add	r2, sp, #104	; 0x68
 800b3a0:	a919      	add	r1, sp, #100	; 0x64
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f002 f9be 	bl	800d724 <__d2b>
 800b3a8:	ec4b ab18 	vmov	d8, sl, fp
 800b3ac:	9018      	str	r0, [sp, #96]	; 0x60
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	f43f aef6 	beq.w	800b1a0 <_strtod_l+0x490>
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f001 ff08 	bl	800d1cc <__i2b>
 800b3bc:	4606      	mov	r6, r0
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	f43f aeee 	beq.w	800b1a0 <_strtod_l+0x490>
 800b3c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3c6:	9904      	ldr	r1, [sp, #16]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	bfab      	itete	ge
 800b3cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b3ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b3d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b3d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b3d6:	bfac      	ite	ge
 800b3d8:	eb03 0902 	addge.w	r9, r3, r2
 800b3dc:	1ad7      	sublt	r7, r2, r3
 800b3de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b3e0:	eba3 0801 	sub.w	r8, r3, r1
 800b3e4:	4490      	add	r8, r2
 800b3e6:	4ba1      	ldr	r3, [pc, #644]	; (800b66c <_strtod_l+0x95c>)
 800b3e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3ec:	4598      	cmp	r8, r3
 800b3ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b3f2:	f280 80c7 	bge.w	800b584 <_strtod_l+0x874>
 800b3f6:	eba3 0308 	sub.w	r3, r3, r8
 800b3fa:	2b1f      	cmp	r3, #31
 800b3fc:	eba2 0203 	sub.w	r2, r2, r3
 800b400:	f04f 0101 	mov.w	r1, #1
 800b404:	f300 80b1 	bgt.w	800b56a <_strtod_l+0x85a>
 800b408:	fa01 f303 	lsl.w	r3, r1, r3
 800b40c:	930d      	str	r3, [sp, #52]	; 0x34
 800b40e:	2300      	movs	r3, #0
 800b410:	9308      	str	r3, [sp, #32]
 800b412:	eb09 0802 	add.w	r8, r9, r2
 800b416:	9b04      	ldr	r3, [sp, #16]
 800b418:	45c1      	cmp	r9, r8
 800b41a:	4417      	add	r7, r2
 800b41c:	441f      	add	r7, r3
 800b41e:	464b      	mov	r3, r9
 800b420:	bfa8      	it	ge
 800b422:	4643      	movge	r3, r8
 800b424:	42bb      	cmp	r3, r7
 800b426:	bfa8      	it	ge
 800b428:	463b      	movge	r3, r7
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	bfc2      	ittt	gt
 800b42e:	eba8 0803 	subgt.w	r8, r8, r3
 800b432:	1aff      	subgt	r7, r7, r3
 800b434:	eba9 0903 	subgt.w	r9, r9, r3
 800b438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	dd17      	ble.n	800b46e <_strtod_l+0x75e>
 800b43e:	4631      	mov	r1, r6
 800b440:	461a      	mov	r2, r3
 800b442:	4620      	mov	r0, r4
 800b444:	f001 ff82 	bl	800d34c <__pow5mult>
 800b448:	4606      	mov	r6, r0
 800b44a:	2800      	cmp	r0, #0
 800b44c:	f43f aea8 	beq.w	800b1a0 <_strtod_l+0x490>
 800b450:	4601      	mov	r1, r0
 800b452:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b454:	4620      	mov	r0, r4
 800b456:	f001 fecf 	bl	800d1f8 <__multiply>
 800b45a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b45c:	2800      	cmp	r0, #0
 800b45e:	f43f ae9f 	beq.w	800b1a0 <_strtod_l+0x490>
 800b462:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b464:	4620      	mov	r0, r4
 800b466:	f001 fdaf 	bl	800cfc8 <_Bfree>
 800b46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b46c:	9318      	str	r3, [sp, #96]	; 0x60
 800b46e:	f1b8 0f00 	cmp.w	r8, #0
 800b472:	f300 808c 	bgt.w	800b58e <_strtod_l+0x87e>
 800b476:	9b06      	ldr	r3, [sp, #24]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dd08      	ble.n	800b48e <_strtod_l+0x77e>
 800b47c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b47e:	9905      	ldr	r1, [sp, #20]
 800b480:	4620      	mov	r0, r4
 800b482:	f001 ff63 	bl	800d34c <__pow5mult>
 800b486:	9005      	str	r0, [sp, #20]
 800b488:	2800      	cmp	r0, #0
 800b48a:	f43f ae89 	beq.w	800b1a0 <_strtod_l+0x490>
 800b48e:	2f00      	cmp	r7, #0
 800b490:	dd08      	ble.n	800b4a4 <_strtod_l+0x794>
 800b492:	9905      	ldr	r1, [sp, #20]
 800b494:	463a      	mov	r2, r7
 800b496:	4620      	mov	r0, r4
 800b498:	f001 ffb2 	bl	800d400 <__lshift>
 800b49c:	9005      	str	r0, [sp, #20]
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	f43f ae7e 	beq.w	800b1a0 <_strtod_l+0x490>
 800b4a4:	f1b9 0f00 	cmp.w	r9, #0
 800b4a8:	dd08      	ble.n	800b4bc <_strtod_l+0x7ac>
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	464a      	mov	r2, r9
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f001 ffa6 	bl	800d400 <__lshift>
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	f43f ae72 	beq.w	800b1a0 <_strtod_l+0x490>
 800b4bc:	9a05      	ldr	r2, [sp, #20]
 800b4be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f002 f829 	bl	800d518 <__mdiff>
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	f43f ae69 	beq.w	800b1a0 <_strtod_l+0x490>
 800b4ce:	68c3      	ldr	r3, [r0, #12]
 800b4d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60c3      	str	r3, [r0, #12]
 800b4d6:	4631      	mov	r1, r6
 800b4d8:	f002 f802 	bl	800d4e0 <__mcmp>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	da60      	bge.n	800b5a2 <_strtod_l+0x892>
 800b4e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4e2:	ea53 030a 	orrs.w	r3, r3, sl
 800b4e6:	f040 8082 	bne.w	800b5ee <_strtod_l+0x8de>
 800b4ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d17d      	bne.n	800b5ee <_strtod_l+0x8de>
 800b4f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4f6:	0d1b      	lsrs	r3, r3, #20
 800b4f8:	051b      	lsls	r3, r3, #20
 800b4fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b4fe:	d976      	bls.n	800b5ee <_strtod_l+0x8de>
 800b500:	696b      	ldr	r3, [r5, #20]
 800b502:	b913      	cbnz	r3, 800b50a <_strtod_l+0x7fa>
 800b504:	692b      	ldr	r3, [r5, #16]
 800b506:	2b01      	cmp	r3, #1
 800b508:	dd71      	ble.n	800b5ee <_strtod_l+0x8de>
 800b50a:	4629      	mov	r1, r5
 800b50c:	2201      	movs	r2, #1
 800b50e:	4620      	mov	r0, r4
 800b510:	f001 ff76 	bl	800d400 <__lshift>
 800b514:	4631      	mov	r1, r6
 800b516:	4605      	mov	r5, r0
 800b518:	f001 ffe2 	bl	800d4e0 <__mcmp>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	dd66      	ble.n	800b5ee <_strtod_l+0x8de>
 800b520:	9904      	ldr	r1, [sp, #16]
 800b522:	4a53      	ldr	r2, [pc, #332]	; (800b670 <_strtod_l+0x960>)
 800b524:	465b      	mov	r3, fp
 800b526:	2900      	cmp	r1, #0
 800b528:	f000 8081 	beq.w	800b62e <_strtod_l+0x91e>
 800b52c:	ea02 010b 	and.w	r1, r2, fp
 800b530:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b534:	dc7b      	bgt.n	800b62e <_strtod_l+0x91e>
 800b536:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b53a:	f77f aea9 	ble.w	800b290 <_strtod_l+0x580>
 800b53e:	4b4d      	ldr	r3, [pc, #308]	; (800b674 <_strtod_l+0x964>)
 800b540:	4650      	mov	r0, sl
 800b542:	4659      	mov	r1, fp
 800b544:	2200      	movs	r2, #0
 800b546:	f7f5 f887 	bl	8000658 <__aeabi_dmul>
 800b54a:	460b      	mov	r3, r1
 800b54c:	4303      	orrs	r3, r0
 800b54e:	bf08      	it	eq
 800b550:	2322      	moveq	r3, #34	; 0x22
 800b552:	4682      	mov	sl, r0
 800b554:	468b      	mov	fp, r1
 800b556:	bf08      	it	eq
 800b558:	6023      	streq	r3, [r4, #0]
 800b55a:	e62b      	b.n	800b1b4 <_strtod_l+0x4a4>
 800b55c:	f04f 32ff 	mov.w	r2, #4294967295
 800b560:	fa02 f303 	lsl.w	r3, r2, r3
 800b564:	ea03 0a0a 	and.w	sl, r3, sl
 800b568:	e6e3      	b.n	800b332 <_strtod_l+0x622>
 800b56a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b56e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b572:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b576:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b57a:	fa01 f308 	lsl.w	r3, r1, r8
 800b57e:	9308      	str	r3, [sp, #32]
 800b580:	910d      	str	r1, [sp, #52]	; 0x34
 800b582:	e746      	b.n	800b412 <_strtod_l+0x702>
 800b584:	2300      	movs	r3, #0
 800b586:	9308      	str	r3, [sp, #32]
 800b588:	2301      	movs	r3, #1
 800b58a:	930d      	str	r3, [sp, #52]	; 0x34
 800b58c:	e741      	b.n	800b412 <_strtod_l+0x702>
 800b58e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b590:	4642      	mov	r2, r8
 800b592:	4620      	mov	r0, r4
 800b594:	f001 ff34 	bl	800d400 <__lshift>
 800b598:	9018      	str	r0, [sp, #96]	; 0x60
 800b59a:	2800      	cmp	r0, #0
 800b59c:	f47f af6b 	bne.w	800b476 <_strtod_l+0x766>
 800b5a0:	e5fe      	b.n	800b1a0 <_strtod_l+0x490>
 800b5a2:	465f      	mov	r7, fp
 800b5a4:	d16e      	bne.n	800b684 <_strtod_l+0x974>
 800b5a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5ac:	b342      	cbz	r2, 800b600 <_strtod_l+0x8f0>
 800b5ae:	4a32      	ldr	r2, [pc, #200]	; (800b678 <_strtod_l+0x968>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d128      	bne.n	800b606 <_strtod_l+0x8f6>
 800b5b4:	9b04      	ldr	r3, [sp, #16]
 800b5b6:	4651      	mov	r1, sl
 800b5b8:	b1eb      	cbz	r3, 800b5f6 <_strtod_l+0x8e6>
 800b5ba:	4b2d      	ldr	r3, [pc, #180]	; (800b670 <_strtod_l+0x960>)
 800b5bc:	403b      	ands	r3, r7
 800b5be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c6:	d819      	bhi.n	800b5fc <_strtod_l+0x8ec>
 800b5c8:	0d1b      	lsrs	r3, r3, #20
 800b5ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b5d2:	4299      	cmp	r1, r3
 800b5d4:	d117      	bne.n	800b606 <_strtod_l+0x8f6>
 800b5d6:	4b29      	ldr	r3, [pc, #164]	; (800b67c <_strtod_l+0x96c>)
 800b5d8:	429f      	cmp	r7, r3
 800b5da:	d102      	bne.n	800b5e2 <_strtod_l+0x8d2>
 800b5dc:	3101      	adds	r1, #1
 800b5de:	f43f addf 	beq.w	800b1a0 <_strtod_l+0x490>
 800b5e2:	4b23      	ldr	r3, [pc, #140]	; (800b670 <_strtod_l+0x960>)
 800b5e4:	403b      	ands	r3, r7
 800b5e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b5ea:	f04f 0a00 	mov.w	sl, #0
 800b5ee:	9b04      	ldr	r3, [sp, #16]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1a4      	bne.n	800b53e <_strtod_l+0x82e>
 800b5f4:	e5de      	b.n	800b1b4 <_strtod_l+0x4a4>
 800b5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5fa:	e7ea      	b.n	800b5d2 <_strtod_l+0x8c2>
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	e7e8      	b.n	800b5d2 <_strtod_l+0x8c2>
 800b600:	ea53 030a 	orrs.w	r3, r3, sl
 800b604:	d08c      	beq.n	800b520 <_strtod_l+0x810>
 800b606:	9b08      	ldr	r3, [sp, #32]
 800b608:	b1db      	cbz	r3, 800b642 <_strtod_l+0x932>
 800b60a:	423b      	tst	r3, r7
 800b60c:	d0ef      	beq.n	800b5ee <_strtod_l+0x8de>
 800b60e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b610:	9a04      	ldr	r2, [sp, #16]
 800b612:	4650      	mov	r0, sl
 800b614:	4659      	mov	r1, fp
 800b616:	b1c3      	cbz	r3, 800b64a <_strtod_l+0x93a>
 800b618:	f7ff fb5d 	bl	800acd6 <sulp>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	ec51 0b18 	vmov	r0, r1, d8
 800b624:	f7f4 fe62 	bl	80002ec <__adddf3>
 800b628:	4682      	mov	sl, r0
 800b62a:	468b      	mov	fp, r1
 800b62c:	e7df      	b.n	800b5ee <_strtod_l+0x8de>
 800b62e:	4013      	ands	r3, r2
 800b630:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b634:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b638:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b63c:	f04f 3aff 	mov.w	sl, #4294967295
 800b640:	e7d5      	b.n	800b5ee <_strtod_l+0x8de>
 800b642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b644:	ea13 0f0a 	tst.w	r3, sl
 800b648:	e7e0      	b.n	800b60c <_strtod_l+0x8fc>
 800b64a:	f7ff fb44 	bl	800acd6 <sulp>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	ec51 0b18 	vmov	r0, r1, d8
 800b656:	f7f4 fe47 	bl	80002e8 <__aeabi_dsub>
 800b65a:	2200      	movs	r2, #0
 800b65c:	2300      	movs	r3, #0
 800b65e:	4682      	mov	sl, r0
 800b660:	468b      	mov	fp, r1
 800b662:	f7f5 fa61 	bl	8000b28 <__aeabi_dcmpeq>
 800b666:	2800      	cmp	r0, #0
 800b668:	d0c1      	beq.n	800b5ee <_strtod_l+0x8de>
 800b66a:	e611      	b.n	800b290 <_strtod_l+0x580>
 800b66c:	fffffc02 	.word	0xfffffc02
 800b670:	7ff00000 	.word	0x7ff00000
 800b674:	39500000 	.word	0x39500000
 800b678:	000fffff 	.word	0x000fffff
 800b67c:	7fefffff 	.word	0x7fefffff
 800b680:	0800e570 	.word	0x0800e570
 800b684:	4631      	mov	r1, r6
 800b686:	4628      	mov	r0, r5
 800b688:	f002 f8a8 	bl	800d7dc <__ratio>
 800b68c:	ec59 8b10 	vmov	r8, r9, d0
 800b690:	ee10 0a10 	vmov	r0, s0
 800b694:	2200      	movs	r2, #0
 800b696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b69a:	4649      	mov	r1, r9
 800b69c:	f7f5 fa58 	bl	8000b50 <__aeabi_dcmple>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d07a      	beq.n	800b79a <_strtod_l+0xa8a>
 800b6a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d04a      	beq.n	800b740 <_strtod_l+0xa30>
 800b6aa:	4b95      	ldr	r3, [pc, #596]	; (800b900 <_strtod_l+0xbf0>)
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b6b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b900 <_strtod_l+0xbf0>
 800b6b6:	f04f 0800 	mov.w	r8, #0
 800b6ba:	4b92      	ldr	r3, [pc, #584]	; (800b904 <_strtod_l+0xbf4>)
 800b6bc:	403b      	ands	r3, r7
 800b6be:	930d      	str	r3, [sp, #52]	; 0x34
 800b6c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6c2:	4b91      	ldr	r3, [pc, #580]	; (800b908 <_strtod_l+0xbf8>)
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	f040 80b0 	bne.w	800b82a <_strtod_l+0xb1a>
 800b6ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b6d2:	ec4b ab10 	vmov	d0, sl, fp
 800b6d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b6da:	f001 ffa7 	bl	800d62c <__ulp>
 800b6de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6e2:	ec53 2b10 	vmov	r2, r3, d0
 800b6e6:	f7f4 ffb7 	bl	8000658 <__aeabi_dmul>
 800b6ea:	4652      	mov	r2, sl
 800b6ec:	465b      	mov	r3, fp
 800b6ee:	f7f4 fdfd 	bl	80002ec <__adddf3>
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4983      	ldr	r1, [pc, #524]	; (800b904 <_strtod_l+0xbf4>)
 800b6f6:	4a85      	ldr	r2, [pc, #532]	; (800b90c <_strtod_l+0xbfc>)
 800b6f8:	4019      	ands	r1, r3
 800b6fa:	4291      	cmp	r1, r2
 800b6fc:	4682      	mov	sl, r0
 800b6fe:	d960      	bls.n	800b7c2 <_strtod_l+0xab2>
 800b700:	ee18 3a90 	vmov	r3, s17
 800b704:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b708:	4293      	cmp	r3, r2
 800b70a:	d104      	bne.n	800b716 <_strtod_l+0xa06>
 800b70c:	ee18 3a10 	vmov	r3, s16
 800b710:	3301      	adds	r3, #1
 800b712:	f43f ad45 	beq.w	800b1a0 <_strtod_l+0x490>
 800b716:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b918 <_strtod_l+0xc08>
 800b71a:	f04f 3aff 	mov.w	sl, #4294967295
 800b71e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b720:	4620      	mov	r0, r4
 800b722:	f001 fc51 	bl	800cfc8 <_Bfree>
 800b726:	9905      	ldr	r1, [sp, #20]
 800b728:	4620      	mov	r0, r4
 800b72a:	f001 fc4d 	bl	800cfc8 <_Bfree>
 800b72e:	4631      	mov	r1, r6
 800b730:	4620      	mov	r0, r4
 800b732:	f001 fc49 	bl	800cfc8 <_Bfree>
 800b736:	4629      	mov	r1, r5
 800b738:	4620      	mov	r0, r4
 800b73a:	f001 fc45 	bl	800cfc8 <_Bfree>
 800b73e:	e61a      	b.n	800b376 <_strtod_l+0x666>
 800b740:	f1ba 0f00 	cmp.w	sl, #0
 800b744:	d11b      	bne.n	800b77e <_strtod_l+0xa6e>
 800b746:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b74a:	b9f3      	cbnz	r3, 800b78a <_strtod_l+0xa7a>
 800b74c:	4b6c      	ldr	r3, [pc, #432]	; (800b900 <_strtod_l+0xbf0>)
 800b74e:	2200      	movs	r2, #0
 800b750:	4640      	mov	r0, r8
 800b752:	4649      	mov	r1, r9
 800b754:	f7f5 f9f2 	bl	8000b3c <__aeabi_dcmplt>
 800b758:	b9d0      	cbnz	r0, 800b790 <_strtod_l+0xa80>
 800b75a:	4640      	mov	r0, r8
 800b75c:	4649      	mov	r1, r9
 800b75e:	4b6c      	ldr	r3, [pc, #432]	; (800b910 <_strtod_l+0xc00>)
 800b760:	2200      	movs	r2, #0
 800b762:	f7f4 ff79 	bl	8000658 <__aeabi_dmul>
 800b766:	4680      	mov	r8, r0
 800b768:	4689      	mov	r9, r1
 800b76a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b76e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b772:	9315      	str	r3, [sp, #84]	; 0x54
 800b774:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b778:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b77c:	e79d      	b.n	800b6ba <_strtod_l+0x9aa>
 800b77e:	f1ba 0f01 	cmp.w	sl, #1
 800b782:	d102      	bne.n	800b78a <_strtod_l+0xa7a>
 800b784:	2f00      	cmp	r7, #0
 800b786:	f43f ad83 	beq.w	800b290 <_strtod_l+0x580>
 800b78a:	4b62      	ldr	r3, [pc, #392]	; (800b914 <_strtod_l+0xc04>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	e78e      	b.n	800b6ae <_strtod_l+0x99e>
 800b790:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b910 <_strtod_l+0xc00>
 800b794:	f04f 0800 	mov.w	r8, #0
 800b798:	e7e7      	b.n	800b76a <_strtod_l+0xa5a>
 800b79a:	4b5d      	ldr	r3, [pc, #372]	; (800b910 <_strtod_l+0xc00>)
 800b79c:	4640      	mov	r0, r8
 800b79e:	4649      	mov	r1, r9
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f7f4 ff59 	bl	8000658 <__aeabi_dmul>
 800b7a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7a8:	4680      	mov	r8, r0
 800b7aa:	4689      	mov	r9, r1
 800b7ac:	b933      	cbnz	r3, 800b7bc <_strtod_l+0xaac>
 800b7ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7b2:	900e      	str	r0, [sp, #56]	; 0x38
 800b7b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b7ba:	e7dd      	b.n	800b778 <_strtod_l+0xa68>
 800b7bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b7c0:	e7f9      	b.n	800b7b6 <_strtod_l+0xaa6>
 800b7c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b7c6:	9b04      	ldr	r3, [sp, #16]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1a8      	bne.n	800b71e <_strtod_l+0xa0e>
 800b7cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b7d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7d2:	0d1b      	lsrs	r3, r3, #20
 800b7d4:	051b      	lsls	r3, r3, #20
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d1a1      	bne.n	800b71e <_strtod_l+0xa0e>
 800b7da:	4640      	mov	r0, r8
 800b7dc:	4649      	mov	r1, r9
 800b7de:	f7f5 fa9b 	bl	8000d18 <__aeabi_d2lz>
 800b7e2:	f7f4 ff0b 	bl	80005fc <__aeabi_l2d>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	f7f4 fd7b 	bl	80002e8 <__aeabi_dsub>
 800b7f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7f8:	ea43 030a 	orr.w	r3, r3, sl
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	4680      	mov	r8, r0
 800b800:	4689      	mov	r9, r1
 800b802:	d055      	beq.n	800b8b0 <_strtod_l+0xba0>
 800b804:	a336      	add	r3, pc, #216	; (adr r3, 800b8e0 <_strtod_l+0xbd0>)
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	f7f5 f997 	bl	8000b3c <__aeabi_dcmplt>
 800b80e:	2800      	cmp	r0, #0
 800b810:	f47f acd0 	bne.w	800b1b4 <_strtod_l+0x4a4>
 800b814:	a334      	add	r3, pc, #208	; (adr r3, 800b8e8 <_strtod_l+0xbd8>)
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	4640      	mov	r0, r8
 800b81c:	4649      	mov	r1, r9
 800b81e:	f7f5 f9ab 	bl	8000b78 <__aeabi_dcmpgt>
 800b822:	2800      	cmp	r0, #0
 800b824:	f43f af7b 	beq.w	800b71e <_strtod_l+0xa0e>
 800b828:	e4c4      	b.n	800b1b4 <_strtod_l+0x4a4>
 800b82a:	9b04      	ldr	r3, [sp, #16]
 800b82c:	b333      	cbz	r3, 800b87c <_strtod_l+0xb6c>
 800b82e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b830:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b834:	d822      	bhi.n	800b87c <_strtod_l+0xb6c>
 800b836:	a32e      	add	r3, pc, #184	; (adr r3, 800b8f0 <_strtod_l+0xbe0>)
 800b838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	f7f5 f986 	bl	8000b50 <__aeabi_dcmple>
 800b844:	b1a0      	cbz	r0, 800b870 <_strtod_l+0xb60>
 800b846:	4649      	mov	r1, r9
 800b848:	4640      	mov	r0, r8
 800b84a:	f7f5 f9dd 	bl	8000c08 <__aeabi_d2uiz>
 800b84e:	2801      	cmp	r0, #1
 800b850:	bf38      	it	cc
 800b852:	2001      	movcc	r0, #1
 800b854:	f7f4 fe86 	bl	8000564 <__aeabi_ui2d>
 800b858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b85a:	4680      	mov	r8, r0
 800b85c:	4689      	mov	r9, r1
 800b85e:	bb23      	cbnz	r3, 800b8aa <_strtod_l+0xb9a>
 800b860:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b864:	9010      	str	r0, [sp, #64]	; 0x40
 800b866:	9311      	str	r3, [sp, #68]	; 0x44
 800b868:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b86c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b872:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b874:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b878:	1a9b      	subs	r3, r3, r2
 800b87a:	9309      	str	r3, [sp, #36]	; 0x24
 800b87c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b880:	eeb0 0a48 	vmov.f32	s0, s16
 800b884:	eef0 0a68 	vmov.f32	s1, s17
 800b888:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b88c:	f001 fece 	bl	800d62c <__ulp>
 800b890:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b894:	ec53 2b10 	vmov	r2, r3, d0
 800b898:	f7f4 fede 	bl	8000658 <__aeabi_dmul>
 800b89c:	ec53 2b18 	vmov	r2, r3, d8
 800b8a0:	f7f4 fd24 	bl	80002ec <__adddf3>
 800b8a4:	4682      	mov	sl, r0
 800b8a6:	468b      	mov	fp, r1
 800b8a8:	e78d      	b.n	800b7c6 <_strtod_l+0xab6>
 800b8aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b8ae:	e7db      	b.n	800b868 <_strtod_l+0xb58>
 800b8b0:	a311      	add	r3, pc, #68	; (adr r3, 800b8f8 <_strtod_l+0xbe8>)
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	f7f5 f941 	bl	8000b3c <__aeabi_dcmplt>
 800b8ba:	e7b2      	b.n	800b822 <_strtod_l+0xb12>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	930a      	str	r3, [sp, #40]	; 0x28
 800b8c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8c4:	6013      	str	r3, [r2, #0]
 800b8c6:	f7ff ba6b 	b.w	800ada0 <_strtod_l+0x90>
 800b8ca:	2a65      	cmp	r2, #101	; 0x65
 800b8cc:	f43f ab5f 	beq.w	800af8e <_strtod_l+0x27e>
 800b8d0:	2a45      	cmp	r2, #69	; 0x45
 800b8d2:	f43f ab5c 	beq.w	800af8e <_strtod_l+0x27e>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	f7ff bb94 	b.w	800b004 <_strtod_l+0x2f4>
 800b8dc:	f3af 8000 	nop.w
 800b8e0:	94a03595 	.word	0x94a03595
 800b8e4:	3fdfffff 	.word	0x3fdfffff
 800b8e8:	35afe535 	.word	0x35afe535
 800b8ec:	3fe00000 	.word	0x3fe00000
 800b8f0:	ffc00000 	.word	0xffc00000
 800b8f4:	41dfffff 	.word	0x41dfffff
 800b8f8:	94a03595 	.word	0x94a03595
 800b8fc:	3fcfffff 	.word	0x3fcfffff
 800b900:	3ff00000 	.word	0x3ff00000
 800b904:	7ff00000 	.word	0x7ff00000
 800b908:	7fe00000 	.word	0x7fe00000
 800b90c:	7c9fffff 	.word	0x7c9fffff
 800b910:	3fe00000 	.word	0x3fe00000
 800b914:	bff00000 	.word	0xbff00000
 800b918:	7fefffff 	.word	0x7fefffff

0800b91c <strtod>:
 800b91c:	460a      	mov	r2, r1
 800b91e:	4601      	mov	r1, r0
 800b920:	4802      	ldr	r0, [pc, #8]	; (800b92c <strtod+0x10>)
 800b922:	4b03      	ldr	r3, [pc, #12]	; (800b930 <strtod+0x14>)
 800b924:	6800      	ldr	r0, [r0, #0]
 800b926:	f7ff b9f3 	b.w	800ad10 <_strtod_l>
 800b92a:	bf00      	nop
 800b92c:	20000044 	.word	0x20000044
 800b930:	200000ac 	.word	0x200000ac

0800b934 <_write_r>:
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	4d07      	ldr	r5, [pc, #28]	; (800b954 <_write_r+0x20>)
 800b938:	4604      	mov	r4, r0
 800b93a:	4608      	mov	r0, r1
 800b93c:	4611      	mov	r1, r2
 800b93e:	2200      	movs	r2, #0
 800b940:	602a      	str	r2, [r5, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	f7f7 fc3d 	bl	80031c2 <_write>
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	d102      	bne.n	800b952 <_write_r+0x1e>
 800b94c:	682b      	ldr	r3, [r5, #0]
 800b94e:	b103      	cbz	r3, 800b952 <_write_r+0x1e>
 800b950:	6023      	str	r3, [r4, #0]
 800b952:	bd38      	pop	{r3, r4, r5, pc}
 800b954:	2000472c 	.word	0x2000472c

0800b958 <_close_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d06      	ldr	r5, [pc, #24]	; (800b974 <_close_r+0x1c>)
 800b95c:	2300      	movs	r3, #0
 800b95e:	4604      	mov	r4, r0
 800b960:	4608      	mov	r0, r1
 800b962:	602b      	str	r3, [r5, #0]
 800b964:	f7f7 fc49 	bl	80031fa <_close>
 800b968:	1c43      	adds	r3, r0, #1
 800b96a:	d102      	bne.n	800b972 <_close_r+0x1a>
 800b96c:	682b      	ldr	r3, [r5, #0]
 800b96e:	b103      	cbz	r3, 800b972 <_close_r+0x1a>
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	bd38      	pop	{r3, r4, r5, pc}
 800b974:	2000472c 	.word	0x2000472c

0800b978 <quorem>:
 800b978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97c:	6903      	ldr	r3, [r0, #16]
 800b97e:	690c      	ldr	r4, [r1, #16]
 800b980:	42a3      	cmp	r3, r4
 800b982:	4607      	mov	r7, r0
 800b984:	f2c0 8081 	blt.w	800ba8a <quorem+0x112>
 800b988:	3c01      	subs	r4, #1
 800b98a:	f101 0814 	add.w	r8, r1, #20
 800b98e:	f100 0514 	add.w	r5, r0, #20
 800b992:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b996:	9301      	str	r3, [sp, #4]
 800b998:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b99c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b9a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9b0:	d331      	bcc.n	800ba16 <quorem+0x9e>
 800b9b2:	f04f 0e00 	mov.w	lr, #0
 800b9b6:	4640      	mov	r0, r8
 800b9b8:	46ac      	mov	ip, r5
 800b9ba:	46f2      	mov	sl, lr
 800b9bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800b9c0:	b293      	uxth	r3, r2
 800b9c2:	fb06 e303 	mla	r3, r6, r3, lr
 800b9c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	ebaa 0303 	sub.w	r3, sl, r3
 800b9d0:	f8dc a000 	ldr.w	sl, [ip]
 800b9d4:	0c12      	lsrs	r2, r2, #16
 800b9d6:	fa13 f38a 	uxtah	r3, r3, sl
 800b9da:	fb06 e202 	mla	r2, r6, r2, lr
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	9b00      	ldr	r3, [sp, #0]
 800b9e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b9e6:	b292      	uxth	r2, r2
 800b9e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b9ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9f0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b9f4:	4581      	cmp	r9, r0
 800b9f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9fa:	f84c 3b04 	str.w	r3, [ip], #4
 800b9fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ba02:	d2db      	bcs.n	800b9bc <quorem+0x44>
 800ba04:	f855 300b 	ldr.w	r3, [r5, fp]
 800ba08:	b92b      	cbnz	r3, 800ba16 <quorem+0x9e>
 800ba0a:	9b01      	ldr	r3, [sp, #4]
 800ba0c:	3b04      	subs	r3, #4
 800ba0e:	429d      	cmp	r5, r3
 800ba10:	461a      	mov	r2, r3
 800ba12:	d32e      	bcc.n	800ba72 <quorem+0xfa>
 800ba14:	613c      	str	r4, [r7, #16]
 800ba16:	4638      	mov	r0, r7
 800ba18:	f001 fd62 	bl	800d4e0 <__mcmp>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	db24      	blt.n	800ba6a <quorem+0xf2>
 800ba20:	3601      	adds	r6, #1
 800ba22:	4628      	mov	r0, r5
 800ba24:	f04f 0c00 	mov.w	ip, #0
 800ba28:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba2c:	f8d0 e000 	ldr.w	lr, [r0]
 800ba30:	b293      	uxth	r3, r2
 800ba32:	ebac 0303 	sub.w	r3, ip, r3
 800ba36:	0c12      	lsrs	r2, r2, #16
 800ba38:	fa13 f38e 	uxtah	r3, r3, lr
 800ba3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba4a:	45c1      	cmp	r9, r8
 800ba4c:	f840 3b04 	str.w	r3, [r0], #4
 800ba50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba54:	d2e8      	bcs.n	800ba28 <quorem+0xb0>
 800ba56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba5e:	b922      	cbnz	r2, 800ba6a <quorem+0xf2>
 800ba60:	3b04      	subs	r3, #4
 800ba62:	429d      	cmp	r5, r3
 800ba64:	461a      	mov	r2, r3
 800ba66:	d30a      	bcc.n	800ba7e <quorem+0x106>
 800ba68:	613c      	str	r4, [r7, #16]
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	b003      	add	sp, #12
 800ba6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba72:	6812      	ldr	r2, [r2, #0]
 800ba74:	3b04      	subs	r3, #4
 800ba76:	2a00      	cmp	r2, #0
 800ba78:	d1cc      	bne.n	800ba14 <quorem+0x9c>
 800ba7a:	3c01      	subs	r4, #1
 800ba7c:	e7c7      	b.n	800ba0e <quorem+0x96>
 800ba7e:	6812      	ldr	r2, [r2, #0]
 800ba80:	3b04      	subs	r3, #4
 800ba82:	2a00      	cmp	r2, #0
 800ba84:	d1f0      	bne.n	800ba68 <quorem+0xf0>
 800ba86:	3c01      	subs	r4, #1
 800ba88:	e7eb      	b.n	800ba62 <quorem+0xea>
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	e7ee      	b.n	800ba6c <quorem+0xf4>
	...

0800ba90 <_dtoa_r>:
 800ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba94:	ed2d 8b04 	vpush	{d8-d9}
 800ba98:	ec57 6b10 	vmov	r6, r7, d0
 800ba9c:	b093      	sub	sp, #76	; 0x4c
 800ba9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800baa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800baa4:	9106      	str	r1, [sp, #24]
 800baa6:	ee10 aa10 	vmov	sl, s0
 800baaa:	4604      	mov	r4, r0
 800baac:	9209      	str	r2, [sp, #36]	; 0x24
 800baae:	930c      	str	r3, [sp, #48]	; 0x30
 800bab0:	46bb      	mov	fp, r7
 800bab2:	b975      	cbnz	r5, 800bad2 <_dtoa_r+0x42>
 800bab4:	2010      	movs	r0, #16
 800bab6:	f001 fa21 	bl	800cefc <malloc>
 800baba:	4602      	mov	r2, r0
 800babc:	6260      	str	r0, [r4, #36]	; 0x24
 800babe:	b920      	cbnz	r0, 800baca <_dtoa_r+0x3a>
 800bac0:	4ba7      	ldr	r3, [pc, #668]	; (800bd60 <_dtoa_r+0x2d0>)
 800bac2:	21ea      	movs	r1, #234	; 0xea
 800bac4:	48a7      	ldr	r0, [pc, #668]	; (800bd64 <_dtoa_r+0x2d4>)
 800bac6:	f002 fb15 	bl	800e0f4 <__assert_func>
 800baca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bace:	6005      	str	r5, [r0, #0]
 800bad0:	60c5      	str	r5, [r0, #12]
 800bad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bad4:	6819      	ldr	r1, [r3, #0]
 800bad6:	b151      	cbz	r1, 800baee <_dtoa_r+0x5e>
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	604a      	str	r2, [r1, #4]
 800badc:	2301      	movs	r3, #1
 800bade:	4093      	lsls	r3, r2
 800bae0:	608b      	str	r3, [r1, #8]
 800bae2:	4620      	mov	r0, r4
 800bae4:	f001 fa70 	bl	800cfc8 <_Bfree>
 800bae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baea:	2200      	movs	r2, #0
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	1e3b      	subs	r3, r7, #0
 800baf0:	bfaa      	itet	ge
 800baf2:	2300      	movge	r3, #0
 800baf4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800baf8:	f8c8 3000 	strge.w	r3, [r8]
 800bafc:	4b9a      	ldr	r3, [pc, #616]	; (800bd68 <_dtoa_r+0x2d8>)
 800bafe:	bfbc      	itt	lt
 800bb00:	2201      	movlt	r2, #1
 800bb02:	f8c8 2000 	strlt.w	r2, [r8]
 800bb06:	ea33 030b 	bics.w	r3, r3, fp
 800bb0a:	d11b      	bne.n	800bb44 <_dtoa_r+0xb4>
 800bb0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb0e:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb12:	6013      	str	r3, [r2, #0]
 800bb14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb18:	4333      	orrs	r3, r6
 800bb1a:	f000 8592 	beq.w	800c642 <_dtoa_r+0xbb2>
 800bb1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb20:	b963      	cbnz	r3, 800bb3c <_dtoa_r+0xac>
 800bb22:	4b92      	ldr	r3, [pc, #584]	; (800bd6c <_dtoa_r+0x2dc>)
 800bb24:	e022      	b.n	800bb6c <_dtoa_r+0xdc>
 800bb26:	4b92      	ldr	r3, [pc, #584]	; (800bd70 <_dtoa_r+0x2e0>)
 800bb28:	9301      	str	r3, [sp, #4]
 800bb2a:	3308      	adds	r3, #8
 800bb2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb2e:	6013      	str	r3, [r2, #0]
 800bb30:	9801      	ldr	r0, [sp, #4]
 800bb32:	b013      	add	sp, #76	; 0x4c
 800bb34:	ecbd 8b04 	vpop	{d8-d9}
 800bb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3c:	4b8b      	ldr	r3, [pc, #556]	; (800bd6c <_dtoa_r+0x2dc>)
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	3303      	adds	r3, #3
 800bb42:	e7f3      	b.n	800bb2c <_dtoa_r+0x9c>
 800bb44:	2200      	movs	r2, #0
 800bb46:	2300      	movs	r3, #0
 800bb48:	4650      	mov	r0, sl
 800bb4a:	4659      	mov	r1, fp
 800bb4c:	f7f4 ffec 	bl	8000b28 <__aeabi_dcmpeq>
 800bb50:	ec4b ab19 	vmov	d9, sl, fp
 800bb54:	4680      	mov	r8, r0
 800bb56:	b158      	cbz	r0, 800bb70 <_dtoa_r+0xe0>
 800bb58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	6013      	str	r3, [r2, #0]
 800bb5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 856b 	beq.w	800c63c <_dtoa_r+0xbac>
 800bb66:	4883      	ldr	r0, [pc, #524]	; (800bd74 <_dtoa_r+0x2e4>)
 800bb68:	6018      	str	r0, [r3, #0]
 800bb6a:	1e43      	subs	r3, r0, #1
 800bb6c:	9301      	str	r3, [sp, #4]
 800bb6e:	e7df      	b.n	800bb30 <_dtoa_r+0xa0>
 800bb70:	ec4b ab10 	vmov	d0, sl, fp
 800bb74:	aa10      	add	r2, sp, #64	; 0x40
 800bb76:	a911      	add	r1, sp, #68	; 0x44
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f001 fdd3 	bl	800d724 <__d2b>
 800bb7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bb82:	ee08 0a10 	vmov	s16, r0
 800bb86:	2d00      	cmp	r5, #0
 800bb88:	f000 8084 	beq.w	800bc94 <_dtoa_r+0x204>
 800bb8c:	ee19 3a90 	vmov	r3, s19
 800bb90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bb98:	4656      	mov	r6, sl
 800bb9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bb9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bba2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bba6:	4b74      	ldr	r3, [pc, #464]	; (800bd78 <_dtoa_r+0x2e8>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	4630      	mov	r0, r6
 800bbac:	4639      	mov	r1, r7
 800bbae:	f7f4 fb9b 	bl	80002e8 <__aeabi_dsub>
 800bbb2:	a365      	add	r3, pc, #404	; (adr r3, 800bd48 <_dtoa_r+0x2b8>)
 800bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb8:	f7f4 fd4e 	bl	8000658 <__aeabi_dmul>
 800bbbc:	a364      	add	r3, pc, #400	; (adr r3, 800bd50 <_dtoa_r+0x2c0>)
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	f7f4 fb93 	bl	80002ec <__adddf3>
 800bbc6:	4606      	mov	r6, r0
 800bbc8:	4628      	mov	r0, r5
 800bbca:	460f      	mov	r7, r1
 800bbcc:	f7f4 fcda 	bl	8000584 <__aeabi_i2d>
 800bbd0:	a361      	add	r3, pc, #388	; (adr r3, 800bd58 <_dtoa_r+0x2c8>)
 800bbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd6:	f7f4 fd3f 	bl	8000658 <__aeabi_dmul>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	460b      	mov	r3, r1
 800bbde:	4630      	mov	r0, r6
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	f7f4 fb83 	bl	80002ec <__adddf3>
 800bbe6:	4606      	mov	r6, r0
 800bbe8:	460f      	mov	r7, r1
 800bbea:	f7f4 ffe5 	bl	8000bb8 <__aeabi_d2iz>
 800bbee:	2200      	movs	r2, #0
 800bbf0:	9000      	str	r0, [sp, #0]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	f7f4 ffa0 	bl	8000b3c <__aeabi_dcmplt>
 800bbfc:	b150      	cbz	r0, 800bc14 <_dtoa_r+0x184>
 800bbfe:	9800      	ldr	r0, [sp, #0]
 800bc00:	f7f4 fcc0 	bl	8000584 <__aeabi_i2d>
 800bc04:	4632      	mov	r2, r6
 800bc06:	463b      	mov	r3, r7
 800bc08:	f7f4 ff8e 	bl	8000b28 <__aeabi_dcmpeq>
 800bc0c:	b910      	cbnz	r0, 800bc14 <_dtoa_r+0x184>
 800bc0e:	9b00      	ldr	r3, [sp, #0]
 800bc10:	3b01      	subs	r3, #1
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	9b00      	ldr	r3, [sp, #0]
 800bc16:	2b16      	cmp	r3, #22
 800bc18:	d85a      	bhi.n	800bcd0 <_dtoa_r+0x240>
 800bc1a:	9a00      	ldr	r2, [sp, #0]
 800bc1c:	4b57      	ldr	r3, [pc, #348]	; (800bd7c <_dtoa_r+0x2ec>)
 800bc1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc26:	ec51 0b19 	vmov	r0, r1, d9
 800bc2a:	f7f4 ff87 	bl	8000b3c <__aeabi_dcmplt>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	d050      	beq.n	800bcd4 <_dtoa_r+0x244>
 800bc32:	9b00      	ldr	r3, [sp, #0]
 800bc34:	3b01      	subs	r3, #1
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	2300      	movs	r3, #0
 800bc3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc3e:	1b5d      	subs	r5, r3, r5
 800bc40:	1e6b      	subs	r3, r5, #1
 800bc42:	9305      	str	r3, [sp, #20]
 800bc44:	bf45      	ittet	mi
 800bc46:	f1c5 0301 	rsbmi	r3, r5, #1
 800bc4a:	9304      	strmi	r3, [sp, #16]
 800bc4c:	2300      	movpl	r3, #0
 800bc4e:	2300      	movmi	r3, #0
 800bc50:	bf4c      	ite	mi
 800bc52:	9305      	strmi	r3, [sp, #20]
 800bc54:	9304      	strpl	r3, [sp, #16]
 800bc56:	9b00      	ldr	r3, [sp, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	db3d      	blt.n	800bcd8 <_dtoa_r+0x248>
 800bc5c:	9b05      	ldr	r3, [sp, #20]
 800bc5e:	9a00      	ldr	r2, [sp, #0]
 800bc60:	920a      	str	r2, [sp, #40]	; 0x28
 800bc62:	4413      	add	r3, r2
 800bc64:	9305      	str	r3, [sp, #20]
 800bc66:	2300      	movs	r3, #0
 800bc68:	9307      	str	r3, [sp, #28]
 800bc6a:	9b06      	ldr	r3, [sp, #24]
 800bc6c:	2b09      	cmp	r3, #9
 800bc6e:	f200 8089 	bhi.w	800bd84 <_dtoa_r+0x2f4>
 800bc72:	2b05      	cmp	r3, #5
 800bc74:	bfc4      	itt	gt
 800bc76:	3b04      	subgt	r3, #4
 800bc78:	9306      	strgt	r3, [sp, #24]
 800bc7a:	9b06      	ldr	r3, [sp, #24]
 800bc7c:	f1a3 0302 	sub.w	r3, r3, #2
 800bc80:	bfcc      	ite	gt
 800bc82:	2500      	movgt	r5, #0
 800bc84:	2501      	movle	r5, #1
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	f200 8087 	bhi.w	800bd9a <_dtoa_r+0x30a>
 800bc8c:	e8df f003 	tbb	[pc, r3]
 800bc90:	59383a2d 	.word	0x59383a2d
 800bc94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bc98:	441d      	add	r5, r3
 800bc9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bc9e:	2b20      	cmp	r3, #32
 800bca0:	bfc1      	itttt	gt
 800bca2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bca6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bcaa:	fa0b f303 	lslgt.w	r3, fp, r3
 800bcae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bcb2:	bfda      	itte	le
 800bcb4:	f1c3 0320 	rsble	r3, r3, #32
 800bcb8:	fa06 f003 	lslle.w	r0, r6, r3
 800bcbc:	4318      	orrgt	r0, r3
 800bcbe:	f7f4 fc51 	bl	8000564 <__aeabi_ui2d>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4606      	mov	r6, r0
 800bcc6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bcca:	3d01      	subs	r5, #1
 800bccc:	930e      	str	r3, [sp, #56]	; 0x38
 800bcce:	e76a      	b.n	800bba6 <_dtoa_r+0x116>
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e7b2      	b.n	800bc3a <_dtoa_r+0x1aa>
 800bcd4:	900b      	str	r0, [sp, #44]	; 0x2c
 800bcd6:	e7b1      	b.n	800bc3c <_dtoa_r+0x1ac>
 800bcd8:	9b04      	ldr	r3, [sp, #16]
 800bcda:	9a00      	ldr	r2, [sp, #0]
 800bcdc:	1a9b      	subs	r3, r3, r2
 800bcde:	9304      	str	r3, [sp, #16]
 800bce0:	4253      	negs	r3, r2
 800bce2:	9307      	str	r3, [sp, #28]
 800bce4:	2300      	movs	r3, #0
 800bce6:	930a      	str	r3, [sp, #40]	; 0x28
 800bce8:	e7bf      	b.n	800bc6a <_dtoa_r+0x1da>
 800bcea:	2300      	movs	r3, #0
 800bcec:	9308      	str	r3, [sp, #32]
 800bcee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	dc55      	bgt.n	800bda0 <_dtoa_r+0x310>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcfe:	e00c      	b.n	800bd1a <_dtoa_r+0x28a>
 800bd00:	2301      	movs	r3, #1
 800bd02:	e7f3      	b.n	800bcec <_dtoa_r+0x25c>
 800bd04:	2300      	movs	r3, #0
 800bd06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd08:	9308      	str	r3, [sp, #32]
 800bd0a:	9b00      	ldr	r3, [sp, #0]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	9302      	str	r3, [sp, #8]
 800bd10:	3301      	adds	r3, #1
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	9303      	str	r3, [sp, #12]
 800bd16:	bfb8      	it	lt
 800bd18:	2301      	movlt	r3, #1
 800bd1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	6042      	str	r2, [r0, #4]
 800bd20:	2204      	movs	r2, #4
 800bd22:	f102 0614 	add.w	r6, r2, #20
 800bd26:	429e      	cmp	r6, r3
 800bd28:	6841      	ldr	r1, [r0, #4]
 800bd2a:	d93d      	bls.n	800bda8 <_dtoa_r+0x318>
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f001 f90b 	bl	800cf48 <_Balloc>
 800bd32:	9001      	str	r0, [sp, #4]
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d13b      	bne.n	800bdb0 <_dtoa_r+0x320>
 800bd38:	4b11      	ldr	r3, [pc, #68]	; (800bd80 <_dtoa_r+0x2f0>)
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bd40:	e6c0      	b.n	800bac4 <_dtoa_r+0x34>
 800bd42:	2301      	movs	r3, #1
 800bd44:	e7df      	b.n	800bd06 <_dtoa_r+0x276>
 800bd46:	bf00      	nop
 800bd48:	636f4361 	.word	0x636f4361
 800bd4c:	3fd287a7 	.word	0x3fd287a7
 800bd50:	8b60c8b3 	.word	0x8b60c8b3
 800bd54:	3fc68a28 	.word	0x3fc68a28
 800bd58:	509f79fb 	.word	0x509f79fb
 800bd5c:	3fd34413 	.word	0x3fd34413
 800bd60:	0800e6a6 	.word	0x0800e6a6
 800bd64:	0800e6bd 	.word	0x0800e6bd
 800bd68:	7ff00000 	.word	0x7ff00000
 800bd6c:	0800e6a2 	.word	0x0800e6a2
 800bd70:	0800e699 	.word	0x0800e699
 800bd74:	0800e521 	.word	0x0800e521
 800bd78:	3ff80000 	.word	0x3ff80000
 800bd7c:	0800e828 	.word	0x0800e828
 800bd80:	0800e718 	.word	0x0800e718
 800bd84:	2501      	movs	r5, #1
 800bd86:	2300      	movs	r3, #0
 800bd88:	9306      	str	r3, [sp, #24]
 800bd8a:	9508      	str	r5, [sp, #32]
 800bd8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bd94:	2200      	movs	r2, #0
 800bd96:	2312      	movs	r3, #18
 800bd98:	e7b0      	b.n	800bcfc <_dtoa_r+0x26c>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	9308      	str	r3, [sp, #32]
 800bd9e:	e7f5      	b.n	800bd8c <_dtoa_r+0x2fc>
 800bda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bda6:	e7b8      	b.n	800bd1a <_dtoa_r+0x28a>
 800bda8:	3101      	adds	r1, #1
 800bdaa:	6041      	str	r1, [r0, #4]
 800bdac:	0052      	lsls	r2, r2, #1
 800bdae:	e7b8      	b.n	800bd22 <_dtoa_r+0x292>
 800bdb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdb2:	9a01      	ldr	r2, [sp, #4]
 800bdb4:	601a      	str	r2, [r3, #0]
 800bdb6:	9b03      	ldr	r3, [sp, #12]
 800bdb8:	2b0e      	cmp	r3, #14
 800bdba:	f200 809d 	bhi.w	800bef8 <_dtoa_r+0x468>
 800bdbe:	2d00      	cmp	r5, #0
 800bdc0:	f000 809a 	beq.w	800bef8 <_dtoa_r+0x468>
 800bdc4:	9b00      	ldr	r3, [sp, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	dd32      	ble.n	800be30 <_dtoa_r+0x3a0>
 800bdca:	4ab7      	ldr	r2, [pc, #732]	; (800c0a8 <_dtoa_r+0x618>)
 800bdcc:	f003 030f 	and.w	r3, r3, #15
 800bdd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bdd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdd8:	9b00      	ldr	r3, [sp, #0]
 800bdda:	05d8      	lsls	r0, r3, #23
 800bddc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bde0:	d516      	bpl.n	800be10 <_dtoa_r+0x380>
 800bde2:	4bb2      	ldr	r3, [pc, #712]	; (800c0ac <_dtoa_r+0x61c>)
 800bde4:	ec51 0b19 	vmov	r0, r1, d9
 800bde8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bdec:	f7f4 fd5e 	bl	80008ac <__aeabi_ddiv>
 800bdf0:	f007 070f 	and.w	r7, r7, #15
 800bdf4:	4682      	mov	sl, r0
 800bdf6:	468b      	mov	fp, r1
 800bdf8:	2503      	movs	r5, #3
 800bdfa:	4eac      	ldr	r6, [pc, #688]	; (800c0ac <_dtoa_r+0x61c>)
 800bdfc:	b957      	cbnz	r7, 800be14 <_dtoa_r+0x384>
 800bdfe:	4642      	mov	r2, r8
 800be00:	464b      	mov	r3, r9
 800be02:	4650      	mov	r0, sl
 800be04:	4659      	mov	r1, fp
 800be06:	f7f4 fd51 	bl	80008ac <__aeabi_ddiv>
 800be0a:	4682      	mov	sl, r0
 800be0c:	468b      	mov	fp, r1
 800be0e:	e028      	b.n	800be62 <_dtoa_r+0x3d2>
 800be10:	2502      	movs	r5, #2
 800be12:	e7f2      	b.n	800bdfa <_dtoa_r+0x36a>
 800be14:	07f9      	lsls	r1, r7, #31
 800be16:	d508      	bpl.n	800be2a <_dtoa_r+0x39a>
 800be18:	4640      	mov	r0, r8
 800be1a:	4649      	mov	r1, r9
 800be1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be20:	f7f4 fc1a 	bl	8000658 <__aeabi_dmul>
 800be24:	3501      	adds	r5, #1
 800be26:	4680      	mov	r8, r0
 800be28:	4689      	mov	r9, r1
 800be2a:	107f      	asrs	r7, r7, #1
 800be2c:	3608      	adds	r6, #8
 800be2e:	e7e5      	b.n	800bdfc <_dtoa_r+0x36c>
 800be30:	f000 809b 	beq.w	800bf6a <_dtoa_r+0x4da>
 800be34:	9b00      	ldr	r3, [sp, #0]
 800be36:	4f9d      	ldr	r7, [pc, #628]	; (800c0ac <_dtoa_r+0x61c>)
 800be38:	425e      	negs	r6, r3
 800be3a:	4b9b      	ldr	r3, [pc, #620]	; (800c0a8 <_dtoa_r+0x618>)
 800be3c:	f006 020f 	and.w	r2, r6, #15
 800be40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	ec51 0b19 	vmov	r0, r1, d9
 800be4c:	f7f4 fc04 	bl	8000658 <__aeabi_dmul>
 800be50:	1136      	asrs	r6, r6, #4
 800be52:	4682      	mov	sl, r0
 800be54:	468b      	mov	fp, r1
 800be56:	2300      	movs	r3, #0
 800be58:	2502      	movs	r5, #2
 800be5a:	2e00      	cmp	r6, #0
 800be5c:	d17a      	bne.n	800bf54 <_dtoa_r+0x4c4>
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1d3      	bne.n	800be0a <_dtoa_r+0x37a>
 800be62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 8082 	beq.w	800bf6e <_dtoa_r+0x4de>
 800be6a:	4b91      	ldr	r3, [pc, #580]	; (800c0b0 <_dtoa_r+0x620>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	4650      	mov	r0, sl
 800be70:	4659      	mov	r1, fp
 800be72:	f7f4 fe63 	bl	8000b3c <__aeabi_dcmplt>
 800be76:	2800      	cmp	r0, #0
 800be78:	d079      	beq.n	800bf6e <_dtoa_r+0x4de>
 800be7a:	9b03      	ldr	r3, [sp, #12]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d076      	beq.n	800bf6e <_dtoa_r+0x4de>
 800be80:	9b02      	ldr	r3, [sp, #8]
 800be82:	2b00      	cmp	r3, #0
 800be84:	dd36      	ble.n	800bef4 <_dtoa_r+0x464>
 800be86:	9b00      	ldr	r3, [sp, #0]
 800be88:	4650      	mov	r0, sl
 800be8a:	4659      	mov	r1, fp
 800be8c:	1e5f      	subs	r7, r3, #1
 800be8e:	2200      	movs	r2, #0
 800be90:	4b88      	ldr	r3, [pc, #544]	; (800c0b4 <_dtoa_r+0x624>)
 800be92:	f7f4 fbe1 	bl	8000658 <__aeabi_dmul>
 800be96:	9e02      	ldr	r6, [sp, #8]
 800be98:	4682      	mov	sl, r0
 800be9a:	468b      	mov	fp, r1
 800be9c:	3501      	adds	r5, #1
 800be9e:	4628      	mov	r0, r5
 800bea0:	f7f4 fb70 	bl	8000584 <__aeabi_i2d>
 800bea4:	4652      	mov	r2, sl
 800bea6:	465b      	mov	r3, fp
 800bea8:	f7f4 fbd6 	bl	8000658 <__aeabi_dmul>
 800beac:	4b82      	ldr	r3, [pc, #520]	; (800c0b8 <_dtoa_r+0x628>)
 800beae:	2200      	movs	r2, #0
 800beb0:	f7f4 fa1c 	bl	80002ec <__adddf3>
 800beb4:	46d0      	mov	r8, sl
 800beb6:	46d9      	mov	r9, fp
 800beb8:	4682      	mov	sl, r0
 800beba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bebe:	2e00      	cmp	r6, #0
 800bec0:	d158      	bne.n	800bf74 <_dtoa_r+0x4e4>
 800bec2:	4b7e      	ldr	r3, [pc, #504]	; (800c0bc <_dtoa_r+0x62c>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	4640      	mov	r0, r8
 800bec8:	4649      	mov	r1, r9
 800beca:	f7f4 fa0d 	bl	80002e8 <__aeabi_dsub>
 800bece:	4652      	mov	r2, sl
 800bed0:	465b      	mov	r3, fp
 800bed2:	4680      	mov	r8, r0
 800bed4:	4689      	mov	r9, r1
 800bed6:	f7f4 fe4f 	bl	8000b78 <__aeabi_dcmpgt>
 800beda:	2800      	cmp	r0, #0
 800bedc:	f040 8295 	bne.w	800c40a <_dtoa_r+0x97a>
 800bee0:	4652      	mov	r2, sl
 800bee2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bee6:	4640      	mov	r0, r8
 800bee8:	4649      	mov	r1, r9
 800beea:	f7f4 fe27 	bl	8000b3c <__aeabi_dcmplt>
 800beee:	2800      	cmp	r0, #0
 800bef0:	f040 8289 	bne.w	800c406 <_dtoa_r+0x976>
 800bef4:	ec5b ab19 	vmov	sl, fp, d9
 800bef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800befa:	2b00      	cmp	r3, #0
 800befc:	f2c0 8148 	blt.w	800c190 <_dtoa_r+0x700>
 800bf00:	9a00      	ldr	r2, [sp, #0]
 800bf02:	2a0e      	cmp	r2, #14
 800bf04:	f300 8144 	bgt.w	800c190 <_dtoa_r+0x700>
 800bf08:	4b67      	ldr	r3, [pc, #412]	; (800c0a8 <_dtoa_r+0x618>)
 800bf0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f280 80d5 	bge.w	800c0c4 <_dtoa_r+0x634>
 800bf1a:	9b03      	ldr	r3, [sp, #12]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f300 80d1 	bgt.w	800c0c4 <_dtoa_r+0x634>
 800bf22:	f040 826f 	bne.w	800c404 <_dtoa_r+0x974>
 800bf26:	4b65      	ldr	r3, [pc, #404]	; (800c0bc <_dtoa_r+0x62c>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	f7f4 fb93 	bl	8000658 <__aeabi_dmul>
 800bf32:	4652      	mov	r2, sl
 800bf34:	465b      	mov	r3, fp
 800bf36:	f7f4 fe15 	bl	8000b64 <__aeabi_dcmpge>
 800bf3a:	9e03      	ldr	r6, [sp, #12]
 800bf3c:	4637      	mov	r7, r6
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	f040 8245 	bne.w	800c3ce <_dtoa_r+0x93e>
 800bf44:	9d01      	ldr	r5, [sp, #4]
 800bf46:	2331      	movs	r3, #49	; 0x31
 800bf48:	f805 3b01 	strb.w	r3, [r5], #1
 800bf4c:	9b00      	ldr	r3, [sp, #0]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	e240      	b.n	800c3d6 <_dtoa_r+0x946>
 800bf54:	07f2      	lsls	r2, r6, #31
 800bf56:	d505      	bpl.n	800bf64 <_dtoa_r+0x4d4>
 800bf58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf5c:	f7f4 fb7c 	bl	8000658 <__aeabi_dmul>
 800bf60:	3501      	adds	r5, #1
 800bf62:	2301      	movs	r3, #1
 800bf64:	1076      	asrs	r6, r6, #1
 800bf66:	3708      	adds	r7, #8
 800bf68:	e777      	b.n	800be5a <_dtoa_r+0x3ca>
 800bf6a:	2502      	movs	r5, #2
 800bf6c:	e779      	b.n	800be62 <_dtoa_r+0x3d2>
 800bf6e:	9f00      	ldr	r7, [sp, #0]
 800bf70:	9e03      	ldr	r6, [sp, #12]
 800bf72:	e794      	b.n	800be9e <_dtoa_r+0x40e>
 800bf74:	9901      	ldr	r1, [sp, #4]
 800bf76:	4b4c      	ldr	r3, [pc, #304]	; (800c0a8 <_dtoa_r+0x618>)
 800bf78:	4431      	add	r1, r6
 800bf7a:	910d      	str	r1, [sp, #52]	; 0x34
 800bf7c:	9908      	ldr	r1, [sp, #32]
 800bf7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bf82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf86:	2900      	cmp	r1, #0
 800bf88:	d043      	beq.n	800c012 <_dtoa_r+0x582>
 800bf8a:	494d      	ldr	r1, [pc, #308]	; (800c0c0 <_dtoa_r+0x630>)
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	f7f4 fc8d 	bl	80008ac <__aeabi_ddiv>
 800bf92:	4652      	mov	r2, sl
 800bf94:	465b      	mov	r3, fp
 800bf96:	f7f4 f9a7 	bl	80002e8 <__aeabi_dsub>
 800bf9a:	9d01      	ldr	r5, [sp, #4]
 800bf9c:	4682      	mov	sl, r0
 800bf9e:	468b      	mov	fp, r1
 800bfa0:	4649      	mov	r1, r9
 800bfa2:	4640      	mov	r0, r8
 800bfa4:	f7f4 fe08 	bl	8000bb8 <__aeabi_d2iz>
 800bfa8:	4606      	mov	r6, r0
 800bfaa:	f7f4 faeb 	bl	8000584 <__aeabi_i2d>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4640      	mov	r0, r8
 800bfb4:	4649      	mov	r1, r9
 800bfb6:	f7f4 f997 	bl	80002e8 <__aeabi_dsub>
 800bfba:	3630      	adds	r6, #48	; 0x30
 800bfbc:	f805 6b01 	strb.w	r6, [r5], #1
 800bfc0:	4652      	mov	r2, sl
 800bfc2:	465b      	mov	r3, fp
 800bfc4:	4680      	mov	r8, r0
 800bfc6:	4689      	mov	r9, r1
 800bfc8:	f7f4 fdb8 	bl	8000b3c <__aeabi_dcmplt>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d163      	bne.n	800c098 <_dtoa_r+0x608>
 800bfd0:	4642      	mov	r2, r8
 800bfd2:	464b      	mov	r3, r9
 800bfd4:	4936      	ldr	r1, [pc, #216]	; (800c0b0 <_dtoa_r+0x620>)
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	f7f4 f986 	bl	80002e8 <__aeabi_dsub>
 800bfdc:	4652      	mov	r2, sl
 800bfde:	465b      	mov	r3, fp
 800bfe0:	f7f4 fdac 	bl	8000b3c <__aeabi_dcmplt>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	f040 80b5 	bne.w	800c154 <_dtoa_r+0x6c4>
 800bfea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfec:	429d      	cmp	r5, r3
 800bfee:	d081      	beq.n	800bef4 <_dtoa_r+0x464>
 800bff0:	4b30      	ldr	r3, [pc, #192]	; (800c0b4 <_dtoa_r+0x624>)
 800bff2:	2200      	movs	r2, #0
 800bff4:	4650      	mov	r0, sl
 800bff6:	4659      	mov	r1, fp
 800bff8:	f7f4 fb2e 	bl	8000658 <__aeabi_dmul>
 800bffc:	4b2d      	ldr	r3, [pc, #180]	; (800c0b4 <_dtoa_r+0x624>)
 800bffe:	4682      	mov	sl, r0
 800c000:	468b      	mov	fp, r1
 800c002:	4640      	mov	r0, r8
 800c004:	4649      	mov	r1, r9
 800c006:	2200      	movs	r2, #0
 800c008:	f7f4 fb26 	bl	8000658 <__aeabi_dmul>
 800c00c:	4680      	mov	r8, r0
 800c00e:	4689      	mov	r9, r1
 800c010:	e7c6      	b.n	800bfa0 <_dtoa_r+0x510>
 800c012:	4650      	mov	r0, sl
 800c014:	4659      	mov	r1, fp
 800c016:	f7f4 fb1f 	bl	8000658 <__aeabi_dmul>
 800c01a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c01c:	9d01      	ldr	r5, [sp, #4]
 800c01e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c020:	4682      	mov	sl, r0
 800c022:	468b      	mov	fp, r1
 800c024:	4649      	mov	r1, r9
 800c026:	4640      	mov	r0, r8
 800c028:	f7f4 fdc6 	bl	8000bb8 <__aeabi_d2iz>
 800c02c:	4606      	mov	r6, r0
 800c02e:	f7f4 faa9 	bl	8000584 <__aeabi_i2d>
 800c032:	3630      	adds	r6, #48	; 0x30
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	4640      	mov	r0, r8
 800c03a:	4649      	mov	r1, r9
 800c03c:	f7f4 f954 	bl	80002e8 <__aeabi_dsub>
 800c040:	f805 6b01 	strb.w	r6, [r5], #1
 800c044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c046:	429d      	cmp	r5, r3
 800c048:	4680      	mov	r8, r0
 800c04a:	4689      	mov	r9, r1
 800c04c:	f04f 0200 	mov.w	r2, #0
 800c050:	d124      	bne.n	800c09c <_dtoa_r+0x60c>
 800c052:	4b1b      	ldr	r3, [pc, #108]	; (800c0c0 <_dtoa_r+0x630>)
 800c054:	4650      	mov	r0, sl
 800c056:	4659      	mov	r1, fp
 800c058:	f7f4 f948 	bl	80002ec <__adddf3>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4640      	mov	r0, r8
 800c062:	4649      	mov	r1, r9
 800c064:	f7f4 fd88 	bl	8000b78 <__aeabi_dcmpgt>
 800c068:	2800      	cmp	r0, #0
 800c06a:	d173      	bne.n	800c154 <_dtoa_r+0x6c4>
 800c06c:	4652      	mov	r2, sl
 800c06e:	465b      	mov	r3, fp
 800c070:	4913      	ldr	r1, [pc, #76]	; (800c0c0 <_dtoa_r+0x630>)
 800c072:	2000      	movs	r0, #0
 800c074:	f7f4 f938 	bl	80002e8 <__aeabi_dsub>
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	4640      	mov	r0, r8
 800c07e:	4649      	mov	r1, r9
 800c080:	f7f4 fd5c 	bl	8000b3c <__aeabi_dcmplt>
 800c084:	2800      	cmp	r0, #0
 800c086:	f43f af35 	beq.w	800bef4 <_dtoa_r+0x464>
 800c08a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c08c:	1e6b      	subs	r3, r5, #1
 800c08e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c090:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c094:	2b30      	cmp	r3, #48	; 0x30
 800c096:	d0f8      	beq.n	800c08a <_dtoa_r+0x5fa>
 800c098:	9700      	str	r7, [sp, #0]
 800c09a:	e049      	b.n	800c130 <_dtoa_r+0x6a0>
 800c09c:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <_dtoa_r+0x624>)
 800c09e:	f7f4 fadb 	bl	8000658 <__aeabi_dmul>
 800c0a2:	4680      	mov	r8, r0
 800c0a4:	4689      	mov	r9, r1
 800c0a6:	e7bd      	b.n	800c024 <_dtoa_r+0x594>
 800c0a8:	0800e828 	.word	0x0800e828
 800c0ac:	0800e800 	.word	0x0800e800
 800c0b0:	3ff00000 	.word	0x3ff00000
 800c0b4:	40240000 	.word	0x40240000
 800c0b8:	401c0000 	.word	0x401c0000
 800c0bc:	40140000 	.word	0x40140000
 800c0c0:	3fe00000 	.word	0x3fe00000
 800c0c4:	9d01      	ldr	r5, [sp, #4]
 800c0c6:	4656      	mov	r6, sl
 800c0c8:	465f      	mov	r7, fp
 800c0ca:	4642      	mov	r2, r8
 800c0cc:	464b      	mov	r3, r9
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	4639      	mov	r1, r7
 800c0d2:	f7f4 fbeb 	bl	80008ac <__aeabi_ddiv>
 800c0d6:	f7f4 fd6f 	bl	8000bb8 <__aeabi_d2iz>
 800c0da:	4682      	mov	sl, r0
 800c0dc:	f7f4 fa52 	bl	8000584 <__aeabi_i2d>
 800c0e0:	4642      	mov	r2, r8
 800c0e2:	464b      	mov	r3, r9
 800c0e4:	f7f4 fab8 	bl	8000658 <__aeabi_dmul>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c0f4:	f7f4 f8f8 	bl	80002e8 <__aeabi_dsub>
 800c0f8:	f805 6b01 	strb.w	r6, [r5], #1
 800c0fc:	9e01      	ldr	r6, [sp, #4]
 800c0fe:	9f03      	ldr	r7, [sp, #12]
 800c100:	1bae      	subs	r6, r5, r6
 800c102:	42b7      	cmp	r7, r6
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	d135      	bne.n	800c176 <_dtoa_r+0x6e6>
 800c10a:	f7f4 f8ef 	bl	80002ec <__adddf3>
 800c10e:	4642      	mov	r2, r8
 800c110:	464b      	mov	r3, r9
 800c112:	4606      	mov	r6, r0
 800c114:	460f      	mov	r7, r1
 800c116:	f7f4 fd2f 	bl	8000b78 <__aeabi_dcmpgt>
 800c11a:	b9d0      	cbnz	r0, 800c152 <_dtoa_r+0x6c2>
 800c11c:	4642      	mov	r2, r8
 800c11e:	464b      	mov	r3, r9
 800c120:	4630      	mov	r0, r6
 800c122:	4639      	mov	r1, r7
 800c124:	f7f4 fd00 	bl	8000b28 <__aeabi_dcmpeq>
 800c128:	b110      	cbz	r0, 800c130 <_dtoa_r+0x6a0>
 800c12a:	f01a 0f01 	tst.w	sl, #1
 800c12e:	d110      	bne.n	800c152 <_dtoa_r+0x6c2>
 800c130:	4620      	mov	r0, r4
 800c132:	ee18 1a10 	vmov	r1, s16
 800c136:	f000 ff47 	bl	800cfc8 <_Bfree>
 800c13a:	2300      	movs	r3, #0
 800c13c:	9800      	ldr	r0, [sp, #0]
 800c13e:	702b      	strb	r3, [r5, #0]
 800c140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c142:	3001      	adds	r0, #1
 800c144:	6018      	str	r0, [r3, #0]
 800c146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f43f acf1 	beq.w	800bb30 <_dtoa_r+0xa0>
 800c14e:	601d      	str	r5, [r3, #0]
 800c150:	e4ee      	b.n	800bb30 <_dtoa_r+0xa0>
 800c152:	9f00      	ldr	r7, [sp, #0]
 800c154:	462b      	mov	r3, r5
 800c156:	461d      	mov	r5, r3
 800c158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c15c:	2a39      	cmp	r2, #57	; 0x39
 800c15e:	d106      	bne.n	800c16e <_dtoa_r+0x6de>
 800c160:	9a01      	ldr	r2, [sp, #4]
 800c162:	429a      	cmp	r2, r3
 800c164:	d1f7      	bne.n	800c156 <_dtoa_r+0x6c6>
 800c166:	9901      	ldr	r1, [sp, #4]
 800c168:	2230      	movs	r2, #48	; 0x30
 800c16a:	3701      	adds	r7, #1
 800c16c:	700a      	strb	r2, [r1, #0]
 800c16e:	781a      	ldrb	r2, [r3, #0]
 800c170:	3201      	adds	r2, #1
 800c172:	701a      	strb	r2, [r3, #0]
 800c174:	e790      	b.n	800c098 <_dtoa_r+0x608>
 800c176:	4ba6      	ldr	r3, [pc, #664]	; (800c410 <_dtoa_r+0x980>)
 800c178:	2200      	movs	r2, #0
 800c17a:	f7f4 fa6d 	bl	8000658 <__aeabi_dmul>
 800c17e:	2200      	movs	r2, #0
 800c180:	2300      	movs	r3, #0
 800c182:	4606      	mov	r6, r0
 800c184:	460f      	mov	r7, r1
 800c186:	f7f4 fccf 	bl	8000b28 <__aeabi_dcmpeq>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d09d      	beq.n	800c0ca <_dtoa_r+0x63a>
 800c18e:	e7cf      	b.n	800c130 <_dtoa_r+0x6a0>
 800c190:	9a08      	ldr	r2, [sp, #32]
 800c192:	2a00      	cmp	r2, #0
 800c194:	f000 80d7 	beq.w	800c346 <_dtoa_r+0x8b6>
 800c198:	9a06      	ldr	r2, [sp, #24]
 800c19a:	2a01      	cmp	r2, #1
 800c19c:	f300 80ba 	bgt.w	800c314 <_dtoa_r+0x884>
 800c1a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1a2:	2a00      	cmp	r2, #0
 800c1a4:	f000 80b2 	beq.w	800c30c <_dtoa_r+0x87c>
 800c1a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c1ac:	9e07      	ldr	r6, [sp, #28]
 800c1ae:	9d04      	ldr	r5, [sp, #16]
 800c1b0:	9a04      	ldr	r2, [sp, #16]
 800c1b2:	441a      	add	r2, r3
 800c1b4:	9204      	str	r2, [sp, #16]
 800c1b6:	9a05      	ldr	r2, [sp, #20]
 800c1b8:	2101      	movs	r1, #1
 800c1ba:	441a      	add	r2, r3
 800c1bc:	4620      	mov	r0, r4
 800c1be:	9205      	str	r2, [sp, #20]
 800c1c0:	f001 f804 	bl	800d1cc <__i2b>
 800c1c4:	4607      	mov	r7, r0
 800c1c6:	2d00      	cmp	r5, #0
 800c1c8:	dd0c      	ble.n	800c1e4 <_dtoa_r+0x754>
 800c1ca:	9b05      	ldr	r3, [sp, #20]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	dd09      	ble.n	800c1e4 <_dtoa_r+0x754>
 800c1d0:	42ab      	cmp	r3, r5
 800c1d2:	9a04      	ldr	r2, [sp, #16]
 800c1d4:	bfa8      	it	ge
 800c1d6:	462b      	movge	r3, r5
 800c1d8:	1ad2      	subs	r2, r2, r3
 800c1da:	9204      	str	r2, [sp, #16]
 800c1dc:	9a05      	ldr	r2, [sp, #20]
 800c1de:	1aed      	subs	r5, r5, r3
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	9305      	str	r3, [sp, #20]
 800c1e4:	9b07      	ldr	r3, [sp, #28]
 800c1e6:	b31b      	cbz	r3, 800c230 <_dtoa_r+0x7a0>
 800c1e8:	9b08      	ldr	r3, [sp, #32]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f000 80af 	beq.w	800c34e <_dtoa_r+0x8be>
 800c1f0:	2e00      	cmp	r6, #0
 800c1f2:	dd13      	ble.n	800c21c <_dtoa_r+0x78c>
 800c1f4:	4639      	mov	r1, r7
 800c1f6:	4632      	mov	r2, r6
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f001 f8a7 	bl	800d34c <__pow5mult>
 800c1fe:	ee18 2a10 	vmov	r2, s16
 800c202:	4601      	mov	r1, r0
 800c204:	4607      	mov	r7, r0
 800c206:	4620      	mov	r0, r4
 800c208:	f000 fff6 	bl	800d1f8 <__multiply>
 800c20c:	ee18 1a10 	vmov	r1, s16
 800c210:	4680      	mov	r8, r0
 800c212:	4620      	mov	r0, r4
 800c214:	f000 fed8 	bl	800cfc8 <_Bfree>
 800c218:	ee08 8a10 	vmov	s16, r8
 800c21c:	9b07      	ldr	r3, [sp, #28]
 800c21e:	1b9a      	subs	r2, r3, r6
 800c220:	d006      	beq.n	800c230 <_dtoa_r+0x7a0>
 800c222:	ee18 1a10 	vmov	r1, s16
 800c226:	4620      	mov	r0, r4
 800c228:	f001 f890 	bl	800d34c <__pow5mult>
 800c22c:	ee08 0a10 	vmov	s16, r0
 800c230:	2101      	movs	r1, #1
 800c232:	4620      	mov	r0, r4
 800c234:	f000 ffca 	bl	800d1cc <__i2b>
 800c238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	4606      	mov	r6, r0
 800c23e:	f340 8088 	ble.w	800c352 <_dtoa_r+0x8c2>
 800c242:	461a      	mov	r2, r3
 800c244:	4601      	mov	r1, r0
 800c246:	4620      	mov	r0, r4
 800c248:	f001 f880 	bl	800d34c <__pow5mult>
 800c24c:	9b06      	ldr	r3, [sp, #24]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	4606      	mov	r6, r0
 800c252:	f340 8081 	ble.w	800c358 <_dtoa_r+0x8c8>
 800c256:	f04f 0800 	mov.w	r8, #0
 800c25a:	6933      	ldr	r3, [r6, #16]
 800c25c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c260:	6918      	ldr	r0, [r3, #16]
 800c262:	f000 ff63 	bl	800d12c <__hi0bits>
 800c266:	f1c0 0020 	rsb	r0, r0, #32
 800c26a:	9b05      	ldr	r3, [sp, #20]
 800c26c:	4418      	add	r0, r3
 800c26e:	f010 001f 	ands.w	r0, r0, #31
 800c272:	f000 8092 	beq.w	800c39a <_dtoa_r+0x90a>
 800c276:	f1c0 0320 	rsb	r3, r0, #32
 800c27a:	2b04      	cmp	r3, #4
 800c27c:	f340 808a 	ble.w	800c394 <_dtoa_r+0x904>
 800c280:	f1c0 001c 	rsb	r0, r0, #28
 800c284:	9b04      	ldr	r3, [sp, #16]
 800c286:	4403      	add	r3, r0
 800c288:	9304      	str	r3, [sp, #16]
 800c28a:	9b05      	ldr	r3, [sp, #20]
 800c28c:	4403      	add	r3, r0
 800c28e:	4405      	add	r5, r0
 800c290:	9305      	str	r3, [sp, #20]
 800c292:	9b04      	ldr	r3, [sp, #16]
 800c294:	2b00      	cmp	r3, #0
 800c296:	dd07      	ble.n	800c2a8 <_dtoa_r+0x818>
 800c298:	ee18 1a10 	vmov	r1, s16
 800c29c:	461a      	mov	r2, r3
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f001 f8ae 	bl	800d400 <__lshift>
 800c2a4:	ee08 0a10 	vmov	s16, r0
 800c2a8:	9b05      	ldr	r3, [sp, #20]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	dd05      	ble.n	800c2ba <_dtoa_r+0x82a>
 800c2ae:	4631      	mov	r1, r6
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f001 f8a4 	bl	800d400 <__lshift>
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d06e      	beq.n	800c39e <_dtoa_r+0x90e>
 800c2c0:	ee18 0a10 	vmov	r0, s16
 800c2c4:	4631      	mov	r1, r6
 800c2c6:	f001 f90b 	bl	800d4e0 <__mcmp>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	da67      	bge.n	800c39e <_dtoa_r+0x90e>
 800c2ce:	9b00      	ldr	r3, [sp, #0]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	ee18 1a10 	vmov	r1, s16
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	220a      	movs	r2, #10
 800c2da:	2300      	movs	r3, #0
 800c2dc:	4620      	mov	r0, r4
 800c2de:	f000 fe95 	bl	800d00c <__multadd>
 800c2e2:	9b08      	ldr	r3, [sp, #32]
 800c2e4:	ee08 0a10 	vmov	s16, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f000 81b1 	beq.w	800c650 <_dtoa_r+0xbc0>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	4639      	mov	r1, r7
 800c2f2:	220a      	movs	r2, #10
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f000 fe89 	bl	800d00c <__multadd>
 800c2fa:	9b02      	ldr	r3, [sp, #8]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	4607      	mov	r7, r0
 800c300:	f300 808e 	bgt.w	800c420 <_dtoa_r+0x990>
 800c304:	9b06      	ldr	r3, [sp, #24]
 800c306:	2b02      	cmp	r3, #2
 800c308:	dc51      	bgt.n	800c3ae <_dtoa_r+0x91e>
 800c30a:	e089      	b.n	800c420 <_dtoa_r+0x990>
 800c30c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c30e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c312:	e74b      	b.n	800c1ac <_dtoa_r+0x71c>
 800c314:	9b03      	ldr	r3, [sp, #12]
 800c316:	1e5e      	subs	r6, r3, #1
 800c318:	9b07      	ldr	r3, [sp, #28]
 800c31a:	42b3      	cmp	r3, r6
 800c31c:	bfbf      	itttt	lt
 800c31e:	9b07      	ldrlt	r3, [sp, #28]
 800c320:	9607      	strlt	r6, [sp, #28]
 800c322:	1af2      	sublt	r2, r6, r3
 800c324:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c326:	bfb6      	itet	lt
 800c328:	189b      	addlt	r3, r3, r2
 800c32a:	1b9e      	subge	r6, r3, r6
 800c32c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c32e:	9b03      	ldr	r3, [sp, #12]
 800c330:	bfb8      	it	lt
 800c332:	2600      	movlt	r6, #0
 800c334:	2b00      	cmp	r3, #0
 800c336:	bfb7      	itett	lt
 800c338:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c33c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c340:	1a9d      	sublt	r5, r3, r2
 800c342:	2300      	movlt	r3, #0
 800c344:	e734      	b.n	800c1b0 <_dtoa_r+0x720>
 800c346:	9e07      	ldr	r6, [sp, #28]
 800c348:	9d04      	ldr	r5, [sp, #16]
 800c34a:	9f08      	ldr	r7, [sp, #32]
 800c34c:	e73b      	b.n	800c1c6 <_dtoa_r+0x736>
 800c34e:	9a07      	ldr	r2, [sp, #28]
 800c350:	e767      	b.n	800c222 <_dtoa_r+0x792>
 800c352:	9b06      	ldr	r3, [sp, #24]
 800c354:	2b01      	cmp	r3, #1
 800c356:	dc18      	bgt.n	800c38a <_dtoa_r+0x8fa>
 800c358:	f1ba 0f00 	cmp.w	sl, #0
 800c35c:	d115      	bne.n	800c38a <_dtoa_r+0x8fa>
 800c35e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c362:	b993      	cbnz	r3, 800c38a <_dtoa_r+0x8fa>
 800c364:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c368:	0d1b      	lsrs	r3, r3, #20
 800c36a:	051b      	lsls	r3, r3, #20
 800c36c:	b183      	cbz	r3, 800c390 <_dtoa_r+0x900>
 800c36e:	9b04      	ldr	r3, [sp, #16]
 800c370:	3301      	adds	r3, #1
 800c372:	9304      	str	r3, [sp, #16]
 800c374:	9b05      	ldr	r3, [sp, #20]
 800c376:	3301      	adds	r3, #1
 800c378:	9305      	str	r3, [sp, #20]
 800c37a:	f04f 0801 	mov.w	r8, #1
 800c37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c380:	2b00      	cmp	r3, #0
 800c382:	f47f af6a 	bne.w	800c25a <_dtoa_r+0x7ca>
 800c386:	2001      	movs	r0, #1
 800c388:	e76f      	b.n	800c26a <_dtoa_r+0x7da>
 800c38a:	f04f 0800 	mov.w	r8, #0
 800c38e:	e7f6      	b.n	800c37e <_dtoa_r+0x8ee>
 800c390:	4698      	mov	r8, r3
 800c392:	e7f4      	b.n	800c37e <_dtoa_r+0x8ee>
 800c394:	f43f af7d 	beq.w	800c292 <_dtoa_r+0x802>
 800c398:	4618      	mov	r0, r3
 800c39a:	301c      	adds	r0, #28
 800c39c:	e772      	b.n	800c284 <_dtoa_r+0x7f4>
 800c39e:	9b03      	ldr	r3, [sp, #12]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	dc37      	bgt.n	800c414 <_dtoa_r+0x984>
 800c3a4:	9b06      	ldr	r3, [sp, #24]
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	dd34      	ble.n	800c414 <_dtoa_r+0x984>
 800c3aa:	9b03      	ldr	r3, [sp, #12]
 800c3ac:	9302      	str	r3, [sp, #8]
 800c3ae:	9b02      	ldr	r3, [sp, #8]
 800c3b0:	b96b      	cbnz	r3, 800c3ce <_dtoa_r+0x93e>
 800c3b2:	4631      	mov	r1, r6
 800c3b4:	2205      	movs	r2, #5
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f000 fe28 	bl	800d00c <__multadd>
 800c3bc:	4601      	mov	r1, r0
 800c3be:	4606      	mov	r6, r0
 800c3c0:	ee18 0a10 	vmov	r0, s16
 800c3c4:	f001 f88c 	bl	800d4e0 <__mcmp>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	f73f adbb 	bgt.w	800bf44 <_dtoa_r+0x4b4>
 800c3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d0:	9d01      	ldr	r5, [sp, #4]
 800c3d2:	43db      	mvns	r3, r3
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	f04f 0800 	mov.w	r8, #0
 800c3da:	4631      	mov	r1, r6
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f000 fdf3 	bl	800cfc8 <_Bfree>
 800c3e2:	2f00      	cmp	r7, #0
 800c3e4:	f43f aea4 	beq.w	800c130 <_dtoa_r+0x6a0>
 800c3e8:	f1b8 0f00 	cmp.w	r8, #0
 800c3ec:	d005      	beq.n	800c3fa <_dtoa_r+0x96a>
 800c3ee:	45b8      	cmp	r8, r7
 800c3f0:	d003      	beq.n	800c3fa <_dtoa_r+0x96a>
 800c3f2:	4641      	mov	r1, r8
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f000 fde7 	bl	800cfc8 <_Bfree>
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f000 fde3 	bl	800cfc8 <_Bfree>
 800c402:	e695      	b.n	800c130 <_dtoa_r+0x6a0>
 800c404:	2600      	movs	r6, #0
 800c406:	4637      	mov	r7, r6
 800c408:	e7e1      	b.n	800c3ce <_dtoa_r+0x93e>
 800c40a:	9700      	str	r7, [sp, #0]
 800c40c:	4637      	mov	r7, r6
 800c40e:	e599      	b.n	800bf44 <_dtoa_r+0x4b4>
 800c410:	40240000 	.word	0x40240000
 800c414:	9b08      	ldr	r3, [sp, #32]
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 80ca 	beq.w	800c5b0 <_dtoa_r+0xb20>
 800c41c:	9b03      	ldr	r3, [sp, #12]
 800c41e:	9302      	str	r3, [sp, #8]
 800c420:	2d00      	cmp	r5, #0
 800c422:	dd05      	ble.n	800c430 <_dtoa_r+0x9a0>
 800c424:	4639      	mov	r1, r7
 800c426:	462a      	mov	r2, r5
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 ffe9 	bl	800d400 <__lshift>
 800c42e:	4607      	mov	r7, r0
 800c430:	f1b8 0f00 	cmp.w	r8, #0
 800c434:	d05b      	beq.n	800c4ee <_dtoa_r+0xa5e>
 800c436:	6879      	ldr	r1, [r7, #4]
 800c438:	4620      	mov	r0, r4
 800c43a:	f000 fd85 	bl	800cf48 <_Balloc>
 800c43e:	4605      	mov	r5, r0
 800c440:	b928      	cbnz	r0, 800c44e <_dtoa_r+0x9be>
 800c442:	4b87      	ldr	r3, [pc, #540]	; (800c660 <_dtoa_r+0xbd0>)
 800c444:	4602      	mov	r2, r0
 800c446:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c44a:	f7ff bb3b 	b.w	800bac4 <_dtoa_r+0x34>
 800c44e:	693a      	ldr	r2, [r7, #16]
 800c450:	3202      	adds	r2, #2
 800c452:	0092      	lsls	r2, r2, #2
 800c454:	f107 010c 	add.w	r1, r7, #12
 800c458:	300c      	adds	r0, #12
 800c45a:	f7fd fe36 	bl	800a0ca <memcpy>
 800c45e:	2201      	movs	r2, #1
 800c460:	4629      	mov	r1, r5
 800c462:	4620      	mov	r0, r4
 800c464:	f000 ffcc 	bl	800d400 <__lshift>
 800c468:	9b01      	ldr	r3, [sp, #4]
 800c46a:	f103 0901 	add.w	r9, r3, #1
 800c46e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c472:	4413      	add	r3, r2
 800c474:	9305      	str	r3, [sp, #20]
 800c476:	f00a 0301 	and.w	r3, sl, #1
 800c47a:	46b8      	mov	r8, r7
 800c47c:	9304      	str	r3, [sp, #16]
 800c47e:	4607      	mov	r7, r0
 800c480:	4631      	mov	r1, r6
 800c482:	ee18 0a10 	vmov	r0, s16
 800c486:	f7ff fa77 	bl	800b978 <quorem>
 800c48a:	4641      	mov	r1, r8
 800c48c:	9002      	str	r0, [sp, #8]
 800c48e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c492:	ee18 0a10 	vmov	r0, s16
 800c496:	f001 f823 	bl	800d4e0 <__mcmp>
 800c49a:	463a      	mov	r2, r7
 800c49c:	9003      	str	r0, [sp, #12]
 800c49e:	4631      	mov	r1, r6
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f001 f839 	bl	800d518 <__mdiff>
 800c4a6:	68c2      	ldr	r2, [r0, #12]
 800c4a8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c4ac:	4605      	mov	r5, r0
 800c4ae:	bb02      	cbnz	r2, 800c4f2 <_dtoa_r+0xa62>
 800c4b0:	4601      	mov	r1, r0
 800c4b2:	ee18 0a10 	vmov	r0, s16
 800c4b6:	f001 f813 	bl	800d4e0 <__mcmp>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	4629      	mov	r1, r5
 800c4be:	4620      	mov	r0, r4
 800c4c0:	9207      	str	r2, [sp, #28]
 800c4c2:	f000 fd81 	bl	800cfc8 <_Bfree>
 800c4c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c4ca:	ea43 0102 	orr.w	r1, r3, r2
 800c4ce:	9b04      	ldr	r3, [sp, #16]
 800c4d0:	430b      	orrs	r3, r1
 800c4d2:	464d      	mov	r5, r9
 800c4d4:	d10f      	bne.n	800c4f6 <_dtoa_r+0xa66>
 800c4d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c4da:	d02a      	beq.n	800c532 <_dtoa_r+0xaa2>
 800c4dc:	9b03      	ldr	r3, [sp, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	dd02      	ble.n	800c4e8 <_dtoa_r+0xa58>
 800c4e2:	9b02      	ldr	r3, [sp, #8]
 800c4e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c4e8:	f88b a000 	strb.w	sl, [fp]
 800c4ec:	e775      	b.n	800c3da <_dtoa_r+0x94a>
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	e7ba      	b.n	800c468 <_dtoa_r+0x9d8>
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	e7e2      	b.n	800c4bc <_dtoa_r+0xa2c>
 800c4f6:	9b03      	ldr	r3, [sp, #12]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	db04      	blt.n	800c506 <_dtoa_r+0xa76>
 800c4fc:	9906      	ldr	r1, [sp, #24]
 800c4fe:	430b      	orrs	r3, r1
 800c500:	9904      	ldr	r1, [sp, #16]
 800c502:	430b      	orrs	r3, r1
 800c504:	d122      	bne.n	800c54c <_dtoa_r+0xabc>
 800c506:	2a00      	cmp	r2, #0
 800c508:	ddee      	ble.n	800c4e8 <_dtoa_r+0xa58>
 800c50a:	ee18 1a10 	vmov	r1, s16
 800c50e:	2201      	movs	r2, #1
 800c510:	4620      	mov	r0, r4
 800c512:	f000 ff75 	bl	800d400 <__lshift>
 800c516:	4631      	mov	r1, r6
 800c518:	ee08 0a10 	vmov	s16, r0
 800c51c:	f000 ffe0 	bl	800d4e0 <__mcmp>
 800c520:	2800      	cmp	r0, #0
 800c522:	dc03      	bgt.n	800c52c <_dtoa_r+0xa9c>
 800c524:	d1e0      	bne.n	800c4e8 <_dtoa_r+0xa58>
 800c526:	f01a 0f01 	tst.w	sl, #1
 800c52a:	d0dd      	beq.n	800c4e8 <_dtoa_r+0xa58>
 800c52c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c530:	d1d7      	bne.n	800c4e2 <_dtoa_r+0xa52>
 800c532:	2339      	movs	r3, #57	; 0x39
 800c534:	f88b 3000 	strb.w	r3, [fp]
 800c538:	462b      	mov	r3, r5
 800c53a:	461d      	mov	r5, r3
 800c53c:	3b01      	subs	r3, #1
 800c53e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c542:	2a39      	cmp	r2, #57	; 0x39
 800c544:	d071      	beq.n	800c62a <_dtoa_r+0xb9a>
 800c546:	3201      	adds	r2, #1
 800c548:	701a      	strb	r2, [r3, #0]
 800c54a:	e746      	b.n	800c3da <_dtoa_r+0x94a>
 800c54c:	2a00      	cmp	r2, #0
 800c54e:	dd07      	ble.n	800c560 <_dtoa_r+0xad0>
 800c550:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c554:	d0ed      	beq.n	800c532 <_dtoa_r+0xaa2>
 800c556:	f10a 0301 	add.w	r3, sl, #1
 800c55a:	f88b 3000 	strb.w	r3, [fp]
 800c55e:	e73c      	b.n	800c3da <_dtoa_r+0x94a>
 800c560:	9b05      	ldr	r3, [sp, #20]
 800c562:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c566:	4599      	cmp	r9, r3
 800c568:	d047      	beq.n	800c5fa <_dtoa_r+0xb6a>
 800c56a:	ee18 1a10 	vmov	r1, s16
 800c56e:	2300      	movs	r3, #0
 800c570:	220a      	movs	r2, #10
 800c572:	4620      	mov	r0, r4
 800c574:	f000 fd4a 	bl	800d00c <__multadd>
 800c578:	45b8      	cmp	r8, r7
 800c57a:	ee08 0a10 	vmov	s16, r0
 800c57e:	f04f 0300 	mov.w	r3, #0
 800c582:	f04f 020a 	mov.w	r2, #10
 800c586:	4641      	mov	r1, r8
 800c588:	4620      	mov	r0, r4
 800c58a:	d106      	bne.n	800c59a <_dtoa_r+0xb0a>
 800c58c:	f000 fd3e 	bl	800d00c <__multadd>
 800c590:	4680      	mov	r8, r0
 800c592:	4607      	mov	r7, r0
 800c594:	f109 0901 	add.w	r9, r9, #1
 800c598:	e772      	b.n	800c480 <_dtoa_r+0x9f0>
 800c59a:	f000 fd37 	bl	800d00c <__multadd>
 800c59e:	4639      	mov	r1, r7
 800c5a0:	4680      	mov	r8, r0
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	220a      	movs	r2, #10
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f000 fd30 	bl	800d00c <__multadd>
 800c5ac:	4607      	mov	r7, r0
 800c5ae:	e7f1      	b.n	800c594 <_dtoa_r+0xb04>
 800c5b0:	9b03      	ldr	r3, [sp, #12]
 800c5b2:	9302      	str	r3, [sp, #8]
 800c5b4:	9d01      	ldr	r5, [sp, #4]
 800c5b6:	ee18 0a10 	vmov	r0, s16
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	f7ff f9dc 	bl	800b978 <quorem>
 800c5c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c5c4:	9b01      	ldr	r3, [sp, #4]
 800c5c6:	f805 ab01 	strb.w	sl, [r5], #1
 800c5ca:	1aea      	subs	r2, r5, r3
 800c5cc:	9b02      	ldr	r3, [sp, #8]
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	dd09      	ble.n	800c5e6 <_dtoa_r+0xb56>
 800c5d2:	ee18 1a10 	vmov	r1, s16
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	220a      	movs	r2, #10
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f000 fd16 	bl	800d00c <__multadd>
 800c5e0:	ee08 0a10 	vmov	s16, r0
 800c5e4:	e7e7      	b.n	800c5b6 <_dtoa_r+0xb26>
 800c5e6:	9b02      	ldr	r3, [sp, #8]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	bfc8      	it	gt
 800c5ec:	461d      	movgt	r5, r3
 800c5ee:	9b01      	ldr	r3, [sp, #4]
 800c5f0:	bfd8      	it	le
 800c5f2:	2501      	movle	r5, #1
 800c5f4:	441d      	add	r5, r3
 800c5f6:	f04f 0800 	mov.w	r8, #0
 800c5fa:	ee18 1a10 	vmov	r1, s16
 800c5fe:	2201      	movs	r2, #1
 800c600:	4620      	mov	r0, r4
 800c602:	f000 fefd 	bl	800d400 <__lshift>
 800c606:	4631      	mov	r1, r6
 800c608:	ee08 0a10 	vmov	s16, r0
 800c60c:	f000 ff68 	bl	800d4e0 <__mcmp>
 800c610:	2800      	cmp	r0, #0
 800c612:	dc91      	bgt.n	800c538 <_dtoa_r+0xaa8>
 800c614:	d102      	bne.n	800c61c <_dtoa_r+0xb8c>
 800c616:	f01a 0f01 	tst.w	sl, #1
 800c61a:	d18d      	bne.n	800c538 <_dtoa_r+0xaa8>
 800c61c:	462b      	mov	r3, r5
 800c61e:	461d      	mov	r5, r3
 800c620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c624:	2a30      	cmp	r2, #48	; 0x30
 800c626:	d0fa      	beq.n	800c61e <_dtoa_r+0xb8e>
 800c628:	e6d7      	b.n	800c3da <_dtoa_r+0x94a>
 800c62a:	9a01      	ldr	r2, [sp, #4]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d184      	bne.n	800c53a <_dtoa_r+0xaaa>
 800c630:	9b00      	ldr	r3, [sp, #0]
 800c632:	3301      	adds	r3, #1
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	2331      	movs	r3, #49	; 0x31
 800c638:	7013      	strb	r3, [r2, #0]
 800c63a:	e6ce      	b.n	800c3da <_dtoa_r+0x94a>
 800c63c:	4b09      	ldr	r3, [pc, #36]	; (800c664 <_dtoa_r+0xbd4>)
 800c63e:	f7ff ba95 	b.w	800bb6c <_dtoa_r+0xdc>
 800c642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c644:	2b00      	cmp	r3, #0
 800c646:	f47f aa6e 	bne.w	800bb26 <_dtoa_r+0x96>
 800c64a:	4b07      	ldr	r3, [pc, #28]	; (800c668 <_dtoa_r+0xbd8>)
 800c64c:	f7ff ba8e 	b.w	800bb6c <_dtoa_r+0xdc>
 800c650:	9b02      	ldr	r3, [sp, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	dcae      	bgt.n	800c5b4 <_dtoa_r+0xb24>
 800c656:	9b06      	ldr	r3, [sp, #24]
 800c658:	2b02      	cmp	r3, #2
 800c65a:	f73f aea8 	bgt.w	800c3ae <_dtoa_r+0x91e>
 800c65e:	e7a9      	b.n	800c5b4 <_dtoa_r+0xb24>
 800c660:	0800e718 	.word	0x0800e718
 800c664:	0800e520 	.word	0x0800e520
 800c668:	0800e699 	.word	0x0800e699

0800c66c <__sflush_r>:
 800c66c:	898a      	ldrh	r2, [r1, #12]
 800c66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c672:	4605      	mov	r5, r0
 800c674:	0710      	lsls	r0, r2, #28
 800c676:	460c      	mov	r4, r1
 800c678:	d458      	bmi.n	800c72c <__sflush_r+0xc0>
 800c67a:	684b      	ldr	r3, [r1, #4]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	dc05      	bgt.n	800c68c <__sflush_r+0x20>
 800c680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c682:	2b00      	cmp	r3, #0
 800c684:	dc02      	bgt.n	800c68c <__sflush_r+0x20>
 800c686:	2000      	movs	r0, #0
 800c688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c68c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c68e:	2e00      	cmp	r6, #0
 800c690:	d0f9      	beq.n	800c686 <__sflush_r+0x1a>
 800c692:	2300      	movs	r3, #0
 800c694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c698:	682f      	ldr	r7, [r5, #0]
 800c69a:	602b      	str	r3, [r5, #0]
 800c69c:	d032      	beq.n	800c704 <__sflush_r+0x98>
 800c69e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6a0:	89a3      	ldrh	r3, [r4, #12]
 800c6a2:	075a      	lsls	r2, r3, #29
 800c6a4:	d505      	bpl.n	800c6b2 <__sflush_r+0x46>
 800c6a6:	6863      	ldr	r3, [r4, #4]
 800c6a8:	1ac0      	subs	r0, r0, r3
 800c6aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6ac:	b10b      	cbz	r3, 800c6b2 <__sflush_r+0x46>
 800c6ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6b0:	1ac0      	subs	r0, r0, r3
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6b8:	6a21      	ldr	r1, [r4, #32]
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	47b0      	blx	r6
 800c6be:	1c43      	adds	r3, r0, #1
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	d106      	bne.n	800c6d2 <__sflush_r+0x66>
 800c6c4:	6829      	ldr	r1, [r5, #0]
 800c6c6:	291d      	cmp	r1, #29
 800c6c8:	d82c      	bhi.n	800c724 <__sflush_r+0xb8>
 800c6ca:	4a2a      	ldr	r2, [pc, #168]	; (800c774 <__sflush_r+0x108>)
 800c6cc:	40ca      	lsrs	r2, r1
 800c6ce:	07d6      	lsls	r6, r2, #31
 800c6d0:	d528      	bpl.n	800c724 <__sflush_r+0xb8>
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	6062      	str	r2, [r4, #4]
 800c6d6:	04d9      	lsls	r1, r3, #19
 800c6d8:	6922      	ldr	r2, [r4, #16]
 800c6da:	6022      	str	r2, [r4, #0]
 800c6dc:	d504      	bpl.n	800c6e8 <__sflush_r+0x7c>
 800c6de:	1c42      	adds	r2, r0, #1
 800c6e0:	d101      	bne.n	800c6e6 <__sflush_r+0x7a>
 800c6e2:	682b      	ldr	r3, [r5, #0]
 800c6e4:	b903      	cbnz	r3, 800c6e8 <__sflush_r+0x7c>
 800c6e6:	6560      	str	r0, [r4, #84]	; 0x54
 800c6e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ea:	602f      	str	r7, [r5, #0]
 800c6ec:	2900      	cmp	r1, #0
 800c6ee:	d0ca      	beq.n	800c686 <__sflush_r+0x1a>
 800c6f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6f4:	4299      	cmp	r1, r3
 800c6f6:	d002      	beq.n	800c6fe <__sflush_r+0x92>
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	f001 f8fd 	bl	800d8f8 <_free_r>
 800c6fe:	2000      	movs	r0, #0
 800c700:	6360      	str	r0, [r4, #52]	; 0x34
 800c702:	e7c1      	b.n	800c688 <__sflush_r+0x1c>
 800c704:	6a21      	ldr	r1, [r4, #32]
 800c706:	2301      	movs	r3, #1
 800c708:	4628      	mov	r0, r5
 800c70a:	47b0      	blx	r6
 800c70c:	1c41      	adds	r1, r0, #1
 800c70e:	d1c7      	bne.n	800c6a0 <__sflush_r+0x34>
 800c710:	682b      	ldr	r3, [r5, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d0c4      	beq.n	800c6a0 <__sflush_r+0x34>
 800c716:	2b1d      	cmp	r3, #29
 800c718:	d001      	beq.n	800c71e <__sflush_r+0xb2>
 800c71a:	2b16      	cmp	r3, #22
 800c71c:	d101      	bne.n	800c722 <__sflush_r+0xb6>
 800c71e:	602f      	str	r7, [r5, #0]
 800c720:	e7b1      	b.n	800c686 <__sflush_r+0x1a>
 800c722:	89a3      	ldrh	r3, [r4, #12]
 800c724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c728:	81a3      	strh	r3, [r4, #12]
 800c72a:	e7ad      	b.n	800c688 <__sflush_r+0x1c>
 800c72c:	690f      	ldr	r7, [r1, #16]
 800c72e:	2f00      	cmp	r7, #0
 800c730:	d0a9      	beq.n	800c686 <__sflush_r+0x1a>
 800c732:	0793      	lsls	r3, r2, #30
 800c734:	680e      	ldr	r6, [r1, #0]
 800c736:	bf08      	it	eq
 800c738:	694b      	ldreq	r3, [r1, #20]
 800c73a:	600f      	str	r7, [r1, #0]
 800c73c:	bf18      	it	ne
 800c73e:	2300      	movne	r3, #0
 800c740:	eba6 0807 	sub.w	r8, r6, r7
 800c744:	608b      	str	r3, [r1, #8]
 800c746:	f1b8 0f00 	cmp.w	r8, #0
 800c74a:	dd9c      	ble.n	800c686 <__sflush_r+0x1a>
 800c74c:	6a21      	ldr	r1, [r4, #32]
 800c74e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c750:	4643      	mov	r3, r8
 800c752:	463a      	mov	r2, r7
 800c754:	4628      	mov	r0, r5
 800c756:	47b0      	blx	r6
 800c758:	2800      	cmp	r0, #0
 800c75a:	dc06      	bgt.n	800c76a <__sflush_r+0xfe>
 800c75c:	89a3      	ldrh	r3, [r4, #12]
 800c75e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c762:	81a3      	strh	r3, [r4, #12]
 800c764:	f04f 30ff 	mov.w	r0, #4294967295
 800c768:	e78e      	b.n	800c688 <__sflush_r+0x1c>
 800c76a:	4407      	add	r7, r0
 800c76c:	eba8 0800 	sub.w	r8, r8, r0
 800c770:	e7e9      	b.n	800c746 <__sflush_r+0xda>
 800c772:	bf00      	nop
 800c774:	20400001 	.word	0x20400001

0800c778 <_fflush_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	690b      	ldr	r3, [r1, #16]
 800c77c:	4605      	mov	r5, r0
 800c77e:	460c      	mov	r4, r1
 800c780:	b913      	cbnz	r3, 800c788 <_fflush_r+0x10>
 800c782:	2500      	movs	r5, #0
 800c784:	4628      	mov	r0, r5
 800c786:	bd38      	pop	{r3, r4, r5, pc}
 800c788:	b118      	cbz	r0, 800c792 <_fflush_r+0x1a>
 800c78a:	6983      	ldr	r3, [r0, #24]
 800c78c:	b90b      	cbnz	r3, 800c792 <_fflush_r+0x1a>
 800c78e:	f7fd fbd7 	bl	8009f40 <__sinit>
 800c792:	4b14      	ldr	r3, [pc, #80]	; (800c7e4 <_fflush_r+0x6c>)
 800c794:	429c      	cmp	r4, r3
 800c796:	d11b      	bne.n	800c7d0 <_fflush_r+0x58>
 800c798:	686c      	ldr	r4, [r5, #4]
 800c79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d0ef      	beq.n	800c782 <_fflush_r+0xa>
 800c7a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7a4:	07d0      	lsls	r0, r2, #31
 800c7a6:	d404      	bmi.n	800c7b2 <_fflush_r+0x3a>
 800c7a8:	0599      	lsls	r1, r3, #22
 800c7aa:	d402      	bmi.n	800c7b2 <_fflush_r+0x3a>
 800c7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7ae:	f7fd fc8a 	bl	800a0c6 <__retarget_lock_acquire_recursive>
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	f7ff ff59 	bl	800c66c <__sflush_r>
 800c7ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7bc:	07da      	lsls	r2, r3, #31
 800c7be:	4605      	mov	r5, r0
 800c7c0:	d4e0      	bmi.n	800c784 <_fflush_r+0xc>
 800c7c2:	89a3      	ldrh	r3, [r4, #12]
 800c7c4:	059b      	lsls	r3, r3, #22
 800c7c6:	d4dd      	bmi.n	800c784 <_fflush_r+0xc>
 800c7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7ca:	f7fd fc7d 	bl	800a0c8 <__retarget_lock_release_recursive>
 800c7ce:	e7d9      	b.n	800c784 <_fflush_r+0xc>
 800c7d0:	4b05      	ldr	r3, [pc, #20]	; (800c7e8 <_fflush_r+0x70>)
 800c7d2:	429c      	cmp	r4, r3
 800c7d4:	d101      	bne.n	800c7da <_fflush_r+0x62>
 800c7d6:	68ac      	ldr	r4, [r5, #8]
 800c7d8:	e7df      	b.n	800c79a <_fflush_r+0x22>
 800c7da:	4b04      	ldr	r3, [pc, #16]	; (800c7ec <_fflush_r+0x74>)
 800c7dc:	429c      	cmp	r4, r3
 800c7de:	bf08      	it	eq
 800c7e0:	68ec      	ldreq	r4, [r5, #12]
 800c7e2:	e7da      	b.n	800c79a <_fflush_r+0x22>
 800c7e4:	0800e4cc 	.word	0x0800e4cc
 800c7e8:	0800e4ec 	.word	0x0800e4ec
 800c7ec:	0800e4ac 	.word	0x0800e4ac

0800c7f0 <rshift>:
 800c7f0:	6903      	ldr	r3, [r0, #16]
 800c7f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c7f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c7fe:	f100 0414 	add.w	r4, r0, #20
 800c802:	dd45      	ble.n	800c890 <rshift+0xa0>
 800c804:	f011 011f 	ands.w	r1, r1, #31
 800c808:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c80c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c810:	d10c      	bne.n	800c82c <rshift+0x3c>
 800c812:	f100 0710 	add.w	r7, r0, #16
 800c816:	4629      	mov	r1, r5
 800c818:	42b1      	cmp	r1, r6
 800c81a:	d334      	bcc.n	800c886 <rshift+0x96>
 800c81c:	1a9b      	subs	r3, r3, r2
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	1eea      	subs	r2, r5, #3
 800c822:	4296      	cmp	r6, r2
 800c824:	bf38      	it	cc
 800c826:	2300      	movcc	r3, #0
 800c828:	4423      	add	r3, r4
 800c82a:	e015      	b.n	800c858 <rshift+0x68>
 800c82c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c830:	f1c1 0820 	rsb	r8, r1, #32
 800c834:	40cf      	lsrs	r7, r1
 800c836:	f105 0e04 	add.w	lr, r5, #4
 800c83a:	46a1      	mov	r9, r4
 800c83c:	4576      	cmp	r6, lr
 800c83e:	46f4      	mov	ip, lr
 800c840:	d815      	bhi.n	800c86e <rshift+0x7e>
 800c842:	1a9a      	subs	r2, r3, r2
 800c844:	0092      	lsls	r2, r2, #2
 800c846:	3a04      	subs	r2, #4
 800c848:	3501      	adds	r5, #1
 800c84a:	42ae      	cmp	r6, r5
 800c84c:	bf38      	it	cc
 800c84e:	2200      	movcc	r2, #0
 800c850:	18a3      	adds	r3, r4, r2
 800c852:	50a7      	str	r7, [r4, r2]
 800c854:	b107      	cbz	r7, 800c858 <rshift+0x68>
 800c856:	3304      	adds	r3, #4
 800c858:	1b1a      	subs	r2, r3, r4
 800c85a:	42a3      	cmp	r3, r4
 800c85c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c860:	bf08      	it	eq
 800c862:	2300      	moveq	r3, #0
 800c864:	6102      	str	r2, [r0, #16]
 800c866:	bf08      	it	eq
 800c868:	6143      	streq	r3, [r0, #20]
 800c86a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c86e:	f8dc c000 	ldr.w	ip, [ip]
 800c872:	fa0c fc08 	lsl.w	ip, ip, r8
 800c876:	ea4c 0707 	orr.w	r7, ip, r7
 800c87a:	f849 7b04 	str.w	r7, [r9], #4
 800c87e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c882:	40cf      	lsrs	r7, r1
 800c884:	e7da      	b.n	800c83c <rshift+0x4c>
 800c886:	f851 cb04 	ldr.w	ip, [r1], #4
 800c88a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c88e:	e7c3      	b.n	800c818 <rshift+0x28>
 800c890:	4623      	mov	r3, r4
 800c892:	e7e1      	b.n	800c858 <rshift+0x68>

0800c894 <__hexdig_fun>:
 800c894:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c898:	2b09      	cmp	r3, #9
 800c89a:	d802      	bhi.n	800c8a2 <__hexdig_fun+0xe>
 800c89c:	3820      	subs	r0, #32
 800c89e:	b2c0      	uxtb	r0, r0
 800c8a0:	4770      	bx	lr
 800c8a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c8a6:	2b05      	cmp	r3, #5
 800c8a8:	d801      	bhi.n	800c8ae <__hexdig_fun+0x1a>
 800c8aa:	3847      	subs	r0, #71	; 0x47
 800c8ac:	e7f7      	b.n	800c89e <__hexdig_fun+0xa>
 800c8ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c8b2:	2b05      	cmp	r3, #5
 800c8b4:	d801      	bhi.n	800c8ba <__hexdig_fun+0x26>
 800c8b6:	3827      	subs	r0, #39	; 0x27
 800c8b8:	e7f1      	b.n	800c89e <__hexdig_fun+0xa>
 800c8ba:	2000      	movs	r0, #0
 800c8bc:	4770      	bx	lr
	...

0800c8c0 <__gethex>:
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	ed2d 8b02 	vpush	{d8}
 800c8c8:	b089      	sub	sp, #36	; 0x24
 800c8ca:	ee08 0a10 	vmov	s16, r0
 800c8ce:	9304      	str	r3, [sp, #16]
 800c8d0:	4bb4      	ldr	r3, [pc, #720]	; (800cba4 <__gethex+0x2e4>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	9301      	str	r3, [sp, #4]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	468b      	mov	fp, r1
 800c8da:	4690      	mov	r8, r2
 800c8dc:	f7f3 fca2 	bl	8000224 <strlen>
 800c8e0:	9b01      	ldr	r3, [sp, #4]
 800c8e2:	f8db 2000 	ldr.w	r2, [fp]
 800c8e6:	4403      	add	r3, r0
 800c8e8:	4682      	mov	sl, r0
 800c8ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c8ee:	9305      	str	r3, [sp, #20]
 800c8f0:	1c93      	adds	r3, r2, #2
 800c8f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c8f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c8fa:	32fe      	adds	r2, #254	; 0xfe
 800c8fc:	18d1      	adds	r1, r2, r3
 800c8fe:	461f      	mov	r7, r3
 800c900:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c904:	9100      	str	r1, [sp, #0]
 800c906:	2830      	cmp	r0, #48	; 0x30
 800c908:	d0f8      	beq.n	800c8fc <__gethex+0x3c>
 800c90a:	f7ff ffc3 	bl	800c894 <__hexdig_fun>
 800c90e:	4604      	mov	r4, r0
 800c910:	2800      	cmp	r0, #0
 800c912:	d13a      	bne.n	800c98a <__gethex+0xca>
 800c914:	9901      	ldr	r1, [sp, #4]
 800c916:	4652      	mov	r2, sl
 800c918:	4638      	mov	r0, r7
 800c91a:	f001 fb09 	bl	800df30 <strncmp>
 800c91e:	4605      	mov	r5, r0
 800c920:	2800      	cmp	r0, #0
 800c922:	d168      	bne.n	800c9f6 <__gethex+0x136>
 800c924:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c928:	eb07 060a 	add.w	r6, r7, sl
 800c92c:	f7ff ffb2 	bl	800c894 <__hexdig_fun>
 800c930:	2800      	cmp	r0, #0
 800c932:	d062      	beq.n	800c9fa <__gethex+0x13a>
 800c934:	4633      	mov	r3, r6
 800c936:	7818      	ldrb	r0, [r3, #0]
 800c938:	2830      	cmp	r0, #48	; 0x30
 800c93a:	461f      	mov	r7, r3
 800c93c:	f103 0301 	add.w	r3, r3, #1
 800c940:	d0f9      	beq.n	800c936 <__gethex+0x76>
 800c942:	f7ff ffa7 	bl	800c894 <__hexdig_fun>
 800c946:	2301      	movs	r3, #1
 800c948:	fab0 f480 	clz	r4, r0
 800c94c:	0964      	lsrs	r4, r4, #5
 800c94e:	4635      	mov	r5, r6
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	463a      	mov	r2, r7
 800c954:	4616      	mov	r6, r2
 800c956:	3201      	adds	r2, #1
 800c958:	7830      	ldrb	r0, [r6, #0]
 800c95a:	f7ff ff9b 	bl	800c894 <__hexdig_fun>
 800c95e:	2800      	cmp	r0, #0
 800c960:	d1f8      	bne.n	800c954 <__gethex+0x94>
 800c962:	9901      	ldr	r1, [sp, #4]
 800c964:	4652      	mov	r2, sl
 800c966:	4630      	mov	r0, r6
 800c968:	f001 fae2 	bl	800df30 <strncmp>
 800c96c:	b980      	cbnz	r0, 800c990 <__gethex+0xd0>
 800c96e:	b94d      	cbnz	r5, 800c984 <__gethex+0xc4>
 800c970:	eb06 050a 	add.w	r5, r6, sl
 800c974:	462a      	mov	r2, r5
 800c976:	4616      	mov	r6, r2
 800c978:	3201      	adds	r2, #1
 800c97a:	7830      	ldrb	r0, [r6, #0]
 800c97c:	f7ff ff8a 	bl	800c894 <__hexdig_fun>
 800c980:	2800      	cmp	r0, #0
 800c982:	d1f8      	bne.n	800c976 <__gethex+0xb6>
 800c984:	1bad      	subs	r5, r5, r6
 800c986:	00ad      	lsls	r5, r5, #2
 800c988:	e004      	b.n	800c994 <__gethex+0xd4>
 800c98a:	2400      	movs	r4, #0
 800c98c:	4625      	mov	r5, r4
 800c98e:	e7e0      	b.n	800c952 <__gethex+0x92>
 800c990:	2d00      	cmp	r5, #0
 800c992:	d1f7      	bne.n	800c984 <__gethex+0xc4>
 800c994:	7833      	ldrb	r3, [r6, #0]
 800c996:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c99a:	2b50      	cmp	r3, #80	; 0x50
 800c99c:	d13b      	bne.n	800ca16 <__gethex+0x156>
 800c99e:	7873      	ldrb	r3, [r6, #1]
 800c9a0:	2b2b      	cmp	r3, #43	; 0x2b
 800c9a2:	d02c      	beq.n	800c9fe <__gethex+0x13e>
 800c9a4:	2b2d      	cmp	r3, #45	; 0x2d
 800c9a6:	d02e      	beq.n	800ca06 <__gethex+0x146>
 800c9a8:	1c71      	adds	r1, r6, #1
 800c9aa:	f04f 0900 	mov.w	r9, #0
 800c9ae:	7808      	ldrb	r0, [r1, #0]
 800c9b0:	f7ff ff70 	bl	800c894 <__hexdig_fun>
 800c9b4:	1e43      	subs	r3, r0, #1
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	2b18      	cmp	r3, #24
 800c9ba:	d82c      	bhi.n	800ca16 <__gethex+0x156>
 800c9bc:	f1a0 0210 	sub.w	r2, r0, #16
 800c9c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c9c4:	f7ff ff66 	bl	800c894 <__hexdig_fun>
 800c9c8:	1e43      	subs	r3, r0, #1
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	2b18      	cmp	r3, #24
 800c9ce:	d91d      	bls.n	800ca0c <__gethex+0x14c>
 800c9d0:	f1b9 0f00 	cmp.w	r9, #0
 800c9d4:	d000      	beq.n	800c9d8 <__gethex+0x118>
 800c9d6:	4252      	negs	r2, r2
 800c9d8:	4415      	add	r5, r2
 800c9da:	f8cb 1000 	str.w	r1, [fp]
 800c9de:	b1e4      	cbz	r4, 800ca1a <__gethex+0x15a>
 800c9e0:	9b00      	ldr	r3, [sp, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	bf14      	ite	ne
 800c9e6:	2700      	movne	r7, #0
 800c9e8:	2706      	moveq	r7, #6
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	b009      	add	sp, #36	; 0x24
 800c9ee:	ecbd 8b02 	vpop	{d8}
 800c9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f6:	463e      	mov	r6, r7
 800c9f8:	4625      	mov	r5, r4
 800c9fa:	2401      	movs	r4, #1
 800c9fc:	e7ca      	b.n	800c994 <__gethex+0xd4>
 800c9fe:	f04f 0900 	mov.w	r9, #0
 800ca02:	1cb1      	adds	r1, r6, #2
 800ca04:	e7d3      	b.n	800c9ae <__gethex+0xee>
 800ca06:	f04f 0901 	mov.w	r9, #1
 800ca0a:	e7fa      	b.n	800ca02 <__gethex+0x142>
 800ca0c:	230a      	movs	r3, #10
 800ca0e:	fb03 0202 	mla	r2, r3, r2, r0
 800ca12:	3a10      	subs	r2, #16
 800ca14:	e7d4      	b.n	800c9c0 <__gethex+0x100>
 800ca16:	4631      	mov	r1, r6
 800ca18:	e7df      	b.n	800c9da <__gethex+0x11a>
 800ca1a:	1bf3      	subs	r3, r6, r7
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	4621      	mov	r1, r4
 800ca20:	2b07      	cmp	r3, #7
 800ca22:	dc0b      	bgt.n	800ca3c <__gethex+0x17c>
 800ca24:	ee18 0a10 	vmov	r0, s16
 800ca28:	f000 fa8e 	bl	800cf48 <_Balloc>
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	b940      	cbnz	r0, 800ca42 <__gethex+0x182>
 800ca30:	4b5d      	ldr	r3, [pc, #372]	; (800cba8 <__gethex+0x2e8>)
 800ca32:	4602      	mov	r2, r0
 800ca34:	21de      	movs	r1, #222	; 0xde
 800ca36:	485d      	ldr	r0, [pc, #372]	; (800cbac <__gethex+0x2ec>)
 800ca38:	f001 fb5c 	bl	800e0f4 <__assert_func>
 800ca3c:	3101      	adds	r1, #1
 800ca3e:	105b      	asrs	r3, r3, #1
 800ca40:	e7ee      	b.n	800ca20 <__gethex+0x160>
 800ca42:	f100 0914 	add.w	r9, r0, #20
 800ca46:	f04f 0b00 	mov.w	fp, #0
 800ca4a:	f1ca 0301 	rsb	r3, sl, #1
 800ca4e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca52:	f8cd b000 	str.w	fp, [sp]
 800ca56:	9306      	str	r3, [sp, #24]
 800ca58:	42b7      	cmp	r7, r6
 800ca5a:	d340      	bcc.n	800cade <__gethex+0x21e>
 800ca5c:	9802      	ldr	r0, [sp, #8]
 800ca5e:	9b00      	ldr	r3, [sp, #0]
 800ca60:	f840 3b04 	str.w	r3, [r0], #4
 800ca64:	eba0 0009 	sub.w	r0, r0, r9
 800ca68:	1080      	asrs	r0, r0, #2
 800ca6a:	0146      	lsls	r6, r0, #5
 800ca6c:	6120      	str	r0, [r4, #16]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 fb5c 	bl	800d12c <__hi0bits>
 800ca74:	1a30      	subs	r0, r6, r0
 800ca76:	f8d8 6000 	ldr.w	r6, [r8]
 800ca7a:	42b0      	cmp	r0, r6
 800ca7c:	dd63      	ble.n	800cb46 <__gethex+0x286>
 800ca7e:	1b87      	subs	r7, r0, r6
 800ca80:	4639      	mov	r1, r7
 800ca82:	4620      	mov	r0, r4
 800ca84:	f000 ff00 	bl	800d888 <__any_on>
 800ca88:	4682      	mov	sl, r0
 800ca8a:	b1a8      	cbz	r0, 800cab8 <__gethex+0x1f8>
 800ca8c:	1e7b      	subs	r3, r7, #1
 800ca8e:	1159      	asrs	r1, r3, #5
 800ca90:	f003 021f 	and.w	r2, r3, #31
 800ca94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ca98:	f04f 0a01 	mov.w	sl, #1
 800ca9c:	fa0a f202 	lsl.w	r2, sl, r2
 800caa0:	420a      	tst	r2, r1
 800caa2:	d009      	beq.n	800cab8 <__gethex+0x1f8>
 800caa4:	4553      	cmp	r3, sl
 800caa6:	dd05      	ble.n	800cab4 <__gethex+0x1f4>
 800caa8:	1eb9      	subs	r1, r7, #2
 800caaa:	4620      	mov	r0, r4
 800caac:	f000 feec 	bl	800d888 <__any_on>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d145      	bne.n	800cb40 <__gethex+0x280>
 800cab4:	f04f 0a02 	mov.w	sl, #2
 800cab8:	4639      	mov	r1, r7
 800caba:	4620      	mov	r0, r4
 800cabc:	f7ff fe98 	bl	800c7f0 <rshift>
 800cac0:	443d      	add	r5, r7
 800cac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cac6:	42ab      	cmp	r3, r5
 800cac8:	da4c      	bge.n	800cb64 <__gethex+0x2a4>
 800caca:	ee18 0a10 	vmov	r0, s16
 800cace:	4621      	mov	r1, r4
 800cad0:	f000 fa7a 	bl	800cfc8 <_Bfree>
 800cad4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cad6:	2300      	movs	r3, #0
 800cad8:	6013      	str	r3, [r2, #0]
 800cada:	27a3      	movs	r7, #163	; 0xa3
 800cadc:	e785      	b.n	800c9ea <__gethex+0x12a>
 800cade:	1e73      	subs	r3, r6, #1
 800cae0:	9a05      	ldr	r2, [sp, #20]
 800cae2:	9303      	str	r3, [sp, #12]
 800cae4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cae8:	4293      	cmp	r3, r2
 800caea:	d019      	beq.n	800cb20 <__gethex+0x260>
 800caec:	f1bb 0f20 	cmp.w	fp, #32
 800caf0:	d107      	bne.n	800cb02 <__gethex+0x242>
 800caf2:	9b02      	ldr	r3, [sp, #8]
 800caf4:	9a00      	ldr	r2, [sp, #0]
 800caf6:	f843 2b04 	str.w	r2, [r3], #4
 800cafa:	9302      	str	r3, [sp, #8]
 800cafc:	2300      	movs	r3, #0
 800cafe:	9300      	str	r3, [sp, #0]
 800cb00:	469b      	mov	fp, r3
 800cb02:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cb06:	f7ff fec5 	bl	800c894 <__hexdig_fun>
 800cb0a:	9b00      	ldr	r3, [sp, #0]
 800cb0c:	f000 000f 	and.w	r0, r0, #15
 800cb10:	fa00 f00b 	lsl.w	r0, r0, fp
 800cb14:	4303      	orrs	r3, r0
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	f10b 0b04 	add.w	fp, fp, #4
 800cb1c:	9b03      	ldr	r3, [sp, #12]
 800cb1e:	e00d      	b.n	800cb3c <__gethex+0x27c>
 800cb20:	9b03      	ldr	r3, [sp, #12]
 800cb22:	9a06      	ldr	r2, [sp, #24]
 800cb24:	4413      	add	r3, r2
 800cb26:	42bb      	cmp	r3, r7
 800cb28:	d3e0      	bcc.n	800caec <__gethex+0x22c>
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	9901      	ldr	r1, [sp, #4]
 800cb2e:	9307      	str	r3, [sp, #28]
 800cb30:	4652      	mov	r2, sl
 800cb32:	f001 f9fd 	bl	800df30 <strncmp>
 800cb36:	9b07      	ldr	r3, [sp, #28]
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d1d7      	bne.n	800caec <__gethex+0x22c>
 800cb3c:	461e      	mov	r6, r3
 800cb3e:	e78b      	b.n	800ca58 <__gethex+0x198>
 800cb40:	f04f 0a03 	mov.w	sl, #3
 800cb44:	e7b8      	b.n	800cab8 <__gethex+0x1f8>
 800cb46:	da0a      	bge.n	800cb5e <__gethex+0x29e>
 800cb48:	1a37      	subs	r7, r6, r0
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	ee18 0a10 	vmov	r0, s16
 800cb50:	463a      	mov	r2, r7
 800cb52:	f000 fc55 	bl	800d400 <__lshift>
 800cb56:	1bed      	subs	r5, r5, r7
 800cb58:	4604      	mov	r4, r0
 800cb5a:	f100 0914 	add.w	r9, r0, #20
 800cb5e:	f04f 0a00 	mov.w	sl, #0
 800cb62:	e7ae      	b.n	800cac2 <__gethex+0x202>
 800cb64:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cb68:	42a8      	cmp	r0, r5
 800cb6a:	dd72      	ble.n	800cc52 <__gethex+0x392>
 800cb6c:	1b45      	subs	r5, r0, r5
 800cb6e:	42ae      	cmp	r6, r5
 800cb70:	dc36      	bgt.n	800cbe0 <__gethex+0x320>
 800cb72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	d02a      	beq.n	800cbd0 <__gethex+0x310>
 800cb7a:	2b03      	cmp	r3, #3
 800cb7c:	d02c      	beq.n	800cbd8 <__gethex+0x318>
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d11c      	bne.n	800cbbc <__gethex+0x2fc>
 800cb82:	42ae      	cmp	r6, r5
 800cb84:	d11a      	bne.n	800cbbc <__gethex+0x2fc>
 800cb86:	2e01      	cmp	r6, #1
 800cb88:	d112      	bne.n	800cbb0 <__gethex+0x2f0>
 800cb8a:	9a04      	ldr	r2, [sp, #16]
 800cb8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb90:	6013      	str	r3, [r2, #0]
 800cb92:	2301      	movs	r3, #1
 800cb94:	6123      	str	r3, [r4, #16]
 800cb96:	f8c9 3000 	str.w	r3, [r9]
 800cb9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb9c:	2762      	movs	r7, #98	; 0x62
 800cb9e:	601c      	str	r4, [r3, #0]
 800cba0:	e723      	b.n	800c9ea <__gethex+0x12a>
 800cba2:	bf00      	nop
 800cba4:	0800e790 	.word	0x0800e790
 800cba8:	0800e718 	.word	0x0800e718
 800cbac:	0800e729 	.word	0x0800e729
 800cbb0:	1e71      	subs	r1, r6, #1
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f000 fe68 	bl	800d888 <__any_on>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	d1e6      	bne.n	800cb8a <__gethex+0x2ca>
 800cbbc:	ee18 0a10 	vmov	r0, s16
 800cbc0:	4621      	mov	r1, r4
 800cbc2:	f000 fa01 	bl	800cfc8 <_Bfree>
 800cbc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbc8:	2300      	movs	r3, #0
 800cbca:	6013      	str	r3, [r2, #0]
 800cbcc:	2750      	movs	r7, #80	; 0x50
 800cbce:	e70c      	b.n	800c9ea <__gethex+0x12a>
 800cbd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1f2      	bne.n	800cbbc <__gethex+0x2fc>
 800cbd6:	e7d8      	b.n	800cb8a <__gethex+0x2ca>
 800cbd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1d5      	bne.n	800cb8a <__gethex+0x2ca>
 800cbde:	e7ed      	b.n	800cbbc <__gethex+0x2fc>
 800cbe0:	1e6f      	subs	r7, r5, #1
 800cbe2:	f1ba 0f00 	cmp.w	sl, #0
 800cbe6:	d131      	bne.n	800cc4c <__gethex+0x38c>
 800cbe8:	b127      	cbz	r7, 800cbf4 <__gethex+0x334>
 800cbea:	4639      	mov	r1, r7
 800cbec:	4620      	mov	r0, r4
 800cbee:	f000 fe4b 	bl	800d888 <__any_on>
 800cbf2:	4682      	mov	sl, r0
 800cbf4:	117b      	asrs	r3, r7, #5
 800cbf6:	2101      	movs	r1, #1
 800cbf8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cbfc:	f007 071f 	and.w	r7, r7, #31
 800cc00:	fa01 f707 	lsl.w	r7, r1, r7
 800cc04:	421f      	tst	r7, r3
 800cc06:	4629      	mov	r1, r5
 800cc08:	4620      	mov	r0, r4
 800cc0a:	bf18      	it	ne
 800cc0c:	f04a 0a02 	orrne.w	sl, sl, #2
 800cc10:	1b76      	subs	r6, r6, r5
 800cc12:	f7ff fded 	bl	800c7f0 <rshift>
 800cc16:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cc1a:	2702      	movs	r7, #2
 800cc1c:	f1ba 0f00 	cmp.w	sl, #0
 800cc20:	d048      	beq.n	800ccb4 <__gethex+0x3f4>
 800cc22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d015      	beq.n	800cc56 <__gethex+0x396>
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	d017      	beq.n	800cc5e <__gethex+0x39e>
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d109      	bne.n	800cc46 <__gethex+0x386>
 800cc32:	f01a 0f02 	tst.w	sl, #2
 800cc36:	d006      	beq.n	800cc46 <__gethex+0x386>
 800cc38:	f8d9 0000 	ldr.w	r0, [r9]
 800cc3c:	ea4a 0a00 	orr.w	sl, sl, r0
 800cc40:	f01a 0f01 	tst.w	sl, #1
 800cc44:	d10e      	bne.n	800cc64 <__gethex+0x3a4>
 800cc46:	f047 0710 	orr.w	r7, r7, #16
 800cc4a:	e033      	b.n	800ccb4 <__gethex+0x3f4>
 800cc4c:	f04f 0a01 	mov.w	sl, #1
 800cc50:	e7d0      	b.n	800cbf4 <__gethex+0x334>
 800cc52:	2701      	movs	r7, #1
 800cc54:	e7e2      	b.n	800cc1c <__gethex+0x35c>
 800cc56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc58:	f1c3 0301 	rsb	r3, r3, #1
 800cc5c:	9315      	str	r3, [sp, #84]	; 0x54
 800cc5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d0f0      	beq.n	800cc46 <__gethex+0x386>
 800cc64:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc68:	f104 0314 	add.w	r3, r4, #20
 800cc6c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc70:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc74:	f04f 0c00 	mov.w	ip, #0
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc7e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cc82:	d01c      	beq.n	800ccbe <__gethex+0x3fe>
 800cc84:	3201      	adds	r2, #1
 800cc86:	6002      	str	r2, [r0, #0]
 800cc88:	2f02      	cmp	r7, #2
 800cc8a:	f104 0314 	add.w	r3, r4, #20
 800cc8e:	d13f      	bne.n	800cd10 <__gethex+0x450>
 800cc90:	f8d8 2000 	ldr.w	r2, [r8]
 800cc94:	3a01      	subs	r2, #1
 800cc96:	42b2      	cmp	r2, r6
 800cc98:	d10a      	bne.n	800ccb0 <__gethex+0x3f0>
 800cc9a:	1171      	asrs	r1, r6, #5
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cca2:	f006 061f 	and.w	r6, r6, #31
 800cca6:	fa02 f606 	lsl.w	r6, r2, r6
 800ccaa:	421e      	tst	r6, r3
 800ccac:	bf18      	it	ne
 800ccae:	4617      	movne	r7, r2
 800ccb0:	f047 0720 	orr.w	r7, r7, #32
 800ccb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccb6:	601c      	str	r4, [r3, #0]
 800ccb8:	9b04      	ldr	r3, [sp, #16]
 800ccba:	601d      	str	r5, [r3, #0]
 800ccbc:	e695      	b.n	800c9ea <__gethex+0x12a>
 800ccbe:	4299      	cmp	r1, r3
 800ccc0:	f843 cc04 	str.w	ip, [r3, #-4]
 800ccc4:	d8d8      	bhi.n	800cc78 <__gethex+0x3b8>
 800ccc6:	68a3      	ldr	r3, [r4, #8]
 800ccc8:	459b      	cmp	fp, r3
 800ccca:	db19      	blt.n	800cd00 <__gethex+0x440>
 800cccc:	6861      	ldr	r1, [r4, #4]
 800ccce:	ee18 0a10 	vmov	r0, s16
 800ccd2:	3101      	adds	r1, #1
 800ccd4:	f000 f938 	bl	800cf48 <_Balloc>
 800ccd8:	4681      	mov	r9, r0
 800ccda:	b918      	cbnz	r0, 800cce4 <__gethex+0x424>
 800ccdc:	4b1a      	ldr	r3, [pc, #104]	; (800cd48 <__gethex+0x488>)
 800ccde:	4602      	mov	r2, r0
 800cce0:	2184      	movs	r1, #132	; 0x84
 800cce2:	e6a8      	b.n	800ca36 <__gethex+0x176>
 800cce4:	6922      	ldr	r2, [r4, #16]
 800cce6:	3202      	adds	r2, #2
 800cce8:	f104 010c 	add.w	r1, r4, #12
 800ccec:	0092      	lsls	r2, r2, #2
 800ccee:	300c      	adds	r0, #12
 800ccf0:	f7fd f9eb 	bl	800a0ca <memcpy>
 800ccf4:	4621      	mov	r1, r4
 800ccf6:	ee18 0a10 	vmov	r0, s16
 800ccfa:	f000 f965 	bl	800cfc8 <_Bfree>
 800ccfe:	464c      	mov	r4, r9
 800cd00:	6923      	ldr	r3, [r4, #16]
 800cd02:	1c5a      	adds	r2, r3, #1
 800cd04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd08:	6122      	str	r2, [r4, #16]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	615a      	str	r2, [r3, #20]
 800cd0e:	e7bb      	b.n	800cc88 <__gethex+0x3c8>
 800cd10:	6922      	ldr	r2, [r4, #16]
 800cd12:	455a      	cmp	r2, fp
 800cd14:	dd0b      	ble.n	800cd2e <__gethex+0x46e>
 800cd16:	2101      	movs	r1, #1
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f7ff fd69 	bl	800c7f0 <rshift>
 800cd1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd22:	3501      	adds	r5, #1
 800cd24:	42ab      	cmp	r3, r5
 800cd26:	f6ff aed0 	blt.w	800caca <__gethex+0x20a>
 800cd2a:	2701      	movs	r7, #1
 800cd2c:	e7c0      	b.n	800ccb0 <__gethex+0x3f0>
 800cd2e:	f016 061f 	ands.w	r6, r6, #31
 800cd32:	d0fa      	beq.n	800cd2a <__gethex+0x46a>
 800cd34:	4453      	add	r3, sl
 800cd36:	f1c6 0620 	rsb	r6, r6, #32
 800cd3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cd3e:	f000 f9f5 	bl	800d12c <__hi0bits>
 800cd42:	42b0      	cmp	r0, r6
 800cd44:	dbe7      	blt.n	800cd16 <__gethex+0x456>
 800cd46:	e7f0      	b.n	800cd2a <__gethex+0x46a>
 800cd48:	0800e718 	.word	0x0800e718

0800cd4c <L_shift>:
 800cd4c:	f1c2 0208 	rsb	r2, r2, #8
 800cd50:	0092      	lsls	r2, r2, #2
 800cd52:	b570      	push	{r4, r5, r6, lr}
 800cd54:	f1c2 0620 	rsb	r6, r2, #32
 800cd58:	6843      	ldr	r3, [r0, #4]
 800cd5a:	6804      	ldr	r4, [r0, #0]
 800cd5c:	fa03 f506 	lsl.w	r5, r3, r6
 800cd60:	432c      	orrs	r4, r5
 800cd62:	40d3      	lsrs	r3, r2
 800cd64:	6004      	str	r4, [r0, #0]
 800cd66:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd6a:	4288      	cmp	r0, r1
 800cd6c:	d3f4      	bcc.n	800cd58 <L_shift+0xc>
 800cd6e:	bd70      	pop	{r4, r5, r6, pc}

0800cd70 <__match>:
 800cd70:	b530      	push	{r4, r5, lr}
 800cd72:	6803      	ldr	r3, [r0, #0]
 800cd74:	3301      	adds	r3, #1
 800cd76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd7a:	b914      	cbnz	r4, 800cd82 <__match+0x12>
 800cd7c:	6003      	str	r3, [r0, #0]
 800cd7e:	2001      	movs	r0, #1
 800cd80:	bd30      	pop	{r4, r5, pc}
 800cd82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cd8a:	2d19      	cmp	r5, #25
 800cd8c:	bf98      	it	ls
 800cd8e:	3220      	addls	r2, #32
 800cd90:	42a2      	cmp	r2, r4
 800cd92:	d0f0      	beq.n	800cd76 <__match+0x6>
 800cd94:	2000      	movs	r0, #0
 800cd96:	e7f3      	b.n	800cd80 <__match+0x10>

0800cd98 <__hexnan>:
 800cd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9c:	680b      	ldr	r3, [r1, #0]
 800cd9e:	115e      	asrs	r6, r3, #5
 800cda0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cda4:	f013 031f 	ands.w	r3, r3, #31
 800cda8:	b087      	sub	sp, #28
 800cdaa:	bf18      	it	ne
 800cdac:	3604      	addne	r6, #4
 800cdae:	2500      	movs	r5, #0
 800cdb0:	1f37      	subs	r7, r6, #4
 800cdb2:	4690      	mov	r8, r2
 800cdb4:	6802      	ldr	r2, [r0, #0]
 800cdb6:	9301      	str	r3, [sp, #4]
 800cdb8:	4682      	mov	sl, r0
 800cdba:	f846 5c04 	str.w	r5, [r6, #-4]
 800cdbe:	46b9      	mov	r9, r7
 800cdc0:	463c      	mov	r4, r7
 800cdc2:	9502      	str	r5, [sp, #8]
 800cdc4:	46ab      	mov	fp, r5
 800cdc6:	7851      	ldrb	r1, [r2, #1]
 800cdc8:	1c53      	adds	r3, r2, #1
 800cdca:	9303      	str	r3, [sp, #12]
 800cdcc:	b341      	cbz	r1, 800ce20 <__hexnan+0x88>
 800cdce:	4608      	mov	r0, r1
 800cdd0:	9205      	str	r2, [sp, #20]
 800cdd2:	9104      	str	r1, [sp, #16]
 800cdd4:	f7ff fd5e 	bl	800c894 <__hexdig_fun>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d14f      	bne.n	800ce7c <__hexnan+0xe4>
 800cddc:	9904      	ldr	r1, [sp, #16]
 800cdde:	9a05      	ldr	r2, [sp, #20]
 800cde0:	2920      	cmp	r1, #32
 800cde2:	d818      	bhi.n	800ce16 <__hexnan+0x7e>
 800cde4:	9b02      	ldr	r3, [sp, #8]
 800cde6:	459b      	cmp	fp, r3
 800cde8:	dd13      	ble.n	800ce12 <__hexnan+0x7a>
 800cdea:	454c      	cmp	r4, r9
 800cdec:	d206      	bcs.n	800cdfc <__hexnan+0x64>
 800cdee:	2d07      	cmp	r5, #7
 800cdf0:	dc04      	bgt.n	800cdfc <__hexnan+0x64>
 800cdf2:	462a      	mov	r2, r5
 800cdf4:	4649      	mov	r1, r9
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	f7ff ffa8 	bl	800cd4c <L_shift>
 800cdfc:	4544      	cmp	r4, r8
 800cdfe:	d950      	bls.n	800cea2 <__hexnan+0x10a>
 800ce00:	2300      	movs	r3, #0
 800ce02:	f1a4 0904 	sub.w	r9, r4, #4
 800ce06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce0a:	f8cd b008 	str.w	fp, [sp, #8]
 800ce0e:	464c      	mov	r4, r9
 800ce10:	461d      	mov	r5, r3
 800ce12:	9a03      	ldr	r2, [sp, #12]
 800ce14:	e7d7      	b.n	800cdc6 <__hexnan+0x2e>
 800ce16:	2929      	cmp	r1, #41	; 0x29
 800ce18:	d156      	bne.n	800cec8 <__hexnan+0x130>
 800ce1a:	3202      	adds	r2, #2
 800ce1c:	f8ca 2000 	str.w	r2, [sl]
 800ce20:	f1bb 0f00 	cmp.w	fp, #0
 800ce24:	d050      	beq.n	800cec8 <__hexnan+0x130>
 800ce26:	454c      	cmp	r4, r9
 800ce28:	d206      	bcs.n	800ce38 <__hexnan+0xa0>
 800ce2a:	2d07      	cmp	r5, #7
 800ce2c:	dc04      	bgt.n	800ce38 <__hexnan+0xa0>
 800ce2e:	462a      	mov	r2, r5
 800ce30:	4649      	mov	r1, r9
 800ce32:	4620      	mov	r0, r4
 800ce34:	f7ff ff8a 	bl	800cd4c <L_shift>
 800ce38:	4544      	cmp	r4, r8
 800ce3a:	d934      	bls.n	800cea6 <__hexnan+0x10e>
 800ce3c:	f1a8 0204 	sub.w	r2, r8, #4
 800ce40:	4623      	mov	r3, r4
 800ce42:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce46:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce4a:	429f      	cmp	r7, r3
 800ce4c:	d2f9      	bcs.n	800ce42 <__hexnan+0xaa>
 800ce4e:	1b3b      	subs	r3, r7, r4
 800ce50:	f023 0303 	bic.w	r3, r3, #3
 800ce54:	3304      	adds	r3, #4
 800ce56:	3401      	adds	r4, #1
 800ce58:	3e03      	subs	r6, #3
 800ce5a:	42b4      	cmp	r4, r6
 800ce5c:	bf88      	it	hi
 800ce5e:	2304      	movhi	r3, #4
 800ce60:	4443      	add	r3, r8
 800ce62:	2200      	movs	r2, #0
 800ce64:	f843 2b04 	str.w	r2, [r3], #4
 800ce68:	429f      	cmp	r7, r3
 800ce6a:	d2fb      	bcs.n	800ce64 <__hexnan+0xcc>
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	b91b      	cbnz	r3, 800ce78 <__hexnan+0xe0>
 800ce70:	4547      	cmp	r7, r8
 800ce72:	d127      	bne.n	800cec4 <__hexnan+0x12c>
 800ce74:	2301      	movs	r3, #1
 800ce76:	603b      	str	r3, [r7, #0]
 800ce78:	2005      	movs	r0, #5
 800ce7a:	e026      	b.n	800ceca <__hexnan+0x132>
 800ce7c:	3501      	adds	r5, #1
 800ce7e:	2d08      	cmp	r5, #8
 800ce80:	f10b 0b01 	add.w	fp, fp, #1
 800ce84:	dd06      	ble.n	800ce94 <__hexnan+0xfc>
 800ce86:	4544      	cmp	r4, r8
 800ce88:	d9c3      	bls.n	800ce12 <__hexnan+0x7a>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce90:	2501      	movs	r5, #1
 800ce92:	3c04      	subs	r4, #4
 800ce94:	6822      	ldr	r2, [r4, #0]
 800ce96:	f000 000f 	and.w	r0, r0, #15
 800ce9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ce9e:	6022      	str	r2, [r4, #0]
 800cea0:	e7b7      	b.n	800ce12 <__hexnan+0x7a>
 800cea2:	2508      	movs	r5, #8
 800cea4:	e7b5      	b.n	800ce12 <__hexnan+0x7a>
 800cea6:	9b01      	ldr	r3, [sp, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d0df      	beq.n	800ce6c <__hexnan+0xd4>
 800ceac:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb0:	f1c3 0320 	rsb	r3, r3, #32
 800ceb4:	fa22 f303 	lsr.w	r3, r2, r3
 800ceb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cebc:	401a      	ands	r2, r3
 800cebe:	f846 2c04 	str.w	r2, [r6, #-4]
 800cec2:	e7d3      	b.n	800ce6c <__hexnan+0xd4>
 800cec4:	3f04      	subs	r7, #4
 800cec6:	e7d1      	b.n	800ce6c <__hexnan+0xd4>
 800cec8:	2004      	movs	r0, #4
 800ceca:	b007      	add	sp, #28
 800cecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ced0 <_localeconv_r>:
 800ced0:	4800      	ldr	r0, [pc, #0]	; (800ced4 <_localeconv_r+0x4>)
 800ced2:	4770      	bx	lr
 800ced4:	2000019c 	.word	0x2000019c

0800ced8 <_lseek_r>:
 800ced8:	b538      	push	{r3, r4, r5, lr}
 800ceda:	4d07      	ldr	r5, [pc, #28]	; (800cef8 <_lseek_r+0x20>)
 800cedc:	4604      	mov	r4, r0
 800cede:	4608      	mov	r0, r1
 800cee0:	4611      	mov	r1, r2
 800cee2:	2200      	movs	r2, #0
 800cee4:	602a      	str	r2, [r5, #0]
 800cee6:	461a      	mov	r2, r3
 800cee8:	f7f6 f9ae 	bl	8003248 <_lseek>
 800ceec:	1c43      	adds	r3, r0, #1
 800ceee:	d102      	bne.n	800cef6 <_lseek_r+0x1e>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	b103      	cbz	r3, 800cef6 <_lseek_r+0x1e>
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	bd38      	pop	{r3, r4, r5, pc}
 800cef8:	2000472c 	.word	0x2000472c

0800cefc <malloc>:
 800cefc:	4b02      	ldr	r3, [pc, #8]	; (800cf08 <malloc+0xc>)
 800cefe:	4601      	mov	r1, r0
 800cf00:	6818      	ldr	r0, [r3, #0]
 800cf02:	f7fd b919 	b.w	800a138 <_malloc_r>
 800cf06:	bf00      	nop
 800cf08:	20000044 	.word	0x20000044

0800cf0c <__ascii_mbtowc>:
 800cf0c:	b082      	sub	sp, #8
 800cf0e:	b901      	cbnz	r1, 800cf12 <__ascii_mbtowc+0x6>
 800cf10:	a901      	add	r1, sp, #4
 800cf12:	b142      	cbz	r2, 800cf26 <__ascii_mbtowc+0x1a>
 800cf14:	b14b      	cbz	r3, 800cf2a <__ascii_mbtowc+0x1e>
 800cf16:	7813      	ldrb	r3, [r2, #0]
 800cf18:	600b      	str	r3, [r1, #0]
 800cf1a:	7812      	ldrb	r2, [r2, #0]
 800cf1c:	1e10      	subs	r0, r2, #0
 800cf1e:	bf18      	it	ne
 800cf20:	2001      	movne	r0, #1
 800cf22:	b002      	add	sp, #8
 800cf24:	4770      	bx	lr
 800cf26:	4610      	mov	r0, r2
 800cf28:	e7fb      	b.n	800cf22 <__ascii_mbtowc+0x16>
 800cf2a:	f06f 0001 	mvn.w	r0, #1
 800cf2e:	e7f8      	b.n	800cf22 <__ascii_mbtowc+0x16>

0800cf30 <__malloc_lock>:
 800cf30:	4801      	ldr	r0, [pc, #4]	; (800cf38 <__malloc_lock+0x8>)
 800cf32:	f7fd b8c8 	b.w	800a0c6 <__retarget_lock_acquire_recursive>
 800cf36:	bf00      	nop
 800cf38:	20004720 	.word	0x20004720

0800cf3c <__malloc_unlock>:
 800cf3c:	4801      	ldr	r0, [pc, #4]	; (800cf44 <__malloc_unlock+0x8>)
 800cf3e:	f7fd b8c3 	b.w	800a0c8 <__retarget_lock_release_recursive>
 800cf42:	bf00      	nop
 800cf44:	20004720 	.word	0x20004720

0800cf48 <_Balloc>:
 800cf48:	b570      	push	{r4, r5, r6, lr}
 800cf4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	460d      	mov	r5, r1
 800cf50:	b976      	cbnz	r6, 800cf70 <_Balloc+0x28>
 800cf52:	2010      	movs	r0, #16
 800cf54:	f7ff ffd2 	bl	800cefc <malloc>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	6260      	str	r0, [r4, #36]	; 0x24
 800cf5c:	b920      	cbnz	r0, 800cf68 <_Balloc+0x20>
 800cf5e:	4b18      	ldr	r3, [pc, #96]	; (800cfc0 <_Balloc+0x78>)
 800cf60:	4818      	ldr	r0, [pc, #96]	; (800cfc4 <_Balloc+0x7c>)
 800cf62:	2166      	movs	r1, #102	; 0x66
 800cf64:	f001 f8c6 	bl	800e0f4 <__assert_func>
 800cf68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf6c:	6006      	str	r6, [r0, #0]
 800cf6e:	60c6      	str	r6, [r0, #12]
 800cf70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf72:	68f3      	ldr	r3, [r6, #12]
 800cf74:	b183      	cbz	r3, 800cf98 <_Balloc+0x50>
 800cf76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf7e:	b9b8      	cbnz	r0, 800cfb0 <_Balloc+0x68>
 800cf80:	2101      	movs	r1, #1
 800cf82:	fa01 f605 	lsl.w	r6, r1, r5
 800cf86:	1d72      	adds	r2, r6, #5
 800cf88:	0092      	lsls	r2, r2, #2
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f000 fc9d 	bl	800d8ca <_calloc_r>
 800cf90:	b160      	cbz	r0, 800cfac <_Balloc+0x64>
 800cf92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf96:	e00e      	b.n	800cfb6 <_Balloc+0x6e>
 800cf98:	2221      	movs	r2, #33	; 0x21
 800cf9a:	2104      	movs	r1, #4
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f000 fc94 	bl	800d8ca <_calloc_r>
 800cfa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfa4:	60f0      	str	r0, [r6, #12]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1e4      	bne.n	800cf76 <_Balloc+0x2e>
 800cfac:	2000      	movs	r0, #0
 800cfae:	bd70      	pop	{r4, r5, r6, pc}
 800cfb0:	6802      	ldr	r2, [r0, #0]
 800cfb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfbc:	e7f7      	b.n	800cfae <_Balloc+0x66>
 800cfbe:	bf00      	nop
 800cfc0:	0800e6a6 	.word	0x0800e6a6
 800cfc4:	0800e7a4 	.word	0x0800e7a4

0800cfc8 <_Bfree>:
 800cfc8:	b570      	push	{r4, r5, r6, lr}
 800cfca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cfcc:	4605      	mov	r5, r0
 800cfce:	460c      	mov	r4, r1
 800cfd0:	b976      	cbnz	r6, 800cff0 <_Bfree+0x28>
 800cfd2:	2010      	movs	r0, #16
 800cfd4:	f7ff ff92 	bl	800cefc <malloc>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	6268      	str	r0, [r5, #36]	; 0x24
 800cfdc:	b920      	cbnz	r0, 800cfe8 <_Bfree+0x20>
 800cfde:	4b09      	ldr	r3, [pc, #36]	; (800d004 <_Bfree+0x3c>)
 800cfe0:	4809      	ldr	r0, [pc, #36]	; (800d008 <_Bfree+0x40>)
 800cfe2:	218a      	movs	r1, #138	; 0x8a
 800cfe4:	f001 f886 	bl	800e0f4 <__assert_func>
 800cfe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfec:	6006      	str	r6, [r0, #0]
 800cfee:	60c6      	str	r6, [r0, #12]
 800cff0:	b13c      	cbz	r4, 800d002 <_Bfree+0x3a>
 800cff2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cff4:	6862      	ldr	r2, [r4, #4]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cffc:	6021      	str	r1, [r4, #0]
 800cffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d002:	bd70      	pop	{r4, r5, r6, pc}
 800d004:	0800e6a6 	.word	0x0800e6a6
 800d008:	0800e7a4 	.word	0x0800e7a4

0800d00c <__multadd>:
 800d00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d010:	690d      	ldr	r5, [r1, #16]
 800d012:	4607      	mov	r7, r0
 800d014:	460c      	mov	r4, r1
 800d016:	461e      	mov	r6, r3
 800d018:	f101 0c14 	add.w	ip, r1, #20
 800d01c:	2000      	movs	r0, #0
 800d01e:	f8dc 3000 	ldr.w	r3, [ip]
 800d022:	b299      	uxth	r1, r3
 800d024:	fb02 6101 	mla	r1, r2, r1, r6
 800d028:	0c1e      	lsrs	r6, r3, #16
 800d02a:	0c0b      	lsrs	r3, r1, #16
 800d02c:	fb02 3306 	mla	r3, r2, r6, r3
 800d030:	b289      	uxth	r1, r1
 800d032:	3001      	adds	r0, #1
 800d034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d038:	4285      	cmp	r5, r0
 800d03a:	f84c 1b04 	str.w	r1, [ip], #4
 800d03e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d042:	dcec      	bgt.n	800d01e <__multadd+0x12>
 800d044:	b30e      	cbz	r6, 800d08a <__multadd+0x7e>
 800d046:	68a3      	ldr	r3, [r4, #8]
 800d048:	42ab      	cmp	r3, r5
 800d04a:	dc19      	bgt.n	800d080 <__multadd+0x74>
 800d04c:	6861      	ldr	r1, [r4, #4]
 800d04e:	4638      	mov	r0, r7
 800d050:	3101      	adds	r1, #1
 800d052:	f7ff ff79 	bl	800cf48 <_Balloc>
 800d056:	4680      	mov	r8, r0
 800d058:	b928      	cbnz	r0, 800d066 <__multadd+0x5a>
 800d05a:	4602      	mov	r2, r0
 800d05c:	4b0c      	ldr	r3, [pc, #48]	; (800d090 <__multadd+0x84>)
 800d05e:	480d      	ldr	r0, [pc, #52]	; (800d094 <__multadd+0x88>)
 800d060:	21b5      	movs	r1, #181	; 0xb5
 800d062:	f001 f847 	bl	800e0f4 <__assert_func>
 800d066:	6922      	ldr	r2, [r4, #16]
 800d068:	3202      	adds	r2, #2
 800d06a:	f104 010c 	add.w	r1, r4, #12
 800d06e:	0092      	lsls	r2, r2, #2
 800d070:	300c      	adds	r0, #12
 800d072:	f7fd f82a 	bl	800a0ca <memcpy>
 800d076:	4621      	mov	r1, r4
 800d078:	4638      	mov	r0, r7
 800d07a:	f7ff ffa5 	bl	800cfc8 <_Bfree>
 800d07e:	4644      	mov	r4, r8
 800d080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d084:	3501      	adds	r5, #1
 800d086:	615e      	str	r6, [r3, #20]
 800d088:	6125      	str	r5, [r4, #16]
 800d08a:	4620      	mov	r0, r4
 800d08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d090:	0800e718 	.word	0x0800e718
 800d094:	0800e7a4 	.word	0x0800e7a4

0800d098 <__s2b>:
 800d098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d09c:	460c      	mov	r4, r1
 800d09e:	4615      	mov	r5, r2
 800d0a0:	461f      	mov	r7, r3
 800d0a2:	2209      	movs	r2, #9
 800d0a4:	3308      	adds	r3, #8
 800d0a6:	4606      	mov	r6, r0
 800d0a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	db09      	blt.n	800d0c8 <__s2b+0x30>
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	f7ff ff47 	bl	800cf48 <_Balloc>
 800d0ba:	b940      	cbnz	r0, 800d0ce <__s2b+0x36>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	4b19      	ldr	r3, [pc, #100]	; (800d124 <__s2b+0x8c>)
 800d0c0:	4819      	ldr	r0, [pc, #100]	; (800d128 <__s2b+0x90>)
 800d0c2:	21ce      	movs	r1, #206	; 0xce
 800d0c4:	f001 f816 	bl	800e0f4 <__assert_func>
 800d0c8:	0052      	lsls	r2, r2, #1
 800d0ca:	3101      	adds	r1, #1
 800d0cc:	e7f0      	b.n	800d0b0 <__s2b+0x18>
 800d0ce:	9b08      	ldr	r3, [sp, #32]
 800d0d0:	6143      	str	r3, [r0, #20]
 800d0d2:	2d09      	cmp	r5, #9
 800d0d4:	f04f 0301 	mov.w	r3, #1
 800d0d8:	6103      	str	r3, [r0, #16]
 800d0da:	dd16      	ble.n	800d10a <__s2b+0x72>
 800d0dc:	f104 0909 	add.w	r9, r4, #9
 800d0e0:	46c8      	mov	r8, r9
 800d0e2:	442c      	add	r4, r5
 800d0e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d0e8:	4601      	mov	r1, r0
 800d0ea:	3b30      	subs	r3, #48	; 0x30
 800d0ec:	220a      	movs	r2, #10
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	f7ff ff8c 	bl	800d00c <__multadd>
 800d0f4:	45a0      	cmp	r8, r4
 800d0f6:	d1f5      	bne.n	800d0e4 <__s2b+0x4c>
 800d0f8:	f1a5 0408 	sub.w	r4, r5, #8
 800d0fc:	444c      	add	r4, r9
 800d0fe:	1b2d      	subs	r5, r5, r4
 800d100:	1963      	adds	r3, r4, r5
 800d102:	42bb      	cmp	r3, r7
 800d104:	db04      	blt.n	800d110 <__s2b+0x78>
 800d106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d10a:	340a      	adds	r4, #10
 800d10c:	2509      	movs	r5, #9
 800d10e:	e7f6      	b.n	800d0fe <__s2b+0x66>
 800d110:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d114:	4601      	mov	r1, r0
 800d116:	3b30      	subs	r3, #48	; 0x30
 800d118:	220a      	movs	r2, #10
 800d11a:	4630      	mov	r0, r6
 800d11c:	f7ff ff76 	bl	800d00c <__multadd>
 800d120:	e7ee      	b.n	800d100 <__s2b+0x68>
 800d122:	bf00      	nop
 800d124:	0800e718 	.word	0x0800e718
 800d128:	0800e7a4 	.word	0x0800e7a4

0800d12c <__hi0bits>:
 800d12c:	0c03      	lsrs	r3, r0, #16
 800d12e:	041b      	lsls	r3, r3, #16
 800d130:	b9d3      	cbnz	r3, 800d168 <__hi0bits+0x3c>
 800d132:	0400      	lsls	r0, r0, #16
 800d134:	2310      	movs	r3, #16
 800d136:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d13a:	bf04      	itt	eq
 800d13c:	0200      	lsleq	r0, r0, #8
 800d13e:	3308      	addeq	r3, #8
 800d140:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d144:	bf04      	itt	eq
 800d146:	0100      	lsleq	r0, r0, #4
 800d148:	3304      	addeq	r3, #4
 800d14a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d14e:	bf04      	itt	eq
 800d150:	0080      	lsleq	r0, r0, #2
 800d152:	3302      	addeq	r3, #2
 800d154:	2800      	cmp	r0, #0
 800d156:	db05      	blt.n	800d164 <__hi0bits+0x38>
 800d158:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d15c:	f103 0301 	add.w	r3, r3, #1
 800d160:	bf08      	it	eq
 800d162:	2320      	moveq	r3, #32
 800d164:	4618      	mov	r0, r3
 800d166:	4770      	bx	lr
 800d168:	2300      	movs	r3, #0
 800d16a:	e7e4      	b.n	800d136 <__hi0bits+0xa>

0800d16c <__lo0bits>:
 800d16c:	6803      	ldr	r3, [r0, #0]
 800d16e:	f013 0207 	ands.w	r2, r3, #7
 800d172:	4601      	mov	r1, r0
 800d174:	d00b      	beq.n	800d18e <__lo0bits+0x22>
 800d176:	07da      	lsls	r2, r3, #31
 800d178:	d423      	bmi.n	800d1c2 <__lo0bits+0x56>
 800d17a:	0798      	lsls	r0, r3, #30
 800d17c:	bf49      	itett	mi
 800d17e:	085b      	lsrmi	r3, r3, #1
 800d180:	089b      	lsrpl	r3, r3, #2
 800d182:	2001      	movmi	r0, #1
 800d184:	600b      	strmi	r3, [r1, #0]
 800d186:	bf5c      	itt	pl
 800d188:	600b      	strpl	r3, [r1, #0]
 800d18a:	2002      	movpl	r0, #2
 800d18c:	4770      	bx	lr
 800d18e:	b298      	uxth	r0, r3
 800d190:	b9a8      	cbnz	r0, 800d1be <__lo0bits+0x52>
 800d192:	0c1b      	lsrs	r3, r3, #16
 800d194:	2010      	movs	r0, #16
 800d196:	b2da      	uxtb	r2, r3
 800d198:	b90a      	cbnz	r2, 800d19e <__lo0bits+0x32>
 800d19a:	3008      	adds	r0, #8
 800d19c:	0a1b      	lsrs	r3, r3, #8
 800d19e:	071a      	lsls	r2, r3, #28
 800d1a0:	bf04      	itt	eq
 800d1a2:	091b      	lsreq	r3, r3, #4
 800d1a4:	3004      	addeq	r0, #4
 800d1a6:	079a      	lsls	r2, r3, #30
 800d1a8:	bf04      	itt	eq
 800d1aa:	089b      	lsreq	r3, r3, #2
 800d1ac:	3002      	addeq	r0, #2
 800d1ae:	07da      	lsls	r2, r3, #31
 800d1b0:	d403      	bmi.n	800d1ba <__lo0bits+0x4e>
 800d1b2:	085b      	lsrs	r3, r3, #1
 800d1b4:	f100 0001 	add.w	r0, r0, #1
 800d1b8:	d005      	beq.n	800d1c6 <__lo0bits+0x5a>
 800d1ba:	600b      	str	r3, [r1, #0]
 800d1bc:	4770      	bx	lr
 800d1be:	4610      	mov	r0, r2
 800d1c0:	e7e9      	b.n	800d196 <__lo0bits+0x2a>
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	4770      	bx	lr
 800d1c6:	2020      	movs	r0, #32
 800d1c8:	4770      	bx	lr
	...

0800d1cc <__i2b>:
 800d1cc:	b510      	push	{r4, lr}
 800d1ce:	460c      	mov	r4, r1
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	f7ff feb9 	bl	800cf48 <_Balloc>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	b928      	cbnz	r0, 800d1e6 <__i2b+0x1a>
 800d1da:	4b05      	ldr	r3, [pc, #20]	; (800d1f0 <__i2b+0x24>)
 800d1dc:	4805      	ldr	r0, [pc, #20]	; (800d1f4 <__i2b+0x28>)
 800d1de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d1e2:	f000 ff87 	bl	800e0f4 <__assert_func>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	6144      	str	r4, [r0, #20]
 800d1ea:	6103      	str	r3, [r0, #16]
 800d1ec:	bd10      	pop	{r4, pc}
 800d1ee:	bf00      	nop
 800d1f0:	0800e718 	.word	0x0800e718
 800d1f4:	0800e7a4 	.word	0x0800e7a4

0800d1f8 <__multiply>:
 800d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fc:	4691      	mov	r9, r2
 800d1fe:	690a      	ldr	r2, [r1, #16]
 800d200:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d204:	429a      	cmp	r2, r3
 800d206:	bfb8      	it	lt
 800d208:	460b      	movlt	r3, r1
 800d20a:	460c      	mov	r4, r1
 800d20c:	bfbc      	itt	lt
 800d20e:	464c      	movlt	r4, r9
 800d210:	4699      	movlt	r9, r3
 800d212:	6927      	ldr	r7, [r4, #16]
 800d214:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d218:	68a3      	ldr	r3, [r4, #8]
 800d21a:	6861      	ldr	r1, [r4, #4]
 800d21c:	eb07 060a 	add.w	r6, r7, sl
 800d220:	42b3      	cmp	r3, r6
 800d222:	b085      	sub	sp, #20
 800d224:	bfb8      	it	lt
 800d226:	3101      	addlt	r1, #1
 800d228:	f7ff fe8e 	bl	800cf48 <_Balloc>
 800d22c:	b930      	cbnz	r0, 800d23c <__multiply+0x44>
 800d22e:	4602      	mov	r2, r0
 800d230:	4b44      	ldr	r3, [pc, #272]	; (800d344 <__multiply+0x14c>)
 800d232:	4845      	ldr	r0, [pc, #276]	; (800d348 <__multiply+0x150>)
 800d234:	f240 115d 	movw	r1, #349	; 0x15d
 800d238:	f000 ff5c 	bl	800e0f4 <__assert_func>
 800d23c:	f100 0514 	add.w	r5, r0, #20
 800d240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d244:	462b      	mov	r3, r5
 800d246:	2200      	movs	r2, #0
 800d248:	4543      	cmp	r3, r8
 800d24a:	d321      	bcc.n	800d290 <__multiply+0x98>
 800d24c:	f104 0314 	add.w	r3, r4, #20
 800d250:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d254:	f109 0314 	add.w	r3, r9, #20
 800d258:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d25c:	9202      	str	r2, [sp, #8]
 800d25e:	1b3a      	subs	r2, r7, r4
 800d260:	3a15      	subs	r2, #21
 800d262:	f022 0203 	bic.w	r2, r2, #3
 800d266:	3204      	adds	r2, #4
 800d268:	f104 0115 	add.w	r1, r4, #21
 800d26c:	428f      	cmp	r7, r1
 800d26e:	bf38      	it	cc
 800d270:	2204      	movcc	r2, #4
 800d272:	9201      	str	r2, [sp, #4]
 800d274:	9a02      	ldr	r2, [sp, #8]
 800d276:	9303      	str	r3, [sp, #12]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d80c      	bhi.n	800d296 <__multiply+0x9e>
 800d27c:	2e00      	cmp	r6, #0
 800d27e:	dd03      	ble.n	800d288 <__multiply+0x90>
 800d280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d284:	2b00      	cmp	r3, #0
 800d286:	d05a      	beq.n	800d33e <__multiply+0x146>
 800d288:	6106      	str	r6, [r0, #16]
 800d28a:	b005      	add	sp, #20
 800d28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d290:	f843 2b04 	str.w	r2, [r3], #4
 800d294:	e7d8      	b.n	800d248 <__multiply+0x50>
 800d296:	f8b3 a000 	ldrh.w	sl, [r3]
 800d29a:	f1ba 0f00 	cmp.w	sl, #0
 800d29e:	d024      	beq.n	800d2ea <__multiply+0xf2>
 800d2a0:	f104 0e14 	add.w	lr, r4, #20
 800d2a4:	46a9      	mov	r9, r5
 800d2a6:	f04f 0c00 	mov.w	ip, #0
 800d2aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d2ae:	f8d9 1000 	ldr.w	r1, [r9]
 800d2b2:	fa1f fb82 	uxth.w	fp, r2
 800d2b6:	b289      	uxth	r1, r1
 800d2b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d2bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d2c0:	f8d9 2000 	ldr.w	r2, [r9]
 800d2c4:	4461      	add	r1, ip
 800d2c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d2ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800d2ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d2d2:	b289      	uxth	r1, r1
 800d2d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d2d8:	4577      	cmp	r7, lr
 800d2da:	f849 1b04 	str.w	r1, [r9], #4
 800d2de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d2e2:	d8e2      	bhi.n	800d2aa <__multiply+0xb2>
 800d2e4:	9a01      	ldr	r2, [sp, #4]
 800d2e6:	f845 c002 	str.w	ip, [r5, r2]
 800d2ea:	9a03      	ldr	r2, [sp, #12]
 800d2ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d2f0:	3304      	adds	r3, #4
 800d2f2:	f1b9 0f00 	cmp.w	r9, #0
 800d2f6:	d020      	beq.n	800d33a <__multiply+0x142>
 800d2f8:	6829      	ldr	r1, [r5, #0]
 800d2fa:	f104 0c14 	add.w	ip, r4, #20
 800d2fe:	46ae      	mov	lr, r5
 800d300:	f04f 0a00 	mov.w	sl, #0
 800d304:	f8bc b000 	ldrh.w	fp, [ip]
 800d308:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d30c:	fb09 220b 	mla	r2, r9, fp, r2
 800d310:	4492      	add	sl, r2
 800d312:	b289      	uxth	r1, r1
 800d314:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d318:	f84e 1b04 	str.w	r1, [lr], #4
 800d31c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d320:	f8be 1000 	ldrh.w	r1, [lr]
 800d324:	0c12      	lsrs	r2, r2, #16
 800d326:	fb09 1102 	mla	r1, r9, r2, r1
 800d32a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d32e:	4567      	cmp	r7, ip
 800d330:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d334:	d8e6      	bhi.n	800d304 <__multiply+0x10c>
 800d336:	9a01      	ldr	r2, [sp, #4]
 800d338:	50a9      	str	r1, [r5, r2]
 800d33a:	3504      	adds	r5, #4
 800d33c:	e79a      	b.n	800d274 <__multiply+0x7c>
 800d33e:	3e01      	subs	r6, #1
 800d340:	e79c      	b.n	800d27c <__multiply+0x84>
 800d342:	bf00      	nop
 800d344:	0800e718 	.word	0x0800e718
 800d348:	0800e7a4 	.word	0x0800e7a4

0800d34c <__pow5mult>:
 800d34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d350:	4615      	mov	r5, r2
 800d352:	f012 0203 	ands.w	r2, r2, #3
 800d356:	4606      	mov	r6, r0
 800d358:	460f      	mov	r7, r1
 800d35a:	d007      	beq.n	800d36c <__pow5mult+0x20>
 800d35c:	4c25      	ldr	r4, [pc, #148]	; (800d3f4 <__pow5mult+0xa8>)
 800d35e:	3a01      	subs	r2, #1
 800d360:	2300      	movs	r3, #0
 800d362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d366:	f7ff fe51 	bl	800d00c <__multadd>
 800d36a:	4607      	mov	r7, r0
 800d36c:	10ad      	asrs	r5, r5, #2
 800d36e:	d03d      	beq.n	800d3ec <__pow5mult+0xa0>
 800d370:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d372:	b97c      	cbnz	r4, 800d394 <__pow5mult+0x48>
 800d374:	2010      	movs	r0, #16
 800d376:	f7ff fdc1 	bl	800cefc <malloc>
 800d37a:	4602      	mov	r2, r0
 800d37c:	6270      	str	r0, [r6, #36]	; 0x24
 800d37e:	b928      	cbnz	r0, 800d38c <__pow5mult+0x40>
 800d380:	4b1d      	ldr	r3, [pc, #116]	; (800d3f8 <__pow5mult+0xac>)
 800d382:	481e      	ldr	r0, [pc, #120]	; (800d3fc <__pow5mult+0xb0>)
 800d384:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d388:	f000 feb4 	bl	800e0f4 <__assert_func>
 800d38c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d390:	6004      	str	r4, [r0, #0]
 800d392:	60c4      	str	r4, [r0, #12]
 800d394:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d39c:	b94c      	cbnz	r4, 800d3b2 <__pow5mult+0x66>
 800d39e:	f240 2171 	movw	r1, #625	; 0x271
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	f7ff ff12 	bl	800d1cc <__i2b>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	6003      	str	r3, [r0, #0]
 800d3b2:	f04f 0900 	mov.w	r9, #0
 800d3b6:	07eb      	lsls	r3, r5, #31
 800d3b8:	d50a      	bpl.n	800d3d0 <__pow5mult+0x84>
 800d3ba:	4639      	mov	r1, r7
 800d3bc:	4622      	mov	r2, r4
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f7ff ff1a 	bl	800d1f8 <__multiply>
 800d3c4:	4639      	mov	r1, r7
 800d3c6:	4680      	mov	r8, r0
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	f7ff fdfd 	bl	800cfc8 <_Bfree>
 800d3ce:	4647      	mov	r7, r8
 800d3d0:	106d      	asrs	r5, r5, #1
 800d3d2:	d00b      	beq.n	800d3ec <__pow5mult+0xa0>
 800d3d4:	6820      	ldr	r0, [r4, #0]
 800d3d6:	b938      	cbnz	r0, 800d3e8 <__pow5mult+0x9c>
 800d3d8:	4622      	mov	r2, r4
 800d3da:	4621      	mov	r1, r4
 800d3dc:	4630      	mov	r0, r6
 800d3de:	f7ff ff0b 	bl	800d1f8 <__multiply>
 800d3e2:	6020      	str	r0, [r4, #0]
 800d3e4:	f8c0 9000 	str.w	r9, [r0]
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	e7e4      	b.n	800d3b6 <__pow5mult+0x6a>
 800d3ec:	4638      	mov	r0, r7
 800d3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3f2:	bf00      	nop
 800d3f4:	0800e8f0 	.word	0x0800e8f0
 800d3f8:	0800e6a6 	.word	0x0800e6a6
 800d3fc:	0800e7a4 	.word	0x0800e7a4

0800d400 <__lshift>:
 800d400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d404:	460c      	mov	r4, r1
 800d406:	6849      	ldr	r1, [r1, #4]
 800d408:	6923      	ldr	r3, [r4, #16]
 800d40a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d40e:	68a3      	ldr	r3, [r4, #8]
 800d410:	4607      	mov	r7, r0
 800d412:	4691      	mov	r9, r2
 800d414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d418:	f108 0601 	add.w	r6, r8, #1
 800d41c:	42b3      	cmp	r3, r6
 800d41e:	db0b      	blt.n	800d438 <__lshift+0x38>
 800d420:	4638      	mov	r0, r7
 800d422:	f7ff fd91 	bl	800cf48 <_Balloc>
 800d426:	4605      	mov	r5, r0
 800d428:	b948      	cbnz	r0, 800d43e <__lshift+0x3e>
 800d42a:	4602      	mov	r2, r0
 800d42c:	4b2a      	ldr	r3, [pc, #168]	; (800d4d8 <__lshift+0xd8>)
 800d42e:	482b      	ldr	r0, [pc, #172]	; (800d4dc <__lshift+0xdc>)
 800d430:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d434:	f000 fe5e 	bl	800e0f4 <__assert_func>
 800d438:	3101      	adds	r1, #1
 800d43a:	005b      	lsls	r3, r3, #1
 800d43c:	e7ee      	b.n	800d41c <__lshift+0x1c>
 800d43e:	2300      	movs	r3, #0
 800d440:	f100 0114 	add.w	r1, r0, #20
 800d444:	f100 0210 	add.w	r2, r0, #16
 800d448:	4618      	mov	r0, r3
 800d44a:	4553      	cmp	r3, sl
 800d44c:	db37      	blt.n	800d4be <__lshift+0xbe>
 800d44e:	6920      	ldr	r0, [r4, #16]
 800d450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d454:	f104 0314 	add.w	r3, r4, #20
 800d458:	f019 091f 	ands.w	r9, r9, #31
 800d45c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d460:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d464:	d02f      	beq.n	800d4c6 <__lshift+0xc6>
 800d466:	f1c9 0e20 	rsb	lr, r9, #32
 800d46a:	468a      	mov	sl, r1
 800d46c:	f04f 0c00 	mov.w	ip, #0
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	fa02 f209 	lsl.w	r2, r2, r9
 800d476:	ea42 020c 	orr.w	r2, r2, ip
 800d47a:	f84a 2b04 	str.w	r2, [sl], #4
 800d47e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d482:	4298      	cmp	r0, r3
 800d484:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d488:	d8f2      	bhi.n	800d470 <__lshift+0x70>
 800d48a:	1b03      	subs	r3, r0, r4
 800d48c:	3b15      	subs	r3, #21
 800d48e:	f023 0303 	bic.w	r3, r3, #3
 800d492:	3304      	adds	r3, #4
 800d494:	f104 0215 	add.w	r2, r4, #21
 800d498:	4290      	cmp	r0, r2
 800d49a:	bf38      	it	cc
 800d49c:	2304      	movcc	r3, #4
 800d49e:	f841 c003 	str.w	ip, [r1, r3]
 800d4a2:	f1bc 0f00 	cmp.w	ip, #0
 800d4a6:	d001      	beq.n	800d4ac <__lshift+0xac>
 800d4a8:	f108 0602 	add.w	r6, r8, #2
 800d4ac:	3e01      	subs	r6, #1
 800d4ae:	4638      	mov	r0, r7
 800d4b0:	612e      	str	r6, [r5, #16]
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	f7ff fd88 	bl	800cfc8 <_Bfree>
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4be:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	e7c1      	b.n	800d44a <__lshift+0x4a>
 800d4c6:	3904      	subs	r1, #4
 800d4c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4d0:	4298      	cmp	r0, r3
 800d4d2:	d8f9      	bhi.n	800d4c8 <__lshift+0xc8>
 800d4d4:	e7ea      	b.n	800d4ac <__lshift+0xac>
 800d4d6:	bf00      	nop
 800d4d8:	0800e718 	.word	0x0800e718
 800d4dc:	0800e7a4 	.word	0x0800e7a4

0800d4e0 <__mcmp>:
 800d4e0:	b530      	push	{r4, r5, lr}
 800d4e2:	6902      	ldr	r2, [r0, #16]
 800d4e4:	690c      	ldr	r4, [r1, #16]
 800d4e6:	1b12      	subs	r2, r2, r4
 800d4e8:	d10e      	bne.n	800d508 <__mcmp+0x28>
 800d4ea:	f100 0314 	add.w	r3, r0, #20
 800d4ee:	3114      	adds	r1, #20
 800d4f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d4f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d4f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d4fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d500:	42a5      	cmp	r5, r4
 800d502:	d003      	beq.n	800d50c <__mcmp+0x2c>
 800d504:	d305      	bcc.n	800d512 <__mcmp+0x32>
 800d506:	2201      	movs	r2, #1
 800d508:	4610      	mov	r0, r2
 800d50a:	bd30      	pop	{r4, r5, pc}
 800d50c:	4283      	cmp	r3, r0
 800d50e:	d3f3      	bcc.n	800d4f8 <__mcmp+0x18>
 800d510:	e7fa      	b.n	800d508 <__mcmp+0x28>
 800d512:	f04f 32ff 	mov.w	r2, #4294967295
 800d516:	e7f7      	b.n	800d508 <__mcmp+0x28>

0800d518 <__mdiff>:
 800d518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51c:	460c      	mov	r4, r1
 800d51e:	4606      	mov	r6, r0
 800d520:	4611      	mov	r1, r2
 800d522:	4620      	mov	r0, r4
 800d524:	4690      	mov	r8, r2
 800d526:	f7ff ffdb 	bl	800d4e0 <__mcmp>
 800d52a:	1e05      	subs	r5, r0, #0
 800d52c:	d110      	bne.n	800d550 <__mdiff+0x38>
 800d52e:	4629      	mov	r1, r5
 800d530:	4630      	mov	r0, r6
 800d532:	f7ff fd09 	bl	800cf48 <_Balloc>
 800d536:	b930      	cbnz	r0, 800d546 <__mdiff+0x2e>
 800d538:	4b3a      	ldr	r3, [pc, #232]	; (800d624 <__mdiff+0x10c>)
 800d53a:	4602      	mov	r2, r0
 800d53c:	f240 2132 	movw	r1, #562	; 0x232
 800d540:	4839      	ldr	r0, [pc, #228]	; (800d628 <__mdiff+0x110>)
 800d542:	f000 fdd7 	bl	800e0f4 <__assert_func>
 800d546:	2301      	movs	r3, #1
 800d548:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d54c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d550:	bfa4      	itt	ge
 800d552:	4643      	movge	r3, r8
 800d554:	46a0      	movge	r8, r4
 800d556:	4630      	mov	r0, r6
 800d558:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d55c:	bfa6      	itte	ge
 800d55e:	461c      	movge	r4, r3
 800d560:	2500      	movge	r5, #0
 800d562:	2501      	movlt	r5, #1
 800d564:	f7ff fcf0 	bl	800cf48 <_Balloc>
 800d568:	b920      	cbnz	r0, 800d574 <__mdiff+0x5c>
 800d56a:	4b2e      	ldr	r3, [pc, #184]	; (800d624 <__mdiff+0x10c>)
 800d56c:	4602      	mov	r2, r0
 800d56e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d572:	e7e5      	b.n	800d540 <__mdiff+0x28>
 800d574:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d578:	6926      	ldr	r6, [r4, #16]
 800d57a:	60c5      	str	r5, [r0, #12]
 800d57c:	f104 0914 	add.w	r9, r4, #20
 800d580:	f108 0514 	add.w	r5, r8, #20
 800d584:	f100 0e14 	add.w	lr, r0, #20
 800d588:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d58c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d590:	f108 0210 	add.w	r2, r8, #16
 800d594:	46f2      	mov	sl, lr
 800d596:	2100      	movs	r1, #0
 800d598:	f859 3b04 	ldr.w	r3, [r9], #4
 800d59c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5a0:	fa1f f883 	uxth.w	r8, r3
 800d5a4:	fa11 f18b 	uxtah	r1, r1, fp
 800d5a8:	0c1b      	lsrs	r3, r3, #16
 800d5aa:	eba1 0808 	sub.w	r8, r1, r8
 800d5ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d5b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d5b6:	fa1f f888 	uxth.w	r8, r8
 800d5ba:	1419      	asrs	r1, r3, #16
 800d5bc:	454e      	cmp	r6, r9
 800d5be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d5c2:	f84a 3b04 	str.w	r3, [sl], #4
 800d5c6:	d8e7      	bhi.n	800d598 <__mdiff+0x80>
 800d5c8:	1b33      	subs	r3, r6, r4
 800d5ca:	3b15      	subs	r3, #21
 800d5cc:	f023 0303 	bic.w	r3, r3, #3
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	3415      	adds	r4, #21
 800d5d4:	42a6      	cmp	r6, r4
 800d5d6:	bf38      	it	cc
 800d5d8:	2304      	movcc	r3, #4
 800d5da:	441d      	add	r5, r3
 800d5dc:	4473      	add	r3, lr
 800d5de:	469e      	mov	lr, r3
 800d5e0:	462e      	mov	r6, r5
 800d5e2:	4566      	cmp	r6, ip
 800d5e4:	d30e      	bcc.n	800d604 <__mdiff+0xec>
 800d5e6:	f10c 0203 	add.w	r2, ip, #3
 800d5ea:	1b52      	subs	r2, r2, r5
 800d5ec:	f022 0203 	bic.w	r2, r2, #3
 800d5f0:	3d03      	subs	r5, #3
 800d5f2:	45ac      	cmp	ip, r5
 800d5f4:	bf38      	it	cc
 800d5f6:	2200      	movcc	r2, #0
 800d5f8:	441a      	add	r2, r3
 800d5fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d5fe:	b17b      	cbz	r3, 800d620 <__mdiff+0x108>
 800d600:	6107      	str	r7, [r0, #16]
 800d602:	e7a3      	b.n	800d54c <__mdiff+0x34>
 800d604:	f856 8b04 	ldr.w	r8, [r6], #4
 800d608:	fa11 f288 	uxtah	r2, r1, r8
 800d60c:	1414      	asrs	r4, r2, #16
 800d60e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d612:	b292      	uxth	r2, r2
 800d614:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d618:	f84e 2b04 	str.w	r2, [lr], #4
 800d61c:	1421      	asrs	r1, r4, #16
 800d61e:	e7e0      	b.n	800d5e2 <__mdiff+0xca>
 800d620:	3f01      	subs	r7, #1
 800d622:	e7ea      	b.n	800d5fa <__mdiff+0xe2>
 800d624:	0800e718 	.word	0x0800e718
 800d628:	0800e7a4 	.word	0x0800e7a4

0800d62c <__ulp>:
 800d62c:	b082      	sub	sp, #8
 800d62e:	ed8d 0b00 	vstr	d0, [sp]
 800d632:	9b01      	ldr	r3, [sp, #4]
 800d634:	4912      	ldr	r1, [pc, #72]	; (800d680 <__ulp+0x54>)
 800d636:	4019      	ands	r1, r3
 800d638:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d63c:	2900      	cmp	r1, #0
 800d63e:	dd05      	ble.n	800d64c <__ulp+0x20>
 800d640:	2200      	movs	r2, #0
 800d642:	460b      	mov	r3, r1
 800d644:	ec43 2b10 	vmov	d0, r2, r3
 800d648:	b002      	add	sp, #8
 800d64a:	4770      	bx	lr
 800d64c:	4249      	negs	r1, r1
 800d64e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d652:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d656:	f04f 0200 	mov.w	r2, #0
 800d65a:	f04f 0300 	mov.w	r3, #0
 800d65e:	da04      	bge.n	800d66a <__ulp+0x3e>
 800d660:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d664:	fa41 f300 	asr.w	r3, r1, r0
 800d668:	e7ec      	b.n	800d644 <__ulp+0x18>
 800d66a:	f1a0 0114 	sub.w	r1, r0, #20
 800d66e:	291e      	cmp	r1, #30
 800d670:	bfda      	itte	le
 800d672:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d676:	fa20 f101 	lsrle.w	r1, r0, r1
 800d67a:	2101      	movgt	r1, #1
 800d67c:	460a      	mov	r2, r1
 800d67e:	e7e1      	b.n	800d644 <__ulp+0x18>
 800d680:	7ff00000 	.word	0x7ff00000

0800d684 <__b2d>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	6905      	ldr	r5, [r0, #16]
 800d688:	f100 0714 	add.w	r7, r0, #20
 800d68c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d690:	1f2e      	subs	r6, r5, #4
 800d692:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d696:	4620      	mov	r0, r4
 800d698:	f7ff fd48 	bl	800d12c <__hi0bits>
 800d69c:	f1c0 0320 	rsb	r3, r0, #32
 800d6a0:	280a      	cmp	r0, #10
 800d6a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d720 <__b2d+0x9c>
 800d6a6:	600b      	str	r3, [r1, #0]
 800d6a8:	dc14      	bgt.n	800d6d4 <__b2d+0x50>
 800d6aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800d6ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800d6b2:	42b7      	cmp	r7, r6
 800d6b4:	ea41 030c 	orr.w	r3, r1, ip
 800d6b8:	bf34      	ite	cc
 800d6ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d6be:	2100      	movcs	r1, #0
 800d6c0:	3015      	adds	r0, #21
 800d6c2:	fa04 f000 	lsl.w	r0, r4, r0
 800d6c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800d6ca:	ea40 0201 	orr.w	r2, r0, r1
 800d6ce:	ec43 2b10 	vmov	d0, r2, r3
 800d6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6d4:	42b7      	cmp	r7, r6
 800d6d6:	bf3a      	itte	cc
 800d6d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d6dc:	f1a5 0608 	subcc.w	r6, r5, #8
 800d6e0:	2100      	movcs	r1, #0
 800d6e2:	380b      	subs	r0, #11
 800d6e4:	d017      	beq.n	800d716 <__b2d+0x92>
 800d6e6:	f1c0 0c20 	rsb	ip, r0, #32
 800d6ea:	fa04 f500 	lsl.w	r5, r4, r0
 800d6ee:	42be      	cmp	r6, r7
 800d6f0:	fa21 f40c 	lsr.w	r4, r1, ip
 800d6f4:	ea45 0504 	orr.w	r5, r5, r4
 800d6f8:	bf8c      	ite	hi
 800d6fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d6fe:	2400      	movls	r4, #0
 800d700:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d704:	fa01 f000 	lsl.w	r0, r1, r0
 800d708:	fa24 f40c 	lsr.w	r4, r4, ip
 800d70c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d710:	ea40 0204 	orr.w	r2, r0, r4
 800d714:	e7db      	b.n	800d6ce <__b2d+0x4a>
 800d716:	ea44 030c 	orr.w	r3, r4, ip
 800d71a:	460a      	mov	r2, r1
 800d71c:	e7d7      	b.n	800d6ce <__b2d+0x4a>
 800d71e:	bf00      	nop
 800d720:	3ff00000 	.word	0x3ff00000

0800d724 <__d2b>:
 800d724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d728:	4689      	mov	r9, r1
 800d72a:	2101      	movs	r1, #1
 800d72c:	ec57 6b10 	vmov	r6, r7, d0
 800d730:	4690      	mov	r8, r2
 800d732:	f7ff fc09 	bl	800cf48 <_Balloc>
 800d736:	4604      	mov	r4, r0
 800d738:	b930      	cbnz	r0, 800d748 <__d2b+0x24>
 800d73a:	4602      	mov	r2, r0
 800d73c:	4b25      	ldr	r3, [pc, #148]	; (800d7d4 <__d2b+0xb0>)
 800d73e:	4826      	ldr	r0, [pc, #152]	; (800d7d8 <__d2b+0xb4>)
 800d740:	f240 310a 	movw	r1, #778	; 0x30a
 800d744:	f000 fcd6 	bl	800e0f4 <__assert_func>
 800d748:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d74c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d750:	bb35      	cbnz	r5, 800d7a0 <__d2b+0x7c>
 800d752:	2e00      	cmp	r6, #0
 800d754:	9301      	str	r3, [sp, #4]
 800d756:	d028      	beq.n	800d7aa <__d2b+0x86>
 800d758:	4668      	mov	r0, sp
 800d75a:	9600      	str	r6, [sp, #0]
 800d75c:	f7ff fd06 	bl	800d16c <__lo0bits>
 800d760:	9900      	ldr	r1, [sp, #0]
 800d762:	b300      	cbz	r0, 800d7a6 <__d2b+0x82>
 800d764:	9a01      	ldr	r2, [sp, #4]
 800d766:	f1c0 0320 	rsb	r3, r0, #32
 800d76a:	fa02 f303 	lsl.w	r3, r2, r3
 800d76e:	430b      	orrs	r3, r1
 800d770:	40c2      	lsrs	r2, r0
 800d772:	6163      	str	r3, [r4, #20]
 800d774:	9201      	str	r2, [sp, #4]
 800d776:	9b01      	ldr	r3, [sp, #4]
 800d778:	61a3      	str	r3, [r4, #24]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	bf14      	ite	ne
 800d77e:	2202      	movne	r2, #2
 800d780:	2201      	moveq	r2, #1
 800d782:	6122      	str	r2, [r4, #16]
 800d784:	b1d5      	cbz	r5, 800d7bc <__d2b+0x98>
 800d786:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d78a:	4405      	add	r5, r0
 800d78c:	f8c9 5000 	str.w	r5, [r9]
 800d790:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d794:	f8c8 0000 	str.w	r0, [r8]
 800d798:	4620      	mov	r0, r4
 800d79a:	b003      	add	sp, #12
 800d79c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7a4:	e7d5      	b.n	800d752 <__d2b+0x2e>
 800d7a6:	6161      	str	r1, [r4, #20]
 800d7a8:	e7e5      	b.n	800d776 <__d2b+0x52>
 800d7aa:	a801      	add	r0, sp, #4
 800d7ac:	f7ff fcde 	bl	800d16c <__lo0bits>
 800d7b0:	9b01      	ldr	r3, [sp, #4]
 800d7b2:	6163      	str	r3, [r4, #20]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	6122      	str	r2, [r4, #16]
 800d7b8:	3020      	adds	r0, #32
 800d7ba:	e7e3      	b.n	800d784 <__d2b+0x60>
 800d7bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d7c4:	f8c9 0000 	str.w	r0, [r9]
 800d7c8:	6918      	ldr	r0, [r3, #16]
 800d7ca:	f7ff fcaf 	bl	800d12c <__hi0bits>
 800d7ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7d2:	e7df      	b.n	800d794 <__d2b+0x70>
 800d7d4:	0800e718 	.word	0x0800e718
 800d7d8:	0800e7a4 	.word	0x0800e7a4

0800d7dc <__ratio>:
 800d7dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e0:	4688      	mov	r8, r1
 800d7e2:	4669      	mov	r1, sp
 800d7e4:	4681      	mov	r9, r0
 800d7e6:	f7ff ff4d 	bl	800d684 <__b2d>
 800d7ea:	a901      	add	r1, sp, #4
 800d7ec:	4640      	mov	r0, r8
 800d7ee:	ec55 4b10 	vmov	r4, r5, d0
 800d7f2:	f7ff ff47 	bl	800d684 <__b2d>
 800d7f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d7fe:	eba3 0c02 	sub.w	ip, r3, r2
 800d802:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d806:	1a9b      	subs	r3, r3, r2
 800d808:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d80c:	ec51 0b10 	vmov	r0, r1, d0
 800d810:	2b00      	cmp	r3, #0
 800d812:	bfd6      	itet	le
 800d814:	460a      	movle	r2, r1
 800d816:	462a      	movgt	r2, r5
 800d818:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d81c:	468b      	mov	fp, r1
 800d81e:	462f      	mov	r7, r5
 800d820:	bfd4      	ite	le
 800d822:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d826:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d82a:	4620      	mov	r0, r4
 800d82c:	ee10 2a10 	vmov	r2, s0
 800d830:	465b      	mov	r3, fp
 800d832:	4639      	mov	r1, r7
 800d834:	f7f3 f83a 	bl	80008ac <__aeabi_ddiv>
 800d838:	ec41 0b10 	vmov	d0, r0, r1
 800d83c:	b003      	add	sp, #12
 800d83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d842 <__copybits>:
 800d842:	3901      	subs	r1, #1
 800d844:	b570      	push	{r4, r5, r6, lr}
 800d846:	1149      	asrs	r1, r1, #5
 800d848:	6914      	ldr	r4, [r2, #16]
 800d84a:	3101      	adds	r1, #1
 800d84c:	f102 0314 	add.w	r3, r2, #20
 800d850:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d854:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d858:	1f05      	subs	r5, r0, #4
 800d85a:	42a3      	cmp	r3, r4
 800d85c:	d30c      	bcc.n	800d878 <__copybits+0x36>
 800d85e:	1aa3      	subs	r3, r4, r2
 800d860:	3b11      	subs	r3, #17
 800d862:	f023 0303 	bic.w	r3, r3, #3
 800d866:	3211      	adds	r2, #17
 800d868:	42a2      	cmp	r2, r4
 800d86a:	bf88      	it	hi
 800d86c:	2300      	movhi	r3, #0
 800d86e:	4418      	add	r0, r3
 800d870:	2300      	movs	r3, #0
 800d872:	4288      	cmp	r0, r1
 800d874:	d305      	bcc.n	800d882 <__copybits+0x40>
 800d876:	bd70      	pop	{r4, r5, r6, pc}
 800d878:	f853 6b04 	ldr.w	r6, [r3], #4
 800d87c:	f845 6f04 	str.w	r6, [r5, #4]!
 800d880:	e7eb      	b.n	800d85a <__copybits+0x18>
 800d882:	f840 3b04 	str.w	r3, [r0], #4
 800d886:	e7f4      	b.n	800d872 <__copybits+0x30>

0800d888 <__any_on>:
 800d888:	f100 0214 	add.w	r2, r0, #20
 800d88c:	6900      	ldr	r0, [r0, #16]
 800d88e:	114b      	asrs	r3, r1, #5
 800d890:	4298      	cmp	r0, r3
 800d892:	b510      	push	{r4, lr}
 800d894:	db11      	blt.n	800d8ba <__any_on+0x32>
 800d896:	dd0a      	ble.n	800d8ae <__any_on+0x26>
 800d898:	f011 011f 	ands.w	r1, r1, #31
 800d89c:	d007      	beq.n	800d8ae <__any_on+0x26>
 800d89e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8a2:	fa24 f001 	lsr.w	r0, r4, r1
 800d8a6:	fa00 f101 	lsl.w	r1, r0, r1
 800d8aa:	428c      	cmp	r4, r1
 800d8ac:	d10b      	bne.n	800d8c6 <__any_on+0x3e>
 800d8ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d803      	bhi.n	800d8be <__any_on+0x36>
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	bd10      	pop	{r4, pc}
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	e7f7      	b.n	800d8ae <__any_on+0x26>
 800d8be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d8c2:	2900      	cmp	r1, #0
 800d8c4:	d0f5      	beq.n	800d8b2 <__any_on+0x2a>
 800d8c6:	2001      	movs	r0, #1
 800d8c8:	e7f6      	b.n	800d8b8 <__any_on+0x30>

0800d8ca <_calloc_r>:
 800d8ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8cc:	fba1 2402 	umull	r2, r4, r1, r2
 800d8d0:	b94c      	cbnz	r4, 800d8e6 <_calloc_r+0x1c>
 800d8d2:	4611      	mov	r1, r2
 800d8d4:	9201      	str	r2, [sp, #4]
 800d8d6:	f7fc fc2f 	bl	800a138 <_malloc_r>
 800d8da:	9a01      	ldr	r2, [sp, #4]
 800d8dc:	4605      	mov	r5, r0
 800d8de:	b930      	cbnz	r0, 800d8ee <_calloc_r+0x24>
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	b003      	add	sp, #12
 800d8e4:	bd30      	pop	{r4, r5, pc}
 800d8e6:	220c      	movs	r2, #12
 800d8e8:	6002      	str	r2, [r0, #0]
 800d8ea:	2500      	movs	r5, #0
 800d8ec:	e7f8      	b.n	800d8e0 <_calloc_r+0x16>
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	f7fc fbf9 	bl	800a0e6 <memset>
 800d8f4:	e7f4      	b.n	800d8e0 <_calloc_r+0x16>
	...

0800d8f8 <_free_r>:
 800d8f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8fa:	2900      	cmp	r1, #0
 800d8fc:	d044      	beq.n	800d988 <_free_r+0x90>
 800d8fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d902:	9001      	str	r0, [sp, #4]
 800d904:	2b00      	cmp	r3, #0
 800d906:	f1a1 0404 	sub.w	r4, r1, #4
 800d90a:	bfb8      	it	lt
 800d90c:	18e4      	addlt	r4, r4, r3
 800d90e:	f7ff fb0f 	bl	800cf30 <__malloc_lock>
 800d912:	4a1e      	ldr	r2, [pc, #120]	; (800d98c <_free_r+0x94>)
 800d914:	9801      	ldr	r0, [sp, #4]
 800d916:	6813      	ldr	r3, [r2, #0]
 800d918:	b933      	cbnz	r3, 800d928 <_free_r+0x30>
 800d91a:	6063      	str	r3, [r4, #4]
 800d91c:	6014      	str	r4, [r2, #0]
 800d91e:	b003      	add	sp, #12
 800d920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d924:	f7ff bb0a 	b.w	800cf3c <__malloc_unlock>
 800d928:	42a3      	cmp	r3, r4
 800d92a:	d908      	bls.n	800d93e <_free_r+0x46>
 800d92c:	6825      	ldr	r5, [r4, #0]
 800d92e:	1961      	adds	r1, r4, r5
 800d930:	428b      	cmp	r3, r1
 800d932:	bf01      	itttt	eq
 800d934:	6819      	ldreq	r1, [r3, #0]
 800d936:	685b      	ldreq	r3, [r3, #4]
 800d938:	1949      	addeq	r1, r1, r5
 800d93a:	6021      	streq	r1, [r4, #0]
 800d93c:	e7ed      	b.n	800d91a <_free_r+0x22>
 800d93e:	461a      	mov	r2, r3
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	b10b      	cbz	r3, 800d948 <_free_r+0x50>
 800d944:	42a3      	cmp	r3, r4
 800d946:	d9fa      	bls.n	800d93e <_free_r+0x46>
 800d948:	6811      	ldr	r1, [r2, #0]
 800d94a:	1855      	adds	r5, r2, r1
 800d94c:	42a5      	cmp	r5, r4
 800d94e:	d10b      	bne.n	800d968 <_free_r+0x70>
 800d950:	6824      	ldr	r4, [r4, #0]
 800d952:	4421      	add	r1, r4
 800d954:	1854      	adds	r4, r2, r1
 800d956:	42a3      	cmp	r3, r4
 800d958:	6011      	str	r1, [r2, #0]
 800d95a:	d1e0      	bne.n	800d91e <_free_r+0x26>
 800d95c:	681c      	ldr	r4, [r3, #0]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	6053      	str	r3, [r2, #4]
 800d962:	4421      	add	r1, r4
 800d964:	6011      	str	r1, [r2, #0]
 800d966:	e7da      	b.n	800d91e <_free_r+0x26>
 800d968:	d902      	bls.n	800d970 <_free_r+0x78>
 800d96a:	230c      	movs	r3, #12
 800d96c:	6003      	str	r3, [r0, #0]
 800d96e:	e7d6      	b.n	800d91e <_free_r+0x26>
 800d970:	6825      	ldr	r5, [r4, #0]
 800d972:	1961      	adds	r1, r4, r5
 800d974:	428b      	cmp	r3, r1
 800d976:	bf04      	itt	eq
 800d978:	6819      	ldreq	r1, [r3, #0]
 800d97a:	685b      	ldreq	r3, [r3, #4]
 800d97c:	6063      	str	r3, [r4, #4]
 800d97e:	bf04      	itt	eq
 800d980:	1949      	addeq	r1, r1, r5
 800d982:	6021      	streq	r1, [r4, #0]
 800d984:	6054      	str	r4, [r2, #4]
 800d986:	e7ca      	b.n	800d91e <_free_r+0x26>
 800d988:	b003      	add	sp, #12
 800d98a:	bd30      	pop	{r4, r5, pc}
 800d98c:	20004724 	.word	0x20004724

0800d990 <__ssputs_r>:
 800d990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d994:	688e      	ldr	r6, [r1, #8]
 800d996:	429e      	cmp	r6, r3
 800d998:	4682      	mov	sl, r0
 800d99a:	460c      	mov	r4, r1
 800d99c:	4690      	mov	r8, r2
 800d99e:	461f      	mov	r7, r3
 800d9a0:	d838      	bhi.n	800da14 <__ssputs_r+0x84>
 800d9a2:	898a      	ldrh	r2, [r1, #12]
 800d9a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9a8:	d032      	beq.n	800da10 <__ssputs_r+0x80>
 800d9aa:	6825      	ldr	r5, [r4, #0]
 800d9ac:	6909      	ldr	r1, [r1, #16]
 800d9ae:	eba5 0901 	sub.w	r9, r5, r1
 800d9b2:	6965      	ldr	r5, [r4, #20]
 800d9b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9bc:	3301      	adds	r3, #1
 800d9be:	444b      	add	r3, r9
 800d9c0:	106d      	asrs	r5, r5, #1
 800d9c2:	429d      	cmp	r5, r3
 800d9c4:	bf38      	it	cc
 800d9c6:	461d      	movcc	r5, r3
 800d9c8:	0553      	lsls	r3, r2, #21
 800d9ca:	d531      	bpl.n	800da30 <__ssputs_r+0xa0>
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	f7fc fbb3 	bl	800a138 <_malloc_r>
 800d9d2:	4606      	mov	r6, r0
 800d9d4:	b950      	cbnz	r0, 800d9ec <__ssputs_r+0x5c>
 800d9d6:	230c      	movs	r3, #12
 800d9d8:	f8ca 3000 	str.w	r3, [sl]
 800d9dc:	89a3      	ldrh	r3, [r4, #12]
 800d9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9e2:	81a3      	strh	r3, [r4, #12]
 800d9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9ec:	6921      	ldr	r1, [r4, #16]
 800d9ee:	464a      	mov	r2, r9
 800d9f0:	f7fc fb6b 	bl	800a0ca <memcpy>
 800d9f4:	89a3      	ldrh	r3, [r4, #12]
 800d9f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9fe:	81a3      	strh	r3, [r4, #12]
 800da00:	6126      	str	r6, [r4, #16]
 800da02:	6165      	str	r5, [r4, #20]
 800da04:	444e      	add	r6, r9
 800da06:	eba5 0509 	sub.w	r5, r5, r9
 800da0a:	6026      	str	r6, [r4, #0]
 800da0c:	60a5      	str	r5, [r4, #8]
 800da0e:	463e      	mov	r6, r7
 800da10:	42be      	cmp	r6, r7
 800da12:	d900      	bls.n	800da16 <__ssputs_r+0x86>
 800da14:	463e      	mov	r6, r7
 800da16:	6820      	ldr	r0, [r4, #0]
 800da18:	4632      	mov	r2, r6
 800da1a:	4641      	mov	r1, r8
 800da1c:	f000 fc00 	bl	800e220 <memmove>
 800da20:	68a3      	ldr	r3, [r4, #8]
 800da22:	1b9b      	subs	r3, r3, r6
 800da24:	60a3      	str	r3, [r4, #8]
 800da26:	6823      	ldr	r3, [r4, #0]
 800da28:	4433      	add	r3, r6
 800da2a:	6023      	str	r3, [r4, #0]
 800da2c:	2000      	movs	r0, #0
 800da2e:	e7db      	b.n	800d9e8 <__ssputs_r+0x58>
 800da30:	462a      	mov	r2, r5
 800da32:	f000 fc0f 	bl	800e254 <_realloc_r>
 800da36:	4606      	mov	r6, r0
 800da38:	2800      	cmp	r0, #0
 800da3a:	d1e1      	bne.n	800da00 <__ssputs_r+0x70>
 800da3c:	6921      	ldr	r1, [r4, #16]
 800da3e:	4650      	mov	r0, sl
 800da40:	f7ff ff5a 	bl	800d8f8 <_free_r>
 800da44:	e7c7      	b.n	800d9d6 <__ssputs_r+0x46>
	...

0800da48 <_svfiprintf_r>:
 800da48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4c:	4698      	mov	r8, r3
 800da4e:	898b      	ldrh	r3, [r1, #12]
 800da50:	061b      	lsls	r3, r3, #24
 800da52:	b09d      	sub	sp, #116	; 0x74
 800da54:	4607      	mov	r7, r0
 800da56:	460d      	mov	r5, r1
 800da58:	4614      	mov	r4, r2
 800da5a:	d50e      	bpl.n	800da7a <_svfiprintf_r+0x32>
 800da5c:	690b      	ldr	r3, [r1, #16]
 800da5e:	b963      	cbnz	r3, 800da7a <_svfiprintf_r+0x32>
 800da60:	2140      	movs	r1, #64	; 0x40
 800da62:	f7fc fb69 	bl	800a138 <_malloc_r>
 800da66:	6028      	str	r0, [r5, #0]
 800da68:	6128      	str	r0, [r5, #16]
 800da6a:	b920      	cbnz	r0, 800da76 <_svfiprintf_r+0x2e>
 800da6c:	230c      	movs	r3, #12
 800da6e:	603b      	str	r3, [r7, #0]
 800da70:	f04f 30ff 	mov.w	r0, #4294967295
 800da74:	e0d1      	b.n	800dc1a <_svfiprintf_r+0x1d2>
 800da76:	2340      	movs	r3, #64	; 0x40
 800da78:	616b      	str	r3, [r5, #20]
 800da7a:	2300      	movs	r3, #0
 800da7c:	9309      	str	r3, [sp, #36]	; 0x24
 800da7e:	2320      	movs	r3, #32
 800da80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da84:	f8cd 800c 	str.w	r8, [sp, #12]
 800da88:	2330      	movs	r3, #48	; 0x30
 800da8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dc34 <_svfiprintf_r+0x1ec>
 800da8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da92:	f04f 0901 	mov.w	r9, #1
 800da96:	4623      	mov	r3, r4
 800da98:	469a      	mov	sl, r3
 800da9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da9e:	b10a      	cbz	r2, 800daa4 <_svfiprintf_r+0x5c>
 800daa0:	2a25      	cmp	r2, #37	; 0x25
 800daa2:	d1f9      	bne.n	800da98 <_svfiprintf_r+0x50>
 800daa4:	ebba 0b04 	subs.w	fp, sl, r4
 800daa8:	d00b      	beq.n	800dac2 <_svfiprintf_r+0x7a>
 800daaa:	465b      	mov	r3, fp
 800daac:	4622      	mov	r2, r4
 800daae:	4629      	mov	r1, r5
 800dab0:	4638      	mov	r0, r7
 800dab2:	f7ff ff6d 	bl	800d990 <__ssputs_r>
 800dab6:	3001      	adds	r0, #1
 800dab8:	f000 80aa 	beq.w	800dc10 <_svfiprintf_r+0x1c8>
 800dabc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dabe:	445a      	add	r2, fp
 800dac0:	9209      	str	r2, [sp, #36]	; 0x24
 800dac2:	f89a 3000 	ldrb.w	r3, [sl]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	f000 80a2 	beq.w	800dc10 <_svfiprintf_r+0x1c8>
 800dacc:	2300      	movs	r3, #0
 800dace:	f04f 32ff 	mov.w	r2, #4294967295
 800dad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dad6:	f10a 0a01 	add.w	sl, sl, #1
 800dada:	9304      	str	r3, [sp, #16]
 800dadc:	9307      	str	r3, [sp, #28]
 800dade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dae2:	931a      	str	r3, [sp, #104]	; 0x68
 800dae4:	4654      	mov	r4, sl
 800dae6:	2205      	movs	r2, #5
 800dae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daec:	4851      	ldr	r0, [pc, #324]	; (800dc34 <_svfiprintf_r+0x1ec>)
 800daee:	f7f2 fba7 	bl	8000240 <memchr>
 800daf2:	9a04      	ldr	r2, [sp, #16]
 800daf4:	b9d8      	cbnz	r0, 800db2e <_svfiprintf_r+0xe6>
 800daf6:	06d0      	lsls	r0, r2, #27
 800daf8:	bf44      	itt	mi
 800dafa:	2320      	movmi	r3, #32
 800dafc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db00:	0711      	lsls	r1, r2, #28
 800db02:	bf44      	itt	mi
 800db04:	232b      	movmi	r3, #43	; 0x2b
 800db06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db0a:	f89a 3000 	ldrb.w	r3, [sl]
 800db0e:	2b2a      	cmp	r3, #42	; 0x2a
 800db10:	d015      	beq.n	800db3e <_svfiprintf_r+0xf6>
 800db12:	9a07      	ldr	r2, [sp, #28]
 800db14:	4654      	mov	r4, sl
 800db16:	2000      	movs	r0, #0
 800db18:	f04f 0c0a 	mov.w	ip, #10
 800db1c:	4621      	mov	r1, r4
 800db1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db22:	3b30      	subs	r3, #48	; 0x30
 800db24:	2b09      	cmp	r3, #9
 800db26:	d94e      	bls.n	800dbc6 <_svfiprintf_r+0x17e>
 800db28:	b1b0      	cbz	r0, 800db58 <_svfiprintf_r+0x110>
 800db2a:	9207      	str	r2, [sp, #28]
 800db2c:	e014      	b.n	800db58 <_svfiprintf_r+0x110>
 800db2e:	eba0 0308 	sub.w	r3, r0, r8
 800db32:	fa09 f303 	lsl.w	r3, r9, r3
 800db36:	4313      	orrs	r3, r2
 800db38:	9304      	str	r3, [sp, #16]
 800db3a:	46a2      	mov	sl, r4
 800db3c:	e7d2      	b.n	800dae4 <_svfiprintf_r+0x9c>
 800db3e:	9b03      	ldr	r3, [sp, #12]
 800db40:	1d19      	adds	r1, r3, #4
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	9103      	str	r1, [sp, #12]
 800db46:	2b00      	cmp	r3, #0
 800db48:	bfbb      	ittet	lt
 800db4a:	425b      	neglt	r3, r3
 800db4c:	f042 0202 	orrlt.w	r2, r2, #2
 800db50:	9307      	strge	r3, [sp, #28]
 800db52:	9307      	strlt	r3, [sp, #28]
 800db54:	bfb8      	it	lt
 800db56:	9204      	strlt	r2, [sp, #16]
 800db58:	7823      	ldrb	r3, [r4, #0]
 800db5a:	2b2e      	cmp	r3, #46	; 0x2e
 800db5c:	d10c      	bne.n	800db78 <_svfiprintf_r+0x130>
 800db5e:	7863      	ldrb	r3, [r4, #1]
 800db60:	2b2a      	cmp	r3, #42	; 0x2a
 800db62:	d135      	bne.n	800dbd0 <_svfiprintf_r+0x188>
 800db64:	9b03      	ldr	r3, [sp, #12]
 800db66:	1d1a      	adds	r2, r3, #4
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	9203      	str	r2, [sp, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	bfb8      	it	lt
 800db70:	f04f 33ff 	movlt.w	r3, #4294967295
 800db74:	3402      	adds	r4, #2
 800db76:	9305      	str	r3, [sp, #20]
 800db78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dc44 <_svfiprintf_r+0x1fc>
 800db7c:	7821      	ldrb	r1, [r4, #0]
 800db7e:	2203      	movs	r2, #3
 800db80:	4650      	mov	r0, sl
 800db82:	f7f2 fb5d 	bl	8000240 <memchr>
 800db86:	b140      	cbz	r0, 800db9a <_svfiprintf_r+0x152>
 800db88:	2340      	movs	r3, #64	; 0x40
 800db8a:	eba0 000a 	sub.w	r0, r0, sl
 800db8e:	fa03 f000 	lsl.w	r0, r3, r0
 800db92:	9b04      	ldr	r3, [sp, #16]
 800db94:	4303      	orrs	r3, r0
 800db96:	3401      	adds	r4, #1
 800db98:	9304      	str	r3, [sp, #16]
 800db9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db9e:	4826      	ldr	r0, [pc, #152]	; (800dc38 <_svfiprintf_r+0x1f0>)
 800dba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dba4:	2206      	movs	r2, #6
 800dba6:	f7f2 fb4b 	bl	8000240 <memchr>
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	d038      	beq.n	800dc20 <_svfiprintf_r+0x1d8>
 800dbae:	4b23      	ldr	r3, [pc, #140]	; (800dc3c <_svfiprintf_r+0x1f4>)
 800dbb0:	bb1b      	cbnz	r3, 800dbfa <_svfiprintf_r+0x1b2>
 800dbb2:	9b03      	ldr	r3, [sp, #12]
 800dbb4:	3307      	adds	r3, #7
 800dbb6:	f023 0307 	bic.w	r3, r3, #7
 800dbba:	3308      	adds	r3, #8
 800dbbc:	9303      	str	r3, [sp, #12]
 800dbbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc0:	4433      	add	r3, r6
 800dbc2:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc4:	e767      	b.n	800da96 <_svfiprintf_r+0x4e>
 800dbc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbca:	460c      	mov	r4, r1
 800dbcc:	2001      	movs	r0, #1
 800dbce:	e7a5      	b.n	800db1c <_svfiprintf_r+0xd4>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	3401      	adds	r4, #1
 800dbd4:	9305      	str	r3, [sp, #20]
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	f04f 0c0a 	mov.w	ip, #10
 800dbdc:	4620      	mov	r0, r4
 800dbde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbe2:	3a30      	subs	r2, #48	; 0x30
 800dbe4:	2a09      	cmp	r2, #9
 800dbe6:	d903      	bls.n	800dbf0 <_svfiprintf_r+0x1a8>
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d0c5      	beq.n	800db78 <_svfiprintf_r+0x130>
 800dbec:	9105      	str	r1, [sp, #20]
 800dbee:	e7c3      	b.n	800db78 <_svfiprintf_r+0x130>
 800dbf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	e7f0      	b.n	800dbdc <_svfiprintf_r+0x194>
 800dbfa:	ab03      	add	r3, sp, #12
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	462a      	mov	r2, r5
 800dc00:	4b0f      	ldr	r3, [pc, #60]	; (800dc40 <_svfiprintf_r+0x1f8>)
 800dc02:	a904      	add	r1, sp, #16
 800dc04:	4638      	mov	r0, r7
 800dc06:	f7fc fbab 	bl	800a360 <_printf_float>
 800dc0a:	1c42      	adds	r2, r0, #1
 800dc0c:	4606      	mov	r6, r0
 800dc0e:	d1d6      	bne.n	800dbbe <_svfiprintf_r+0x176>
 800dc10:	89ab      	ldrh	r3, [r5, #12]
 800dc12:	065b      	lsls	r3, r3, #25
 800dc14:	f53f af2c 	bmi.w	800da70 <_svfiprintf_r+0x28>
 800dc18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc1a:	b01d      	add	sp, #116	; 0x74
 800dc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc20:	ab03      	add	r3, sp, #12
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	462a      	mov	r2, r5
 800dc26:	4b06      	ldr	r3, [pc, #24]	; (800dc40 <_svfiprintf_r+0x1f8>)
 800dc28:	a904      	add	r1, sp, #16
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	f7fc fe3c 	bl	800a8a8 <_printf_i>
 800dc30:	e7eb      	b.n	800dc0a <_svfiprintf_r+0x1c2>
 800dc32:	bf00      	nop
 800dc34:	0800e8fc 	.word	0x0800e8fc
 800dc38:	0800e906 	.word	0x0800e906
 800dc3c:	0800a361 	.word	0x0800a361
 800dc40:	0800d991 	.word	0x0800d991
 800dc44:	0800e902 	.word	0x0800e902

0800dc48 <__sfputc_r>:
 800dc48:	6893      	ldr	r3, [r2, #8]
 800dc4a:	3b01      	subs	r3, #1
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	b410      	push	{r4}
 800dc50:	6093      	str	r3, [r2, #8]
 800dc52:	da08      	bge.n	800dc66 <__sfputc_r+0x1e>
 800dc54:	6994      	ldr	r4, [r2, #24]
 800dc56:	42a3      	cmp	r3, r4
 800dc58:	db01      	blt.n	800dc5e <__sfputc_r+0x16>
 800dc5a:	290a      	cmp	r1, #10
 800dc5c:	d103      	bne.n	800dc66 <__sfputc_r+0x1e>
 800dc5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc62:	f000 b979 	b.w	800df58 <__swbuf_r>
 800dc66:	6813      	ldr	r3, [r2, #0]
 800dc68:	1c58      	adds	r0, r3, #1
 800dc6a:	6010      	str	r0, [r2, #0]
 800dc6c:	7019      	strb	r1, [r3, #0]
 800dc6e:	4608      	mov	r0, r1
 800dc70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc74:	4770      	bx	lr

0800dc76 <__sfputs_r>:
 800dc76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc78:	4606      	mov	r6, r0
 800dc7a:	460f      	mov	r7, r1
 800dc7c:	4614      	mov	r4, r2
 800dc7e:	18d5      	adds	r5, r2, r3
 800dc80:	42ac      	cmp	r4, r5
 800dc82:	d101      	bne.n	800dc88 <__sfputs_r+0x12>
 800dc84:	2000      	movs	r0, #0
 800dc86:	e007      	b.n	800dc98 <__sfputs_r+0x22>
 800dc88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc8c:	463a      	mov	r2, r7
 800dc8e:	4630      	mov	r0, r6
 800dc90:	f7ff ffda 	bl	800dc48 <__sfputc_r>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d1f3      	bne.n	800dc80 <__sfputs_r+0xa>
 800dc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc9c <_vfiprintf_r>:
 800dc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca0:	460d      	mov	r5, r1
 800dca2:	b09d      	sub	sp, #116	; 0x74
 800dca4:	4614      	mov	r4, r2
 800dca6:	4698      	mov	r8, r3
 800dca8:	4606      	mov	r6, r0
 800dcaa:	b118      	cbz	r0, 800dcb4 <_vfiprintf_r+0x18>
 800dcac:	6983      	ldr	r3, [r0, #24]
 800dcae:	b90b      	cbnz	r3, 800dcb4 <_vfiprintf_r+0x18>
 800dcb0:	f7fc f946 	bl	8009f40 <__sinit>
 800dcb4:	4b89      	ldr	r3, [pc, #548]	; (800dedc <_vfiprintf_r+0x240>)
 800dcb6:	429d      	cmp	r5, r3
 800dcb8:	d11b      	bne.n	800dcf2 <_vfiprintf_r+0x56>
 800dcba:	6875      	ldr	r5, [r6, #4]
 800dcbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcbe:	07d9      	lsls	r1, r3, #31
 800dcc0:	d405      	bmi.n	800dcce <_vfiprintf_r+0x32>
 800dcc2:	89ab      	ldrh	r3, [r5, #12]
 800dcc4:	059a      	lsls	r2, r3, #22
 800dcc6:	d402      	bmi.n	800dcce <_vfiprintf_r+0x32>
 800dcc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcca:	f7fc f9fc 	bl	800a0c6 <__retarget_lock_acquire_recursive>
 800dcce:	89ab      	ldrh	r3, [r5, #12]
 800dcd0:	071b      	lsls	r3, r3, #28
 800dcd2:	d501      	bpl.n	800dcd8 <_vfiprintf_r+0x3c>
 800dcd4:	692b      	ldr	r3, [r5, #16]
 800dcd6:	b9eb      	cbnz	r3, 800dd14 <_vfiprintf_r+0x78>
 800dcd8:	4629      	mov	r1, r5
 800dcda:	4630      	mov	r0, r6
 800dcdc:	f000 f99c 	bl	800e018 <__swsetup_r>
 800dce0:	b1c0      	cbz	r0, 800dd14 <_vfiprintf_r+0x78>
 800dce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dce4:	07dc      	lsls	r4, r3, #31
 800dce6:	d50e      	bpl.n	800dd06 <_vfiprintf_r+0x6a>
 800dce8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcec:	b01d      	add	sp, #116	; 0x74
 800dcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf2:	4b7b      	ldr	r3, [pc, #492]	; (800dee0 <_vfiprintf_r+0x244>)
 800dcf4:	429d      	cmp	r5, r3
 800dcf6:	d101      	bne.n	800dcfc <_vfiprintf_r+0x60>
 800dcf8:	68b5      	ldr	r5, [r6, #8]
 800dcfa:	e7df      	b.n	800dcbc <_vfiprintf_r+0x20>
 800dcfc:	4b79      	ldr	r3, [pc, #484]	; (800dee4 <_vfiprintf_r+0x248>)
 800dcfe:	429d      	cmp	r5, r3
 800dd00:	bf08      	it	eq
 800dd02:	68f5      	ldreq	r5, [r6, #12]
 800dd04:	e7da      	b.n	800dcbc <_vfiprintf_r+0x20>
 800dd06:	89ab      	ldrh	r3, [r5, #12]
 800dd08:	0598      	lsls	r0, r3, #22
 800dd0a:	d4ed      	bmi.n	800dce8 <_vfiprintf_r+0x4c>
 800dd0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd0e:	f7fc f9db 	bl	800a0c8 <__retarget_lock_release_recursive>
 800dd12:	e7e9      	b.n	800dce8 <_vfiprintf_r+0x4c>
 800dd14:	2300      	movs	r3, #0
 800dd16:	9309      	str	r3, [sp, #36]	; 0x24
 800dd18:	2320      	movs	r3, #32
 800dd1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd22:	2330      	movs	r3, #48	; 0x30
 800dd24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dee8 <_vfiprintf_r+0x24c>
 800dd28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd2c:	f04f 0901 	mov.w	r9, #1
 800dd30:	4623      	mov	r3, r4
 800dd32:	469a      	mov	sl, r3
 800dd34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd38:	b10a      	cbz	r2, 800dd3e <_vfiprintf_r+0xa2>
 800dd3a:	2a25      	cmp	r2, #37	; 0x25
 800dd3c:	d1f9      	bne.n	800dd32 <_vfiprintf_r+0x96>
 800dd3e:	ebba 0b04 	subs.w	fp, sl, r4
 800dd42:	d00b      	beq.n	800dd5c <_vfiprintf_r+0xc0>
 800dd44:	465b      	mov	r3, fp
 800dd46:	4622      	mov	r2, r4
 800dd48:	4629      	mov	r1, r5
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f7ff ff93 	bl	800dc76 <__sfputs_r>
 800dd50:	3001      	adds	r0, #1
 800dd52:	f000 80aa 	beq.w	800deaa <_vfiprintf_r+0x20e>
 800dd56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd58:	445a      	add	r2, fp
 800dd5a:	9209      	str	r2, [sp, #36]	; 0x24
 800dd5c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	f000 80a2 	beq.w	800deaa <_vfiprintf_r+0x20e>
 800dd66:	2300      	movs	r3, #0
 800dd68:	f04f 32ff 	mov.w	r2, #4294967295
 800dd6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd70:	f10a 0a01 	add.w	sl, sl, #1
 800dd74:	9304      	str	r3, [sp, #16]
 800dd76:	9307      	str	r3, [sp, #28]
 800dd78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd7c:	931a      	str	r3, [sp, #104]	; 0x68
 800dd7e:	4654      	mov	r4, sl
 800dd80:	2205      	movs	r2, #5
 800dd82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd86:	4858      	ldr	r0, [pc, #352]	; (800dee8 <_vfiprintf_r+0x24c>)
 800dd88:	f7f2 fa5a 	bl	8000240 <memchr>
 800dd8c:	9a04      	ldr	r2, [sp, #16]
 800dd8e:	b9d8      	cbnz	r0, 800ddc8 <_vfiprintf_r+0x12c>
 800dd90:	06d1      	lsls	r1, r2, #27
 800dd92:	bf44      	itt	mi
 800dd94:	2320      	movmi	r3, #32
 800dd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd9a:	0713      	lsls	r3, r2, #28
 800dd9c:	bf44      	itt	mi
 800dd9e:	232b      	movmi	r3, #43	; 0x2b
 800dda0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dda4:	f89a 3000 	ldrb.w	r3, [sl]
 800dda8:	2b2a      	cmp	r3, #42	; 0x2a
 800ddaa:	d015      	beq.n	800ddd8 <_vfiprintf_r+0x13c>
 800ddac:	9a07      	ldr	r2, [sp, #28]
 800ddae:	4654      	mov	r4, sl
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	f04f 0c0a 	mov.w	ip, #10
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddbc:	3b30      	subs	r3, #48	; 0x30
 800ddbe:	2b09      	cmp	r3, #9
 800ddc0:	d94e      	bls.n	800de60 <_vfiprintf_r+0x1c4>
 800ddc2:	b1b0      	cbz	r0, 800ddf2 <_vfiprintf_r+0x156>
 800ddc4:	9207      	str	r2, [sp, #28]
 800ddc6:	e014      	b.n	800ddf2 <_vfiprintf_r+0x156>
 800ddc8:	eba0 0308 	sub.w	r3, r0, r8
 800ddcc:	fa09 f303 	lsl.w	r3, r9, r3
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	9304      	str	r3, [sp, #16]
 800ddd4:	46a2      	mov	sl, r4
 800ddd6:	e7d2      	b.n	800dd7e <_vfiprintf_r+0xe2>
 800ddd8:	9b03      	ldr	r3, [sp, #12]
 800ddda:	1d19      	adds	r1, r3, #4
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	9103      	str	r1, [sp, #12]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	bfbb      	ittet	lt
 800dde4:	425b      	neglt	r3, r3
 800dde6:	f042 0202 	orrlt.w	r2, r2, #2
 800ddea:	9307      	strge	r3, [sp, #28]
 800ddec:	9307      	strlt	r3, [sp, #28]
 800ddee:	bfb8      	it	lt
 800ddf0:	9204      	strlt	r2, [sp, #16]
 800ddf2:	7823      	ldrb	r3, [r4, #0]
 800ddf4:	2b2e      	cmp	r3, #46	; 0x2e
 800ddf6:	d10c      	bne.n	800de12 <_vfiprintf_r+0x176>
 800ddf8:	7863      	ldrb	r3, [r4, #1]
 800ddfa:	2b2a      	cmp	r3, #42	; 0x2a
 800ddfc:	d135      	bne.n	800de6a <_vfiprintf_r+0x1ce>
 800ddfe:	9b03      	ldr	r3, [sp, #12]
 800de00:	1d1a      	adds	r2, r3, #4
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	9203      	str	r2, [sp, #12]
 800de06:	2b00      	cmp	r3, #0
 800de08:	bfb8      	it	lt
 800de0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800de0e:	3402      	adds	r4, #2
 800de10:	9305      	str	r3, [sp, #20]
 800de12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800def8 <_vfiprintf_r+0x25c>
 800de16:	7821      	ldrb	r1, [r4, #0]
 800de18:	2203      	movs	r2, #3
 800de1a:	4650      	mov	r0, sl
 800de1c:	f7f2 fa10 	bl	8000240 <memchr>
 800de20:	b140      	cbz	r0, 800de34 <_vfiprintf_r+0x198>
 800de22:	2340      	movs	r3, #64	; 0x40
 800de24:	eba0 000a 	sub.w	r0, r0, sl
 800de28:	fa03 f000 	lsl.w	r0, r3, r0
 800de2c:	9b04      	ldr	r3, [sp, #16]
 800de2e:	4303      	orrs	r3, r0
 800de30:	3401      	adds	r4, #1
 800de32:	9304      	str	r3, [sp, #16]
 800de34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de38:	482c      	ldr	r0, [pc, #176]	; (800deec <_vfiprintf_r+0x250>)
 800de3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de3e:	2206      	movs	r2, #6
 800de40:	f7f2 f9fe 	bl	8000240 <memchr>
 800de44:	2800      	cmp	r0, #0
 800de46:	d03f      	beq.n	800dec8 <_vfiprintf_r+0x22c>
 800de48:	4b29      	ldr	r3, [pc, #164]	; (800def0 <_vfiprintf_r+0x254>)
 800de4a:	bb1b      	cbnz	r3, 800de94 <_vfiprintf_r+0x1f8>
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	3307      	adds	r3, #7
 800de50:	f023 0307 	bic.w	r3, r3, #7
 800de54:	3308      	adds	r3, #8
 800de56:	9303      	str	r3, [sp, #12]
 800de58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de5a:	443b      	add	r3, r7
 800de5c:	9309      	str	r3, [sp, #36]	; 0x24
 800de5e:	e767      	b.n	800dd30 <_vfiprintf_r+0x94>
 800de60:	fb0c 3202 	mla	r2, ip, r2, r3
 800de64:	460c      	mov	r4, r1
 800de66:	2001      	movs	r0, #1
 800de68:	e7a5      	b.n	800ddb6 <_vfiprintf_r+0x11a>
 800de6a:	2300      	movs	r3, #0
 800de6c:	3401      	adds	r4, #1
 800de6e:	9305      	str	r3, [sp, #20]
 800de70:	4619      	mov	r1, r3
 800de72:	f04f 0c0a 	mov.w	ip, #10
 800de76:	4620      	mov	r0, r4
 800de78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de7c:	3a30      	subs	r2, #48	; 0x30
 800de7e:	2a09      	cmp	r2, #9
 800de80:	d903      	bls.n	800de8a <_vfiprintf_r+0x1ee>
 800de82:	2b00      	cmp	r3, #0
 800de84:	d0c5      	beq.n	800de12 <_vfiprintf_r+0x176>
 800de86:	9105      	str	r1, [sp, #20]
 800de88:	e7c3      	b.n	800de12 <_vfiprintf_r+0x176>
 800de8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800de8e:	4604      	mov	r4, r0
 800de90:	2301      	movs	r3, #1
 800de92:	e7f0      	b.n	800de76 <_vfiprintf_r+0x1da>
 800de94:	ab03      	add	r3, sp, #12
 800de96:	9300      	str	r3, [sp, #0]
 800de98:	462a      	mov	r2, r5
 800de9a:	4b16      	ldr	r3, [pc, #88]	; (800def4 <_vfiprintf_r+0x258>)
 800de9c:	a904      	add	r1, sp, #16
 800de9e:	4630      	mov	r0, r6
 800dea0:	f7fc fa5e 	bl	800a360 <_printf_float>
 800dea4:	4607      	mov	r7, r0
 800dea6:	1c78      	adds	r0, r7, #1
 800dea8:	d1d6      	bne.n	800de58 <_vfiprintf_r+0x1bc>
 800deaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800deac:	07d9      	lsls	r1, r3, #31
 800deae:	d405      	bmi.n	800debc <_vfiprintf_r+0x220>
 800deb0:	89ab      	ldrh	r3, [r5, #12]
 800deb2:	059a      	lsls	r2, r3, #22
 800deb4:	d402      	bmi.n	800debc <_vfiprintf_r+0x220>
 800deb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800deb8:	f7fc f906 	bl	800a0c8 <__retarget_lock_release_recursive>
 800debc:	89ab      	ldrh	r3, [r5, #12]
 800debe:	065b      	lsls	r3, r3, #25
 800dec0:	f53f af12 	bmi.w	800dce8 <_vfiprintf_r+0x4c>
 800dec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dec6:	e711      	b.n	800dcec <_vfiprintf_r+0x50>
 800dec8:	ab03      	add	r3, sp, #12
 800deca:	9300      	str	r3, [sp, #0]
 800decc:	462a      	mov	r2, r5
 800dece:	4b09      	ldr	r3, [pc, #36]	; (800def4 <_vfiprintf_r+0x258>)
 800ded0:	a904      	add	r1, sp, #16
 800ded2:	4630      	mov	r0, r6
 800ded4:	f7fc fce8 	bl	800a8a8 <_printf_i>
 800ded8:	e7e4      	b.n	800dea4 <_vfiprintf_r+0x208>
 800deda:	bf00      	nop
 800dedc:	0800e4cc 	.word	0x0800e4cc
 800dee0:	0800e4ec 	.word	0x0800e4ec
 800dee4:	0800e4ac 	.word	0x0800e4ac
 800dee8:	0800e8fc 	.word	0x0800e8fc
 800deec:	0800e906 	.word	0x0800e906
 800def0:	0800a361 	.word	0x0800a361
 800def4:	0800dc77 	.word	0x0800dc77
 800def8:	0800e902 	.word	0x0800e902

0800defc <_read_r>:
 800defc:	b538      	push	{r3, r4, r5, lr}
 800defe:	4d07      	ldr	r5, [pc, #28]	; (800df1c <_read_r+0x20>)
 800df00:	4604      	mov	r4, r0
 800df02:	4608      	mov	r0, r1
 800df04:	4611      	mov	r1, r2
 800df06:	2200      	movs	r2, #0
 800df08:	602a      	str	r2, [r5, #0]
 800df0a:	461a      	mov	r2, r3
 800df0c:	f7f5 f93c 	bl	8003188 <_read>
 800df10:	1c43      	adds	r3, r0, #1
 800df12:	d102      	bne.n	800df1a <_read_r+0x1e>
 800df14:	682b      	ldr	r3, [r5, #0]
 800df16:	b103      	cbz	r3, 800df1a <_read_r+0x1e>
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	bd38      	pop	{r3, r4, r5, pc}
 800df1c:	2000472c 	.word	0x2000472c

0800df20 <nan>:
 800df20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df28 <nan+0x8>
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop
 800df28:	00000000 	.word	0x00000000
 800df2c:	7ff80000 	.word	0x7ff80000

0800df30 <strncmp>:
 800df30:	b510      	push	{r4, lr}
 800df32:	b17a      	cbz	r2, 800df54 <strncmp+0x24>
 800df34:	4603      	mov	r3, r0
 800df36:	3901      	subs	r1, #1
 800df38:	1884      	adds	r4, r0, r2
 800df3a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800df3e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800df42:	4290      	cmp	r0, r2
 800df44:	d101      	bne.n	800df4a <strncmp+0x1a>
 800df46:	42a3      	cmp	r3, r4
 800df48:	d101      	bne.n	800df4e <strncmp+0x1e>
 800df4a:	1a80      	subs	r0, r0, r2
 800df4c:	bd10      	pop	{r4, pc}
 800df4e:	2800      	cmp	r0, #0
 800df50:	d1f3      	bne.n	800df3a <strncmp+0xa>
 800df52:	e7fa      	b.n	800df4a <strncmp+0x1a>
 800df54:	4610      	mov	r0, r2
 800df56:	e7f9      	b.n	800df4c <strncmp+0x1c>

0800df58 <__swbuf_r>:
 800df58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5a:	460e      	mov	r6, r1
 800df5c:	4614      	mov	r4, r2
 800df5e:	4605      	mov	r5, r0
 800df60:	b118      	cbz	r0, 800df6a <__swbuf_r+0x12>
 800df62:	6983      	ldr	r3, [r0, #24]
 800df64:	b90b      	cbnz	r3, 800df6a <__swbuf_r+0x12>
 800df66:	f7fb ffeb 	bl	8009f40 <__sinit>
 800df6a:	4b21      	ldr	r3, [pc, #132]	; (800dff0 <__swbuf_r+0x98>)
 800df6c:	429c      	cmp	r4, r3
 800df6e:	d12b      	bne.n	800dfc8 <__swbuf_r+0x70>
 800df70:	686c      	ldr	r4, [r5, #4]
 800df72:	69a3      	ldr	r3, [r4, #24]
 800df74:	60a3      	str	r3, [r4, #8]
 800df76:	89a3      	ldrh	r3, [r4, #12]
 800df78:	071a      	lsls	r2, r3, #28
 800df7a:	d52f      	bpl.n	800dfdc <__swbuf_r+0x84>
 800df7c:	6923      	ldr	r3, [r4, #16]
 800df7e:	b36b      	cbz	r3, 800dfdc <__swbuf_r+0x84>
 800df80:	6923      	ldr	r3, [r4, #16]
 800df82:	6820      	ldr	r0, [r4, #0]
 800df84:	1ac0      	subs	r0, r0, r3
 800df86:	6963      	ldr	r3, [r4, #20]
 800df88:	b2f6      	uxtb	r6, r6
 800df8a:	4283      	cmp	r3, r0
 800df8c:	4637      	mov	r7, r6
 800df8e:	dc04      	bgt.n	800df9a <__swbuf_r+0x42>
 800df90:	4621      	mov	r1, r4
 800df92:	4628      	mov	r0, r5
 800df94:	f7fe fbf0 	bl	800c778 <_fflush_r>
 800df98:	bb30      	cbnz	r0, 800dfe8 <__swbuf_r+0x90>
 800df9a:	68a3      	ldr	r3, [r4, #8]
 800df9c:	3b01      	subs	r3, #1
 800df9e:	60a3      	str	r3, [r4, #8]
 800dfa0:	6823      	ldr	r3, [r4, #0]
 800dfa2:	1c5a      	adds	r2, r3, #1
 800dfa4:	6022      	str	r2, [r4, #0]
 800dfa6:	701e      	strb	r6, [r3, #0]
 800dfa8:	6963      	ldr	r3, [r4, #20]
 800dfaa:	3001      	adds	r0, #1
 800dfac:	4283      	cmp	r3, r0
 800dfae:	d004      	beq.n	800dfba <__swbuf_r+0x62>
 800dfb0:	89a3      	ldrh	r3, [r4, #12]
 800dfb2:	07db      	lsls	r3, r3, #31
 800dfb4:	d506      	bpl.n	800dfc4 <__swbuf_r+0x6c>
 800dfb6:	2e0a      	cmp	r6, #10
 800dfb8:	d104      	bne.n	800dfc4 <__swbuf_r+0x6c>
 800dfba:	4621      	mov	r1, r4
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	f7fe fbdb 	bl	800c778 <_fflush_r>
 800dfc2:	b988      	cbnz	r0, 800dfe8 <__swbuf_r+0x90>
 800dfc4:	4638      	mov	r0, r7
 800dfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfc8:	4b0a      	ldr	r3, [pc, #40]	; (800dff4 <__swbuf_r+0x9c>)
 800dfca:	429c      	cmp	r4, r3
 800dfcc:	d101      	bne.n	800dfd2 <__swbuf_r+0x7a>
 800dfce:	68ac      	ldr	r4, [r5, #8]
 800dfd0:	e7cf      	b.n	800df72 <__swbuf_r+0x1a>
 800dfd2:	4b09      	ldr	r3, [pc, #36]	; (800dff8 <__swbuf_r+0xa0>)
 800dfd4:	429c      	cmp	r4, r3
 800dfd6:	bf08      	it	eq
 800dfd8:	68ec      	ldreq	r4, [r5, #12]
 800dfda:	e7ca      	b.n	800df72 <__swbuf_r+0x1a>
 800dfdc:	4621      	mov	r1, r4
 800dfde:	4628      	mov	r0, r5
 800dfe0:	f000 f81a 	bl	800e018 <__swsetup_r>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d0cb      	beq.n	800df80 <__swbuf_r+0x28>
 800dfe8:	f04f 37ff 	mov.w	r7, #4294967295
 800dfec:	e7ea      	b.n	800dfc4 <__swbuf_r+0x6c>
 800dfee:	bf00      	nop
 800dff0:	0800e4cc 	.word	0x0800e4cc
 800dff4:	0800e4ec 	.word	0x0800e4ec
 800dff8:	0800e4ac 	.word	0x0800e4ac

0800dffc <__ascii_wctomb>:
 800dffc:	b149      	cbz	r1, 800e012 <__ascii_wctomb+0x16>
 800dffe:	2aff      	cmp	r2, #255	; 0xff
 800e000:	bf85      	ittet	hi
 800e002:	238a      	movhi	r3, #138	; 0x8a
 800e004:	6003      	strhi	r3, [r0, #0]
 800e006:	700a      	strbls	r2, [r1, #0]
 800e008:	f04f 30ff 	movhi.w	r0, #4294967295
 800e00c:	bf98      	it	ls
 800e00e:	2001      	movls	r0, #1
 800e010:	4770      	bx	lr
 800e012:	4608      	mov	r0, r1
 800e014:	4770      	bx	lr
	...

0800e018 <__swsetup_r>:
 800e018:	4b32      	ldr	r3, [pc, #200]	; (800e0e4 <__swsetup_r+0xcc>)
 800e01a:	b570      	push	{r4, r5, r6, lr}
 800e01c:	681d      	ldr	r5, [r3, #0]
 800e01e:	4606      	mov	r6, r0
 800e020:	460c      	mov	r4, r1
 800e022:	b125      	cbz	r5, 800e02e <__swsetup_r+0x16>
 800e024:	69ab      	ldr	r3, [r5, #24]
 800e026:	b913      	cbnz	r3, 800e02e <__swsetup_r+0x16>
 800e028:	4628      	mov	r0, r5
 800e02a:	f7fb ff89 	bl	8009f40 <__sinit>
 800e02e:	4b2e      	ldr	r3, [pc, #184]	; (800e0e8 <__swsetup_r+0xd0>)
 800e030:	429c      	cmp	r4, r3
 800e032:	d10f      	bne.n	800e054 <__swsetup_r+0x3c>
 800e034:	686c      	ldr	r4, [r5, #4]
 800e036:	89a3      	ldrh	r3, [r4, #12]
 800e038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e03c:	0719      	lsls	r1, r3, #28
 800e03e:	d42c      	bmi.n	800e09a <__swsetup_r+0x82>
 800e040:	06dd      	lsls	r5, r3, #27
 800e042:	d411      	bmi.n	800e068 <__swsetup_r+0x50>
 800e044:	2309      	movs	r3, #9
 800e046:	6033      	str	r3, [r6, #0]
 800e048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e04c:	81a3      	strh	r3, [r4, #12]
 800e04e:	f04f 30ff 	mov.w	r0, #4294967295
 800e052:	e03e      	b.n	800e0d2 <__swsetup_r+0xba>
 800e054:	4b25      	ldr	r3, [pc, #148]	; (800e0ec <__swsetup_r+0xd4>)
 800e056:	429c      	cmp	r4, r3
 800e058:	d101      	bne.n	800e05e <__swsetup_r+0x46>
 800e05a:	68ac      	ldr	r4, [r5, #8]
 800e05c:	e7eb      	b.n	800e036 <__swsetup_r+0x1e>
 800e05e:	4b24      	ldr	r3, [pc, #144]	; (800e0f0 <__swsetup_r+0xd8>)
 800e060:	429c      	cmp	r4, r3
 800e062:	bf08      	it	eq
 800e064:	68ec      	ldreq	r4, [r5, #12]
 800e066:	e7e6      	b.n	800e036 <__swsetup_r+0x1e>
 800e068:	0758      	lsls	r0, r3, #29
 800e06a:	d512      	bpl.n	800e092 <__swsetup_r+0x7a>
 800e06c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e06e:	b141      	cbz	r1, 800e082 <__swsetup_r+0x6a>
 800e070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e074:	4299      	cmp	r1, r3
 800e076:	d002      	beq.n	800e07e <__swsetup_r+0x66>
 800e078:	4630      	mov	r0, r6
 800e07a:	f7ff fc3d 	bl	800d8f8 <_free_r>
 800e07e:	2300      	movs	r3, #0
 800e080:	6363      	str	r3, [r4, #52]	; 0x34
 800e082:	89a3      	ldrh	r3, [r4, #12]
 800e084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e088:	81a3      	strh	r3, [r4, #12]
 800e08a:	2300      	movs	r3, #0
 800e08c:	6063      	str	r3, [r4, #4]
 800e08e:	6923      	ldr	r3, [r4, #16]
 800e090:	6023      	str	r3, [r4, #0]
 800e092:	89a3      	ldrh	r3, [r4, #12]
 800e094:	f043 0308 	orr.w	r3, r3, #8
 800e098:	81a3      	strh	r3, [r4, #12]
 800e09a:	6923      	ldr	r3, [r4, #16]
 800e09c:	b94b      	cbnz	r3, 800e0b2 <__swsetup_r+0x9a>
 800e09e:	89a3      	ldrh	r3, [r4, #12]
 800e0a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0a8:	d003      	beq.n	800e0b2 <__swsetup_r+0x9a>
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	f000 f877 	bl	800e1a0 <__smakebuf_r>
 800e0b2:	89a0      	ldrh	r0, [r4, #12]
 800e0b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0b8:	f010 0301 	ands.w	r3, r0, #1
 800e0bc:	d00a      	beq.n	800e0d4 <__swsetup_r+0xbc>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	60a3      	str	r3, [r4, #8]
 800e0c2:	6963      	ldr	r3, [r4, #20]
 800e0c4:	425b      	negs	r3, r3
 800e0c6:	61a3      	str	r3, [r4, #24]
 800e0c8:	6923      	ldr	r3, [r4, #16]
 800e0ca:	b943      	cbnz	r3, 800e0de <__swsetup_r+0xc6>
 800e0cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e0d0:	d1ba      	bne.n	800e048 <__swsetup_r+0x30>
 800e0d2:	bd70      	pop	{r4, r5, r6, pc}
 800e0d4:	0781      	lsls	r1, r0, #30
 800e0d6:	bf58      	it	pl
 800e0d8:	6963      	ldrpl	r3, [r4, #20]
 800e0da:	60a3      	str	r3, [r4, #8]
 800e0dc:	e7f4      	b.n	800e0c8 <__swsetup_r+0xb0>
 800e0de:	2000      	movs	r0, #0
 800e0e0:	e7f7      	b.n	800e0d2 <__swsetup_r+0xba>
 800e0e2:	bf00      	nop
 800e0e4:	20000044 	.word	0x20000044
 800e0e8:	0800e4cc 	.word	0x0800e4cc
 800e0ec:	0800e4ec 	.word	0x0800e4ec
 800e0f0:	0800e4ac 	.word	0x0800e4ac

0800e0f4 <__assert_func>:
 800e0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0f6:	4614      	mov	r4, r2
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	4b09      	ldr	r3, [pc, #36]	; (800e120 <__assert_func+0x2c>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4605      	mov	r5, r0
 800e100:	68d8      	ldr	r0, [r3, #12]
 800e102:	b14c      	cbz	r4, 800e118 <__assert_func+0x24>
 800e104:	4b07      	ldr	r3, [pc, #28]	; (800e124 <__assert_func+0x30>)
 800e106:	9100      	str	r1, [sp, #0]
 800e108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e10c:	4906      	ldr	r1, [pc, #24]	; (800e128 <__assert_func+0x34>)
 800e10e:	462b      	mov	r3, r5
 800e110:	f000 f80e 	bl	800e130 <fiprintf>
 800e114:	f000 f8cd 	bl	800e2b2 <abort>
 800e118:	4b04      	ldr	r3, [pc, #16]	; (800e12c <__assert_func+0x38>)
 800e11a:	461c      	mov	r4, r3
 800e11c:	e7f3      	b.n	800e106 <__assert_func+0x12>
 800e11e:	bf00      	nop
 800e120:	20000044 	.word	0x20000044
 800e124:	0800e90d 	.word	0x0800e90d
 800e128:	0800e91a 	.word	0x0800e91a
 800e12c:	0800e948 	.word	0x0800e948

0800e130 <fiprintf>:
 800e130:	b40e      	push	{r1, r2, r3}
 800e132:	b503      	push	{r0, r1, lr}
 800e134:	4601      	mov	r1, r0
 800e136:	ab03      	add	r3, sp, #12
 800e138:	4805      	ldr	r0, [pc, #20]	; (800e150 <fiprintf+0x20>)
 800e13a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e13e:	6800      	ldr	r0, [r0, #0]
 800e140:	9301      	str	r3, [sp, #4]
 800e142:	f7ff fdab 	bl	800dc9c <_vfiprintf_r>
 800e146:	b002      	add	sp, #8
 800e148:	f85d eb04 	ldr.w	lr, [sp], #4
 800e14c:	b003      	add	sp, #12
 800e14e:	4770      	bx	lr
 800e150:	20000044 	.word	0x20000044

0800e154 <__swhatbuf_r>:
 800e154:	b570      	push	{r4, r5, r6, lr}
 800e156:	460e      	mov	r6, r1
 800e158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e15c:	2900      	cmp	r1, #0
 800e15e:	b096      	sub	sp, #88	; 0x58
 800e160:	4614      	mov	r4, r2
 800e162:	461d      	mov	r5, r3
 800e164:	da08      	bge.n	800e178 <__swhatbuf_r+0x24>
 800e166:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	602a      	str	r2, [r5, #0]
 800e16e:	061a      	lsls	r2, r3, #24
 800e170:	d410      	bmi.n	800e194 <__swhatbuf_r+0x40>
 800e172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e176:	e00e      	b.n	800e196 <__swhatbuf_r+0x42>
 800e178:	466a      	mov	r2, sp
 800e17a:	f000 f8a1 	bl	800e2c0 <_fstat_r>
 800e17e:	2800      	cmp	r0, #0
 800e180:	dbf1      	blt.n	800e166 <__swhatbuf_r+0x12>
 800e182:	9a01      	ldr	r2, [sp, #4]
 800e184:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e188:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e18c:	425a      	negs	r2, r3
 800e18e:	415a      	adcs	r2, r3
 800e190:	602a      	str	r2, [r5, #0]
 800e192:	e7ee      	b.n	800e172 <__swhatbuf_r+0x1e>
 800e194:	2340      	movs	r3, #64	; 0x40
 800e196:	2000      	movs	r0, #0
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	b016      	add	sp, #88	; 0x58
 800e19c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e1a0 <__smakebuf_r>:
 800e1a0:	898b      	ldrh	r3, [r1, #12]
 800e1a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1a4:	079d      	lsls	r5, r3, #30
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	460c      	mov	r4, r1
 800e1aa:	d507      	bpl.n	800e1bc <__smakebuf_r+0x1c>
 800e1ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1b0:	6023      	str	r3, [r4, #0]
 800e1b2:	6123      	str	r3, [r4, #16]
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	6163      	str	r3, [r4, #20]
 800e1b8:	b002      	add	sp, #8
 800e1ba:	bd70      	pop	{r4, r5, r6, pc}
 800e1bc:	ab01      	add	r3, sp, #4
 800e1be:	466a      	mov	r2, sp
 800e1c0:	f7ff ffc8 	bl	800e154 <__swhatbuf_r>
 800e1c4:	9900      	ldr	r1, [sp, #0]
 800e1c6:	4605      	mov	r5, r0
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	f7fb ffb5 	bl	800a138 <_malloc_r>
 800e1ce:	b948      	cbnz	r0, 800e1e4 <__smakebuf_r+0x44>
 800e1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1d4:	059a      	lsls	r2, r3, #22
 800e1d6:	d4ef      	bmi.n	800e1b8 <__smakebuf_r+0x18>
 800e1d8:	f023 0303 	bic.w	r3, r3, #3
 800e1dc:	f043 0302 	orr.w	r3, r3, #2
 800e1e0:	81a3      	strh	r3, [r4, #12]
 800e1e2:	e7e3      	b.n	800e1ac <__smakebuf_r+0xc>
 800e1e4:	4b0d      	ldr	r3, [pc, #52]	; (800e21c <__smakebuf_r+0x7c>)
 800e1e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	6020      	str	r0, [r4, #0]
 800e1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f0:	81a3      	strh	r3, [r4, #12]
 800e1f2:	9b00      	ldr	r3, [sp, #0]
 800e1f4:	6163      	str	r3, [r4, #20]
 800e1f6:	9b01      	ldr	r3, [sp, #4]
 800e1f8:	6120      	str	r0, [r4, #16]
 800e1fa:	b15b      	cbz	r3, 800e214 <__smakebuf_r+0x74>
 800e1fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e200:	4630      	mov	r0, r6
 800e202:	f000 f86f 	bl	800e2e4 <_isatty_r>
 800e206:	b128      	cbz	r0, 800e214 <__smakebuf_r+0x74>
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	f023 0303 	bic.w	r3, r3, #3
 800e20e:	f043 0301 	orr.w	r3, r3, #1
 800e212:	81a3      	strh	r3, [r4, #12]
 800e214:	89a0      	ldrh	r0, [r4, #12]
 800e216:	4305      	orrs	r5, r0
 800e218:	81a5      	strh	r5, [r4, #12]
 800e21a:	e7cd      	b.n	800e1b8 <__smakebuf_r+0x18>
 800e21c:	08009ed9 	.word	0x08009ed9

0800e220 <memmove>:
 800e220:	4288      	cmp	r0, r1
 800e222:	b510      	push	{r4, lr}
 800e224:	eb01 0402 	add.w	r4, r1, r2
 800e228:	d902      	bls.n	800e230 <memmove+0x10>
 800e22a:	4284      	cmp	r4, r0
 800e22c:	4623      	mov	r3, r4
 800e22e:	d807      	bhi.n	800e240 <memmove+0x20>
 800e230:	1e43      	subs	r3, r0, #1
 800e232:	42a1      	cmp	r1, r4
 800e234:	d008      	beq.n	800e248 <memmove+0x28>
 800e236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e23a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e23e:	e7f8      	b.n	800e232 <memmove+0x12>
 800e240:	4402      	add	r2, r0
 800e242:	4601      	mov	r1, r0
 800e244:	428a      	cmp	r2, r1
 800e246:	d100      	bne.n	800e24a <memmove+0x2a>
 800e248:	bd10      	pop	{r4, pc}
 800e24a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e24e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e252:	e7f7      	b.n	800e244 <memmove+0x24>

0800e254 <_realloc_r>:
 800e254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e258:	4680      	mov	r8, r0
 800e25a:	4614      	mov	r4, r2
 800e25c:	460e      	mov	r6, r1
 800e25e:	b921      	cbnz	r1, 800e26a <_realloc_r+0x16>
 800e260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e264:	4611      	mov	r1, r2
 800e266:	f7fb bf67 	b.w	800a138 <_malloc_r>
 800e26a:	b92a      	cbnz	r2, 800e278 <_realloc_r+0x24>
 800e26c:	f7ff fb44 	bl	800d8f8 <_free_r>
 800e270:	4625      	mov	r5, r4
 800e272:	4628      	mov	r0, r5
 800e274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e278:	f000 f844 	bl	800e304 <_malloc_usable_size_r>
 800e27c:	4284      	cmp	r4, r0
 800e27e:	4607      	mov	r7, r0
 800e280:	d802      	bhi.n	800e288 <_realloc_r+0x34>
 800e282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e286:	d812      	bhi.n	800e2ae <_realloc_r+0x5a>
 800e288:	4621      	mov	r1, r4
 800e28a:	4640      	mov	r0, r8
 800e28c:	f7fb ff54 	bl	800a138 <_malloc_r>
 800e290:	4605      	mov	r5, r0
 800e292:	2800      	cmp	r0, #0
 800e294:	d0ed      	beq.n	800e272 <_realloc_r+0x1e>
 800e296:	42bc      	cmp	r4, r7
 800e298:	4622      	mov	r2, r4
 800e29a:	4631      	mov	r1, r6
 800e29c:	bf28      	it	cs
 800e29e:	463a      	movcs	r2, r7
 800e2a0:	f7fb ff13 	bl	800a0ca <memcpy>
 800e2a4:	4631      	mov	r1, r6
 800e2a6:	4640      	mov	r0, r8
 800e2a8:	f7ff fb26 	bl	800d8f8 <_free_r>
 800e2ac:	e7e1      	b.n	800e272 <_realloc_r+0x1e>
 800e2ae:	4635      	mov	r5, r6
 800e2b0:	e7df      	b.n	800e272 <_realloc_r+0x1e>

0800e2b2 <abort>:
 800e2b2:	b508      	push	{r3, lr}
 800e2b4:	2006      	movs	r0, #6
 800e2b6:	f000 f855 	bl	800e364 <raise>
 800e2ba:	2001      	movs	r0, #1
 800e2bc:	f7f4 ff5a 	bl	8003174 <_exit>

0800e2c0 <_fstat_r>:
 800e2c0:	b538      	push	{r3, r4, r5, lr}
 800e2c2:	4d07      	ldr	r5, [pc, #28]	; (800e2e0 <_fstat_r+0x20>)
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	4608      	mov	r0, r1
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	602b      	str	r3, [r5, #0]
 800e2ce:	f7f4 ffa0 	bl	8003212 <_fstat>
 800e2d2:	1c43      	adds	r3, r0, #1
 800e2d4:	d102      	bne.n	800e2dc <_fstat_r+0x1c>
 800e2d6:	682b      	ldr	r3, [r5, #0]
 800e2d8:	b103      	cbz	r3, 800e2dc <_fstat_r+0x1c>
 800e2da:	6023      	str	r3, [r4, #0]
 800e2dc:	bd38      	pop	{r3, r4, r5, pc}
 800e2de:	bf00      	nop
 800e2e0:	2000472c 	.word	0x2000472c

0800e2e4 <_isatty_r>:
 800e2e4:	b538      	push	{r3, r4, r5, lr}
 800e2e6:	4d06      	ldr	r5, [pc, #24]	; (800e300 <_isatty_r+0x1c>)
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	4608      	mov	r0, r1
 800e2ee:	602b      	str	r3, [r5, #0]
 800e2f0:	f7f4 ff9f 	bl	8003232 <_isatty>
 800e2f4:	1c43      	adds	r3, r0, #1
 800e2f6:	d102      	bne.n	800e2fe <_isatty_r+0x1a>
 800e2f8:	682b      	ldr	r3, [r5, #0]
 800e2fa:	b103      	cbz	r3, 800e2fe <_isatty_r+0x1a>
 800e2fc:	6023      	str	r3, [r4, #0]
 800e2fe:	bd38      	pop	{r3, r4, r5, pc}
 800e300:	2000472c 	.word	0x2000472c

0800e304 <_malloc_usable_size_r>:
 800e304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e308:	1f18      	subs	r0, r3, #4
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	bfbc      	itt	lt
 800e30e:	580b      	ldrlt	r3, [r1, r0]
 800e310:	18c0      	addlt	r0, r0, r3
 800e312:	4770      	bx	lr

0800e314 <_raise_r>:
 800e314:	291f      	cmp	r1, #31
 800e316:	b538      	push	{r3, r4, r5, lr}
 800e318:	4604      	mov	r4, r0
 800e31a:	460d      	mov	r5, r1
 800e31c:	d904      	bls.n	800e328 <_raise_r+0x14>
 800e31e:	2316      	movs	r3, #22
 800e320:	6003      	str	r3, [r0, #0]
 800e322:	f04f 30ff 	mov.w	r0, #4294967295
 800e326:	bd38      	pop	{r3, r4, r5, pc}
 800e328:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e32a:	b112      	cbz	r2, 800e332 <_raise_r+0x1e>
 800e32c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e330:	b94b      	cbnz	r3, 800e346 <_raise_r+0x32>
 800e332:	4620      	mov	r0, r4
 800e334:	f000 f830 	bl	800e398 <_getpid_r>
 800e338:	462a      	mov	r2, r5
 800e33a:	4601      	mov	r1, r0
 800e33c:	4620      	mov	r0, r4
 800e33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e342:	f000 b817 	b.w	800e374 <_kill_r>
 800e346:	2b01      	cmp	r3, #1
 800e348:	d00a      	beq.n	800e360 <_raise_r+0x4c>
 800e34a:	1c59      	adds	r1, r3, #1
 800e34c:	d103      	bne.n	800e356 <_raise_r+0x42>
 800e34e:	2316      	movs	r3, #22
 800e350:	6003      	str	r3, [r0, #0]
 800e352:	2001      	movs	r0, #1
 800e354:	e7e7      	b.n	800e326 <_raise_r+0x12>
 800e356:	2400      	movs	r4, #0
 800e358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e35c:	4628      	mov	r0, r5
 800e35e:	4798      	blx	r3
 800e360:	2000      	movs	r0, #0
 800e362:	e7e0      	b.n	800e326 <_raise_r+0x12>

0800e364 <raise>:
 800e364:	4b02      	ldr	r3, [pc, #8]	; (800e370 <raise+0xc>)
 800e366:	4601      	mov	r1, r0
 800e368:	6818      	ldr	r0, [r3, #0]
 800e36a:	f7ff bfd3 	b.w	800e314 <_raise_r>
 800e36e:	bf00      	nop
 800e370:	20000044 	.word	0x20000044

0800e374 <_kill_r>:
 800e374:	b538      	push	{r3, r4, r5, lr}
 800e376:	4d07      	ldr	r5, [pc, #28]	; (800e394 <_kill_r+0x20>)
 800e378:	2300      	movs	r3, #0
 800e37a:	4604      	mov	r4, r0
 800e37c:	4608      	mov	r0, r1
 800e37e:	4611      	mov	r1, r2
 800e380:	602b      	str	r3, [r5, #0]
 800e382:	f7f4 fee7 	bl	8003154 <_kill>
 800e386:	1c43      	adds	r3, r0, #1
 800e388:	d102      	bne.n	800e390 <_kill_r+0x1c>
 800e38a:	682b      	ldr	r3, [r5, #0]
 800e38c:	b103      	cbz	r3, 800e390 <_kill_r+0x1c>
 800e38e:	6023      	str	r3, [r4, #0]
 800e390:	bd38      	pop	{r3, r4, r5, pc}
 800e392:	bf00      	nop
 800e394:	2000472c 	.word	0x2000472c

0800e398 <_getpid_r>:
 800e398:	f7f4 bed4 	b.w	8003144 <_getpid>

0800e39c <_init>:
 800e39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39e:	bf00      	nop
 800e3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3a2:	bc08      	pop	{r3}
 800e3a4:	469e      	mov	lr, r3
 800e3a6:	4770      	bx	lr

0800e3a8 <_fini>:
 800e3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3aa:	bf00      	nop
 800e3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3ae:	bc08      	pop	{r3}
 800e3b0:	469e      	mov	lr, r3
 800e3b2:	4770      	bx	lr
